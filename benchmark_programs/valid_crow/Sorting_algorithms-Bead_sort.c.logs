
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for bead_sort()

; ModuleID = './Sorting_algorithms-Bead_sort.c.bc'
source_filename = "./Sorting_algorithms-Bead_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.x = private unnamed_addr constant [8 x i32] [i32 5, i32 3, i32 1, i32 7, i32 4, i32 1, i32 1, i32 20], align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bead_sort(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  %sum = alloca i32, align 4
  %beads = alloca i8*, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 1, i32* %i, align 4
  %0 = load i32*, i32** %a.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %max, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %a.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  %7 = load i32, i32* %max, align 4
  %cmp2 = icmp sgt i32 %6, %7
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load i32*, i32** %a.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  store i32 %10, i32* %max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %max, align 4
  %13 = load i32, i32* %len.addr, align 4
  %mul = mul nsw i32 %12, %13
  %call = call noalias i8* @calloc(i32 1, i32 %mul)
  store i8* %call, i8** %beads, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc16, %for.end
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %len.addr, align 4
  %cmp5 = icmp slt i32 %14, %15
  br i1 %cmp5, label %for.body6, label %for.end18

for.body6:                                        ; preds = %for.cond4
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc13, %for.body6
  %16 = load i32, i32* %j, align 4
  %17 = load i32*, i32** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp slt i32 %16, %19
  br i1 %cmp9, label %for.body10, label %for.end15

for.body10:                                       ; preds = %for.cond7
  %20 = load i8*, i8** %beads, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %max, align 4
  %mul11 = mul nsw i32 %21, %22
  %23 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul11, %23
  %arrayidx12 = getelementptr inbounds i8, i8* %20, i32 %add
  store i8 1, i8* %arrayidx12, align 1
  br label %for.inc13

for.inc13:                                        ; preds = %for.body10
  %24 = load i32, i32* %j, align 4
  %inc14 = add nsw i32 %24, 1
  store i32 %inc14, i32* %j, align 4
  br label %for.cond7

for.end15:                                        ; preds = %for.cond7
  br label %for.inc16

for.inc16:                                        ; preds = %for.end15
  %25 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %25, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond4

for.end18:                                        ; preds = %for.cond4
  store i32 0, i32* %j, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc45, %for.end18
  %26 = load i32, i32* %j, align 4
  %27 = load i32, i32* %max, align 4
  %cmp20 = icmp slt i32 %26, %27
  br i1 %cmp20, label %for.body21, label %for.end47

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %i, align 4
  store i32 0, i32* %sum, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc32, %for.body21
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %len.addr, align 4
  %cmp23 = icmp slt i32 %28, %29
  br i1 %cmp23, label %for.body24, label %for.end34

for.body24:                                       ; preds = %for.cond22
  %30 = load i8*, i8** %beads, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %max, align 4
  %mul25 = mul nsw i32 %31, %32
  %33 = load i32, i32* %j, align 4
  %add26 = add nsw i32 %mul25, %33
  %arrayidx27 = getelementptr inbounds i8, i8* %30, i32 %add26
  %34 = load i8, i8* %arrayidx27, align 1
  %conv = zext i8 %34 to i32
  %35 = load i32, i32* %sum, align 4
  %add28 = add nsw i32 %35, %conv
  store i32 %add28, i32* %sum, align 4
  %36 = load i8*, i8** %beads, align 4
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %max, align 4
  %mul29 = mul nsw i32 %37, %38
  %39 = load i32, i32* %j, align 4
  %add30 = add nsw i32 %mul29, %39
  %arrayidx31 = getelementptr inbounds i8, i8* %36, i32 %add30
  store i8 0, i8* %arrayidx31, align 1
  br label %for.inc32

for.inc32:                                        ; preds = %for.body24
  %40 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %40, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond22

for.end34:                                        ; preds = %for.cond22
  %41 = load i32, i32* %len.addr, align 4
  %42 = load i32, i32* %sum, align 4
  %sub = sub nsw i32 %41, %42
  store i32 %sub, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc42, %for.end34
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %len.addr, align 4
  %cmp36 = icmp slt i32 %43, %44
  br i1 %cmp36, label %for.body38, label %for.end44

for.body38:                                       ; preds = %for.cond35
  %45 = load i8*, i8** %beads, align 4
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %max, align 4
  %mul39 = mul nsw i32 %46, %47
  %48 = load i32, i32* %j, align 4
  %add40 = add nsw i32 %mul39, %48
  %arrayidx41 = getelementptr inbounds i8, i8* %45, i32 %add40
  store i8 1, i8* %arrayidx41, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body38
  %49 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %49, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond35

for.end44:                                        ; preds = %for.cond35
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %50 = load i32, i32* %j, align 4
  %inc46 = add nsw i32 %50, 1
  store i32 %inc46, i32* %j, align 4
  br label %for.cond19

for.end47:                                        ; preds = %for.cond19
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc64, %for.end47
  %51 = load i32, i32* %i, align 4
  %52 = load i32, i32* %len.addr, align 4
  %cmp49 = icmp slt i32 %51, %52
  br i1 %cmp49, label %for.body51, label %for.end66

for.body51:                                       ; preds = %for.cond48
  store i32 0, i32* %j, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc60, %for.body51
  %53 = load i32, i32* %j, align 4
  %54 = load i32, i32* %max, align 4
  %cmp53 = icmp slt i32 %53, %54
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %55 = load i8*, i8** %beads, align 4
  %56 = load i32, i32* %i, align 4
  %57 = load i32, i32* %max, align 4
  %mul55 = mul nsw i32 %56, %57
  %58 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %mul55, %58
  %arrayidx57 = getelementptr inbounds i8, i8* %55, i32 %add56
  %59 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %59 to i32
  %tobool = icmp ne i32 %conv58, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %60 = phi i1 [ false, %for.cond52 ], [ %tobool, %land.rhs ]
  br i1 %60, label %for.body59, label %for.end62

for.body59:                                       ; preds = %land.end
  br label %for.inc60

for.inc60:                                        ; preds = %for.body59
  %61 = load i32, i32* %j, align 4
  %inc61 = add nsw i32 %61, 1
  store i32 %inc61, i32* %j, align 4
  br label %for.cond52

for.end62:                                        ; preds = %land.end
  %62 = load i32, i32* %j, align 4
  %63 = load i32*, i32** %a.addr, align 4
  %64 = load i32, i32* %i, align 4
  %arrayidx63 = getelementptr inbounds i32, i32* %63, i32 %64
  store i32 %62, i32* %arrayidx63, align 4
  br label %for.inc64

for.inc64:                                        ; preds = %for.end62
  %65 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %65, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond48

for.end66:                                        ; preds = %for.cond48
  %66 = load i8*, i8** %beads, align 4
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca [8 x i32], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x i32]* @__const.main.x to i8*), i32 32, i1 false)
  store i32 8, i32* %len, align 4
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %x, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  call void @bead_sort(i32* %arraydecay, i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %x, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %16, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul11 = mul nsw i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul11, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp slt i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp slt i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul25 = mul nsw i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add26 = add nsw i32 %mul25, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %34 = load i8, i8* %arrayidx27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %34 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add nsw i32 %35, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul29 = mul nsw i32 %37, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add30 = add nsw i32 %mul29, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %40, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %41, %42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp slt i32 %43, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul39 = mul nsw i32 %46, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add40 = add nsw i32 %mul39, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc43 = add nsw i32 %49, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc46 = add nsw i32 %50, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp49 = icmp slt i32 %51, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp slt i32 %53, %54
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul55 = mul nsw i32 %56, %57
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add56 = add nsw i32 %mul55, %58
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %59 = load i8, i8* %arrayidx57, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv58 = zext i8 %59 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %conv58, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %60 = phi i1 [ false, %for.cond52 ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc61 = add nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc65 = add nsw i32 %65, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483646
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for bead_sort()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sorting_algorithms-Bead_sort.c.bc'
source_filename = "./Sorting_algorithms-Bead_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.x = private unnamed_addr constant [8 x i32] [i32 5, i32 3, i32 1, i32 7, i32 4, i32 1, i32 1, i32 20], align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bead_sort(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  %sum = alloca i32, align 4
  %beads = alloca i8*, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 1, i32* %i, align 4
  %0 = load i32*, i32** %a.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %max, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %a.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  %7 = load i32, i32* %max, align 4
  %cmp2 = icmp sgt i32 %6, %7
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load i32*, i32** %a.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  store i32 %10, i32* %max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %max, align 4
  %13 = load i32, i32* %len.addr, align 4
  %mul = mul nsw i32 %12, %13
  %call = call noalias i8* @calloc(i32 1, i32 %mul)
  store i8* %call, i8** %beads, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc16, %for.end
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %len.addr, align 4
  %cmp5 = icmp slt i32 %14, %15
  br i1 %cmp5, label %for.body6, label %for.end18

for.body6:                                        ; preds = %for.cond4
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc13, %for.body6
  %16 = load i32, i32* %j, align 4
  %17 = load i32*, i32** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp slt i32 %16, %19
  br i1 %cmp9, label %for.body10, label %for.end15

for.body10:                                       ; preds = %for.cond7
  %20 = load i8*, i8** %beads, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %max, align 4
  %mul11 = mul nsw i32 %21, %22
  %23 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul11, %23
  %arrayidx12 = getelementptr inbounds i8, i8* %20, i32 %add
  store i8 1, i8* %arrayidx12, align 1
  br label %for.inc13

for.inc13:                                        ; preds = %for.body10
  %24 = load i32, i32* %j, align 4
  %inc14 = add nsw i32 %24, 1
  store i32 %inc14, i32* %j, align 4
  br label %for.cond7

for.end15:                                        ; preds = %for.cond7
  br label %for.inc16

for.inc16:                                        ; preds = %for.end15
  %25 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %25, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond4

for.end18:                                        ; preds = %for.cond4
  store i32 0, i32* %j, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc45, %for.end18
  %26 = load i32, i32* %j, align 4
  %27 = load i32, i32* %max, align 4
  %cmp20 = icmp slt i32 %26, %27
  br i1 %cmp20, label %for.body21, label %for.end47

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %i, align 4
  store i32 0, i32* %sum, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc32, %for.body21
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %len.addr, align 4
  %cmp23 = icmp slt i32 %28, %29
  br i1 %cmp23, label %for.body24, label %for.end34

for.body24:                                       ; preds = %for.cond22
  %30 = load i8*, i8** %beads, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %max, align 4
  %mul25 = mul nsw i32 %31, %32
  %33 = load i32, i32* %j, align 4
  %add26 = add nsw i32 %mul25, %33
  %arrayidx27 = getelementptr inbounds i8, i8* %30, i32 %add26
  %34 = load i8, i8* %arrayidx27, align 1
  %conv = zext i8 %34 to i32
  %35 = load i32, i32* %sum, align 4
  %add28 = add nsw i32 %35, %conv
  store i32 %add28, i32* %sum, align 4
  %36 = load i8*, i8** %beads, align 4
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %max, align 4
  %mul29 = mul nsw i32 %37, %38
  %39 = load i32, i32* %j, align 4
  %add30 = add nsw i32 %mul29, %39
  %arrayidx31 = getelementptr inbounds i8, i8* %36, i32 %add30
  store i8 0, i8* %arrayidx31, align 1
  br label %for.inc32

for.inc32:                                        ; preds = %for.body24
  %40 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %40, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond22

for.end34:                                        ; preds = %for.cond22
  %41 = load i32, i32* %len.addr, align 4
  %42 = load i32, i32* %sum, align 4
  %sub = sub nsw i32 %41, %42
  store i32 %sub, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc42, %for.end34
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %len.addr, align 4
  %cmp36 = icmp slt i32 %43, %44
  br i1 %cmp36, label %for.body38, label %for.end44

for.body38:                                       ; preds = %for.cond35
  %45 = load i8*, i8** %beads, align 4
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %max, align 4
  %mul39 = mul nsw i32 %46, %47
  %48 = load i32, i32* %j, align 4
  %add40 = add nsw i32 %mul39, %48
  %arrayidx41 = getelementptr inbounds i8, i8* %45, i32 %add40
  store i8 1, i8* %arrayidx41, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body38
  %49 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %49, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond35

for.end44:                                        ; preds = %for.cond35
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %50 = load i32, i32* %j, align 4
  %inc46 = add nsw i32 %50, 1
  store i32 %inc46, i32* %j, align 4
  br label %for.cond19

for.end47:                                        ; preds = %for.cond19
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc64, %for.end47
  %51 = load i32, i32* %i, align 4
  %52 = load i32, i32* %len.addr, align 4
  %cmp49 = icmp slt i32 %51, %52
  br i1 %cmp49, label %for.body51, label %for.end66

for.body51:                                       ; preds = %for.cond48
  store i32 0, i32* %j, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc60, %for.body51
  %53 = load i32, i32* %j, align 4
  %54 = load i32, i32* %max, align 4
  %cmp53 = icmp slt i32 %53, %54
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %55 = load i8*, i8** %beads, align 4
  %56 = load i32, i32* %i, align 4
  %57 = load i32, i32* %max, align 4
  %mul55 = mul nsw i32 %56, %57
  %58 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %mul55, %58
  %arrayidx57 = getelementptr inbounds i8, i8* %55, i32 %add56
  %59 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %59 to i32
  %tobool = icmp ne i32 %conv58, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %60 = phi i1 [ false, %for.cond52 ], [ %tobool, %land.rhs ]
  br i1 %60, label %for.body59, label %for.end62

for.body59:                                       ; preds = %land.end
  br label %for.inc60

for.inc60:                                        ; preds = %for.body59
  %61 = load i32, i32* %j, align 4
  %inc61 = add nsw i32 %61, 1
  store i32 %inc61, i32* %j, align 4
  br label %for.cond52

for.end62:                                        ; preds = %land.end
  %62 = load i32, i32* %j, align 4
  %63 = load i32*, i32** %a.addr, align 4
  %64 = load i32, i32* %i, align 4
  %arrayidx63 = getelementptr inbounds i32, i32* %63, i32 %64
  store i32 %62, i32* %arrayidx63, align 4
  br label %for.inc64

for.inc64:                                        ; preds = %for.end62
  %65 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %65, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond48

for.end66:                                        ; preds = %for.cond48
  %66 = load i8*, i8** %beads, align 4
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca [8 x i32], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x i32]* @__const.main.x to i8*), i32 32, i1 false)
  store i32 8, i32* %len, align 4
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %x, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  call void @bead_sort(i32* %arraydecay, i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %x, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
