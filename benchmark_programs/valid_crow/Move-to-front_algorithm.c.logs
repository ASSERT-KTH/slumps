
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for move_to_front()

; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %mul1 = mul i32 1, %2
  %call2 = call noalias i8* @malloc(i32 %mul1)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for move_to_front()

; entering Souper's runOnFunction() for decode()

; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %mul1 = mul i32 1, %2
  %call2 = call noalias i8* @malloc(i32 %mul1)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %c, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %c, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for decode()

; entering Souper's runOnFunction() for encode()

; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %mul1 = mul i32 1, %2
  %call2 = call noalias i8* @malloc(i32 %mul1)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %c, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for encode()

; entering Souper's runOnFunction() for check()

; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %mul1 = mul i32 1, %2
  %call2 = call noalias i8* @malloc(i32 %mul1)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %10, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp ne i32 %call6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %val, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %mul1 = mul i32 1, %2
  %call2 = call noalias i8* @malloc(i32 %mul1)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %mul1 = mul i32 1, %2"
; from ""
; with "  %2 = load i32, i32* %size.addr, align 4" in:
"%0:i32 = var
%1:i32 = mul 1:i32, %0
cand %1 %0
"
; with "  %2 = load i32, i32* %size.addr, align 4"

Module after replacement:
; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %call2 = call noalias i8* @malloc(i32 %2)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for check()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for check()

; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %call2 = call noalias i8* @malloc(i32 %2)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %10, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp ne i32 %call6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %val, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for check()

; entering Souper's runOnFunction() for main()

; ModuleID = './Move-to-front_algorithm.c.bc'
source_filename = "./Move-to-front_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.decode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@.str = private unnamed_addr constant [18 x i8] c"there is an error\00", align 1
@__const.encode.table = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 16
@__const.main.sym = private unnamed_addr constant [3 x [100 x i8]] [[100 x i8] c"broood\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"bananaaa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [100 x i8] c"hiphophiphop\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"%s : [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Correct :)\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Incorrect :(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @move_to_front(i8* %str, i8 signext %c) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %c.addr = alloca i8, align 1
  %q = alloca i8*, align 4
  %p = alloca i8*, align 4
  %shift = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 0, i32* %shift, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %p, align 4
  %1 = load i8*, i8** %p, align 4
  %2 = load i8*, i8** %str.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %c.addr, align 1
  %conv = sext i8 %4 to i32
  %call3 = call i8* @strchr(i8* %3, i32 %conv)
  store i8* %call3, i8** %q, align 4
  %5 = load i8*, i8** %q, align 4
  %6 = load i8*, i8** %p, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %shift, align 4
  %7 = load i8*, i8** %str.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8*, i8** %p, align 4
  %9 = load i32, i32* %shift, align 4
  %call4 = call i8* @strncpy(i8* %add.ptr, i8* %8, i32 %9)
  %10 = load i8, i8* %c.addr, align 1
  %11 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %11, i32 0
  store i8 %10, i8* %arrayidx, align 1
  %12 = load i8*, i8** %p, align 4
  call void @free(i8* %12)
  %13 = load i32, i32* %shift, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strchr(i8* %0, i32 %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @decode(i32* %pass, i32 %size, i8* %sym) #0 {
entry:
  %pass.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sym.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i32* %pass, i32** %pass.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %sym, i8** %sym.addr, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.decode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pass.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  store i8 %6, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %7 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %7)
  store i32 %call, i32* %index, align 4
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx2, align 4
  %11 = load i32, i32* %index, align 4
  %cmp3 = icmp ne i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load i8, i8* %c, align 1
  %13 = load i8*, i8** %sym.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 %12, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %sym.addr, align 4
  %17 = load i32, i32* %size.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 0, i8* %arrayidx6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @encode(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %table = alloca [27 x i8], align 16
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = bitcast [27 x i8]* %table to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([27 x i8], [27 x i8]* @__const.encode.table, i32 0, i32 0), i32 27, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %c, align 1
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %table, i32 0, i32 0
  %6 = load i8, i8* %c, align 1
  %call = call i32 @move_to_front(i8* %arraydecay, i8 signext %6)
  %7 = load i32*, i32** %pass.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %call, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @check(i8* %sym, i32 %size, i32* %pass) #0 {
entry:
  %sym.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %pass.addr = alloca i32*, align 4
  %pass2 = alloca i32*, align 4
  %sym2 = alloca i8*, align 4
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store i8* %sym, i8** %sym.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32* %pass, i32** %pass.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %pass2, align 4
  %2 = load i32, i32* %size.addr, align 4
  %call2 = call noalias i8* @malloc(i32 %2)
  store i8* %call2, i8** %sym2, align 4
  store i32 1, i32* %val, align 4
  %3 = load i8*, i8** %sym.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %5 = load i32*, i32** %pass2, align 4
  call void @encode(i8* %3, i32 %4, i32* %5)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i32*, i32** %pass.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx, align 4
  %11 = load i32*, i32** %pass2, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %10, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %cmp5 = icmp ne i32 %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  store i32 0, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %18 = load i32*, i32** %pass.addr, align 4
  %19 = load i32, i32* %size.addr, align 4
  %20 = load i8*, i8** %sym2, align 4
  call void @decode(i32* %18, i32 %19, i8* %20)
  %21 = load i8*, i8** %sym.addr, align 4
  %22 = load i8*, i8** %sym2, align 4
  %call6 = call i32 @strcmp(i8* %21, i8* %22) #5
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %val, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %23 = load i8*, i8** %sym2, align 4
  call void @free(i8* %23)
  %24 = load i32*, i32** %pass2, align 4
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25)
  %26 = load i32, i32* %val, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sym = alloca [3 x [100 x i8]], align 16
  %pass = alloca [100 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [100 x i8]]* %sym to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [100 x i8]], [3 x [100 x i8]]* @__const.main.sym, i32 0, i32 0, i32 0), i32 300, i1 false)
  %1 = bitcast [100 x i32]* %pass to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 400, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %3
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx, i32 0, i32 0
  %call = call i32 @strlen(i8* %arraydecay) #5
  store i32 %call, i32* %len, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx1, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  call void @encode(i8* %arraydecay2, i32 %5, i32* %arraydecay3)
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %6
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay5)
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [100 x i8]], [3 x [100 x i8]]* %sym, i32 0, i32 %12
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %arrayidx13, i32 0, i32 0
  %13 = load i32, i32* %len, align 4
  %arraydecay15 = getelementptr inbounds [100 x i32], [100 x i32]* %pass, i32 0, i32 0
  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc19

for.inc19:                                        ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { argmemonly nounwind willreturn writeonly }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %arraydecay) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call16 = call i32 @check(i8* %arraydecay14, i32 %13, i32* %arraydecay15)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
