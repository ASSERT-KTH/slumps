
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for rnd()

; ModuleID = './Deal_cards_for_FreeCell.c.bc'
source_filename = "./Deal_cards_for_FreeCell.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@s_suits = hidden global [5 x i32] [i32 9827, i32 9830, i32 9829, i32 9824, i32 0], align 16
@s_nums = hidden global [14 x i32] [i32 65, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 84, i32 74, i32 81, i32 75, i32 0], align 16
@seed = internal global i32 1, align 4
@.str = private unnamed_addr constant [17 x i8] c"  \1B[%dm%lc\1B[m%lc\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"Hand %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @rnd() #0 {
entry:
  %0 = load i32, i32* @seed, align 4
  %mul = mul nsw i32 %0, 214013
  %add = add nsw i32 %mul, 2531011
  %and = and i32 %add, 2147483647
  store i32 %and, i32* @seed, align 4
  %shr = ashr i32 %and, 16
  ret i32 %shr
}

; Function Attrs: noinline nounwind optnone
define hidden void @srnd(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  store i32 %0, i32* @seed, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %c) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %c.addr, align 4
  %2 = load i32, i32* %1, align 4
  %add = add nsw i32 1, %2
  %rem = srem i32 %add, 4
  %div = sdiv i32 %rem, 2
  %sub = sub nsw i32 32, %div
  %3 = load i32*, i32** %c.addr, align 4
  %4 = load i32, i32* %3, align 4
  %rem1 = srem i32 %4, 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %rem1
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %c.addr, align 4
  %7 = load i32, i32* %6, align 4
  %div2 = sdiv i32 %7, 4
  %arrayidx3 = getelementptr inbounds [14 x i32], [14 x i32]* @s_nums, i32 0, i32 %div2
  %8 = load i32, i32* %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i32 %sub, i32 %5, i32 %8)
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %rem4 = srem i32 %inc, 8
  %tobool = icmp ne i32 %rem4, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %10, 52
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %call6 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32*, i32** %c.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %incdec.ptr, i32** %c.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deal(i32 %s, i32* %t) #0 {
entry:
  %s.addr = alloca i32, align 4
  %t.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %t, i32** %t.addr, align 4
  %0 = load i32, i32* %s.addr, align 4
  call void @srnd(i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %sub = sub nsw i32 51, %2
  %3 = load i32*, i32** %t.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %sub, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc10, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 51
  br i1 %cmp2, label %for.body3, label %for.end12

for.body3:                                        ; preds = %for.cond1
  %call = call i32 @rnd()
  %7 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 52, %7
  %rem = srem i32 %call, %sub4
  %sub5 = sub nsw i32 51, %rem
  store i32 %sub5, i32* %j, align 4
  %8 = load i32*, i32** %t.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %s.addr, align 4
  %11 = load i32*, i32** %t.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %14 = load i32*, i32** %t.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 %13, i32* %arrayidx8, align 4
  %16 = load i32, i32* %s.addr, align 4
  %17 = load i32*, i32** %t.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx9, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body3
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond1

for.end12:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %s = alloca i32, align 4
  %card = alloca [52 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %s, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 11982, i32* %s, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %call2 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %s, align 4
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @deal(i32 %3, i32* %arraydecay)
  %4 = load i32, i32* %s, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i32 %4)
  %arraydecay4 = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @show(i32* %arraydecay4)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @seed, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, 214013
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
infer %1 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, 2531011
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
%2:i32 = addnsw 2531011:i32, %1
infer %2 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %and = and i32 %add, 2147483647
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
%2:i32 = addnsw 2531011:i32, %1
%3:i32 = and 2147483647:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %shr = ashr i32 %and, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
%2:i32 = addnsw 2531011:i32, %1
%3:i32 = and 2147483647:i32, %2 (hasExternalUses)
%4:i32 = ashr %3, 16:i32
infer %4
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
infer %1 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -988954073
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
%2:i32 = addnsw 2531011:i32, %1
infer %2 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2531011
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1071386223
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
%2:i32 = addnsw 2531011:i32, %1
%3:i32 = and 2147483647:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2531011
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1076097425
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
%2:i32 = addnsw 2531011:i32, %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 214013:i32, %0
%2:i32 = addnsw 2531011:i32, %1
%3:i32 = and 2147483647:i32, %2 (hasExternalUses)
%4:i32 = ashr %3, 16:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 38
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32749
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for rnd()

; entering Souper's runOnFunction() for srnd()

; ModuleID = './Deal_cards_for_FreeCell.c.bc'
source_filename = "./Deal_cards_for_FreeCell.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@s_suits = hidden global [5 x i32] [i32 9827, i32 9830, i32 9829, i32 9824, i32 0], align 16
@s_nums = hidden global [14 x i32] [i32 65, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 84, i32 74, i32 81, i32 75, i32 0], align 16
@seed = internal global i32 1, align 4
@.str = private unnamed_addr constant [17 x i8] c"  \1B[%dm%lc\1B[m%lc\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"Hand %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @rnd() #0 {
entry:
  %0 = load i32, i32* @seed, align 4
  %mul = mul nsw i32 %0, 214013
  %add = add nsw i32 %mul, 2531011
  %and = and i32 %add, 2147483647
  store i32 %and, i32* @seed, align 4
  %shr = ashr i32 %and, 16
  ret i32 %shr
}

; Function Attrs: noinline nounwind optnone
define hidden void @srnd(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  store i32 %0, i32* @seed, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %c) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %c.addr, align 4
  %2 = load i32, i32* %1, align 4
  %add = add nsw i32 1, %2
  %rem = srem i32 %add, 4
  %div = sdiv i32 %rem, 2
  %sub = sub nsw i32 32, %div
  %3 = load i32*, i32** %c.addr, align 4
  %4 = load i32, i32* %3, align 4
  %rem1 = srem i32 %4, 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %rem1
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %c.addr, align 4
  %7 = load i32, i32* %6, align 4
  %div2 = sdiv i32 %7, 4
  %arrayidx3 = getelementptr inbounds [14 x i32], [14 x i32]* @s_nums, i32 0, i32 %div2
  %8 = load i32, i32* %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i32 %sub, i32 %5, i32 %8)
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %rem4 = srem i32 %inc, 8
  %tobool = icmp ne i32 %rem4, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %10, 52
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %call6 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32*, i32** %c.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %incdec.ptr, i32** %c.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deal(i32 %s, i32* %t) #0 {
entry:
  %s.addr = alloca i32, align 4
  %t.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %t, i32** %t.addr, align 4
  %0 = load i32, i32* %s.addr, align 4
  call void @srnd(i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %sub = sub nsw i32 51, %2
  %3 = load i32*, i32** %t.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %sub, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc10, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 51
  br i1 %cmp2, label %for.body3, label %for.end12

for.body3:                                        ; preds = %for.cond1
  %call = call i32 @rnd()
  %7 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 52, %7
  %rem = srem i32 %call, %sub4
  %sub5 = sub nsw i32 51, %rem
  store i32 %sub5, i32* %j, align 4
  %8 = load i32*, i32** %t.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %s.addr, align 4
  %11 = load i32*, i32** %t.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %14 = load i32*, i32** %t.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 %13, i32* %arrayidx8, align 4
  %16 = load i32, i32* %s.addr, align 4
  %17 = load i32*, i32** %t.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx9, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body3
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond1

for.end12:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %s = alloca i32, align 4
  %card = alloca [52 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %s, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 11982, i32* %s, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %call2 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %s, align 4
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @deal(i32 %3, i32* %arraydecay)
  %4 = load i32, i32* %s, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i32 %4)
  %arraydecay4 = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @show(i32* %arraydecay4)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for srnd()

; entering Souper's runOnFunction() for show()

; ModuleID = './Deal_cards_for_FreeCell.c.bc'
source_filename = "./Deal_cards_for_FreeCell.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@s_suits = hidden global [5 x i32] [i32 9827, i32 9830, i32 9829, i32 9824, i32 0], align 16
@s_nums = hidden global [14 x i32] [i32 65, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 84, i32 74, i32 81, i32 75, i32 0], align 16
@seed = internal global i32 1, align 4
@.str = private unnamed_addr constant [17 x i8] c"  \1B[%dm%lc\1B[m%lc\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"Hand %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @rnd() #0 {
entry:
  %0 = load i32, i32* @seed, align 4
  %mul = mul nsw i32 %0, 214013
  %add = add nsw i32 %mul, 2531011
  %and = and i32 %add, 2147483647
  store i32 %and, i32* @seed, align 4
  %shr = ashr i32 %and, 16
  ret i32 %shr
}

; Function Attrs: noinline nounwind optnone
define hidden void @srnd(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  store i32 %0, i32* @seed, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %c) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %c.addr, align 4
  %2 = load i32, i32* %1, align 4
  %add = add nsw i32 1, %2
  %rem = srem i32 %add, 4
  %div = sdiv i32 %rem, 2
  %sub = sub nsw i32 32, %div
  %3 = load i32*, i32** %c.addr, align 4
  %4 = load i32, i32* %3, align 4
  %rem1 = srem i32 %4, 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %rem1
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %c.addr, align 4
  %7 = load i32, i32* %6, align 4
  %div2 = sdiv i32 %7, 4
  %arrayidx3 = getelementptr inbounds [14 x i32], [14 x i32]* @s_nums, i32 0, i32 %div2
  %8 = load i32, i32* %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i32 %sub, i32 %5, i32 %8)
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %rem4 = srem i32 %inc, 8
  %tobool = icmp ne i32 %rem4, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %10, 52
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %call6 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32*, i32** %c.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %incdec.ptr, i32** %c.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deal(i32 %s, i32* %t) #0 {
entry:
  %s.addr = alloca i32, align 4
  %t.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %t, i32** %t.addr, align 4
  %0 = load i32, i32* %s.addr, align 4
  call void @srnd(i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %sub = sub nsw i32 51, %2
  %3 = load i32*, i32** %t.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %sub, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc10, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 51
  br i1 %cmp2, label %for.body3, label %for.end12

for.body3:                                        ; preds = %for.cond1
  %call = call i32 @rnd()
  %7 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 52, %7
  %rem = srem i32 %call, %sub4
  %sub5 = sub nsw i32 51, %rem
  store i32 %sub5, i32* %j, align 4
  %8 = load i32*, i32** %t.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %s.addr, align 4
  %11 = load i32*, i32** %t.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %14 = load i32*, i32** %t.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 %13, i32* %arrayidx8, align 4
  %16 = load i32, i32* %s.addr, align 4
  %17 = load i32*, i32** %t.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx9, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body3
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond1

for.end12:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %s = alloca i32, align 4
  %card = alloca [52 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %s, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 11982, i32* %s, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %call2 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %s, align 4
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @deal(i32 %3, i32* %arraydecay)
  %4 = load i32, i32* %s, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i32 %4)
  %arraydecay4 = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @show(i32* %arraydecay4)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 52
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 52:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i32 %add, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32
infer %2

; *****
; For LLVM instruction:
;  %div = sdiv i32 %rem, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32
%3:i32 = sdiv %2, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 32, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32
%3:i32 = sdiv %2, 2:i32
%4:i32 = subnsw 32:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem1 = srem i32 %4, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div2 = sdiv i32 %7, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem4 = srem i32 %inc, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = srem %1, 8:i32
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = srem %1, 8:i32
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %10, 52
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 52:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 52:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32
%3:i32 = sdiv %2, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32
%3:i32 = sdiv %2, 2:i32
%4:i32 = subnsw 32:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 31
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32

Cost = 6
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 4:i32
%3:i32 = sdiv %2, 2:i32

Cost = 11
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 161982144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = srem %1, 8:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = srem %1, 8:i32
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 52:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for show()

; entering Souper's runOnFunction() for deal()

; ModuleID = './Deal_cards_for_FreeCell.c.bc'
source_filename = "./Deal_cards_for_FreeCell.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@s_suits = hidden global [5 x i32] [i32 9827, i32 9830, i32 9829, i32 9824, i32 0], align 16
@s_nums = hidden global [14 x i32] [i32 65, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 84, i32 74, i32 81, i32 75, i32 0], align 16
@seed = internal global i32 1, align 4
@.str = private unnamed_addr constant [17 x i8] c"  \1B[%dm%lc\1B[m%lc\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"Hand %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @rnd() #0 {
entry:
  %0 = load i32, i32* @seed, align 4
  %mul = mul nsw i32 %0, 214013
  %add = add nsw i32 %mul, 2531011
  %and = and i32 %add, 2147483647
  store i32 %and, i32* @seed, align 4
  %shr = ashr i32 %and, 16
  ret i32 %shr
}

; Function Attrs: noinline nounwind optnone
define hidden void @srnd(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  store i32 %0, i32* @seed, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %c) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %c.addr, align 4
  %2 = load i32, i32* %1, align 4
  %add = add nsw i32 1, %2
  %rem = srem i32 %add, 4
  %div = sdiv i32 %rem, 2
  %sub = sub nsw i32 32, %div
  %3 = load i32*, i32** %c.addr, align 4
  %4 = load i32, i32* %3, align 4
  %rem1 = srem i32 %4, 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %rem1
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %c.addr, align 4
  %7 = load i32, i32* %6, align 4
  %div2 = sdiv i32 %7, 4
  %arrayidx3 = getelementptr inbounds [14 x i32], [14 x i32]* @s_nums, i32 0, i32 %div2
  %8 = load i32, i32* %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i32 %sub, i32 %5, i32 %8)
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %rem4 = srem i32 %inc, 8
  %tobool = icmp ne i32 %rem4, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %10, 52
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %call6 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32*, i32** %c.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %incdec.ptr, i32** %c.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deal(i32 %s, i32* %t) #0 {
entry:
  %s.addr = alloca i32, align 4
  %t.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %t, i32** %t.addr, align 4
  %0 = load i32, i32* %s.addr, align 4
  call void @srnd(i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %sub = sub nsw i32 51, %2
  %3 = load i32*, i32** %t.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %sub, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc10, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 51
  br i1 %cmp2, label %for.body3, label %for.end12

for.body3:                                        ; preds = %for.cond1
  %call = call i32 @rnd()
  %7 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 52, %7
  %rem = srem i32 %call, %sub4
  %sub5 = sub nsw i32 51, %rem
  store i32 %sub5, i32* %j, align 4
  %8 = load i32*, i32** %t.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %s.addr, align 4
  %11 = load i32*, i32** %t.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %14 = load i32*, i32** %t.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 %13, i32* %arrayidx8, align 4
  %16 = load i32, i32* %s.addr, align 4
  %17 = load i32*, i32** %t.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx9, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body3
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond1

for.end12:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %s = alloca i32, align 4
  %card = alloca [52 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %s, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 11982, i32* %s, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %call2 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %s, align 4
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @deal(i32 %3, i32* %arraydecay)
  %4 = load i32, i32* %s, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i32 %4)
  %arraydecay4 = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @show(i32* %arraydecay4)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %s.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 52
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 52:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 51, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 51:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %6, 51
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 51:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @rnd()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 52, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 52:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i32 %call, %sub4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 52:i32, %1
%3:i32 = srem %0, %2
infer %3

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 51, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 52:i32, %1
%3:i32 = srem %0, %2
%4:i32 = subnsw 51:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %s.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 51:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 51
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -67108813
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 51:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 52:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 52
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 36
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 52:i32, %1
%3:i32 = srem %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 117937
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw 52:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 52:i32, %1
%3:i32 = srem %0, %2
%4:i32 = subnsw 51:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 51
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -461
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw 52:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 52:i32, %1
%3:i32 = srem %0, %2

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for deal()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Deal_cards_for_FreeCell.c.bc'
source_filename = "./Deal_cards_for_FreeCell.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@s_suits = hidden global [5 x i32] [i32 9827, i32 9830, i32 9829, i32 9824, i32 0], align 16
@s_nums = hidden global [14 x i32] [i32 65, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 84, i32 74, i32 81, i32 75, i32 0], align 16
@seed = internal global i32 1, align 4
@.str = private unnamed_addr constant [17 x i8] c"  \1B[%dm%lc\1B[m%lc\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"Hand %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @rnd() #0 {
entry:
  %0 = load i32, i32* @seed, align 4
  %mul = mul nsw i32 %0, 214013
  %add = add nsw i32 %mul, 2531011
  %and = and i32 %add, 2147483647
  store i32 %and, i32* @seed, align 4
  %shr = ashr i32 %and, 16
  ret i32 %shr
}

; Function Attrs: noinline nounwind optnone
define hidden void @srnd(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  store i32 %0, i32* @seed, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %c) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %c.addr, align 4
  %2 = load i32, i32* %1, align 4
  %add = add nsw i32 1, %2
  %rem = srem i32 %add, 4
  %div = sdiv i32 %rem, 2
  %sub = sub nsw i32 32, %div
  %3 = load i32*, i32** %c.addr, align 4
  %4 = load i32, i32* %3, align 4
  %rem1 = srem i32 %4, 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %rem1
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %c.addr, align 4
  %7 = load i32, i32* %6, align 4
  %div2 = sdiv i32 %7, 4
  %arrayidx3 = getelementptr inbounds [14 x i32], [14 x i32]* @s_nums, i32 0, i32 %div2
  %8 = load i32, i32* %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i32 %sub, i32 %5, i32 %8)
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %rem4 = srem i32 %inc, 8
  %tobool = icmp ne i32 %rem4, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %10, 52
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %call6 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32*, i32** %c.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %incdec.ptr, i32** %c.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deal(i32 %s, i32* %t) #0 {
entry:
  %s.addr = alloca i32, align 4
  %t.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %t, i32** %t.addr, align 4
  %0 = load i32, i32* %s.addr, align 4
  call void @srnd(i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %sub = sub nsw i32 51, %2
  %3 = load i32*, i32** %t.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %sub, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc10, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 51
  br i1 %cmp2, label %for.body3, label %for.end12

for.body3:                                        ; preds = %for.cond1
  %call = call i32 @rnd()
  %7 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 52, %7
  %rem = srem i32 %call, %sub4
  %sub5 = sub nsw i32 51, %rem
  store i32 %sub5, i32* %j, align 4
  %8 = load i32*, i32** %t.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %s.addr, align 4
  %11 = load i32*, i32** %t.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %14 = load i32*, i32** %t.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 %13, i32* %arrayidx8, align 4
  %16 = load i32, i32* %s.addr, align 4
  %17 = load i32*, i32** %t.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx9, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body3
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond1

for.end12:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %s = alloca i32, align 4
  %card = alloca [52 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %s, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 11982, i32* %s, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %call2 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %s, align 4
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @deal(i32 %3, i32* %arraydecay)
  %4 = load i32, i32* %s, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i32 %4)
  %arraydecay4 = getelementptr inbounds [52 x i32], [52 x i32]* %card, i32 0, i32 0
  call void @show(i32* %arraydecay4)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sle i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
