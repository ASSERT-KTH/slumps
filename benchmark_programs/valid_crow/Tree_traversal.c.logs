
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for tree()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for tree()

; entering Souper's runOnFunction() for destroy_tree()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_s* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_s* %5, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for destroy_tree()

; entering Souper's runOnFunction() for preorder()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_s* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_s* %9, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for preorder()

; entering Souper's runOnFunction() for inorder()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_s* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_s* %9, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for inorder()

; entering Souper's runOnFunction() for postorder()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_s* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_s* %6, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for postorder()

; entering Souper's runOnFunction() for enqueue()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.qnode_s* %5, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for enqueue()

; entering Souper's runOnFunction() for dequeue()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.qnode_s* %12, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for dequeue()

; entering Souper's runOnFunction() for queue_empty()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.qnode_s* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %lnot to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for queue_empty()

; entering Souper's runOnFunction() for levelorder()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_s* %6, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne %struct.node_s* %10, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for levelorder()

; entering Souper's runOnFunction() for print()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for print()

; entering Souper's runOnFunction() for main()

; ModuleID = './Tree_traversal.c.bc'
source_filename = "./Tree_traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_s = type { i32, %struct.node_s*, %struct.node_s* }
%struct.queue = type { %struct.qnode_s*, %struct.qnode_s* }
%struct.qnode_s = type { %struct.qnode_s*, %struct.node_s* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"preorder:    \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"inorder:     \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"postorder:   \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"level-order: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @tree(i32 %v, %struct.node_s* %l, %struct.node_s* %r) #0 {
entry:
  %v.addr = alloca i32, align 4
  %l.addr = alloca %struct.node_s*, align 4
  %r.addr = alloca %struct.node_s*, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 %v, i32* %v.addr, align 4
  store %struct.node_s* %l, %struct.node_s** %l.addr, align 4
  store %struct.node_s* %r, %struct.node_s** %r.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_s*
  store %struct.node_s* %0, %struct.node_s** %n, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 0
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_s*, %struct.node_s** %l.addr, align 4
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 1
  store %struct.node_s* %3, %struct.node_s** %left, align 4
  %5 = load %struct.node_s*, %struct.node_s** %r.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  store %struct.node_s* %5, %struct.node_s** %right, align 4
  %7 = load %struct.node_s*, %struct.node_s** %n, align 4
  ret %struct.node_s* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @destroy_tree(%struct.node_s* %n) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  call void @destroy_tree(%struct.node_s* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %4, i32 0, i32 2
  %5 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 2
  %7 = load %struct.node_s*, %struct.node_s** %right4, align 4
  call void @destroy_tree(%struct.node_s* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %9 = bitcast %struct.node_s* %8 to i8*
  call void @free(i8* %9)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @preorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load void (i32)*, void (i32)** %f.addr, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %1, i32 0, i32 0
  %2 = load i32, i32* %value, align 4
  call void %0(i32 %2)
  %3 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 1
  %4 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %7 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %6, void (i32)* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @preorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @inorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load void (i32)*, void (i32)** %f.addr, align 4
  %6 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %6, i32 0, i32 0
  %7 = load i32, i32* %value, align 4
  call void %5(i32 %7)
  %8 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %8, i32 0, i32 2
  %9 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %9, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %10 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %10, i32 0, i32 2
  %11 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %12 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @inorder(%struct.node_s* %11, void (i32)* %12)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @postorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %0, i32 0, i32 1
  %1 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool = icmp ne %struct.node_s* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %left1 = getelementptr inbounds %struct.node_s, %struct.node_s* %2, i32 0, i32 1
  %3 = load %struct.node_s*, %struct.node_s** %left1, align 4
  %4 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %3, void (i32)* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 2
  %6 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %right4 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 2
  %8 = load %struct.node_s*, %struct.node_s** %right4, align 4
  %9 = load void (i32)*, void (i32)** %f.addr, align 4
  call void @postorder(%struct.node_s* %8, void (i32)* %9)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load void (i32)*, void (i32)** %f.addr, align 4
  %11 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 0
  %12 = load i32, i32* %value, align 4
  call void %10(i32 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @enqueue(%struct.queue* %q, %struct.node_s* %n) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %n.addr = alloca %struct.node_s*, align 4
  %node = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.qnode_s*
  store %struct.qnode_s* %0, %struct.qnode_s** %node, align 4
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  %2 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %2, i32 0, i32 1
  store %struct.node_s* %1, %struct.node_s** %value, align 4
  %3 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %3, i32 0, i32 0
  store %struct.qnode_s* null, %struct.qnode_s** %next, align 4
  %4 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %4, i32 0, i32 1
  %5 = load %struct.qnode_s*, %struct.qnode_s** %end, align 4
  %tobool = icmp ne %struct.qnode_s* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %7 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end1 = getelementptr inbounds %struct.queue, %struct.queue* %7, i32 0, i32 1
  %8 = load %struct.qnode_s*, %struct.qnode_s** %end1, align 4
  %next2 = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %8, i32 0, i32 0
  store %struct.qnode_s* %6, %struct.qnode_s** %next2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.qnode_s*, %struct.qnode_s** %node, align 4
  %12 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end3 = getelementptr inbounds %struct.queue, %struct.queue* %12, i32 0, i32 1
  store %struct.qnode_s* %11, %struct.qnode_s** %end3, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_s* @dequeue(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  %tmp = alloca %struct.node_s*, align 4
  %second = alloca %struct.qnode_s*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %value = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %1, i32 0, i32 1
  %2 = load %struct.node_s*, %struct.node_s** %value, align 4
  store %struct.node_s* %2, %struct.node_s** %tmp, align 4
  %3 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin1 = getelementptr inbounds %struct.queue, %struct.queue* %3, i32 0, i32 0
  %4 = load %struct.qnode_s*, %struct.qnode_s** %begin1, align 4
  %next = getelementptr inbounds %struct.qnode_s, %struct.qnode_s* %4, i32 0, i32 0
  %5 = load %struct.qnode_s*, %struct.qnode_s** %next, align 4
  store %struct.qnode_s* %5, %struct.qnode_s** %second, align 4
  %6 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin2 = getelementptr inbounds %struct.queue, %struct.queue* %6, i32 0, i32 0
  %7 = load %struct.qnode_s*, %struct.qnode_s** %begin2, align 4
  %8 = bitcast %struct.qnode_s* %7 to i8*
  call void @free(i8* %8)
  %9 = load %struct.qnode_s*, %struct.qnode_s** %second, align 4
  %10 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin3 = getelementptr inbounds %struct.queue, %struct.queue* %10, i32 0, i32 0
  store %struct.qnode_s* %9, %struct.qnode_s** %begin3, align 4
  %11 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin4 = getelementptr inbounds %struct.queue, %struct.queue* %11, i32 0, i32 0
  %12 = load %struct.qnode_s*, %struct.qnode_s** %begin4, align 4
  %tobool = icmp ne %struct.qnode_s* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %end = getelementptr inbounds %struct.queue, %struct.queue* %13, i32 0, i32 1
  store %struct.qnode_s* null, %struct.qnode_s** %end, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.node_s*, %struct.node_s** %tmp, align 4
  ret %struct.node_s* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @queue_empty(%struct.queue* %q) #0 {
entry:
  %q.addr = alloca %struct.queue*, align 4
  store %struct.queue* %q, %struct.queue** %q.addr, align 4
  %0 = load %struct.queue*, %struct.queue** %q.addr, align 4
  %begin = getelementptr inbounds %struct.queue, %struct.queue* %0, i32 0, i32 0
  %1 = load %struct.qnode_s*, %struct.qnode_s** %begin, align 4
  %tobool = icmp ne %struct.qnode_s* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @levelorder(%struct.node_s* %n, void (i32)* %f) #0 {
entry:
  %n.addr = alloca %struct.node_s*, align 4
  %f.addr = alloca void (i32)*, align 4
  %nodequeue = alloca %struct.queue, align 4
  %next = alloca %struct.node_s*, align 4
  store %struct.node_s* %n, %struct.node_s** %n.addr, align 4
  store void (i32)* %f, void (i32)** %f.addr, align 4
  %0 = bitcast %struct.queue* %nodequeue to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.node_s*, %struct.node_s** %n.addr, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %1)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %entry
  %call = call i32 @queue_empty(%struct.queue* %nodequeue)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call %struct.node_s* @dequeue(%struct.queue* %nodequeue)
  store %struct.node_s* %call1, %struct.node_s** %next, align 4
  %2 = load void (i32)*, void (i32)** %f.addr, align 4
  %3 = load %struct.node_s*, %struct.node_s** %next, align 4
  %value = getelementptr inbounds %struct.node_s, %struct.node_s* %3, i32 0, i32 0
  %4 = load i32, i32* %value, align 4
  call void %2(i32 %4)
  %5 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left = getelementptr inbounds %struct.node_s, %struct.node_s* %5, i32 0, i32 1
  %6 = load %struct.node_s*, %struct.node_s** %left, align 4
  %tobool2 = icmp ne %struct.node_s* %6, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct.node_s*, %struct.node_s** %next, align 4
  %left3 = getelementptr inbounds %struct.node_s, %struct.node_s* %7, i32 0, i32 1
  %8 = load %struct.node_s*, %struct.node_s** %left3, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right = getelementptr inbounds %struct.node_s, %struct.node_s* %9, i32 0, i32 2
  %10 = load %struct.node_s*, %struct.node_s** %right, align 4
  %tobool4 = icmp ne %struct.node_s* %10, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %11 = load %struct.node_s*, %struct.node_s** %next, align 4
  %right6 = getelementptr inbounds %struct.node_s, %struct.node_s* %11, i32 0, i32 2
  %12 = load %struct.node_s*, %struct.node_s** %right6, align 4
  call void @enqueue(%struct.queue* %nodequeue, %struct.node_s* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.node_s*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node_s* @tree(i32 7, %struct.node_s* null, %struct.node_s* null)
  %call1 = call %struct.node_s* @tree(i32 4, %struct.node_s* %call, %struct.node_s* null)
  %call2 = call %struct.node_s* @tree(i32 5, %struct.node_s* null, %struct.node_s* null)
  %call3 = call %struct.node_s* @tree(i32 2, %struct.node_s* %call1, %struct.node_s* %call2)
  %call4 = call %struct.node_s* @tree(i32 8, %struct.node_s* null, %struct.node_s* null)
  %call5 = call %struct.node_s* @tree(i32 9, %struct.node_s* null, %struct.node_s* null)
  %call6 = call %struct.node_s* @tree(i32 6, %struct.node_s* %call4, %struct.node_s* %call5)
  %call7 = call %struct.node_s* @tree(i32 3, %struct.node_s* %call6, %struct.node_s* null)
  %call8 = call %struct.node_s* @tree(i32 1, %struct.node_s* %call3, %struct.node_s* %call7)
  store %struct.node_s* %call8, %struct.node_s** %n, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %0 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @preorder(%struct.node_s* %0, void (i32)* @print)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0))
  %1 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @inorder(%struct.node_s* %1, void (i32)* @print)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %2 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @postorder(%struct.node_s* %2, void (i32)* @print)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0))
  %3 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @levelorder(%struct.node_s* %3, void (i32)* @print)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %4 = load %struct.node_s*, %struct.node_s** %n, align 4
  call void @destroy_tree(%struct.node_s* %4)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
