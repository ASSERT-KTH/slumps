
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for reverse()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i8* %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor = xor i32 %conv2, %conv
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv3 = trunc i32 %xor to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor6 = xor i32 %conv5, %conv4
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv7 = trunc i32 %xor6 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor11 = xor i32 %conv10, %conv8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv12 = trunc i32 %xor11 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for reverse()

; entering Souper's runOnFunction() for to_bt()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %3, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %5, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %12, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %13, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 432013312
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for to_bt()

; entering Souper's runOnFunction() for from_bt()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %conv2, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %conv5, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %8, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1530
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for from_bt()

; entering Souper's runOnFunction() for last_char()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq i8* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp ne i32 %conv3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %c, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %retval, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for last_char()

; entering Souper's runOnFunction() for add()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne i32 %conv2, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call8 = call signext i8 @last_char(i8* %arraydecay7)
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call10 = call signext i8 @last_char(i8* %arraydecay9)
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %L1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv12 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %conv11, %conv12
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = slt %1, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %L1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv16 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor = xor i32 %conv17, %conv16
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv18 = trunc i32 %xor to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv19 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %L1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv20 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor21 = xor i32 %conv20, %conv19
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv22 = trunc i32 %xor21 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %L1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv23 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor25 = xor i32 %conv24, %conv23
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv26 = trunc i32 %xor25 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %L1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp28 = icmp eq i32 %conv27, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv31 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp32 = icmp eq i32 %conv31, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv36 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp37 = icmp eq i32 %conv36, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %L1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv44 = sext i8 %18 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp45 = icmp eq i32 %conv44, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv48 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp49 = icmp eq i32 %conv48, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv54 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp55 = icmp eq i32 %conv54, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv60 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp61 = icmp eq i32 %conv60, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %L1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv68 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp69 = icmp eq i32 %conv68, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %L2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv72 = sext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp73 = icmp eq i32 %conv72, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv90 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp91 = icmp ne i32 %conv90, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %30, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv96 = sext i8 %31 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp97 = icmp ne i32 %conv96, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = slt %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for add()

; entering Souper's runOnFunction() for unary_minus()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %conv2, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %conv6, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %10, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for unary_minus()

; entering Souper's runOnFunction() for subtract()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for subtract()

; entering Souper's runOnFunction() for mult()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %conv6, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp16 = icmp eq i32 %conv15, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %10, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv30 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp31 = icmp eq i32 %conv30, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for mult()

; entering Souper's runOnFunction() for main()

; ModuleID = './Balanced_ternary.c.bc'
source_filename = "./Balanced_ternary.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@to_bt.d = internal global [3 x i8] c"0+-", align 1
@to_bt.v = internal global [3 x i32] [i32 0, i32 1, i32 -1], align 4
@__const.mult.r = private unnamed_addr constant [16 x i8] c"0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"+-0++0+\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"+-++-\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"      a: %14s %10d\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"      b: %14s %10d\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"      c: %14s %10d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"a*(b-c): %14s %10d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @reverse(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %r = alloca i8*, align 4
  store i8* %p, i8** %p.addr, align 4
  %0 = load i8*, i8** %p.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %len, align 4
  %1 = load i8*, i8** %p.addr, align 4
  %2 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %2
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i32 -1
  store i8* %add.ptr1, i8** %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p.addr, align 4
  %4 = load i8*, i8** %r, align 4
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %r, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %p.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, i8* %7, align 1
  %9 = load i8*, i8** %p.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv4 = sext i8 %10 to i32
  %11 = load i8*, i8** %r, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %xor6 = xor i32 %conv5, %conv4
  %conv7 = trunc i32 %xor6 to i8
  store i8 %conv7, i8* %11, align 1
  %13 = load i8*, i8** %r, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %r, align 4
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %15 = load i8*, i8** %p.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr9, i8** %p.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %xor11 = xor i32 %conv10, %conv8
  %conv12 = trunc i32 %xor11 to i8
  store i8 %conv12, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @to_bt(i32 %n, i8* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %1, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, 3
  store i32 %rem, i32* %r, align 4
  %4 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %r, align 4
  %add = add nsw i32 %5, 3
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @to_bt.d, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i8*, i8** %ptr, align 4
  store i8 %7, i8* %8, align 1
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  store i8 0, i8* %incdec.ptr, align 1
  %10 = load i32, i32* %r, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @to_bt.v, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx1, align 4
  %12 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %12, %11
  store i32 %sub, i32* %n.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %13, 3
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %b.addr, align 4
  call void @reverse(i8* %14)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_bt(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, 3
  store i32 %mul, i32* %n, align 4
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* %n, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end9

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %n, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %9 = load i8*, i8** %a.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @last_char(i8* %ptr) #0 {
entry:
  %retval = alloca i8, align 1
  %ptr.addr = alloca i8*, align 4
  %c = alloca i8, align 1
  store i8* %ptr, i8** %ptr.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 4
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %ptr.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp ne i32 %conv3, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  %7 = load i8*, i8** %ptr.addr, align 4
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8*, i8** %ptr.addr, align 4
  store i8 0, i8* %9, align 1
  %10 = load i8, i8* %c, align 1
  store i8 %10, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load i8, i8* %retval, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ob1 = alloca [16 x i8], align 16
  %ob2 = alloca [16 x i8], align 16
  %d = alloca [3 x i8], align 1
  %L1 = alloca i8, align 1
  %L2 = alloca i8, align 1
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %b2.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast [3 x i8]* %d to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %4, i8 0, i32 3, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %5 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay, i8* %5)
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %6 = load i8*, i8** %b2.addr, align 4
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* %6)
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call8 = call signext i8 @last_char(i8* %arraydecay7)
  store i8 %call8, i8* %L1, align 1
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %call10 = call signext i8 @last_char(i8* %arraydecay9)
  store i8 %call10, i8* %L2, align 1
  %7 = load i8, i8* %L2, align 1
  %conv11 = sext i8 %7 to i32
  %8 = load i8, i8* %L1, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp slt i32 %conv11, %conv12
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %9 = load i8, i8* %L1, align 1
  %conv16 = sext i8 %9 to i32
  %10 = load i8, i8* %L2, align 1
  %conv17 = sext i8 %10 to i32
  %xor = xor i32 %conv17, %conv16
  %conv18 = trunc i32 %xor to i8
  store i8 %conv18, i8* %L2, align 1
  %11 = load i8, i8* %L2, align 1
  %conv19 = sext i8 %11 to i32
  %12 = load i8, i8* %L1, align 1
  %conv20 = sext i8 %12 to i32
  %xor21 = xor i32 %conv20, %conv19
  %conv22 = trunc i32 %xor21 to i8
  store i8 %conv22, i8* %L1, align 1
  %13 = load i8, i8* %L1, align 1
  %conv23 = sext i8 %13 to i32
  %14 = load i8, i8* %L2, align 1
  %conv24 = sext i8 %14 to i32
  %xor25 = xor i32 %conv24, %conv23
  %conv26 = trunc i32 %xor25 to i8
  store i8 %conv26, i8* %L2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then
  %15 = load i8, i8* %L1, align 1
  %conv27 = sext i8 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.end
  %16 = load i8, i8* %L2, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp eq i32 %conv31, 48
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then30
  %17 = load i8, i8* %L2, align 1
  %conv36 = sext i8 %17 to i32
  %cmp37 = icmp eq i32 %conv36, 45
  br i1 %cmp37, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end35
  %arrayidx40 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx40, align 1
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 45, i8* %arrayidx41, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end35
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %18 = load i8, i8* %L1, align 1
  %conv44 = sext i8 %18 to i32
  %cmp45 = icmp eq i32 %conv44, 43
  br i1 %cmp45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %if.end43
  %19 = load i8, i8* %L2, align 1
  %conv48 = sext i8 %19 to i32
  %cmp49 = icmp eq i32 %conv48, 48
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 43, i8* %arrayidx52, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then47
  %20 = load i8, i8* %L2, align 1
  %conv54 = sext i8 %20 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end53
  %arrayidx58 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx58, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end53
  %21 = load i8, i8* %L2, align 1
  %conv60 = sext i8 %21 to i32
  %cmp61 = icmp eq i32 %conv60, 43
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %if.end59
  %arrayidx64 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 45, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 43, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %if.end59
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end43
  %22 = load i8, i8* %L1, align 1
  %conv68 = sext i8 %22 to i32
  %cmp69 = icmp eq i32 %conv68, 48
  br i1 %cmp69, label %if.then71, label %if.end78

if.then71:                                        ; preds = %if.end67
  %23 = load i8, i8* %L2, align 1
  %conv72 = sext i8 %23 to i32
  %cmp73 = icmp eq i32 %conv72, 48
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then71
  %arrayidx76 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  store i8 48, i8* %arrayidx76, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end67
  %arraydecay79 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arrayidx80 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  call void @add(i8* %arraydecay79, i8* %arrayidx80, i8* %arraydecay81)
  %arraydecay82 = getelementptr inbounds [16 x i8], [16 x i8]* %ob1, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %arraydecay84 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  call void @add(i8* %arraydecay82, i8* %arraydecay83, i8* %arraydecay84)
  %24 = load i8*, i8** %out.addr, align 4
  %arraydecay85 = getelementptr inbounds [16 x i8], [16 x i8]* %ob2, i32 0, i32 0
  %call86 = call i8* @strcpy(i8* %24, i8* %arraydecay85)
  %arrayidx87 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 1
  store i8 0, i8* %arrayidx87, align 1
  %25 = load i8*, i8** %out.addr, align 4
  %arraydecay88 = getelementptr inbounds [3 x i8], [3 x i8]* %d, i32 0, i32 0
  %call89 = call i8* @strcat(i8* %25, i8* %arraydecay88)
  br label %if.end104

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load i8*, i8** %b1.addr, align 4
  %27 = load i8, i8* %26, align 1
  %conv90 = sext i8 %27 to i32
  %cmp91 = icmp ne i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.else95

if.then93:                                        ; preds = %if.else
  %28 = load i8*, i8** %out.addr, align 4
  %29 = load i8*, i8** %b1.addr, align 4
  %call94 = call i8* @strcpy(i8* %28, i8* %29)
  br label %if.end103

if.else95:                                        ; preds = %if.else
  %30 = load i8*, i8** %b2.addr, align 4
  %31 = load i8, i8* %30, align 1
  %conv96 = sext i8 %31 to i32
  %cmp97 = icmp ne i32 %conv96, 0
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else95
  %32 = load i8*, i8** %out.addr, align 4
  %33 = load i8*, i8** %b2.addr, align 4
  %call100 = call i8* @strcpy(i8* %32, i8* %33)
  br label %if.end102

if.else101:                                       ; preds = %if.else95
  %34 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %34, align 1
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then99
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then93
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end78
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i8* @strcat(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @unary_minus(i8* %b, i8* %out) #0 {
entry:
  %b.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  %0 = load i8*, i8** %b.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %b.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 43, i8* %4, align 1
  %5 = load i8*, i8** %b.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %b.addr, align 4
  br label %if.end15

if.else:                                          ; preds = %while.body
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then9, label %if.else12

if.then9:                                         ; preds = %if.else
  %8 = load i8*, i8** %out.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr10, i8** %out.addr, align 4
  store i8 45, i8* %8, align 1
  %9 = load i8*, i8** %b.addr, align 4
  %incdec.ptr11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr11, i8** %b.addr, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  %10 = load i8*, i8** %b.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr13, i8** %b.addr, align 4
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtract(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %buf = alloca [16 x i8], align 16
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %b2.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  call void @unary_minus(i8* %0, i8* %arraydecay)
  %1 = load i8*, i8** %b1.addr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i32 0, i32 0
  %2 = load i8*, i8** %out.addr, align 4
  call void @add(i8* %1, i8* %arraydecay1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mult(i8* %b1, i8* %b2, i8* %out) #0 {
entry:
  %b1.addr = alloca i8*, align 4
  %b2.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %r = alloca [16 x i8], align 16
  %t = alloca [16 x i8], align 16
  %c1 = alloca [16 x i8], align 16
  %c2 = alloca [16 x i8], align 16
  %ptr = alloca i8*, align 4
  store i8* %b1, i8** %b1.addr, align 4
  store i8* %b2, i8** %b2.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = bitcast [16 x i8]* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.mult.r, i32 0, i32 0), i32 16, i1 false)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %1 = load i8*, i8** %b1.addr, align 4
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %1)
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  %2 = load i8*, i8** %b2.addr, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %c2, i32 0, i32 0
  call void @reverse(i8* %arraydecay4)
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %entry
  %3 = load i8*, i8** %ptr, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr, align 4
  %6 = load i8, i8* %5, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 43
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @add(i8* %arraydecay9, i8* %arraydecay10, i8* %arraydecay11)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call14 = call i8* @strcpy(i8* %arraydecay12, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %ptr, align 4
  %8 = load i8, i8* %7, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %if.end
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay19, i8* %arraydecay20, i8* %arraydecay21)
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay22, i8* %arraydecay23)
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %if.end
  %arraydecay26 = getelementptr inbounds [16 x i8], [16 x i8]* %c1, i32 0, i32 0
  %call27 = call i8* @strcat(i8* %arraydecay26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %9 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay28 = getelementptr inbounds [16 x i8], [16 x i8]* %r, i32 0, i32 0
  store i8* %arraydecay28, i8** %ptr, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %while.body33, %while.end
  %10 = load i8*, i8** %ptr, align 4
  %11 = load i8, i8* %10, align 1
  %conv30 = sext i8 %11 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond29
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr34, i8** %ptr, align 4
  br label %while.cond29

while.end35:                                      ; preds = %while.cond29
  %13 = load i8*, i8** %out.addr, align 4
  %14 = load i8*, i8** %ptr, align 4
  %call36 = call i8* @strcpy(i8* %13, i8* %14)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i8*, align 4
  %b = alloca [16 x i8], align 16
  %c = alloca i8*, align 4
  %t = alloca [16 x i8], align 16
  %d = alloca [16 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8** %c, align 4
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  call void @to_bt(i32 -436, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %0 = load i8*, i8** %c, align 4
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  call void @subtract(i8* %arraydecay1, i8* %0, i8* %arraydecay2)
  %1 = load i8*, i8** %a, align 4
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %t, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  call void @mult(i8* %1, i8* %arraydecay3, i8* %arraydecay4)
  %2 = load i8*, i8** %a, align 4
  %3 = load i8*, i8** %a, align 4
  %call = call i32 @from_bt(i8* %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* %2, i32 %call)
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %b, i32 0, i32 0
  %call8 = call i32 @from_bt(i8* %arraydecay7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay6, i32 %call8)
  %4 = load i8*, i8** %c, align 4
  %5 = load i8*, i8** %c, align 4
  %call10 = call i32 @from_bt(i8* %5)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* %4, i32 %call10)
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %d, i32 0, i32 0
  %call14 = call i32 @from_bt(i8* %arraydecay13)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay12, i32 %call14)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @from_bt(i8* %3)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @from_bt(i8* %arraydecay7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call10 = call i32 @from_bt(i8* %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call14 = call i32 @from_bt(i8* %arraydecay13)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
