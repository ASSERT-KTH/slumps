
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for isPrime()

; ModuleID = './Factors_of_a_Mersenne_number.c.bc'
source_filename = "./Factors_of_a_Mersenne_number.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"2^%d - 1 = 0 (mod %d)\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @isPrime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %d = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %0, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 2
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %rem2 = srem i32 %2, 3
  %cmp3 = icmp eq i32 %rem2, 0
  br i1 %cmp3, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp eq i32 %3, 3
  %conv7 = zext i1 %cmp6 to i32
  store i32 %conv7, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end
  store i32 5, i32* %d, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %if.end8
  %4 = load i32, i32* %d, align 4
  %5 = load i32, i32* %d, align 4
  %mul = mul nsw i32 %4, %5
  %6 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %mul, %6
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %d, align 4
  %rem11 = srem i32 %7, %8
  %cmp12 = icmp eq i32 %rem11, 0
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %while.body
  %9 = load i32, i32* %d, align 4
  %add = add nsw i32 %9, 2
  store i32 %add, i32* %d, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %d, align 4
  %rem16 = srem i32 %10, %11
  %cmp17 = icmp eq i32 %rem16, 0
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end15
  store i32 0, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.end15
  %12 = load i32, i32* %d, align 4
  %add21 = add nsw i32 %12, 4
  store i32 %add21, i32* %d, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then19, %if.then14, %if.then5, %if.then
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %d = alloca i32, align 4
  %p = alloca i32, align 4
  %r = alloca i32, align 4
  %q = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 929, i32* %q, align 4
  %0 = load i32, i32* %q, align 4
  %call = call i32 @isPrime(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %q, align 4
  store i32 %1, i32* %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %r, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %r, align 4
  %shl = shl i32 %3, 1
  store i32 %shl, i32* %r, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %q, align 4
  %mul = mul nsw i32 2, %4
  %add = add nsw i32 %mul, 1
  store i32 %add, i32* %d, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %while.end
  %5 = load i32, i32* %r, align 4
  store i32 %5, i32* %p, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %6 = load i32, i32* %p, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %conv = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %conv2 = sext i32 %8 to i64
  %mul3 = mul nsw i64 %conv, %conv2
  %9 = load i32, i32* %d, align 4
  %conv4 = sext i32 %9 to i64
  %rem = srem i64 %mul3, %conv4
  %conv5 = trunc i64 %rem to i32
  store i32 %conv5, i32* %i, align 4
  %10 = load i32, i32* %p, align 4
  %cmp6 = icmp slt i32 %10, 0
  br i1 %cmp6, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %mul9 = mul nsw i32 %11, 2
  store i32 %mul9, i32* %i, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.body
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %d, align 4
  %cmp11 = icmp sgt i32 %12, %13
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end10
  %14 = load i32, i32* %d, align 4
  %15 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, %14
  store i32 %sub, i32* %i, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end10
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %16 = load i32, i32* %p, align 4
  %shl15 = shl i32 %16, 1
  store i32 %shl15, i32* %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %i, align 4
  %cmp16 = icmp ne i32 %17, 1
  br i1 %cmp16, label %if.then18, label %if.else

if.then18:                                        ; preds = %for.end
  %18 = load i32, i32* %q, align 4
  %mul19 = mul nsw i32 2, %18
  %19 = load i32, i32* %d, align 4
  %add20 = add nsw i32 %19, %mul19
  store i32 %add20, i32* %d, align 4
  br label %if.end21

if.else:                                          ; preds = %for.end
  br label %do.end

if.end21:                                         ; preds = %if.then18
  br label %do.cond

do.cond:                                          ; preds = %if.end21
  br i1 true, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.else
  %20 = load i32, i32* %q, align 4
  %21 = load i32, i32* %d, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %20, i32 %21)
  br label %return

return:                                           ; preds = %do.end, %if.then
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %1, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp1 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem2 = srem i32 %2, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %rem2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %3, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv7 = zext i1 %cmp6 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sle i32 %mul, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem11 = srem i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %rem11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %9, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem16 = srem i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp17 = icmp eq i32 %rem16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add21 = add nsw i32 %12, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 2:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 3:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for isPrime()

; entering Souper's runOnFunction() for main()

; ModuleID = './Factors_of_a_Mersenne_number.c.bc'
source_filename = "./Factors_of_a_Mersenne_number.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"2^%d - 1 = 0 (mod %d)\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @isPrime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %d = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %0, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 2
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %rem2 = srem i32 %2, 3
  %cmp3 = icmp eq i32 %rem2, 0
  br i1 %cmp3, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp eq i32 %3, 3
  %conv7 = zext i1 %cmp6 to i32
  store i32 %conv7, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end
  store i32 5, i32* %d, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %if.end8
  %4 = load i32, i32* %d, align 4
  %5 = load i32, i32* %d, align 4
  %mul = mul nsw i32 %4, %5
  %6 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %mul, %6
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %d, align 4
  %rem11 = srem i32 %7, %8
  %cmp12 = icmp eq i32 %rem11, 0
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %while.body
  %9 = load i32, i32* %d, align 4
  %add = add nsw i32 %9, 2
  store i32 %add, i32* %d, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %d, align 4
  %rem16 = srem i32 %10, %11
  %cmp17 = icmp eq i32 %rem16, 0
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end15
  store i32 0, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.end15
  %12 = load i32, i32* %d, align 4
  %add21 = add nsw i32 %12, 4
  store i32 %add21, i32* %d, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then19, %if.then14, %if.then5, %if.then
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %d = alloca i32, align 4
  %p = alloca i32, align 4
  %r = alloca i32, align 4
  %q = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 929, i32* %q, align 4
  %0 = load i32, i32* %q, align 4
  %call = call i32 @isPrime(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %q, align 4
  store i32 %1, i32* %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %r, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %r, align 4
  %shl = shl i32 %3, 1
  store i32 %shl, i32* %r, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %q, align 4
  %mul = mul nsw i32 2, %4
  %add = add nsw i32 %mul, 1
  store i32 %add, i32* %d, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %while.end
  %5 = load i32, i32* %r, align 4
  store i32 %5, i32* %p, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %6 = load i32, i32* %p, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %conv = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %conv2 = sext i32 %8 to i64
  %mul3 = mul nsw i64 %conv, %conv2
  %9 = load i32, i32* %d, align 4
  %conv4 = sext i32 %9 to i64
  %rem = srem i64 %mul3, %conv4
  %conv5 = trunc i64 %rem to i32
  store i32 %conv5, i32* %i, align 4
  %10 = load i32, i32* %p, align 4
  %cmp6 = icmp slt i32 %10, 0
  br i1 %cmp6, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %mul9 = mul nsw i32 %11, 2
  store i32 %mul9, i32* %i, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.body
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %d, align 4
  %cmp11 = icmp sgt i32 %12, %13
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end10
  %14 = load i32, i32* %d, align 4
  %15 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, %14
  store i32 %sub, i32* %i, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end10
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %16 = load i32, i32* %p, align 4
  %shl15 = shl i32 %16, 1
  store i32 %shl15, i32* %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %i, align 4
  %cmp16 = icmp ne i32 %17, 1
  br i1 %cmp16, label %if.then18, label %if.else

if.then18:                                        ; preds = %for.end
  %18 = load i32, i32* %q, align 4
  %mul19 = mul nsw i32 2, %18
  %19 = load i32, i32* %d, align 4
  %add20 = add nsw i32 %19, %mul19
  store i32 %add20, i32* %d, align 4
  br label %if.end21

if.else:                                          ; preds = %for.end
  br label %do.end

if.end21:                                         ; preds = %if.then18
  br label %do.cond

do.cond:                                          ; preds = %if.end21
  br i1 true, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.else
  %20 = load i32, i32* %q, align 4
  %21 = load i32, i32* %d, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %20, i32 %21)
  br label %return

return:                                           ; preds = %do.end, %if.then
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @isPrime(i32 %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i32 %7 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i32 %8 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %mul3 = mul nsw i64 %conv, %conv2
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i32 %9 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i64 %mul3, %conv4
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5
%7:i64 = srem %4, %6
infer %7 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv5 = trunc i64 %rem to i32
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5
%7:i64 = srem %4, %6
%8:i32 = trunc %7
infer %8

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul9 = mul nsw i32 %11, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp sgt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %15, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl15 = shl i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp ne i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul19 = mul nsw i32 2, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add20 = add nsw i32 %19, %mul19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5
%7:i64 = srem %4, %6
infer %7 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
%5:i32 = var
%6:i64 = sext %5
%7:i64 = srem %4, %6
%8:i32 = trunc %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32770
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
