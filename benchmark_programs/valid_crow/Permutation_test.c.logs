
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for pick()

; ModuleID = './Permutation_test.c.bc'
source_filename = "./Permutation_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@data = hidden global [19 x i32] [i32 85, i32 88, i32 75, i32 66, i32 25, i32 29, i32 83, i32 39, i32 97, i32 68, i32 41, i32 10, i32 49, i32 16, i32 65, i32 32, i32 92, i32 28, i32 98], align 16
@.str = private unnamed_addr constant [29 x i8] c"<= : %f%%  %d\0A > : %f%%  %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @pick(i32 %at, i32 %remain, i32 %accu, i32 %treat) #0 {
entry:
  %retval = alloca i32, align 4
  %at.addr = alloca i32, align 4
  %remain.addr = alloca i32, align 4
  %accu.addr = alloca i32, align 4
  %treat.addr = alloca i32, align 4
  store i32 %at, i32* %at.addr, align 4
  store i32 %remain, i32* %remain.addr, align 4
  store i32 %accu, i32* %accu.addr, align 4
  store i32 %treat, i32* %treat.addr, align 4
  %0 = load i32, i32* %remain.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %accu.addr, align 4
  %2 = load i32, i32* %treat.addr, align 4
  %cmp = icmp sgt i32 %1, %2
  %3 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %at.addr, align 4
  %sub = sub nsw i32 %4, 1
  %5 = load i32, i32* %remain.addr, align 4
  %sub1 = sub nsw i32 %5, 1
  %6 = load i32, i32* %accu.addr, align 4
  %7 = load i32, i32* %at.addr, align 4
  %sub2 = sub nsw i32 %7, 1
  %arrayidx = getelementptr inbounds [19 x i32], [19 x i32]* @data, i32 0, i32 %sub2
  %8 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %6, %8
  %9 = load i32, i32* %treat.addr, align 4
  %call = call i32 @pick(i32 %sub, i32 %sub1, i32 %add, i32 %9)
  %10 = load i32, i32* %at.addr, align 4
  %11 = load i32, i32* %remain.addr, align 4
  %cmp3 = icmp sgt i32 %10, %11
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %12 = load i32, i32* %at.addr, align 4
  %sub4 = sub nsw i32 %12, 1
  %13 = load i32, i32* %remain.addr, align 4
  %14 = load i32, i32* %accu.addr, align 4
  %15 = load i32, i32* %treat.addr, align 4
  %call5 = call i32 @pick(i32 %sub4, i32 %13, i32 %14, i32 %15)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond6 = phi i32 [ %call5, %cond.true ], [ 0, %cond.false ]
  %add7 = add nsw i32 %call, %cond6
  store i32 %add7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %treat = alloca i32, align 4
  %i = alloca i32, align 4
  %le = alloca i32, align 4
  %gt = alloca i32, align 4
  %total = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %treat, align 4
  store double 1.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [19 x i32], [19 x i32]* @data, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %3 = load i32, i32* %treat, align 4
  %add = add nsw i32 %3, %2
  store i32 %add, i32* %treat, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 19, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc4, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sgt i32 %5, 10
  br i1 %cmp2, label %for.body3, label %for.end5

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %i, align 4
  %conv = sitofp i32 %6 to double
  %7 = load double, double* %total, align 8
  %mul = fmul double %7, %conv
  store double %mul, double* %total, align 8
  br label %for.inc4

for.inc4:                                         ; preds = %for.body3
  %8 = load i32, i32* %i, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond1

for.end5:                                         ; preds = %for.cond1
  store i32 9, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc11, %for.end5
  %9 = load i32, i32* %i, align 4
  %cmp7 = icmp sgt i32 %9, 0
  br i1 %cmp7, label %for.body9, label %for.end13

for.body9:                                        ; preds = %for.cond6
  %10 = load i32, i32* %i, align 4
  %conv10 = sitofp i32 %10 to double
  %11 = load double, double* %total, align 8
  %div = fdiv double %11, %conv10
  store double %div, double* %total, align 8
  br label %for.inc11

for.inc11:                                        ; preds = %for.body9
  %12 = load i32, i32* %i, align 4
  %dec12 = add nsw i32 %12, -1
  store i32 %dec12, i32* %i, align 4
  br label %for.cond6

for.end13:                                        ; preds = %for.cond6
  %13 = load i32, i32* %treat, align 4
  %call = call i32 @pick(i32 19, i32 9, i32 0, i32 %13)
  store i32 %call, i32* %gt, align 4
  %14 = load double, double* %total, align 8
  %15 = load i32, i32* %gt, align 4
  %conv14 = sitofp i32 %15 to double
  %sub = fsub double %14, %conv14
  %conv15 = fptosi double %sub to i32
  store i32 %conv15, i32* %le, align 4
  %16 = load i32, i32* %le, align 4
  %mul16 = mul nsw i32 100, %16
  %conv17 = sitofp i32 %mul16 to double
  %17 = load double, double* %total, align 8
  %div18 = fdiv double %conv17, %17
  %18 = load i32, i32* %le, align 4
  %19 = load i32, i32* %gt, align 4
  %mul19 = mul nsw i32 100, %19
  %conv20 = sitofp i32 %mul19 to double
  %20 = load double, double* %total, align 8
  %div21 = fdiv double %conv20, %20
  %21 = load i32, i32* %gt, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), double %div18, i32 %18, double %div21, i32 %21)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %remain.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %accu.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %treat.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp, i32 1, i32 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 0:i32
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %at.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %remain.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %accu.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %at.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub2 = sub nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %treat.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @pick(i32 %sub, i32 %sub1, i32 %add, i32 %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %at.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %remain.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %at.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %remain.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %accu.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %treat.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call5 = call i32 @pick(i32 %sub4, i32 %13, i32 %14, i32 %15)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond6 = phi i32 [ %call5, %cond.true ], [ 0, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 0:i32
infer %2

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %call, %cond6
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 0:i32
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 0:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 0:i32
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 0:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pick()

; entering Souper's runOnFunction() for main()

; ModuleID = './Permutation_test.c.bc'
source_filename = "./Permutation_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@data = hidden global [19 x i32] [i32 85, i32 88, i32 75, i32 66, i32 25, i32 29, i32 83, i32 39, i32 97, i32 68, i32 41, i32 10, i32 49, i32 16, i32 65, i32 32, i32 92, i32 28, i32 98], align 16
@.str = private unnamed_addr constant [29 x i8] c"<= : %f%%  %d\0A > : %f%%  %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @pick(i32 %at, i32 %remain, i32 %accu, i32 %treat) #0 {
entry:
  %retval = alloca i32, align 4
  %at.addr = alloca i32, align 4
  %remain.addr = alloca i32, align 4
  %accu.addr = alloca i32, align 4
  %treat.addr = alloca i32, align 4
  store i32 %at, i32* %at.addr, align 4
  store i32 %remain, i32* %remain.addr, align 4
  store i32 %accu, i32* %accu.addr, align 4
  store i32 %treat, i32* %treat.addr, align 4
  %0 = load i32, i32* %remain.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %accu.addr, align 4
  %2 = load i32, i32* %treat.addr, align 4
  %cmp = icmp sgt i32 %1, %2
  %3 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %at.addr, align 4
  %sub = sub nsw i32 %4, 1
  %5 = load i32, i32* %remain.addr, align 4
  %sub1 = sub nsw i32 %5, 1
  %6 = load i32, i32* %accu.addr, align 4
  %7 = load i32, i32* %at.addr, align 4
  %sub2 = sub nsw i32 %7, 1
  %arrayidx = getelementptr inbounds [19 x i32], [19 x i32]* @data, i32 0, i32 %sub2
  %8 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %6, %8
  %9 = load i32, i32* %treat.addr, align 4
  %call = call i32 @pick(i32 %sub, i32 %sub1, i32 %add, i32 %9)
  %10 = load i32, i32* %at.addr, align 4
  %11 = load i32, i32* %remain.addr, align 4
  %cmp3 = icmp sgt i32 %10, %11
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %12 = load i32, i32* %at.addr, align 4
  %sub4 = sub nsw i32 %12, 1
  %13 = load i32, i32* %remain.addr, align 4
  %14 = load i32, i32* %accu.addr, align 4
  %15 = load i32, i32* %treat.addr, align 4
  %call5 = call i32 @pick(i32 %sub4, i32 %13, i32 %14, i32 %15)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond6 = phi i32 [ %call5, %cond.true ], [ 0, %cond.false ]
  %add7 = add nsw i32 %call, %cond6
  store i32 %add7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %treat = alloca i32, align 4
  %i = alloca i32, align 4
  %le = alloca i32, align 4
  %gt = alloca i32, align 4
  %total = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %treat, align 4
  store double 1.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [19 x i32], [19 x i32]* @data, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %3 = load i32, i32* %treat, align 4
  %add = add nsw i32 %3, %2
  store i32 %add, i32* %treat, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 19, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc4, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sgt i32 %5, 10
  br i1 %cmp2, label %for.body3, label %for.end5

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %i, align 4
  %conv = sitofp i32 %6 to double
  %7 = load double, double* %total, align 8
  %mul = fmul double %7, %conv
  store double %mul, double* %total, align 8
  br label %for.inc4

for.inc4:                                         ; preds = %for.body3
  %8 = load i32, i32* %i, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond1

for.end5:                                         ; preds = %for.cond1
  store i32 9, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc11, %for.end5
  %9 = load i32, i32* %i, align 4
  %cmp7 = icmp sgt i32 %9, 0
  br i1 %cmp7, label %for.body9, label %for.end13

for.body9:                                        ; preds = %for.cond6
  %10 = load i32, i32* %i, align 4
  %conv10 = sitofp i32 %10 to double
  %11 = load double, double* %total, align 8
  %div = fdiv double %11, %conv10
  store double %div, double* %total, align 8
  br label %for.inc11

for.inc11:                                        ; preds = %for.body9
  %12 = load i32, i32* %i, align 4
  %dec12 = add nsw i32 %12, -1
  store i32 %dec12, i32* %i, align 4
  br label %for.cond6

for.end13:                                        ; preds = %for.cond6
  %13 = load i32, i32* %treat, align 4
  %call = call i32 @pick(i32 19, i32 9, i32 0, i32 %13)
  store i32 %call, i32* %gt, align 4
  %14 = load double, double* %total, align 8
  %15 = load i32, i32* %gt, align 4
  %conv14 = sitofp i32 %15 to double
  %sub = fsub double %14, %conv14
  %conv15 = fptosi double %sub to i32
  store i32 %conv15, i32* %le, align 4
  %16 = load i32, i32* %le, align 4
  %mul16 = mul nsw i32 100, %16
  %conv17 = sitofp i32 %mul16 to double
  %17 = load double, double* %total, align 8
  %div18 = fdiv double %conv17, %17
  %18 = load i32, i32* %le, align 4
  %19 = load i32, i32* %gt, align 4
  %mul19 = mul nsw i32 100, %19
  %conv20 = sitofp i32 %mul19 to double
  %20 = load double, double* %total, align 8
  %div21 = fdiv double %conv20, %20
  %21 = load i32, i32* %gt, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), double %div18, i32 %18, double %div21, i32 %21)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %treat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %5, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %8, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sgt i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec12 = add nsw i32 %12, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %treat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @pick(i32 19, i32 9, i32 0, i32 %13)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %gt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = fptosi double %sub to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %le, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul16 = mul nsw i32 100, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 100:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %le, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %gt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul19 = mul nsw i32 100, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 100:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %gt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 100:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1074790400
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
