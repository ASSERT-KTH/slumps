
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ObjClone()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ObjClone()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:obj_copy()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sclass* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %csize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne %struct.object* %9, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:obj_copy()

; entering Souper's runOnFunction() for ObjSpeak()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ObjSpeak()

; entering Souper's runOnFunction() for ObjDestroy()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.object* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for ObjDestroy()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:obj_del()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne void (%struct.object*)* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.sclass* %6, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:obj_del()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:baseClone()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:baseClone()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:baseSpeak()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:baseSpeak()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:dogClone()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:dogClone()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:dogSpeak()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:dogSpeak()

; entering Souper's runOnFunction() for NewDog()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %csize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sDog* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for NewDog()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:ferretClone()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:ferretClone()

; entering Souper's runOnFunction() for ./Polymorphic_copy.c.bc:ferretSpeak()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %age, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for ./Polymorphic_copy.c.bc:ferretSpeak()

; entering Souper's runOnFunction() for NewFerret()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %csize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sFerret* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %age.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for NewFerret()

; entering Souper's runOnFunction() for main()

; ModuleID = './Polymorphic_copy.c.bc'
source_filename = "./Polymorphic_copy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sclass = type { i32, i8*, %struct.sclass*, void (%struct.object*, %struct.object*)*, i8* (%struct.object*)*, void (%struct.object*)* }
%struct.object = type { %struct.sclass* }
%struct.sDog = type { %struct.sclass*, %struct.sDogPart }
%struct.sDogPart = type { double, [32 x i8], [24 x i8] }
%struct.sFerret = type { %struct.sclass*, %struct.sFerretPart }
%struct.sFerretPart = type { [32 x i8], [24 x i8], i32 }

@.str = private unnamed_addr constant [8 x i8] c"BaseObj\00", align 1
@boc = hidden global %struct.sclass { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.sclass* null, void (%struct.object*, %struct.object*)* @baseClone, i8* (%struct.object*)* @baseSpeak, void (%struct.object*)* null }, align 4
@BaseObjClass = hidden global %struct.sclass* @boc, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@dogc = hidden global %struct.sclass { i32 72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @dogClone, i8* (%struct.object*)* @dogSpeak, void (%struct.object*)* null }, align 4
@DogClass = hidden global %struct.sclass* @dogc, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"Ferret\00", align 1
@ferretc = hidden global %struct.sclass { i32 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sclass* @boc, void (%struct.object*, %struct.object*)* @ferretClone, i8* (%struct.object*)* @ferretSpeak, void (%struct.object*)* null }, align 4
@FerretClass = hidden global %struct.sclass* @ferretc, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"Kara\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"grey\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Bruce\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Ok created things\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Karol says %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Kara says %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"Donald\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Don says %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Bruce says %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Hello, I'm base object\00", align 1
@dogSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.14 = private unnamed_addr constant [39 x i8] c"woof! woof! My name is %s. I'm a %s %s\00", align 1
@ferretSpeak.response = internal global [90 x i8] zeroinitializer, align 16
@.str.15 = private unnamed_addr constant [44 x i8] c"My name is %s. I'm a %d mo. old %s wiley %s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @ObjClone(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %1, i32 0, i32 0
  %2 = load %struct.sclass*, %struct.sclass** %class, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %0, %struct.sclass* %2)
  ret %struct.object* %call
}

; Function Attrs: noinline nounwind optnone
define internal %struct.object* @obj_copy(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  %clo = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 2
  %1 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool = icmp ne %struct.sclass* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %3 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent1 = getelementptr inbounds %struct.sclass, %struct.sclass* %3, i32 0, i32 2
  %4 = load %struct.sclass*, %struct.sclass** %parent1, align 4
  %call = call %struct.object* @obj_copy(%struct.object* %2, %struct.sclass* %4)
  store %struct.object* %call, %struct.object** %clo, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %5, i32 0, i32 0
  %6 = load %struct.sclass*, %struct.sclass** %class, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %6, i32 0, i32 0
  %7 = load i32, i32* %csize, align 4
  %call2 = call noalias i8* @malloc(i32 %7)
  %8 = bitcast i8* %call2 to %struct.object*
  store %struct.object* %8, %struct.object** %clo, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.object*, %struct.object** %clo, align 4
  %tobool3 = icmp ne %struct.object* %9, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %clone = getelementptr inbounds %struct.sclass, %struct.sclass* %10, i32 0, i32 3
  %11 = load void (%struct.object*, %struct.object*)*, void (%struct.object*, %struct.object*)** %clone, align 4
  %12 = load %struct.object*, %struct.object** %s.addr, align 4
  %13 = load %struct.object*, %struct.object** %clo, align 4
  call void %11(%struct.object* %12, %struct.object* %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.object*, %struct.object** %clo, align 4
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @ObjSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %speak = getelementptr inbounds %struct.sclass, %struct.sclass* %1, i32 0, i32 4
  %2 = load i8* (%struct.object*)*, i8* (%struct.object*)** %speak, align 4
  %3 = load %struct.object*, %struct.object** %s.addr, align 4
  %call = call i8* %2(%struct.object* %3)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @ObjDestroy(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %tobool = icmp ne %struct.object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.object*, %struct.object** %s.addr, align 4
  %2 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  %3 = load %struct.sclass*, %struct.sclass** %class, align 4
  call void @obj_del(%struct.object* %1, %struct.sclass* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @obj_del(%struct.object* %s, %struct.sclass* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.sclass*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.sclass* %c, %struct.sclass** %c.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 5
  %1 = load void (%struct.object*)*, void (%struct.object*)** %del, align 4
  %tobool = icmp ne void (%struct.object*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %del1 = getelementptr inbounds %struct.sclass, %struct.sclass* %2, i32 0, i32 5
  %3 = load void (%struct.object*)*, void (%struct.object*)** %del1, align 4
  %4 = load %struct.object*, %struct.object** %s.addr, align 4
  call void %3(%struct.object* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 2
  %6 = load %struct.sclass*, %struct.sclass** %parent, align 4
  %tobool2 = icmp ne %struct.sclass* %6, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %7 = load %struct.object*, %struct.object** %s.addr, align 4
  %8 = load %struct.sclass*, %struct.sclass** %c.addr, align 4
  %parent4 = getelementptr inbounds %struct.sclass, %struct.sclass* %8, i32 0, i32 2
  %9 = load %struct.sclass*, %struct.sclass** %parent4, align 4
  call void @obj_del(%struct.object* %7, %struct.sclass* %9)
  br label %if.end5

if.else:                                          ; preds = %if.end
  %10 = load %struct.object*, %struct.object** %s.addr, align 4
  %11 = bitcast %struct.object* %10 to i8*
  call void @free(i8* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @baseClone(%struct.object* %s, %struct.object* %clone) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %clone.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %clone, %struct.object** %clone.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %class = getelementptr inbounds %struct.object, %struct.object* %0, i32 0, i32 0
  %1 = load %struct.sclass*, %struct.sclass** %class, align 4
  %2 = load %struct.object*, %struct.object** %clone.addr, align 4
  %class1 = getelementptr inbounds %struct.object, %struct.object* %2, i32 0, i32 0
  store %struct.sclass* %1, %struct.sclass** %class1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @baseSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define internal void @dogClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sDog*, align 4
  %clone = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sDog*
  store %struct.sDog* %3, %struct.sDog** %clone, align 4
  %4 = load %struct.sDog*, %struct.sDog** %clone, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  %5 = load %struct.sDog*, %struct.sDog** %src, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %5, i32 0, i32 1
  %6 = bitcast %struct.sDogPart* %dog to i8*
  %7 = bitcast %struct.sDogPart* %dog1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 64, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @dogSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %d = alloca %struct.sDog*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sDog*
  store %struct.sDog* %1, %struct.sDog** %d, align 4
  %2 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sDog*, %struct.sDog** %d, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %3, i32 0, i32 1
  %color = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %4 = load %struct.sDog*, %struct.sDog** %d, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 0
  %5 = load %struct.sclass*, %struct.sclass** %class, align 8
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %5, i32 0, i32 1
  %6 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i32 0, i32 0), i8* %arraydecay, i8* %arraydecay2, i8* %6)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @dogSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewDog(i8* %name, i8* %color, double %weight) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %weight.addr = alloca double, align 8
  %dog = alloca %struct.sDog*, align 4
  %dogp = alloca %struct.sDogPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store double %weight, double* %weight.addr, align 8
  %0 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sDog*
  store %struct.sDog* %2, %struct.sDog** %dog, align 4
  %3 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %tobool = icmp ne %struct.sDog* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %dog1 = getelementptr inbounds %struct.sDog, %struct.sDog* %4, i32 0, i32 1
  store %struct.sDogPart* %dog1, %struct.sDogPart** %dogp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @DogClass, align 4
  %6 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %class = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 8
  %7 = load double, double* %weight.addr, align 8
  %8 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %weight2 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %8, i32 0, i32 0
  store double %7, double* %weight2, align 8
  %9 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %name3 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %9, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name3, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 4
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %10, i32 23)
  %11 = load %struct.sDogPart*, %struct.sDogPart** %dogp, align 4
  %color5 = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %11, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %color5, i32 0, i32 0
  %12 = load i8*, i8** %color.addr, align 4
  %call7 = call i8* @strncpy(i8* %arraydecay6, i8* %12, i32 31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sDog*, %struct.sDog** %dog, align 4
  %14 = bitcast %struct.sDog* %13 to %struct.object*
  ret %struct.object* %14
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define internal void @ferretClone(%struct.object* %s, %struct.object* %c) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %c.addr = alloca %struct.object*, align 4
  %src = alloca %struct.sFerret*, align 4
  %clone = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  store %struct.object* %c, %struct.object** %c.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %src, align 4
  %2 = load %struct.object*, %struct.object** %c.addr, align 4
  %3 = bitcast %struct.object* %2 to %struct.sFerret*
  store %struct.sFerret* %3, %struct.sFerret** %clone, align 4
  %4 = load %struct.sFerret*, %struct.sFerret** %clone, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  %5 = load %struct.sFerret*, %struct.sFerret** %src, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %6 = bitcast %struct.sFerretPart* %ferret to i8*
  %7 = bitcast %struct.sFerretPart* %ferret1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 60, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i8* @ferretSpeak(%struct.object* %s) #0 {
entry:
  %s.addr = alloca %struct.object*, align 4
  %f = alloca %struct.sFerret*, align 4
  store %struct.object* %s, %struct.object** %s.addr, align 4
  %0 = load %struct.object*, %struct.object** %s.addr, align 4
  %1 = bitcast %struct.object* %0 to %struct.sFerret*
  store %struct.sFerret* %1, %struct.sFerret** %f, align 4
  %2 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret = getelementptr inbounds %struct.sFerret, %struct.sFerret* %2, i32 0, i32 1
  %name = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %3 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %3, i32 0, i32 1
  %age = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret1, i32 0, i32 2
  %4 = load i32, i32* %age, align 4
  %5 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %ferret2 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %5, i32 0, i32 1
  %color = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %ferret2, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %color, i32 0, i32 0
  %6 = load %struct.sFerret*, %struct.sFerret** %f, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  %7 = load %struct.sclass*, %struct.sclass** %class, align 4
  %cname = getelementptr inbounds %struct.sclass, %struct.sclass* %7, i32 0, i32 1
  %8 = load i8*, i8** %cname, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i32 0, i32 0), i8* %arraydecay, i32 %4, i8* %arraydecay3, i8* %8)
  ret i8* getelementptr inbounds ([90 x i8], [90 x i8]* @ferretSpeak.response, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.object* @NewFerret(i8* %name, i8* %color, i32 %age) #0 {
entry:
  %name.addr = alloca i8*, align 4
  %color.addr = alloca i8*, align 4
  %age.addr = alloca i32, align 4
  %ferret = alloca %struct.sFerret*, align 4
  %ferretp = alloca %struct.sFerretPart*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %color, i8** %color.addr, align 4
  store i32 %age, i32* %age.addr, align 4
  %0 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %csize = getelementptr inbounds %struct.sclass, %struct.sclass* %0, i32 0, i32 0
  %1 = load i32, i32* %csize, align 4
  %call = call noalias i8* @malloc(i32 %1)
  %2 = bitcast i8* %call to %struct.sFerret*
  store %struct.sFerret* %2, %struct.sFerret** %ferret, align 4
  %3 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %tobool = icmp ne %struct.sFerret* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %ferret1 = getelementptr inbounds %struct.sFerret, %struct.sFerret* %4, i32 0, i32 1
  store %struct.sFerretPart* %ferret1, %struct.sFerretPart** %ferretp, align 4
  %5 = load %struct.sclass*, %struct.sclass** @FerretClass, align 4
  %6 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %class = getelementptr inbounds %struct.sFerret, %struct.sFerret* %6, i32 0, i32 0
  store %struct.sclass* %5, %struct.sclass** %class, align 4
  %7 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %name2 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %7, i32 0, i32 1
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name2, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 4
  %call3 = call i8* @strncpy(i8* %arraydecay, i8* %8, i32 23)
  %9 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %color4 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %9, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %color4, i32 0, i32 0
  %10 = load i8*, i8** %color.addr, align 4
  %call6 = call i8* @strncpy(i8* %arraydecay5, i8* %10, i32 31)
  %11 = load i32, i32* %age.addr, align 4
  %12 = load %struct.sFerretPart*, %struct.sFerretPart** %ferretp, align 4
  %age7 = getelementptr inbounds %struct.sFerretPart, %struct.sFerretPart* %12, i32 0, i32 2
  store i32 %11, i32* %age7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.sFerret*, %struct.sFerret** %ferret, align 4
  %14 = bitcast %struct.sFerret* %13 to %struct.object*
  ret %struct.object* %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %o1 = alloca %struct.object*, align 4
  %kara = alloca %struct.object*, align 4
  %bruce = alloca %struct.object*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.object* @NewFerret(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 15)
  store %struct.object* %call, %struct.object** %kara, align 4
  %call1 = call %struct.object* @NewDog(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), double 8.500000e+01)
  store %struct.object* %call1, %struct.object** %bruce, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  %0 = load %struct.object*, %struct.object** %kara, align 4
  %call3 = call %struct.object* @ObjClone(%struct.object* %0)
  store %struct.object* %call3, %struct.object** %o1, align 4
  %1 = load %struct.object*, %struct.object** %o1, align 4
  %call4 = call i8* @ObjSpeak(%struct.object* %1)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* %call4)
  %2 = load %struct.object*, %struct.object** %kara, align 4
  %call6 = call i8* @ObjSpeak(%struct.object* %2)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* %call6)
  %3 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %3)
  %4 = load %struct.object*, %struct.object** %bruce, align 4
  %call8 = call %struct.object* @ObjClone(%struct.object* %4)
  store %struct.object* %call8, %struct.object** %o1, align 4
  %5 = load %struct.object*, %struct.object** %o1, align 4
  %6 = bitcast %struct.object* %5 to %struct.sDog*
  %dog = getelementptr inbounds %struct.sDog, %struct.sDog* %6, i32 0, i32 1
  %name = getelementptr inbounds %struct.sDogPart, %struct.sDogPart* %dog, i32 0, i32 2
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i32 0, i32 0
  %call9 = call i8* @strncpy(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 23)
  %7 = load %struct.object*, %struct.object** %o1, align 4
  %call10 = call i8* @ObjSpeak(%struct.object* %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* %call10)
  %8 = load %struct.object*, %struct.object** %bruce, align 4
  %call12 = call i8* @ObjSpeak(%struct.object* %8)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call12)
  %9 = load %struct.object*, %struct.object** %o1, align 4
  call void @ObjDestroy(%struct.object* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
