
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for _fft()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 %11, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp = fcmp uno double %mul_r, %mul_r
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %23, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %div32 = sdiv i32 %add31, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = sdiv %2, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul34 = mul nsw i32 2, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add35 = add nsw i32 %30, %mul34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = sdiv %2, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for _fft()

; entering Souper's runOnFunction() for fft()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for fft()

; entering Souper's runOnFunction() for pad_two()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %6, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pad_two()

; entering Souper's runOnFunction() for deconv()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %lg.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %lf.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = fcmp olt double %call9, 1.000000e-10
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %lf.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %lg.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %row_len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub nsw i32 %sub, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp18 = icmp sgt i32 %24, %sub17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
%5:i32 = var
%6:i1 = slt %4, %5
infer %6

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %add, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = srem %2, %3
infer %4

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 0, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %33, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483632
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
%5:i32 = var
%6:i1 = slt %4, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = srem %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for deconv()

; entering Souper's runOnFunction() for unpack2()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %to_len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = mul nsw i32 %10, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %to_len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul5 = mul nsw i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul5, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for unpack2()

; entering Souper's runOnFunction() for pack2()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %to_len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %from_len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %to_len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = mul nsw i32 %12, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc7 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for pack2()

; entering Souper's runOnFunction() for deconv2()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %row_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %row_f.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %col_f.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %row_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %row_f.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %sub, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i32 = mulnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %row_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %row_f.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul nsw i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %row_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %row_f.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %sub4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %col_g.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %col_f.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %sub6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2128609279
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i32 = mulnsw %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for deconv2()

; entering Souper's runOnFunction() for unpack3()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %to_y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %to_z.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul nsw i32 %mul, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %z.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %z.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = mul nuw i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnuw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = mul nsw i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnuw %1, %2
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = mul nsw i32 %17, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %to_y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul10 = mul nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul10, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %to_z.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul11 = mul nsw i32 %add, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = mulnsw %2, %3
%5:i32 = addnsw %1, %4
%6:i32 = mulnsw %0, %5
infer %6

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %mul11, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = mulnsw %3, %4
%6:i32 = addnsw %2, %5
%7:i32 = mulnsw %1, %6
%8:i32 = addnsw %0, %7
infer %8

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnuw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2098929800
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnuw %1, %2
%4:i32 = mulnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = mulnsw %2, %3
%5:i32 = addnsw %1, %4
%6:i32 = mulnsw %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = mulnsw %3, %4
%6:i32 = addnsw %2, %5
%7:i32 = mulnsw %1, %6
%8:i32 = addnsw %0, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for unpack3()

; entering Souper's runOnFunction() for pack3()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %to_y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %to_z.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %z.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %add, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = mulnsw %2, %3
%5:i32 = addnsw %1, %4
%6:i32 = mulnsw %0, %5
infer %6

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add8 = add nsw i32 %mul7, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = mulnsw %3, %4
%6:i32 = addnsw %2, %5
%7:i32 = mulnsw %1, %6
%8:i32 = addnsw %0, %7
infer %8

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %to_y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %to_z.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = mul nuw i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnuw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = mul nsw i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnuw %1, %2
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = mul nsw i32 %20, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for pack3()

; entering Souper's runOnFunction() for deconv3()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %gx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %fx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %fy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %fz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %gx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %fx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %sub, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i32 = mulnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 %mul, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = subnsw %2, %3
%5:i32 = addnsw 1:i32, %4
%6:i32 = mulnsw %1, %5
%7:i32 = mulnsw %0, %6
infer %7

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %gx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul nsw i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul nsw i32 %mul3, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %fx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul5 = mul nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul6 = mul nsw i32 %mul5, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %gx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %fx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %sub8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %gy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %fy.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub10 = sub nsw i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %sub10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %gz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %fz.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub nsw i32 %33, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add13 = add nsw i32 %sub12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = subnsw %2, %3
%5:i32 = addnsw 1:i32, %4
%6:i32 = mulnsw %1, %5
%7:i32 = mulnsw %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for deconv3()

; entering Souper's runOnFunction() for main()

; ModuleID = './Deconvolution-2D+.c.bc'
source_filename = "./Deconvolution-2D+.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@__const.main.h = private unnamed_addr constant [2 x [3 x [4 x double]]] [[3 x [4 x double]] [[4 x double] [double -6.000000e+00, double -8.000000e+00, double -5.000000e+00, double 9.000000e+00], [4 x double] [double -7.000000e+00, double 9.000000e+00, double -6.000000e+00, double -8.000000e+00], [4 x double] [double 2.000000e+00, double -7.000000e+00, double 9.000000e+00, double 8.000000e+00]], [3 x [4 x double]] [[4 x double] [double 7.000000e+00, double 4.000000e+00, double 4.000000e+00, double -6.000000e+00], [4 x double] [double 9.000000e+00, double 9.000000e+00, double 4.000000e+00, double -4.000000e+00], [4 x double] [double -3.000000e+00, double 7.000000e+00, double -2.000000e+00, double -3.000000e+00]]], align 16
@__const.main.f = private unnamed_addr constant [3 x [2 x [3 x double]]] [[2 x [3 x double]] [[3 x double] [double -9.000000e+00, double 5.000000e+00, double -8.000000e+00], [3 x double] [double 3.000000e+00, double 5.000000e+00, double 1.000000e+00]], [2 x [3 x double]] [[3 x double] [double -1.000000e+00, double -7.000000e+00, double 2.000000e+00], [3 x double] [double -5.000000e+00, double -6.000000e+00, double 6.000000e+00]], [2 x [3 x double]] [[3 x double] [double 8.000000e+00, double 5.000000e+00, double 8.000000e+00], [3 x double] [double -2.000000e+00, double -6.000000e+00, double -4.000000e+00]]], align 16
@__const.main.g = private unnamed_addr constant [4 x [4 x [6 x double]]] [[4 x [6 x double]] [[6 x double] [double 5.400000e+01, double 4.200000e+01, double 5.300000e+01, double -4.200000e+01, double 8.500000e+01, double -7.200000e+01], [6 x double] [double 4.500000e+01, double -1.700000e+02, double 9.400000e+01, double -3.600000e+01, double 4.800000e+01, double 7.300000e+01], [6 x double] [double -3.900000e+01, double 6.500000e+01, double -1.120000e+02, double -1.600000e+01, double -7.800000e+01, double -7.200000e+01], [6 x double] [double 6.000000e+00, double -1.100000e+01, double -6.000000e+00, double 6.200000e+01, double 4.900000e+01, double 8.000000e+00]], [4 x [6 x double]] [[6 x double] [double -5.700000e+01, double 4.900000e+01, double -2.300000e+01, double 5.200000e+01, double -1.350000e+02, double 6.600000e+01], [6 x double] [double -2.300000e+01, double 1.270000e+02, double -5.800000e+01, double -5.000000e+00, double -1.180000e+02, double 6.400000e+01], [6 x double] [double 8.700000e+01, double -1.600000e+01, double 1.210000e+02, double 2.300000e+01, double -4.100000e+01, double -1.200000e+01], [6 x double] [double -1.900000e+01, double 2.900000e+01, double 3.500000e+01, double -1.480000e+02, double -1.100000e+01, double 4.500000e+01]], [4 x [6 x double]] [[6 x double] [double -5.500000e+01, double -1.470000e+02, double -1.460000e+02, double -3.100000e+01, double 5.500000e+01, double 6.000000e+01], [6 x double] [double -8.800000e+01, double -4.500000e+01, double -2.800000e+01, double 4.600000e+01, double -2.600000e+01, double -1.440000e+02], [6 x double] [double -1.200000e+01, double -1.070000e+02, double -3.400000e+01, double 1.500000e+02, double 2.490000e+02, double 6.600000e+01], [6 x double] [double 1.100000e+01, double -1.500000e+01, double -3.400000e+01, double 2.700000e+01, double -7.800000e+01, double -5.000000e+01]], [4 x [6 x double]] [[6 x double] [double 5.600000e+01, double 6.700000e+01, double 1.080000e+02, double 4.000000e+00, double 2.000000e+00, double -4.800000e+01], [6 x double] [double 5.800000e+01, double 6.700000e+01, double 8.900000e+01, double 3.200000e+01, double 3.200000e+01, double -8.000000e+00], [6 x double] [double -4.200000e+01, double -3.100000e+01, double -1.030000e+02, double -3.000000e+01, double -2.300000e+01, double -8.000000e+00], [6 x double] [double 6.000000e+00, double 4.000000e+00, double -2.600000e+01, double -1.000000e+01, double 2.600000e+01, double 1.200000e+01]]], align 16
@.str = private unnamed_addr constant [16 x i8] c"deconv3(g, f):\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\0Adeconv3(g, h):\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden { double, double }* @pad_two(double* %g, i32 %len, i32* %ns) #0 {
entry:
  %g.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %ns.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %buf = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store double* %g, double** %g.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %ns, i32** %ns.addr, align 4
  store i32 1, i32* %n, align 4
  %0 = load i32*, i32** %ns.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ns.addr, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %n, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %4 = load i32, i32* %n, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %7 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 16, i32 %7)
  %8 = bitcast i8* %call to { double, double }*
  store { double, double }* %8, { double, double }** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len.addr, align 4
  %cmp1 = icmp slt i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %g.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx, align 8
  %14 = load { double, double }*, { double, double }** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  store double %13, double* %arrayidx2.realp, align 8
  store double 0.000000e+00, double* %arrayidx2.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n, align 4
  %18 = load i32*, i32** %ns.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load { double, double }*, { double, double }** %buf, align 4
  ret { double, double }* %19
}

declare noalias i8* @calloc(i32 %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @deconv(double* %g, i32 %lg, double* %f, i32 %lf, double* %out, i32 %row_len) #0 {
entry:
  %g.addr = alloca double*, align 4
  %lg.addr = alloca i32, align 4
  %f.addr = alloca double*, align 4
  %lf.addr = alloca i32, align 4
  %out.addr = alloca double*, align 4
  %row_len.addr = alloca i32, align 4
  %ns = alloca i32, align 4
  %g2 = alloca { double, double }*, align 4
  %f2 = alloca { double, double }*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca { double, double }, align 8
  %i4 = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %i15 = alloca i32, align 4
  %tmp21 = alloca { double, double }, align 8
  store double* %g, double** %g.addr, align 4
  store i32 %lg, i32* %lg.addr, align 4
  store double* %f, double** %f.addr, align 4
  store i32 %lf, i32* %lf.addr, align 4
  store double* %out, double** %out.addr, align 4
  store i32 %row_len, i32* %row_len.addr, align 4
  store i32 0, i32* %ns, align 4
  %0 = load double*, double** %g.addr, align 4
  %1 = load i32, i32* %lg.addr, align 4
  %call = call { double, double }* @pad_two(double* %0, i32 %1, i32* %ns)
  store { double, double }* %call, { double, double }** %g2, align 4
  %2 = load double*, double** %f.addr, align 4
  %3 = load i32, i32* %lf.addr, align 4
  %call1 = call { double, double }* @pad_two(double* %2, i32 %3, i32* %ns)
  store { double, double }* %call1, { double, double }** %f2, align 4
  %4 = load { double, double }*, { double, double }** %g2, align 4
  %5 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %4, i32 %5)
  %6 = load { double, double }*, { double, double }** %f2, align 4
  %7 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %6, i32 %7)
  %8 = load i32, i32* %ns, align 4
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %8, align 16
  store i32 %8, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %ns, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load { double, double }*, { double, double }** %g2, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %12, i32 %13
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %14 = load { double, double }*, { double, double }** %f2, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds { double, double }, { double, double }* %14, i32 %15
  %arrayidx2.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 0
  %arrayidx2.real = load double, double* %arrayidx2.realp, align 8
  %arrayidx2.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx2, i32 0, i32 1
  %arrayidx2.imag = load double, double* %arrayidx2.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp, double %arrayidx.real, double %arrayidx.imag, double %arrayidx2.real, double %arrayidx2.imag) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %16 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %16
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %tmp.real, double* %arrayidx3.realp, align 16
  store double %tmp.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %ns, align 4
  call void @fft({ double, double }* %vla, i32 %18)
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %19 = load i32, i32* %i4, align 4
  %20 = load i32, i32* %ns, align 4
  %cmp6 = icmp slt i32 %19, %20
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %21 = load i32, i32* %i4, align 4
  %arrayidx8 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %21
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %arrayidx8.real, double* %indirect-arg-temp.realp, align 8
  store double 0.000000e+00, double* %indirect-arg-temp.imagp, align 8
  %call9 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %cmp10 = fcmp olt double %call9, 1.000000e-10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %22 = load i32, i32* %i4, align 4
  %arrayidx11 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %22
  %arrayidx11.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 0
  %arrayidx11.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx11, i32 0, i32 1
  store double 0.000000e+00, double* %arrayidx11.realp, align 16
  store double 0.000000e+00, double* %arrayidx11.imagp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc12

for.inc12:                                        ; preds = %if.end
  %23 = load i32, i32* %i4, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i4, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc24, %for.end14
  %24 = load i32, i32* %i15, align 4
  %25 = load i32, i32* %lf.addr, align 4
  %26 = load i32, i32* %lg.addr, align 4
  %sub = sub nsw i32 %25, %26
  %27 = load i32, i32* %row_len.addr, align 4
  %sub17 = sub nsw i32 %sub, %27
  %cmp18 = icmp sgt i32 %24, %sub17
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond16
  %28 = load i32, i32* %i15, align 4
  %29 = load i32, i32* %ns, align 4
  %add = add nsw i32 %28, %29
  %30 = load i32, i32* %ns, align 4
  %rem = srem i32 %add, %30
  %arrayidx20 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %rem
  %arrayidx20.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 0
  %arrayidx20.real = load double, double* %arrayidx20.realp, align 16
  %arrayidx20.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx20, i32 0, i32 1
  %arrayidx20.imag = load double, double* %arrayidx20.imagp, align 8
  call void @__divdc3({ double, double }* sret align 8 %tmp21, double %arrayidx20.real, double %arrayidx20.imag, double 3.200000e+01, double 0.000000e+00) #2
  %tmp21.realp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 0
  %tmp21.real = load double, double* %tmp21.realp, align 8
  %tmp21.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp21, i32 0, i32 1
  %tmp21.imag = load double, double* %tmp21.imagp, align 8
  %31 = load double*, double** %out.addr, align 4
  %32 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 0, %32
  %arrayidx23 = getelementptr inbounds double, double* %31, i32 %sub22
  store double %tmp21.real, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %33 = load i32, i32* %i15, align 4
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %i15, align 4
  br label %for.cond16

for.end25:                                        ; preds = %for.cond16
  %34 = load { double, double }*, { double, double }** %g2, align 4
  %35 = bitcast { double, double }* %34 to i8*
  call void @free(i8* %35)
  %36 = load { double, double }*, { double, double }** %f2, align 4
  %37 = bitcast { double, double }* %36 to i8*
  call void @free(i8* %37)
  %38 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %38)
  ret void
}

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #1

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack2(i8* %m, i32 %rows, i32 %len, i32 %to_len) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %rows.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  %0 = load i32, i32* %rows.addr, align 4
  %1 = load i32, i32* %to_len.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 8, i32 %mul)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %len.addr, align 4
  %8 = load i8*, i8** %m.addr, align 4
  %9 = bitcast i8* %8 to double*
  %10 = load i32, i32* %i, align 4
  %11 = mul nsw i32 %10, %7
  %arrayidx = getelementptr inbounds double, double* %9, i32 %11
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %14 = load double*, double** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %to_len.addr, align 4
  %mul5 = mul nsw i32 %15, %16
  %17 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul5, %17
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %add
  store double %13, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %20 = load double*, double** %buf, align 4
  ret double* %20
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack2(double* %buf, i32 %rows, i32 %from_len, i32 %to_len, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %rows.addr = alloca i32, align 4
  %from_len.addr = alloca i32, align 4
  %to_len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 %from_len, i32* %from_len.addr, align 4
  store i32 %to_len, i32* %to_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_len.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %from_len.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %div = fdiv double %8, 4.000000e+00
  %9 = load i32, i32* %to_len.addr, align 4
  %10 = load i8*, i8** %out.addr, align 4
  %11 = bitcast i8* %10 to double*
  %12 = load i32, i32* %i, align 4
  %13 = mul nsw i32 %12, %9
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %13
  %14 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %arrayidx4, i32 %14
  store double %div, double* %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %16, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv2(i8* %g, i32 %row_g, i32 %col_g, i8* %f, i32 %row_f, i32 %col_f, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %row_g.addr = alloca i32, align 4
  %col_g.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %row_f.addr = alloca i32, align 4
  %col_f.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %row_g, i32* %row_g.addr, align 4
  store i32 %col_g, i32* %col_g.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %row_f, i32* %row_f.addr, align 4
  store i32 %col_f, i32* %col_f.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %row_g.addr, align 4
  %2 = load i32, i32* %col_g.addr, align 4
  %3 = load i32, i32* %col_g.addr, align 4
  %call = call double* @unpack2(i8* %0, i32 %1, i32 %2, i32 %3)
  store double* %call, double** %g2, align 4
  %4 = load i8*, i8** %f.addr, align 4
  %5 = load i32, i32* %row_f.addr, align 4
  %6 = load i32, i32* %col_f.addr, align 4
  %7 = load i32, i32* %col_g.addr, align 4
  %call1 = call double* @unpack2(i8* %4, i32 %5, i32 %6, i32 %7)
  store double* %call1, double** %f2, align 4
  %8 = load i32, i32* %row_g.addr, align 4
  %9 = load i32, i32* %row_f.addr, align 4
  %sub = sub nsw i32 %8, %9
  %add = add nsw i32 %sub, 1
  %10 = load i32, i32* %col_g.addr, align 4
  %mul = mul nsw i32 %add, %10
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul, align 16
  store i32 %mul, i32* %__vla_expr0, align 4
  %12 = load double*, double** %g2, align 4
  %13 = load i32, i32* %row_g.addr, align 4
  %14 = load i32, i32* %col_g.addr, align 4
  %mul2 = mul nsw i32 %13, %14
  %15 = load double*, double** %f2, align 4
  %16 = load i32, i32* %row_f.addr, align 4
  %17 = load i32, i32* %col_g.addr, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load i32, i32* %col_g.addr, align 4
  call void @deconv(double* %12, i32 %mul2, double* %15, i32 %mul3, double* %vla, i32 %18)
  %19 = load i32, i32* %row_g.addr, align 4
  %20 = load i32, i32* %row_f.addr, align 4
  %sub4 = sub nsw i32 %19, %20
  %add5 = add nsw i32 %sub4, 1
  %21 = load i32, i32* %col_g.addr, align 4
  %22 = load i32, i32* %col_g.addr, align 4
  %23 = load i32, i32* %col_f.addr, align 4
  %sub6 = sub nsw i32 %22, %23
  %add7 = add nsw i32 %sub6, 1
  %24 = load i8*, i8** %out.addr, align 4
  call void @pack2(double* %vla, i32 %add5, i32 %21, i32 %add7, i8* %24)
  %25 = load double*, double** %g2, align 4
  %26 = bitcast double* %25 to i8*
  call void @free(i8* %26)
  %27 = load double*, double** %f2, align 4
  %28 = bitcast double* %27 to i8*
  call void @free(i8* %28)
  %29 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double* @unpack3(i8* %m, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z) #0 {
entry:
  %m.addr = alloca i8*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %buf = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i8* %m, i8** %m.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %to_y.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %to_z.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  %call = call noalias i8* @calloc(i32 8, i32 %mul1)
  %3 = bitcast i8* %call to double*
  store double* %3, double** %buf, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc14, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %y.addr, align 4
  %cmp3 = icmp slt i32 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %z.addr, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %z.addr, align 4
  %12 = load i8*, i8** %m.addr, align 4
  %13 = bitcast i8* %12 to double*
  %14 = load i32, i32* %i, align 4
  %15 = mul nuw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %arrayidx = getelementptr inbounds double, double* %13, i32 %16
  %17 = load i32, i32* %j, align 4
  %18 = mul nsw i32 %17, %11
  %arrayidx8 = getelementptr inbounds double, double* %arrayidx, i32 %18
  %19 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds double, double* %arrayidx8, i32 %19
  %20 = load double, double* %arrayidx9, align 8
  %21 = load double*, double** %buf, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %to_y.addr, align 4
  %mul10 = mul nsw i32 %22, %23
  %24 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul10, %24
  %25 = load i32, i32* %to_z.addr, align 4
  %mul11 = mul nsw i32 %add, %25
  %26 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %26
  %arrayidx13 = getelementptr inbounds double, double* %21, i32 %add12
  store double %20, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %28 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %28, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %29 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %29, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %30 = load double*, double** %buf, align 4
  ret double* %30
}

; Function Attrs: noinline nounwind optnone
define hidden void @pack3(double* %buf, i32 %x, i32 %y, i32 %z, i32 %to_y, i32 %to_z, i8* %out) #0 {
entry:
  %buf.addr = alloca double*, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %z.addr = alloca i32, align 4
  %to_y.addr = alloca i32, align 4
  %to_z.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %buf, double** %buf.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %z, i32* %z.addr, align 4
  store i32 %to_y, i32* %to_y.addr, align 4
  store i32 %to_z, i32* %to_z.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %to_y.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %k, align 4
  %5 = load i32, i32* %to_z.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double*, double** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %y.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %10 = load i32, i32* %z.addr, align 4
  %mul7 = mul nsw i32 %add, %10
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %arrayidx = getelementptr inbounds double, double* %6, i32 %add8
  %12 = load double, double* %arrayidx, align 8
  %div = fdiv double %12, 4.000000e+00
  %13 = load i32, i32* %to_y.addr, align 4
  %14 = load i32, i32* %to_z.addr, align 4
  %15 = load i8*, i8** %out.addr, align 4
  %16 = bitcast i8* %15 to double*
  %17 = load i32, i32* %i, align 4
  %18 = mul nuw i32 %13, %14
  %19 = mul nsw i32 %17, %18
  %arrayidx9 = getelementptr inbounds double, double* %16, i32 %19
  %20 = load i32, i32* %j, align 4
  %21 = mul nsw i32 %20, %14
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %21
  %22 = load i32, i32* %k, align 4
  %arrayidx11 = getelementptr inbounds double, double* %arrayidx10, i32 %22
  store double %div, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %23 = load i32, i32* %k, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @deconv3(i8* %g, i32 %gx, i32 %gy, i32 %gz, i8* %f, i32 %fx, i32 %fy, i32 %fz, i8* %out) #0 {
entry:
  %g.addr = alloca i8*, align 4
  %gx.addr = alloca i32, align 4
  %gy.addr = alloca i32, align 4
  %gz.addr = alloca i32, align 4
  %f.addr = alloca i8*, align 4
  %fx.addr = alloca i32, align 4
  %fy.addr = alloca i32, align 4
  %fz.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %g2 = alloca double*, align 4
  %f2 = alloca double*, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 4
  store i32 %gx, i32* %gx.addr, align 4
  store i32 %gy, i32* %gy.addr, align 4
  store i32 %gz, i32* %gz.addr, align 4
  store i8* %f, i8** %f.addr, align 4
  store i32 %fx, i32* %fx.addr, align 4
  store i32 %fy, i32* %fy.addr, align 4
  store i32 %fz, i32* %fz.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %g.addr, align 4
  %1 = load i32, i32* %gx.addr, align 4
  %2 = load i32, i32* %gy.addr, align 4
  %3 = load i32, i32* %gz.addr, align 4
  %4 = load i32, i32* %gy.addr, align 4
  %5 = load i32, i32* %gz.addr, align 4
  %call = call double* @unpack3(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5)
  store double* %call, double** %g2, align 4
  %6 = load i8*, i8** %f.addr, align 4
  %7 = load i32, i32* %fx.addr, align 4
  %8 = load i32, i32* %fy.addr, align 4
  %9 = load i32, i32* %fz.addr, align 4
  %10 = load i32, i32* %gy.addr, align 4
  %11 = load i32, i32* %gz.addr, align 4
  %call1 = call double* @unpack3(i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  store double* %call1, double** %f2, align 4
  %12 = load i32, i32* %gx.addr, align 4
  %13 = load i32, i32* %fx.addr, align 4
  %sub = sub nsw i32 %12, %13
  %add = add nsw i32 %sub, 1
  %14 = load i32, i32* %gy.addr, align 4
  %mul = mul nsw i32 %add, %14
  %15 = load i32, i32* %gz.addr, align 4
  %mul2 = mul nsw i32 %mul, %15
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %saved_stack, align 4
  %vla = alloca double, i32 %mul2, align 16
  store i32 %mul2, i32* %__vla_expr0, align 4
  %17 = load double*, double** %g2, align 4
  %18 = load i32, i32* %gx.addr, align 4
  %19 = load i32, i32* %gy.addr, align 4
  %mul3 = mul nsw i32 %18, %19
  %20 = load i32, i32* %gz.addr, align 4
  %mul4 = mul nsw i32 %mul3, %20
  %21 = load double*, double** %f2, align 4
  %22 = load i32, i32* %fx.addr, align 4
  %23 = load i32, i32* %gy.addr, align 4
  %mul5 = mul nsw i32 %22, %23
  %24 = load i32, i32* %gz.addr, align 4
  %mul6 = mul nsw i32 %mul5, %24
  %25 = load i32, i32* %gy.addr, align 4
  %26 = load i32, i32* %gz.addr, align 4
  %mul7 = mul nsw i32 %25, %26
  call void @deconv(double* %17, i32 %mul4, double* %21, i32 %mul6, double* %vla, i32 %mul7)
  %27 = load i32, i32* %gx.addr, align 4
  %28 = load i32, i32* %fx.addr, align 4
  %sub8 = sub nsw i32 %27, %28
  %add9 = add nsw i32 %sub8, 1
  %29 = load i32, i32* %gy.addr, align 4
  %30 = load i32, i32* %gz.addr, align 4
  %31 = load i32, i32* %gy.addr, align 4
  %32 = load i32, i32* %fy.addr, align 4
  %sub10 = sub nsw i32 %31, %32
  %add11 = add nsw i32 %sub10, 1
  %33 = load i32, i32* %gz.addr, align 4
  %34 = load i32, i32* %fz.addr, align 4
  %sub12 = sub nsw i32 %33, %34
  %add13 = add nsw i32 %sub12, 1
  %35 = load i8*, i8** %out.addr, align 4
  call void @pack3(double* %vla, i32 %add9, i32 %29, i32 %30, i32 %add11, i32 %add13, i8* %35)
  %36 = load double*, double** %g2, align 4
  %37 = bitcast double* %36 to i8*
  call void @free(i8* %37)
  %38 = load double*, double** %f2, align 4
  %39 = bitcast double* %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %40)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %h = alloca [2 x [3 x [4 x double]]], align 16
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %f = alloca [3 x [2 x [3 x double]]], align 16
  %fx = alloca i32, align 4
  %fy = alloca i32, align 4
  %fz = alloca i32, align 4
  %g = alloca [4 x [4 x [6 x double]]], align 16
  %gx = alloca i32, align 4
  %gy = alloca i32, align 4
  %gz = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %__vla_expr3 = alloca i32, align 4
  %__vla_expr4 = alloca i32, align 4
  %__vla_expr5 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %j48 = alloca i32, align 4
  %k54 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [2 x [3 x [4 x double]]]* %h to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x [3 x [4 x double]]]* @__const.main.h to i8*), i32 192, i1 false)
  store i32 2, i32* %hx, align 4
  store i32 3, i32* %hy, align 4
  store i32 4, i32* %hz, align 4
  %1 = bitcast [3 x [2 x [3 x double]]]* %f to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x [2 x [3 x double]]]* @__const.main.f to i8*), i32 144, i1 false)
  store i32 3, i32* %fx, align 4
  store i32 2, i32* %fy, align 4
  store i32 3, i32* %fz, align 4
  %2 = bitcast [4 x [4 x [6 x double]]]* %g to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x [4 x [6 x double]]]* @__const.main.g to i8*), i32 768, i1 false)
  store i32 4, i32* %gx, align 4
  store i32 4, i32* %gy, align 4
  store i32 6, i32* %gz, align 4
  %3 = load i32, i32* %gx, align 4
  %4 = load i32, i32* %fx, align 4
  %sub = sub nsw i32 %3, %4
  %add = add nsw i32 %sub, 1
  %5 = load i32, i32* %gy, align 4
  %6 = load i32, i32* %fy, align 4
  %sub1 = sub nsw i32 %5, %6
  %add2 = add nsw i32 %sub1, 1
  %7 = load i32, i32* %gz, align 4
  %8 = load i32, i32* %fz, align 4
  %sub3 = sub nsw i32 %7, %8
  %add4 = add nsw i32 %sub3, 1
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %saved_stack, align 4
  %10 = mul nuw i32 %add, %add2
  %11 = mul nuw i32 %10, %add4
  %vla = alloca double, i32 %11, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 %add4, i32* %__vla_expr2, align 4
  %arraydecay = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %12 = bitcast [4 x [6 x double]]* %arraydecay to i8*
  %13 = load i32, i32* %gx, align 4
  %14 = load i32, i32* %gy, align 4
  %15 = load i32, i32* %gz, align 4
  %arraydecay5 = getelementptr inbounds [3 x [2 x [3 x double]]], [3 x [2 x [3 x double]]]* %f, i32 0, i32 0
  %16 = bitcast [2 x [3 x double]]* %arraydecay5 to i8*
  %17 = load i32, i32* %fx, align 4
  %18 = load i32, i32* %fy, align 4
  %19 = load i32, i32* %fz, align 4
  %20 = bitcast double* %vla to i8*
  call void @deconv3(i8* %12, i32 %13, i32 %14, i32 %15, i8* %16, i32 %17, i32 %18, i32 %19, i8* %20)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %gx, align 4
  %23 = load i32, i32* %fx, align 4
  %sub7 = sub nsw i32 %22, %23
  %add8 = add nsw i32 %sub7, 1
  %cmp = icmp slt i32 %21, %add8
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %for.body
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %gy, align 4
  %26 = load i32, i32* %fy, align 4
  %sub10 = sub nsw i32 %25, %26
  %add11 = add nsw i32 %sub10, 1
  %cmp12 = icmp slt i32 %24, %add11
  br i1 %cmp12, label %for.body13, label %for.end25

for.body13:                                       ; preds = %for.cond9
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %gz, align 4
  %29 = load i32, i32* %fz, align 4
  %sub15 = sub nsw i32 %28, %29
  %add16 = add nsw i32 %sub15, 1
  %cmp17 = icmp slt i32 %27, %add16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %30 = load i32, i32* %i, align 4
  %31 = mul nuw i32 %add2, %add4
  %32 = mul nsw i32 %30, %31
  %arrayidx = getelementptr inbounds double, double* %vla, i32 %32
  %33 = load i32, i32* %j, align 4
  %34 = mul nsw i32 %33, %add4
  %arrayidx19 = getelementptr inbounds double, double* %arrayidx, i32 %34
  %35 = load i32, i32* %k, align 4
  %arrayidx20 = getelementptr inbounds double, double* %arrayidx19, i32 %35
  %36 = load double, double* %arrayidx20, align 8
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %37 = load i32, i32* %k, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %38 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %38, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %gx, align 4
  %41 = load i32, i32* %fx, align 4
  %sub26 = sub nsw i32 %40, %41
  %cmp27 = icmp slt i32 %39, %sub26
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end25
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %42, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %43 = load i32, i32* %gx, align 4
  %44 = load i32, i32* %hx, align 4
  %sub32 = sub nsw i32 %43, %44
  %add33 = add nsw i32 %sub32, 1
  %45 = load i32, i32* %gy, align 4
  %46 = load i32, i32* %hy, align 4
  %sub34 = sub nsw i32 %45, %46
  %add35 = add nsw i32 %sub34, 1
  %47 = load i32, i32* %gz, align 4
  %48 = load i32, i32* %hz, align 4
  %sub36 = sub nsw i32 %47, %48
  %add37 = add nsw i32 %sub36, 1
  %49 = mul nuw i32 %add33, %add35
  %50 = mul nuw i32 %49, %add37
  %vla38 = alloca double, i32 %50, align 16
  store i32 %add33, i32* %__vla_expr3, align 4
  store i32 %add35, i32* %__vla_expr4, align 4
  store i32 %add37, i32* %__vla_expr5, align 4
  %arraydecay39 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i32 0, i32 0
  %51 = bitcast [4 x [6 x double]]* %arraydecay39 to i8*
  %52 = load i32, i32* %gx, align 4
  %53 = load i32, i32* %gy, align 4
  %54 = load i32, i32* %gz, align 4
  %arraydecay40 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i32 0, i32 0
  %55 = bitcast [3 x [4 x double]]* %arraydecay40 to i8*
  %56 = load i32, i32* %hx, align 4
  %57 = load i32, i32* %hy, align 4
  %58 = load i32, i32* %hz, align 4
  %59 = bitcast double* %vla38 to i8*
  call void @deconv3(i8* %51, i32 %52, i32 %53, i32 %54, i8* %55, i32 %56, i32 %57, i32 %58, i8* %59)
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc76, %for.end31
  %60 = load i32, i32* %i42, align 4
  %61 = load i32, i32* %gx, align 4
  %62 = load i32, i32* %hx, align 4
  %sub44 = sub nsw i32 %61, %62
  %add45 = add nsw i32 %sub44, 1
  %cmp46 = icmp slt i32 %60, %add45
  br i1 %cmp46, label %for.body47, label %for.end78

for.body47:                                       ; preds = %for.cond43
  store i32 0, i32* %j48, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc68, %for.body47
  %63 = load i32, i32* %j48, align 4
  %64 = load i32, i32* %gy, align 4
  %65 = load i32, i32* %hy, align 4
  %sub50 = sub nsw i32 %64, %65
  %add51 = add nsw i32 %sub50, 1
  %cmp52 = icmp slt i32 %63, %add51
  br i1 %cmp52, label %for.body53, label %for.end70

for.body53:                                       ; preds = %for.cond49
  store i32 0, i32* %k54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc64, %for.body53
  %66 = load i32, i32* %k54, align 4
  %67 = load i32, i32* %gz, align 4
  %68 = load i32, i32* %hz, align 4
  %sub56 = sub nsw i32 %67, %68
  %add57 = add nsw i32 %sub56, 1
  %cmp58 = icmp slt i32 %66, %add57
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond55
  %69 = load i32, i32* %i42, align 4
  %70 = mul nuw i32 %add35, %add37
  %71 = mul nsw i32 %69, %70
  %arrayidx60 = getelementptr inbounds double, double* %vla38, i32 %71
  %72 = load i32, i32* %j48, align 4
  %73 = mul nsw i32 %72, %add37
  %arrayidx61 = getelementptr inbounds double, double* %arrayidx60, i32 %73
  %74 = load i32, i32* %k54, align 4
  %arrayidx62 = getelementptr inbounds double, double* %arrayidx61, i32 %74
  %75 = load double, double* %arrayidx62, align 8
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %75)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %k54, align 4
  %inc65 = add nsw i32 %76, 1
  store i32 %inc65, i32* %k54, align 4
  br label %for.cond55

for.end66:                                        ; preds = %for.cond55
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc68

for.inc68:                                        ; preds = %for.end66
  %77 = load i32, i32* %j48, align 4
  %inc69 = add nsw i32 %77, 1
  store i32 %inc69, i32* %j48, align 4
  br label %for.cond49

for.end70:                                        ; preds = %for.cond49
  %78 = load i32, i32* %i42, align 4
  %79 = load i32, i32* %gx, align 4
  %80 = load i32, i32* %hx, align 4
  %sub71 = sub nsw i32 %79, %80
  %cmp72 = icmp slt i32 %78, %sub71
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %for.end70
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %for.end70
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %81 = load i32, i32* %i42, align 4
  %inc77 = add nsw i32 %81, 1
  store i32 %inc77, i32* %i42, align 4
  br label %for.cond43

for.end78:                                        ; preds = %for.cond43
  %82 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %82)
  %83 = load i32, i32* %retval, align 4
  ret i32 %83
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #5

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %fx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %sub, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %gy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %fy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %sub1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %gz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %fz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub nsw i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %sub3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = mul nuw i32 %add, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = mulnuw %3, %7
infer %8

; *****
; For LLVM instruction:
;  %11 = mul nuw i32 %10, %add4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = subnsw %8, %9
%11:i32 = addnsw 1:i32, %10 (hasExternalUses)
%12:i32 = mulnuw %7, %11
%13:i32 = mulnuw %3, %12
infer %13

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %gy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %gz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %fx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %fy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %fz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %fx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add8 = add nsw i32 %sub7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %21, %add8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = slt %0, %4
infer %5

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %gy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %fy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub10 = sub nsw i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %sub10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp12 = icmp slt i32 %24, %add11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = slt %0, %4
infer %5

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %gz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %fz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub nsw i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add16 = add nsw i32 %sub15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp17 = icmp slt i32 %27, %add16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = slt %0, %4
infer %5

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = mul nuw i32 %add2, %add4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = mulnuw %3, %7
infer %8

; *****
; For LLVM instruction:
;  %32 = mul nsw i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7:i32 = subnsw %5, %6
%8:i32 = addnsw 1:i32, %7 (hasExternalUses)
%9:i32 = mulnuw %4, %8
%10:i32 = mulnsw %0, %9
infer %10

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = mul nsw i32 %33, %add4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3 (hasExternalUses)
%5:i32 = mulnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %fx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub26 = sub nsw i32 %40, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp27 = icmp slt i32 %39, %sub26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc30 = add nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %hx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub32 = sub nsw i32 %43, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add33 = add nsw i32 %sub32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %gy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %hy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub34 = sub nsw i32 %45, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add35 = add nsw i32 %sub34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %gz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %hz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub36 = sub nsw i32 %47, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add37 = add nsw i32 %sub36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %49 = mul nuw i32 %add33, %add35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = mulnuw %3, %7
infer %8

; *****
; For LLVM instruction:
;  %50 = mul nuw i32 %49, %add37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = subnsw %8, %9
%11:i32 = addnsw 1:i32, %10 (hasExternalUses)
%12:i32 = mulnuw %7, %11
%13:i32 = mulnuw %3, %12
infer %13

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %gy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %gz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %hx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %hy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %hz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %i42, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %hx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub44 = sub nsw i32 %61, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add45 = add nsw i32 %sub44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp46 = icmp slt i32 %60, %add45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = slt %0, %4
infer %5

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %j48, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %gy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %hy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub50 = sub nsw i32 %64, %65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add51 = add nsw i32 %sub50, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp52 = icmp slt i32 %63, %add51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = slt %0, %4
infer %5

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %k54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %gz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %hz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub56 = sub nsw i32 %67, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add57 = add nsw i32 %sub56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp58 = icmp slt i32 %66, %add57
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = slt %0, %4
infer %5

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %i42, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = mul nuw i32 %add35, %add37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = mulnuw %3, %7
infer %8

; *****
; For LLVM instruction:
;  %71 = mul nsw i32 %69, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7:i32 = subnsw %5, %6
%8:i32 = addnsw 1:i32, %7 (hasExternalUses)
%9:i32 = mulnuw %4, %8
%10:i32 = mulnsw %0, %9
infer %10

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %j48, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = mul nsw i32 %72, %add37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3 (hasExternalUses)
%5:i32 = mulnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %k54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %k54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc65 = add nsw i32 %76, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %j48, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc69 = add nsw i32 %77, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %i42, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %gx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %hx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub71 = sub nsw i32 %79, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp72 = icmp slt i32 %78, %sub71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %i42, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc77 = add nsw i32 %81, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = mulnuw %3, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw %4, %5
%7:i32 = addnsw 1:i32, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = subnsw %8, %9
%11:i32 = addnsw 1:i32, %10 (hasExternalUses)
%12:i32 = mulnuw %7, %11
%13:i32 = mulnuw %3, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = slt %0, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3 (hasExternalUses)
%5:i32 = var
%6:i32 = var
%7:i32 = subnsw %5, %6
%8:i32 = addnsw 1:i32, %7 (hasExternalUses)
%9:i32 = mulnuw %4, %8
%10:i32 = mulnsw %0, %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = addnsw 1:i32, %3 (hasExternalUses)
%5:i32 = mulnsw %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = slt %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
