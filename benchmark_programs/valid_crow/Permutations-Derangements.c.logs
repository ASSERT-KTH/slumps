
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for deranged()

; ModuleID = './Permutations-Derangements.c.bc'
source_filename = "./Permutations-Derangements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [16 x i8] c"Deranged Four:\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"\0ACompare list vs calc:\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"%d:\09%llu\09%llu\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\0Afurther calc:\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"%d: %llu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @deranged(i32 %depth, i32 %len, i32* %d, i32 %show) #0 {
entry:
  %retval = alloca i64, align 8
  %depth.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %d.addr = alloca i32*, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i8, align 1
  %count = alloca i64, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %d, i32** %d.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %count, align 8
  %0 = load i32, i32* %depth.addr, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %show.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %d.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %7, 97
  %call = call i32 @putchar(i32 %add)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  store i64 1, i64* %retval, align 8
  br label %return

if.end4:                                          ; preds = %entry
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc26, %if.end4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %cmp6 = icmp sge i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end27

for.body7:                                        ; preds = %for.cond5
  %12 = load i32, i32* %i, align 4
  %13 = load i32*, i32** %d.addr, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %12, %15
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body7
  br label %for.inc26

if.end11:                                         ; preds = %for.body7
  %16 = load i32*, i32** %d.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %16, i32 %17
  %18 = load i32, i32* %arrayidx12, align 4
  %conv = trunc i32 %18 to i8
  store i8 %conv, i8* %tmp, align 1
  %19 = load i32*, i32** %d.addr, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx13, align 4
  %22 = load i32*, i32** %d.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %21, i32* %arrayidx14, align 4
  %24 = load i8, i8* %tmp, align 1
  %conv15 = sext i8 %24 to i32
  %25 = load i32*, i32** %d.addr, align 4
  %26 = load i32, i32* %depth.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %conv15, i32* %arrayidx16, align 4
  %27 = load i32, i32* %depth.addr, align 4
  %add17 = add nsw i32 %27, 1
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32*, i32** %d.addr, align 4
  %30 = load i32, i32* %show.addr, align 4
  %call18 = call i64 @deranged(i32 %add17, i32 %28, i32* %29, i32 %30)
  %31 = load i64, i64* %count, align 8
  %add19 = add i64 %31, %call18
  store i64 %add19, i64* %count, align 8
  %32 = load i32*, i32** %d.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx20, align 4
  %conv21 = trunc i32 %34 to i8
  store i8 %conv21, i8* %tmp, align 1
  %35 = load i32*, i32** %d.addr, align 4
  %36 = load i32, i32* %depth.addr, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx22, align 4
  %38 = load i32*, i32** %d.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %38, i32 %39
  store i32 %37, i32* %arrayidx23, align 4
  %40 = load i8, i8* %tmp, align 1
  %conv24 = sext i8 %40 to i32
  %41 = load i32*, i32** %d.addr, align 4
  %42 = load i32, i32* %depth.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %41, i32 %42
  store i32 %conv24, i32* %arrayidx25, align 4
  br label %for.inc26

for.inc26:                                        ; preds = %if.end11, %if.then10
  %43 = load i32, i32* %i, align 4
  %dec = add nsw i32 %43, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond5

for.end27:                                        ; preds = %for.cond5
  %44 = load i64, i64* %count, align 8
  store i64 %44, i64* %retval, align 8
  br label %return

return:                                           ; preds = %for.end27, %if.end
  %45 = load i64, i64* %retval, align 8
  ret i64 %45
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i64 @gen_n(i32 %n, i32 %show) #0 {
entry:
  %n.addr = alloca i32, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %a = alloca [1024 x i32], align 16
  store i32 %n, i32* %n.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %1 to i64
  %cmp = icmp ult i64 %0, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %conv2 = trunc i64 %2 to i32
  %3 = load i64, i64* %i, align 8
  %idxprom = trunc i64 %3 to i32
  %arrayidx = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 %idxprom
  store i32 %conv2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %n.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 0
  %6 = load i32, i32* %show.addr, align 4
  %call = call i64 @deranged(i32 0, i32 %5, i32* %arraydecay, i32 %6)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @sub_fact(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 1, %1
  %conv = sext i32 %sub to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %2, 1
  %call = call i64 @sub_fact(i32 %sub1)
  %3 = load i32, i32* %n.addr, align 4
  %sub2 = sub nsw i32 %3, 2
  %call3 = call i64 @sub_fact(i32 %sub2)
  %add = add i64 %call, %call3
  %4 = load i32, i32* %n.addr, align 4
  %sub4 = sub nsw i32 %4, 1
  %conv5 = sext i32 %sub4 to i64
  %mul = mul i64 %add, %conv5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %mul, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  %call1 = call i64 @gen_n(i32 4, i32 1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %call3 = call i64 @gen_n(i32 %2, i32 0)
  %3 = load i32, i32* %i, align 4
  %call4 = call i64 @sub_fact(i32 %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i32 %1, i64 %call3, i64 %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0))
  store i32 10, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp8 = icmp sle i32 %5, 20
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %call10 = call i64 @sub_fact(i32 %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i32 %6, i64 %call10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %8 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %8, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %show.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %7, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sge i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %12, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %18 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %tmp, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = sext i8 %24 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %show.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call18 = call i64 @deranged(i32 %add17, i32 %28, i32* %29, i32 %30)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i64, i64* %count, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add19 = add i64 %31, %call18
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv21 = trunc i32 %34 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i8, i8* %tmp, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %40 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %43, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i64, i64* %count, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i64, i64* %retval, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 97
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536871009
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = trunc %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for deranged()

; entering Souper's runOnFunction() for gen_n()

; ModuleID = './Permutations-Derangements.c.bc'
source_filename = "./Permutations-Derangements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [16 x i8] c"Deranged Four:\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"\0ACompare list vs calc:\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"%d:\09%llu\09%llu\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\0Afurther calc:\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"%d: %llu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @deranged(i32 %depth, i32 %len, i32* %d, i32 %show) #0 {
entry:
  %retval = alloca i64, align 8
  %depth.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %d.addr = alloca i32*, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i8, align 1
  %count = alloca i64, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %d, i32** %d.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %count, align 8
  %0 = load i32, i32* %depth.addr, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %show.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %d.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %7, 97
  %call = call i32 @putchar(i32 %add)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  store i64 1, i64* %retval, align 8
  br label %return

if.end4:                                          ; preds = %entry
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc26, %if.end4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %cmp6 = icmp sge i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end27

for.body7:                                        ; preds = %for.cond5
  %12 = load i32, i32* %i, align 4
  %13 = load i32*, i32** %d.addr, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %12, %15
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body7
  br label %for.inc26

if.end11:                                         ; preds = %for.body7
  %16 = load i32*, i32** %d.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %16, i32 %17
  %18 = load i32, i32* %arrayidx12, align 4
  %conv = trunc i32 %18 to i8
  store i8 %conv, i8* %tmp, align 1
  %19 = load i32*, i32** %d.addr, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx13, align 4
  %22 = load i32*, i32** %d.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %21, i32* %arrayidx14, align 4
  %24 = load i8, i8* %tmp, align 1
  %conv15 = sext i8 %24 to i32
  %25 = load i32*, i32** %d.addr, align 4
  %26 = load i32, i32* %depth.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %conv15, i32* %arrayidx16, align 4
  %27 = load i32, i32* %depth.addr, align 4
  %add17 = add nsw i32 %27, 1
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32*, i32** %d.addr, align 4
  %30 = load i32, i32* %show.addr, align 4
  %call18 = call i64 @deranged(i32 %add17, i32 %28, i32* %29, i32 %30)
  %31 = load i64, i64* %count, align 8
  %add19 = add i64 %31, %call18
  store i64 %add19, i64* %count, align 8
  %32 = load i32*, i32** %d.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx20, align 4
  %conv21 = trunc i32 %34 to i8
  store i8 %conv21, i8* %tmp, align 1
  %35 = load i32*, i32** %d.addr, align 4
  %36 = load i32, i32* %depth.addr, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx22, align 4
  %38 = load i32*, i32** %d.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %38, i32 %39
  store i32 %37, i32* %arrayidx23, align 4
  %40 = load i8, i8* %tmp, align 1
  %conv24 = sext i8 %40 to i32
  %41 = load i32*, i32** %d.addr, align 4
  %42 = load i32, i32* %depth.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %41, i32 %42
  store i32 %conv24, i32* %arrayidx25, align 4
  br label %for.inc26

for.inc26:                                        ; preds = %if.end11, %if.then10
  %43 = load i32, i32* %i, align 4
  %dec = add nsw i32 %43, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond5

for.end27:                                        ; preds = %for.cond5
  %44 = load i64, i64* %count, align 8
  store i64 %44, i64* %retval, align 8
  br label %return

return:                                           ; preds = %for.end27, %if.end
  %45 = load i64, i64* %retval, align 8
  ret i64 %45
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i64 @gen_n(i32 %n, i32 %show) #0 {
entry:
  %n.addr = alloca i32, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %a = alloca [1024 x i32], align 16
  store i32 %n, i32* %n.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %1 to i64
  %cmp = icmp ult i64 %0, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %conv2 = trunc i64 %2 to i32
  %3 = load i64, i64* %i, align 8
  %idxprom = trunc i64 %3 to i32
  %arrayidx = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 %idxprom
  store i32 %conv2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %n.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 0
  %6 = load i32, i32* %show.addr, align 4
  %call = call i64 @deranged(i32 0, i32 %5, i32* %arraydecay, i32 %6)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @sub_fact(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 1, %1
  %conv = sext i32 %sub to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %2, 1
  %call = call i64 @sub_fact(i32 %sub1)
  %3 = load i32, i32* %n.addr, align 4
  %sub2 = sub nsw i32 %3, 2
  %call3 = call i64 @sub_fact(i32 %sub2)
  %add = add i64 %call, %call3
  %4 = load i32, i32* %n.addr, align 4
  %sub4 = sub nsw i32 %4, 1
  %conv5 = sext i32 %sub4 to i64
  %mul = mul i64 %add, %conv5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %mul, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  %call1 = call i64 @gen_n(i32 4, i32 1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %call3 = call i64 @gen_n(i32 %2, i32 0)
  %3 = load i32, i32* %i, align 4
  %call4 = call i64 @sub_fact(i32 %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i32 %1, i64 %call3, i64 %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0))
  store i32 10, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp8 = icmp sle i32 %5, 20
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %call10 = call i64 @sub_fact(i32 %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i32 %6, i64 %call10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %8 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %8, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %i, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i32 %1 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ult i64 %0, %conv
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %i, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv2 = trunc i64 %2 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %i, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %idxprom = trunc i64 %3 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %i, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i64 %4, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %show.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i64 @deranged(i32 0, i32 %5, i32* %arraydecay, i32 %6)
; Looking for a replacement for:
%0:i64 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i1 = ult %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for gen_n()

; entering Souper's runOnFunction() for sub_fact()

; ModuleID = './Permutations-Derangements.c.bc'
source_filename = "./Permutations-Derangements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [16 x i8] c"Deranged Four:\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"\0ACompare list vs calc:\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"%d:\09%llu\09%llu\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\0Afurther calc:\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"%d: %llu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @deranged(i32 %depth, i32 %len, i32* %d, i32 %show) #0 {
entry:
  %retval = alloca i64, align 8
  %depth.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %d.addr = alloca i32*, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i8, align 1
  %count = alloca i64, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %d, i32** %d.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %count, align 8
  %0 = load i32, i32* %depth.addr, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %show.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %d.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %7, 97
  %call = call i32 @putchar(i32 %add)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  store i64 1, i64* %retval, align 8
  br label %return

if.end4:                                          ; preds = %entry
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc26, %if.end4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %cmp6 = icmp sge i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end27

for.body7:                                        ; preds = %for.cond5
  %12 = load i32, i32* %i, align 4
  %13 = load i32*, i32** %d.addr, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %12, %15
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body7
  br label %for.inc26

if.end11:                                         ; preds = %for.body7
  %16 = load i32*, i32** %d.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %16, i32 %17
  %18 = load i32, i32* %arrayidx12, align 4
  %conv = trunc i32 %18 to i8
  store i8 %conv, i8* %tmp, align 1
  %19 = load i32*, i32** %d.addr, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx13, align 4
  %22 = load i32*, i32** %d.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %21, i32* %arrayidx14, align 4
  %24 = load i8, i8* %tmp, align 1
  %conv15 = sext i8 %24 to i32
  %25 = load i32*, i32** %d.addr, align 4
  %26 = load i32, i32* %depth.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %conv15, i32* %arrayidx16, align 4
  %27 = load i32, i32* %depth.addr, align 4
  %add17 = add nsw i32 %27, 1
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32*, i32** %d.addr, align 4
  %30 = load i32, i32* %show.addr, align 4
  %call18 = call i64 @deranged(i32 %add17, i32 %28, i32* %29, i32 %30)
  %31 = load i64, i64* %count, align 8
  %add19 = add i64 %31, %call18
  store i64 %add19, i64* %count, align 8
  %32 = load i32*, i32** %d.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx20, align 4
  %conv21 = trunc i32 %34 to i8
  store i8 %conv21, i8* %tmp, align 1
  %35 = load i32*, i32** %d.addr, align 4
  %36 = load i32, i32* %depth.addr, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx22, align 4
  %38 = load i32*, i32** %d.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %38, i32 %39
  store i32 %37, i32* %arrayidx23, align 4
  %40 = load i8, i8* %tmp, align 1
  %conv24 = sext i8 %40 to i32
  %41 = load i32*, i32** %d.addr, align 4
  %42 = load i32, i32* %depth.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %41, i32 %42
  store i32 %conv24, i32* %arrayidx25, align 4
  br label %for.inc26

for.inc26:                                        ; preds = %if.end11, %if.then10
  %43 = load i32, i32* %i, align 4
  %dec = add nsw i32 %43, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond5

for.end27:                                        ; preds = %for.cond5
  %44 = load i64, i64* %count, align 8
  store i64 %44, i64* %retval, align 8
  br label %return

return:                                           ; preds = %for.end27, %if.end
  %45 = load i64, i64* %retval, align 8
  ret i64 %45
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i64 @gen_n(i32 %n, i32 %show) #0 {
entry:
  %n.addr = alloca i32, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %a = alloca [1024 x i32], align 16
  store i32 %n, i32* %n.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %1 to i64
  %cmp = icmp ult i64 %0, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %conv2 = trunc i64 %2 to i32
  %3 = load i64, i64* %i, align 8
  %idxprom = trunc i64 %3 to i32
  %arrayidx = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 %idxprom
  store i32 %conv2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %n.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 0
  %6 = load i32, i32* %show.addr, align 4
  %call = call i64 @deranged(i32 0, i32 %5, i32* %arraydecay, i32 %6)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @sub_fact(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 1, %1
  %conv = sext i32 %sub to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %2, 1
  %call = call i64 @sub_fact(i32 %sub1)
  %3 = load i32, i32* %n.addr, align 4
  %sub2 = sub nsw i32 %3, 2
  %call3 = call i64 @sub_fact(i32 %sub2)
  %add = add i64 %call, %call3
  %4 = load i32, i32* %n.addr, align 4
  %sub4 = sub nsw i32 %4, 1
  %conv5 = sext i32 %sub4 to i64
  %mul = mul i64 %add, %conv5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %mul, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  %call1 = call i64 @gen_n(i32 4, i32 1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %call3 = call i64 @gen_n(i32 %2, i32 0)
  %3 = load i32, i32* %i, align 4
  %call4 = call i64 @sub_fact(i32 %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i32 %1, i64 %call3, i64 %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0))
  store i32 10, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp8 = icmp sle i32 %5, 20
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %call10 = call i64 @sub_fact(i32 %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i32 %6, i64 %call10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %8 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %8, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 1, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = sext i32 %sub to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 1:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i64 @sub_fact(i32 %sub1)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub2 = sub nsw i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i64 @sub_fact(i32 %sub2)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i64 %call, %call3
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %conv5 = sext i32 %sub4 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %mul = mul i64 %add, %conv5
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i64 = sext %4
%6:i64 = mul %2, %5
infer %6

; *****
; For LLVM instruction:
;  %cond = phi i64 [ %conv, %cond.true ], [ %mul, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = subnsw 1:i32, %1
%3:i64 = sext %2
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i32 = var
%8:i32 = subnsw %7, 1:i32
%9:i64 = sext %8
%10:i64 = mul %6, %9
%11:i64 = phi %0, %3, %10
infer %11
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -511
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 1:i32, %0
%2:i64 = sext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -511
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i64 = sext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i64 = sext %4
%6:i64 = mul %2, %5
infer %6


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i64 = sext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = subnsw 1:i32, %1
%3:i64 = sext %2
%4:i64 = var
%5:i64 = var
%6:i64 = add %4, %5
%7:i32 = var
%8:i32 = subnsw %7, 1:i32
%9:i64 = sext %8
%10:i64 = mul %6, %9
%11:i64 = phi %0, %3, %10
infer %11


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1912602623
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw 1:i32, %0
%2:i64 = sext %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i64 = sext %1

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sub_fact()

; entering Souper's runOnFunction() for main()

; ModuleID = './Permutations-Derangements.c.bc'
source_filename = "./Permutations-Derangements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [16 x i8] c"Deranged Four:\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"\0ACompare list vs calc:\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"%d:\09%llu\09%llu\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\0Afurther calc:\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"%d: %llu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @deranged(i32 %depth, i32 %len, i32* %d, i32 %show) #0 {
entry:
  %retval = alloca i64, align 8
  %depth.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %d.addr = alloca i32*, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i8, align 1
  %count = alloca i64, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %d, i32** %d.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %count, align 8
  %0 = load i32, i32* %depth.addr, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %show.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %d.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %7, 97
  %call = call i32 @putchar(i32 %add)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  store i64 1, i64* %retval, align 8
  br label %return

if.end4:                                          ; preds = %entry
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc26, %if.end4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %cmp6 = icmp sge i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end27

for.body7:                                        ; preds = %for.cond5
  %12 = load i32, i32* %i, align 4
  %13 = load i32*, i32** %d.addr, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %12, %15
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body7
  br label %for.inc26

if.end11:                                         ; preds = %for.body7
  %16 = load i32*, i32** %d.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %16, i32 %17
  %18 = load i32, i32* %arrayidx12, align 4
  %conv = trunc i32 %18 to i8
  store i8 %conv, i8* %tmp, align 1
  %19 = load i32*, i32** %d.addr, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx13, align 4
  %22 = load i32*, i32** %d.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %21, i32* %arrayidx14, align 4
  %24 = load i8, i8* %tmp, align 1
  %conv15 = sext i8 %24 to i32
  %25 = load i32*, i32** %d.addr, align 4
  %26 = load i32, i32* %depth.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %conv15, i32* %arrayidx16, align 4
  %27 = load i32, i32* %depth.addr, align 4
  %add17 = add nsw i32 %27, 1
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32*, i32** %d.addr, align 4
  %30 = load i32, i32* %show.addr, align 4
  %call18 = call i64 @deranged(i32 %add17, i32 %28, i32* %29, i32 %30)
  %31 = load i64, i64* %count, align 8
  %add19 = add i64 %31, %call18
  store i64 %add19, i64* %count, align 8
  %32 = load i32*, i32** %d.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx20, align 4
  %conv21 = trunc i32 %34 to i8
  store i8 %conv21, i8* %tmp, align 1
  %35 = load i32*, i32** %d.addr, align 4
  %36 = load i32, i32* %depth.addr, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx22, align 4
  %38 = load i32*, i32** %d.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %38, i32 %39
  store i32 %37, i32* %arrayidx23, align 4
  %40 = load i8, i8* %tmp, align 1
  %conv24 = sext i8 %40 to i32
  %41 = load i32*, i32** %d.addr, align 4
  %42 = load i32, i32* %depth.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %41, i32 %42
  store i32 %conv24, i32* %arrayidx25, align 4
  br label %for.inc26

for.inc26:                                        ; preds = %if.end11, %if.then10
  %43 = load i32, i32* %i, align 4
  %dec = add nsw i32 %43, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond5

for.end27:                                        ; preds = %for.cond5
  %44 = load i64, i64* %count, align 8
  store i64 %44, i64* %retval, align 8
  br label %return

return:                                           ; preds = %for.end27, %if.end
  %45 = load i64, i64* %retval, align 8
  ret i64 %45
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i64 @gen_n(i32 %n, i32 %show) #0 {
entry:
  %n.addr = alloca i32, align 4
  %show.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %a = alloca [1024 x i32], align 16
  store i32 %n, i32* %n.addr, align 4
  store i32 %show, i32* %show.addr, align 4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %1 to i64
  %cmp = icmp ult i64 %0, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %conv2 = trunc i64 %2 to i32
  %3 = load i64, i64* %i, align 8
  %idxprom = trunc i64 %3 to i32
  %arrayidx = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 %idxprom
  store i32 %conv2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %n.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %a, i32 0, i32 0
  %6 = load i32, i32* %show.addr, align 4
  %call = call i64 @deranged(i32 0, i32 %5, i32* %arraydecay, i32 %6)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @sub_fact(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 1, %1
  %conv = sext i32 %sub to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %2, 1
  %call = call i64 @sub_fact(i32 %sub1)
  %3 = load i32, i32* %n.addr, align 4
  %sub2 = sub nsw i32 %3, 2
  %call3 = call i64 @sub_fact(i32 %sub2)
  %add = add i64 %call, %call3
  %4 = load i32, i32* %n.addr, align 4
  %sub4 = sub nsw i32 %4, 1
  %conv5 = sext i32 %sub4 to i64
  %mul = mul i64 %add, %conv5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %mul, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  %call1 = call i64 @gen_n(i32 4, i32 1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %call3 = call i64 @gen_n(i32 %2, i32 0)
  %3 = load i32, i32* %i, align 4
  %call4 = call i64 @sub_fact(i32 %3)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i32 %1, i64 %call3, i64 %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0))
  store i32 10, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp8 = icmp sle i32 %5, 20
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %call10 = call i64 @sub_fact(i32 %7)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i32 %6, i64 %call10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %8 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %8, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i64 @gen_n(i32 %2, i32 0)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i64 @sub_fact(i32 %3)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp sle i32 %5, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 20:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call10 = call i64 @sub_fact(i32 %7)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 20:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
