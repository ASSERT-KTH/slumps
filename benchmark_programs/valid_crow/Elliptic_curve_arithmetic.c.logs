
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for zero()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for zero()

; entering Souper's runOnFunction() for is_zero()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp ogt double %0, 1.000000e+20
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = fcmp olt double %1, -1.000000e+20
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lor.ext = zext i1 %2 to i32
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
%3:i32 = zext %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for is_zero()

; entering Souper's runOnFunction() for neg()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for neg()

; entering Souper's runOnFunction() for dbl()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for dbl()

; entering Souper's runOnFunction() for add()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp oeq double %0, %1
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = fcmp oeq double %2, %3
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne i32 %call6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for add()

; entering Souper's runOnFunction() for mul()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %and = and i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mul()

; entering Souper's runOnFunction() for show()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for show()

; entering Souper's runOnFunction() for from_y()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for from_y()

; entering Souper's runOnFunction() for main()

; ModuleID = './Elliptic_curve_arithmetic.c.bc'
source_filename = "./Elliptic_curve_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.pt = type { double, double }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Zero\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"(%.3f, %.3f)\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"a = \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"c = a + b = \00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"d = -c = \00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"c + d = \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"a + b + d = \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"a * 12345 = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @zero(%struct.pt* noalias sret align 8 %agg.result) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double 0x7FF0000000000000, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double 0x7FF0000000000000, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %cmp = fcmp ogt double %0, 1.000000e+20
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp2 = fcmp olt double %1, -1.000000e+20
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @neg(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %1 = load double, double* %y2, align 8
  %fneg = fneg double %1
  store double %fneg, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @dbl(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.pt* %agg.result to i8*
  %1 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %mul = fmul double 3.000000e+00, %2
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %3 = load double, double* %x1, align 8
  %mul2 = fmul double %mul, %3
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %4 = load double, double* %y, align 8
  %mul3 = fmul double 2.000000e+00, %4
  %div = fdiv double %mul2, %mul3
  store double %div, double* %L, align 8
  %5 = load double, double* %L, align 8
  %6 = load double, double* %L, align 8
  %mul4 = fmul double %5, %6
  %x5 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %7 = load double, double* %x5, align 8
  %mul6 = fmul double 2.000000e+00, %7
  %sub = fsub double %mul4, %mul6
  %x7 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub, double* %x7, align 8
  %8 = load double, double* %L, align 8
  %x8 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %9 = load double, double* %x8, align 8
  %x9 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %10 = load double, double* %x9, align 8
  %sub10 = fsub double %9, %10
  %mul11 = fmul double %8, %sub10
  %y12 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %11 = load double, double* %y12, align 8
  %sub13 = fsub double %mul11, %11
  %y14 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub13, double* %y14, align 8
  %12 = bitcast %struct.pt* %agg.result to i8*
  %13 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, %struct.pt* byval(%struct.pt) align 8 %q) #0 {
entry:
  %r = alloca %struct.pt, align 8
  %L = alloca double, align 8
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %cmp = fcmp oeq double %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %cmp3 = fcmp oeq double %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @dbl(%struct.pt* sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %q to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %q)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  %6 = bitcast %struct.pt* %agg.result to i8*
  %7 = bitcast %struct.pt* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %return

if.end9:                                          ; preds = %if.end5
  %y10 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 1
  %8 = load double, double* %y10, align 8
  %y11 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %9 = load double, double* %y11, align 8
  %sub = fsub double %8, %9
  %x12 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %10 = load double, double* %x12, align 8
  %x13 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %11 = load double, double* %x13, align 8
  %sub14 = fsub double %10, %11
  %div = fdiv double %sub, %sub14
  store double %div, double* %L, align 8
  %12 = load double, double* %L, align 8
  %13 = load double, double* %L, align 8
  %mul = fmul double %12, %13
  %x15 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %14 = load double, double* %x15, align 8
  %sub16 = fsub double %mul, %14
  %x17 = getelementptr inbounds %struct.pt, %struct.pt* %q, i32 0, i32 0
  %15 = load double, double* %x17, align 8
  %sub18 = fsub double %sub16, %15
  %x19 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  store double %sub18, double* %x19, align 8
  %16 = load double, double* %L, align 8
  %x20 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %17 = load double, double* %x20, align 8
  %x21 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 0
  %18 = load double, double* %x21, align 8
  %sub22 = fsub double %17, %18
  %mul23 = fmul double %16, %sub22
  %y24 = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %19 = load double, double* %y24, align 8
  %sub25 = fsub double %mul23, %19
  %y26 = getelementptr inbounds %struct.pt, %struct.pt* %r, i32 0, i32 1
  store double %sub25, double* %y26, align 8
  %20 = bitcast %struct.pt* %agg.result to i8*
  %21 = bitcast %struct.pt* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %20, i8* align 8 %21, i32 16, i1 false)
  br label %return

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.pt* noalias sret align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @zero(%struct.pt* sret align 8 %agg.result)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @add(%struct.pt* sret align 8 %tmp, %struct.pt* byval(%struct.pt) align 8 %agg.result, %struct.pt* byval(%struct.pt) align 8 %p)
  %4 = bitcast %struct.pt* %agg.result to i8*
  %5 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  call void @dbl(%struct.pt* sret align 8 %tmp1, %struct.pt* byval(%struct.pt) align 8 %p)
  %6 = bitcast %struct.pt* %p to i8*
  %7 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %shl = shl i32 %8, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, %struct.pt* byval(%struct.pt) align 8 %p) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  %call1 = call i32 @is_zero(%struct.pt* byval(%struct.pt) align 8 %p)
  %tobool = icmp ne i32 %call1, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 0
  %2 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.pt, %struct.pt* %p, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* %cond, double %2, double %3)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @from_y(%struct.pt* noalias sret align 8 %agg.result, double %y) #0 {
entry:
  %y.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double, double* %y.addr, align 8
  %1 = load double, double* %y.addr, align 8
  %mul = fmul double %0, %1
  %sub = fsub double %mul, 7.000000e+00
  %2 = call double @llvm.pow.f64(double %sub, double 0x3FD5555555555555)
  %x = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 0
  store double %2, double* %x, align 8
  %3 = load double, double* %y.addr, align 8
  %y1 = getelementptr inbounds %struct.pt, %struct.pt* %agg.result, i32 0, i32 1
  store double %3, double* %y1, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.pt, align 8
  %b = alloca %struct.pt, align 8
  %c = alloca %struct.pt, align 8
  %d = alloca %struct.pt, align 8
  %tmp = alloca %struct.pt, align 8
  %tmp1 = alloca %struct.pt, align 8
  %agg.tmp = alloca %struct.pt, align 8
  %tmp2 = alloca %struct.pt, align 8
  %agg.tmp3 = alloca %struct.pt, align 8
  %tmp4 = alloca %struct.pt, align 8
  %agg.tmp5 = alloca %struct.pt, align 8
  %agg.tmp6 = alloca %struct.pt, align 8
  %agg.tmp7 = alloca %struct.pt, align 8
  %agg.tmp8 = alloca %struct.pt, align 8
  store i32 0, i32* %retval, align 4
  call void @from_y(%struct.pt* sret align 8 %tmp, double 1.000000e+00)
  %0 = bitcast %struct.pt* %a to i8*
  %1 = bitcast %struct.pt* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 %1, i32 16, i1 false)
  call void @from_y(%struct.pt* sret align 8 %tmp1, double 2.000000e+00)
  %2 = bitcast %struct.pt* %b to i8*
  %3 = bitcast %struct.pt* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 %3, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %a)
  call void @show(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %b)
  call void @add(%struct.pt* sret align 8 %tmp2, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %b)
  %4 = bitcast %struct.pt* %c to i8*
  %5 = bitcast %struct.pt* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 8 %5, i32 16, i1 false)
  %6 = bitcast %struct.pt* %agg.tmp to i8*
  %7 = bitcast %struct.pt* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp)
  call void @neg(%struct.pt* sret align 8 %tmp4, %struct.pt* byval(%struct.pt) align 8 %c)
  %8 = bitcast %struct.pt* %d to i8*
  %9 = bitcast %struct.pt* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  %10 = bitcast %struct.pt* %agg.tmp3 to i8*
  %11 = bitcast %struct.pt* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  call void @show(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp3)
  call void @add(%struct.pt* sret align 8 %agg.tmp5, %struct.pt* byval(%struct.pt) align 8 %c, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @show(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp5)
  call void @add(%struct.pt* sret align 8 %agg.tmp7, %struct.pt* byval(%struct.pt) align 8 %b, %struct.pt* byval(%struct.pt) align 8 %d)
  call void @add(%struct.pt* sret align 8 %agg.tmp6, %struct.pt* byval(%struct.pt) align 8 %a, %struct.pt* byval(%struct.pt) align 8 %agg.tmp7)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp6)
  call void @mul(%struct.pt* sret align 8 %agg.tmp8, %struct.pt* byval(%struct.pt) align 8 %a, i32 12345)
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), %struct.pt* byval(%struct.pt) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
