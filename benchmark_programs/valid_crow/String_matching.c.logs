
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for startsWith()

; ModuleID = './String_matching.c.bc'
source_filename = "./String_matching.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [38 x i8] c"Starts with Test ( Hello,Hell ) : %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"Hell\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Ends with Test ( Code,ode ) : %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Code\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ode\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Contains Test ( Google,msn ) : %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"Google\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"msn\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @startsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i8*, i8** %target.addr, align 4
  %6 = load i32, i32* %tlen, align 4
  %call2 = call i32 @strncmp(i8* %4, i8* %5, i32 %6)
  %cmp3 = icmp eq i32 %call2, 0
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @endsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i32, i32* %clen, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i32, i32* %tlen, align 4
  %idx.neg = sub i32 0, %6
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  %7 = load i8*, i8** %target.addr, align 4
  %8 = load i32, i32* %tlen, align 4
  %call3 = call i32 @strncmp(i8* %add.ptr2, i8* %7, i32 %8)
  %cmp4 = icmp eq i32 %call3, 0
  %conv = zext i1 %cmp4 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @doesContain(i8* %container, i8* %target) #0 {
entry:
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call = call i8* @strstr(i8* %0, i8* %1)
  %cmp = icmp ne i8* %call, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i8* @strstr(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @startsWith(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call2 = call i32 @endsWith(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i32 %call2)
  %call4 = call i32 @doesContain(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0), i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %clen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %tlen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %tlen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @strncmp(i8* %4, i8* %5, i32 %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %call2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp3 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for startsWith()

; entering Souper's runOnFunction() for endsWith()

; ModuleID = './String_matching.c.bc'
source_filename = "./String_matching.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [38 x i8] c"Starts with Test ( Hello,Hell ) : %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"Hell\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Ends with Test ( Code,ode ) : %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Code\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ode\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Contains Test ( Google,msn ) : %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"Google\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"msn\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @startsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i8*, i8** %target.addr, align 4
  %6 = load i32, i32* %tlen, align 4
  %call2 = call i32 @strncmp(i8* %4, i8* %5, i32 %6)
  %cmp3 = icmp eq i32 %call2, 0
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @endsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i32, i32* %clen, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i32, i32* %tlen, align 4
  %idx.neg = sub i32 0, %6
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  %7 = load i8*, i8** %target.addr, align 4
  %8 = load i32, i32* %tlen, align 4
  %call3 = call i32 @strncmp(i8* %add.ptr2, i8* %7, i32 %8)
  %cmp4 = icmp eq i32 %call3, 0
  %conv = zext i1 %cmp4 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @doesContain(i8* %container, i8* %target) #0 {
entry:
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call = call i8* @strstr(i8* %0, i8* %1)
  %cmp = icmp ne i8* %call, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i8* @strstr(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @startsWith(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call2 = call i32 @endsWith(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i32 %call2)
  %call4 = call i32 @doesContain(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0), i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %clen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %tlen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %clen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %tlen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %idx.neg = sub i32 0, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %tlen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @strncmp(i8* %add.ptr2, i8* %7, i32 %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %call3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp4 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for endsWith()

; entering Souper's runOnFunction() for doesContain()

; ModuleID = './String_matching.c.bc'
source_filename = "./String_matching.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [38 x i8] c"Starts with Test ( Hello,Hell ) : %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"Hell\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Ends with Test ( Code,ode ) : %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Code\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ode\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Contains Test ( Google,msn ) : %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"Google\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"msn\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @startsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i8*, i8** %target.addr, align 4
  %6 = load i32, i32* %tlen, align 4
  %call2 = call i32 @strncmp(i8* %4, i8* %5, i32 %6)
  %cmp3 = icmp eq i32 %call2, 0
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @endsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i32, i32* %clen, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i32, i32* %tlen, align 4
  %idx.neg = sub i32 0, %6
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  %7 = load i8*, i8** %target.addr, align 4
  %8 = load i32, i32* %tlen, align 4
  %call3 = call i32 @strncmp(i8* %add.ptr2, i8* %7, i32 %8)
  %cmp4 = icmp eq i32 %call3, 0
  %conv = zext i1 %cmp4 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @doesContain(i8* %container, i8* %target) #0 {
entry:
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call = call i8* @strstr(i8* %0, i8* %1)
  %cmp = icmp ne i8* %call, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i8* @strstr(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @startsWith(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call2 = call i32 @endsWith(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i32 %call2)
  %call4 = call i32 @doesContain(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0), i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i8* %call, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for doesContain()

; entering Souper's runOnFunction() for main()

; ModuleID = './String_matching.c.bc'
source_filename = "./String_matching.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [38 x i8] c"Starts with Test ( Hello,Hell ) : %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"Hell\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Ends with Test ( Code,ode ) : %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Code\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ode\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Contains Test ( Google,msn ) : %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"Google\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"msn\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @startsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i8*, i8** %target.addr, align 4
  %6 = load i32, i32* %tlen, align 4
  %call2 = call i32 @strncmp(i8* %4, i8* %5, i32 %6)
  %cmp3 = icmp eq i32 %call2, 0
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @endsWith(i8* %container, i8* %target) #0 {
entry:
  %retval = alloca i32, align 4
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  %clen = alloca i32, align 4
  %tlen = alloca i32, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %clen, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %tlen, align 4
  %2 = load i32, i32* %clen, align 4
  %3 = load i32, i32* %tlen, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %container.addr, align 4
  %5 = load i32, i32* %clen, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i32, i32* %tlen, align 4
  %idx.neg = sub i32 0, %6
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  %7 = load i8*, i8** %target.addr, align 4
  %8 = load i32, i32* %tlen, align 4
  %call3 = call i32 @strncmp(i8* %add.ptr2, i8* %7, i32 %8)
  %cmp4 = icmp eq i32 %call3, 0
  %conv = zext i1 %cmp4 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @doesContain(i8* %container, i8* %target) #0 {
entry:
  %container.addr = alloca i8*, align 4
  %target.addr = alloca i8*, align 4
  store i8* %container, i8** %container.addr, align 4
  store i8* %target, i8** %target.addr, align 4
  %0 = load i8*, i8** %container.addr, align 4
  %1 = load i8*, i8** %target.addr, align 4
  %call = call i8* @strstr(i8* %0, i8* %1)
  %cmp = icmp ne i8* %call, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i8* @strstr(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @startsWith(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call2 = call i32 @endsWith(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i32 %call2)
  %call4 = call i32 @doesContain(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0), i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @startsWith(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @endsWith(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @doesContain(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
