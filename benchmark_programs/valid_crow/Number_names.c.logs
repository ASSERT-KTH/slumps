
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for say_hundred()

; ModuleID = './Number_names.c.bc'
source_filename = "./Number_names.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"one\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"two\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"three\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"four\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"five\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"six\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"seven\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"eight\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"nine\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"ten\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"eleven\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"twelve\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"thirteen\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"fourteen\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"fifteen\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"sixteen\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"seventeen\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"eighteen\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"nineteen\00", align 1
@ones = hidden global [20 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c"twenty\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"thirty\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"forty\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"fifty\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"sixty\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"seventy\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"eighty\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"ninety\00", align 1
@tens = hidden global [10 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0)], align 16
@.str.27 = private unnamed_addr constant [9 x i8] c"thousand\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"million\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"billion\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"trillion\00", align 1
@llions = hidden global [5 x i8*] [i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0)], align 16
@maxillion = hidden constant i32 12, align 4
@.str.31 = private unnamed_addr constant [11 x i8] c"%s hundred\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"and \00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.34 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"zero\0A\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"(not a number)\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"minus \00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.42 = private unnamed_addr constant [14 x i8] c"not a number\0A\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"-42\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"1984\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"10000\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"1024\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"1001001001001\00", align 1
@.str.48 = private unnamed_addr constant [58 x i8] c"123456789012345678901234567890123456789012345678900000001\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_hundred(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %c = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  store i32 -3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %len.addr, align 4
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, %2
  %cmp1 = icmp sge i32 %add, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %len.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add2 = add nsw i32 %4, %5
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %add2
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub = sub nsw i32 %conv, 48
  %7 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %7, 3
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add3
  store i32 %sub, i32* %arrayidx4, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %8, 3
  %arrayidx6 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add5
  store i32 0, i32* %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %10 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %11 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %10, %11
  %arrayidx10 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %12 = load i32, i32* %arrayidx10, align 4
  %add11 = add nsw i32 %add9, %12
  %tobool = icmp ne i32 %add11, 0
  br i1 %tobool, label %if.end13, label %if.then12

if.then12:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %for.end
  %arrayidx14 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %13 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %13, 0
  br i1 %tobool15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end13
  %arrayidx17 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %14 = load i32, i32* %arrayidx17, align 4
  %arrayidx18 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %14
  %15 = load i8*, i8** %arrayidx18, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* %15)
  store i32 1, i32* %has_lead.addr, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end13
  %16 = load i32, i32* %has_lead.addr, align 4
  %tobool20 = icmp ne i32 %16, 0
  br i1 %tobool20, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %if.end19
  %arrayidx21 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %17 = load i32, i32* %arrayidx21, align 4
  %tobool22 = icmp ne i32 %17, 0
  br i1 %tobool22, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %arrayidx23 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %18 = load i32, i32* %arrayidx23, align 4
  %tobool24 = icmp ne i32 %18, 0
  br i1 %tobool24, label %if.then25, label %if.end40

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %19 = load i32, i32* %depth.addr, align 4
  %tobool26 = icmp ne i32 %19, 0
  br i1 %tobool26, label %lor.lhs.false27, label %land.lhs.true30

lor.lhs.false27:                                  ; preds = %if.then25
  %arrayidx28 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %20 = load i32, i32* %arrayidx28, align 4
  %tobool29 = icmp ne i32 %20, 0
  br i1 %tobool29, label %land.lhs.true30, label %cond.false

land.lhs.true30:                                  ; preds = %lor.lhs.false27, %if.then25
  %arrayidx31 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 4
  %tobool32 = icmp ne i32 %21, 0
  br i1 %tobool32, label %lor.lhs.false33, label %cond.true

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %arrayidx34 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %22 = load i32, i32* %arrayidx34, align 4
  %tobool35 = icmp ne i32 %22, 0
  br i1 %tobool35, label %cond.false, label %cond.true

cond.true:                                        ; preds = %lor.lhs.false33, %land.lhs.true30
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false33, %lor.lhs.false27
  %arrayidx36 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %23 = load i32, i32* %arrayidx36, align 4
  %tobool37 = icmp ne i32 %23, 0
  %24 = zext i1 %tobool37 to i64
  %cond = select i1 %tobool37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond38 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %cond, %cond.false ]
  %call39 = call i32 (i8*, ...) @printf(i8* %cond38)
  br label %if.end40

if.end40:                                         ; preds = %cond.end, %lor.lhs.false, %if.end19
  %arrayidx41 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %25 = load i32, i32* %arrayidx41, align 4
  %cmp42 = icmp slt i32 %25, 2
  br i1 %cmp42, label %if.then44, label %if.else57

if.then44:                                        ; preds = %if.end40
  %arrayidx45 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %26 = load i32, i32* %arrayidx45, align 4
  %tobool46 = icmp ne i32 %26, 0
  br i1 %tobool46, label %if.then50, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %if.then44
  %arrayidx48 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %27 = load i32, i32* %arrayidx48, align 4
  %tobool49 = icmp ne i32 %27, 0
  br i1 %tobool49, label %if.then50, label %if.end56

if.then50:                                        ; preds = %lor.lhs.false47, %if.then44
  %arrayidx51 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %28 = load i32, i32* %arrayidx51, align 4
  %mul = mul nsw i32 %28, 10
  %arrayidx52 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %29 = load i32, i32* %arrayidx52, align 4
  %add53 = add nsw i32 %mul, %29
  %arrayidx54 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %add53
  %30 = load i8*, i8** %arrayidx54, align 4
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %30)
  br label %if.end56

if.end56:                                         ; preds = %if.then50, %lor.lhs.false47
  br label %if.end77

if.else57:                                        ; preds = %if.end40
  %arrayidx58 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %31 = load i32, i32* %arrayidx58, align 4
  %tobool59 = icmp ne i32 %31, 0
  br i1 %tobool59, label %if.then60, label %if.end69

if.then60:                                        ; preds = %if.else57
  %arrayidx61 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %32 = load i32, i32* %arrayidx61, align 4
  %arrayidx62 = getelementptr inbounds [10 x i8*], [10 x i8*]* @tens, i32 0, i32 %32
  %33 = load i8*, i8** %arrayidx62, align 4
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %33)
  %arrayidx64 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %34 = load i32, i32* %arrayidx64, align 4
  %tobool65 = icmp ne i32 %34, 0
  br i1 %tobool65, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then60
  %call67 = call i32 @putchar(i32 45)
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %if.then60
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.else57
  %arrayidx70 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %35 = load i32, i32* %arrayidx70, align 4
  %tobool71 = icmp ne i32 %35, 0
  br i1 %tobool71, label %if.then72, label %if.end76

if.then72:                                        ; preds = %if.end69
  %arrayidx73 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %36 = load i32, i32* %arrayidx73, align 4
  %arrayidx74 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %36
  %37 = load i8*, i8** %arrayidx74, align 4
  %call75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %37)
  br label %if.end76

if.end76:                                         ; preds = %if.then72, %if.end69
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end56
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end77, %if.then12
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_maxillion(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %e = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 3
  store i32 %div, i32* %n, align 4
  %1 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, 3
  store i32 %rem, i32* %r, align 4
  %2 = load i32, i32* %r, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %n, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n, align 4
  store i32 3, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %r, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  store i8* %add.ptr, i8** %e, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %r, align 4
  %8 = load i32, i32* %n, align 4
  %9 = load i32, i32* %has_lead.addr, align 4
  %call = call i32 @say_hundred(i8* %6, i32 %7, i32 %8, i32 %9)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %do.body
  %10 = load i32, i32* %n, align 4
  %tobool2 = icmp ne i32 %10, 0
  br i1 %tobool2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %land.lhs.true
  store i32 1, i32* %has_lead.addr, align 4
  %11 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @llions, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %depth.addr, align 4
  %tobool5 = icmp ne i32 %13, 0
  br i1 %tobool5, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then3
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end9

if.else:                                          ; preds = %if.then3
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0))
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %land.lhs.true, %do.body
  %14 = load i8*, i8** %e, align 4
  store i8* %14, i8** %s.addr, align 4
  %15 = load i8*, i8** %e, align 4
  %add.ptr11 = getelementptr inbounds i8, i8* %15, i32 3
  store i8* %add.ptr11, i8** %e, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end10
  store i32 3, i32* %r, align 4
  %16 = load i32, i32* %n, align 4
  %dec12 = add nsw i32 %16, -1
  store i32 %dec12, i32* %n, align 4
  %tobool13 = icmp ne i32 %16, 0
  br i1 %tobool13, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden void @say_number(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %got_sign = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %end = alloca i8*, align 4
  %has_lead = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %got_sign, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp slt i32 %conv2, 48
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv5 = sext i8 %6 to i32
  %cmp6 = icmp sgt i32 %conv5, 57
  br i1 %cmp6, label %if.then, label %if.else19

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv8 = sext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 45
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then
  store i32 -1, i32* %got_sign, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv12 = sext i8 %10 to i32
  %cmp13 = icmp eq i32 %conv12, 43
  br i1 %cmp13, label %if.then15, label %if.else16

if.then15:                                        ; preds = %if.else
  store i32 1, i32* %got_sign, align 4
  br label %if.end

if.else16:                                        ; preds = %if.else
  br label %nan

if.end:                                           ; preds = %if.then15
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then11
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  br label %if.end20

if.else19:                                        ; preds = %lor.lhs.false
  store i32 1, i32* %got_sign, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else19, %if.end17
  br label %while.cond21

while.cond21:                                     ; preds = %if.end31, %if.end20
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv22 = sext i8 %13 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond21
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr26 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr26, i8** %s.addr, align 4
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv27 = sext i8 %16 to i32
  %cmp28 = icmp eq i32 %conv27, 0
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %while.body25
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0))
  br label %return

if.end31:                                         ; preds = %while.body25
  br label %while.cond21

while.end32:                                      ; preds = %while.cond21
  %17 = load i8*, i8** %s.addr, align 4
  %call33 = call i32 @strlen(i8* %17) #3
  store i32 %call33, i32* %len, align 4
  %18 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.end35, label %if.then34

if.then34:                                        ; preds = %while.end32
  br label %nan

if.end35:                                         ; preds = %while.end32
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end35
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %len, align 4
  %cmp36 = icmp slt i32 %19, %20
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %21, i32 %22
  %23 = load i8, i8* %arrayidx, align 1
  %conv38 = sext i8 %23 to i32
  %cmp39 = icmp slt i32 %conv38, 48
  br i1 %cmp39, label %if.then46, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %for.body
  %24 = load i8*, i8** %s.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %24, i32 %25
  %26 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %26 to i32
  %cmp44 = icmp sgt i32 %conv43, 57
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %lor.lhs.false41, %for.body
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i32 0, i32 0))
  br label %return

if.end48:                                         ; preds = %lor.lhs.false41
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %got_sign, align 4
  %cmp49 = icmp eq i32 %28, -1
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %for.end
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0))
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %for.end
  %29 = load i32, i32* %len, align 4
  %div = sdiv i32 %29, 12
  store i32 %div, i32* %n, align 4
  %30 = load i32, i32* %len, align 4
  %rem = srem i32 %30, 12
  store i32 %rem, i32* %r, align 4
  %31 = load i32, i32* %r, align 4
  %tobool54 = icmp ne i32 %31, 0
  br i1 %tobool54, label %if.end56, label %if.then55

if.then55:                                        ; preds = %if.end53
  store i32 12, i32* %r, align 4
  %32 = load i32, i32* %n, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.end53
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %35, 12
  %idx.neg = sub i32 0, %mul
  %add.ptr57 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  store i8* %add.ptr57, i8** %end, align 4
  store i32 0, i32* %has_lead, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end56
  %36 = load i8*, i8** %s.addr, align 4
  %37 = load i32, i32* %r, align 4
  %38 = load i32, i32* %n, align 4
  %39 = load i32, i32* %has_lead, align 4
  %call58 = call i32 @say_maxillion(i8* %36, i32 %37, i32 %38, i32 %39)
  store i32 %call58, i32* %has_lead, align 4
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then60, label %if.end73

if.then60:                                        ; preds = %do.body
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc66, %if.then60
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %n, align 4
  %cmp62 = icmp slt i32 %40, %41
  br i1 %cmp62, label %for.body64, label %for.end68

for.body64:                                       ; preds = %for.cond61
  %42 = load i8*, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @llions, i32 0, i32 4), align 16
  %call65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %42)
  br label %for.inc66

for.inc66:                                        ; preds = %for.body64
  %43 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %43, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond61

for.end68:                                        ; preds = %for.cond61
  %44 = load i32, i32* %n, align 4
  %tobool69 = icmp ne i32 %44, 0
  br i1 %tobool69, label %if.then70, label %if.end72

if.then70:                                        ; preds = %for.end68
  %call71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %for.end68
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %do.body
  %45 = load i32, i32* %n, align 4
  %dec74 = add nsw i32 %45, -1
  store i32 %dec74, i32* %n, align 4
  store i32 12, i32* %r, align 4
  %46 = load i8*, i8** %end, align 4
  store i8* %46, i8** %s.addr, align 4
  %47 = load i32, i32* %r, align 4
  %48 = load i8*, i8** %end, align 4
  %add.ptr75 = getelementptr inbounds i8, i8* %48, i32 %47
  store i8* %add.ptr75, i8** %end, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end73
  %49 = load i32, i32* %n, align 4
  %cmp76 = icmp sge i32 %49, 0
  br i1 %cmp76, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i32 0, i32 0))
  br label %return

nan:                                              ; preds = %if.then34, %if.else16
  %call79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42, i32 0, i32 0))
  br label %return

return:                                           ; preds = %nan, %do.end, %if.then46, %if.then30
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @say_number(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.48, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp1 = icmp sge i32 %add, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i1 = sle 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %conv, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add nsw i32 %7, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %8, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %add9, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %add11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
%5:i1 = ne 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool15 = icmp ne i32 %13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %has_lead.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool20 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool22 = icmp ne i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool24 = icmp ne i32 %18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool26 = icmp ne i32 %19, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool29 = icmp ne i32 %20, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool32 = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %arrayidx34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool35 = icmp ne i32 %22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool37 = icmp ne i32 %23, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx41, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp42 = icmp slt i32 %25, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx45, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool46 = icmp ne i32 %26, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %arrayidx48, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool49 = icmp ne i32 %27, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %arrayidx51, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %28, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %arrayidx52, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add53 = add nsw i32 %mul, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %arrayidx58, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool59 = icmp ne i32 %31, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %arrayidx61, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx64, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool65 = icmp ne i32 %34, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %arrayidx70, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool71 = icmp ne i32 %35, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %arrayidx73, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i1 = sle 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
%5:i1 = ne 0:i32, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1614807090
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483632
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 10:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for say_hundred()

; entering Souper's runOnFunction() for say_maxillion()

; ModuleID = './Number_names.c.bc'
source_filename = "./Number_names.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"one\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"two\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"three\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"four\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"five\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"six\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"seven\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"eight\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"nine\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"ten\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"eleven\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"twelve\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"thirteen\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"fourteen\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"fifteen\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"sixteen\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"seventeen\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"eighteen\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"nineteen\00", align 1
@ones = hidden global [20 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c"twenty\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"thirty\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"forty\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"fifty\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"sixty\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"seventy\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"eighty\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"ninety\00", align 1
@tens = hidden global [10 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0)], align 16
@.str.27 = private unnamed_addr constant [9 x i8] c"thousand\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"million\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"billion\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"trillion\00", align 1
@llions = hidden global [5 x i8*] [i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0)], align 16
@maxillion = hidden constant i32 12, align 4
@.str.31 = private unnamed_addr constant [11 x i8] c"%s hundred\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"and \00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.34 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"zero\0A\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"(not a number)\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"minus \00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.42 = private unnamed_addr constant [14 x i8] c"not a number\0A\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"-42\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"1984\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"10000\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"1024\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"1001001001001\00", align 1
@.str.48 = private unnamed_addr constant [58 x i8] c"123456789012345678901234567890123456789012345678900000001\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_hundred(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %c = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  store i32 -3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %len.addr, align 4
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, %2
  %cmp1 = icmp sge i32 %add, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %len.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add2 = add nsw i32 %4, %5
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %add2
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub = sub nsw i32 %conv, 48
  %7 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %7, 3
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add3
  store i32 %sub, i32* %arrayidx4, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %8, 3
  %arrayidx6 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add5
  store i32 0, i32* %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %10 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %11 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %10, %11
  %arrayidx10 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %12 = load i32, i32* %arrayidx10, align 4
  %add11 = add nsw i32 %add9, %12
  %tobool = icmp ne i32 %add11, 0
  br i1 %tobool, label %if.end13, label %if.then12

if.then12:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %for.end
  %arrayidx14 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %13 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %13, 0
  br i1 %tobool15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end13
  %arrayidx17 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %14 = load i32, i32* %arrayidx17, align 4
  %arrayidx18 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %14
  %15 = load i8*, i8** %arrayidx18, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* %15)
  store i32 1, i32* %has_lead.addr, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end13
  %16 = load i32, i32* %has_lead.addr, align 4
  %tobool20 = icmp ne i32 %16, 0
  br i1 %tobool20, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %if.end19
  %arrayidx21 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %17 = load i32, i32* %arrayidx21, align 4
  %tobool22 = icmp ne i32 %17, 0
  br i1 %tobool22, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %arrayidx23 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %18 = load i32, i32* %arrayidx23, align 4
  %tobool24 = icmp ne i32 %18, 0
  br i1 %tobool24, label %if.then25, label %if.end40

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %19 = load i32, i32* %depth.addr, align 4
  %tobool26 = icmp ne i32 %19, 0
  br i1 %tobool26, label %lor.lhs.false27, label %land.lhs.true30

lor.lhs.false27:                                  ; preds = %if.then25
  %arrayidx28 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %20 = load i32, i32* %arrayidx28, align 4
  %tobool29 = icmp ne i32 %20, 0
  br i1 %tobool29, label %land.lhs.true30, label %cond.false

land.lhs.true30:                                  ; preds = %lor.lhs.false27, %if.then25
  %arrayidx31 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 4
  %tobool32 = icmp ne i32 %21, 0
  br i1 %tobool32, label %lor.lhs.false33, label %cond.true

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %arrayidx34 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %22 = load i32, i32* %arrayidx34, align 4
  %tobool35 = icmp ne i32 %22, 0
  br i1 %tobool35, label %cond.false, label %cond.true

cond.true:                                        ; preds = %lor.lhs.false33, %land.lhs.true30
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false33, %lor.lhs.false27
  %arrayidx36 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %23 = load i32, i32* %arrayidx36, align 4
  %tobool37 = icmp ne i32 %23, 0
  %24 = zext i1 %tobool37 to i64
  %cond = select i1 %tobool37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond38 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %cond, %cond.false ]
  %call39 = call i32 (i8*, ...) @printf(i8* %cond38)
  br label %if.end40

if.end40:                                         ; preds = %cond.end, %lor.lhs.false, %if.end19
  %arrayidx41 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %25 = load i32, i32* %arrayidx41, align 4
  %cmp42 = icmp slt i32 %25, 2
  br i1 %cmp42, label %if.then44, label %if.else57

if.then44:                                        ; preds = %if.end40
  %arrayidx45 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %26 = load i32, i32* %arrayidx45, align 4
  %tobool46 = icmp ne i32 %26, 0
  br i1 %tobool46, label %if.then50, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %if.then44
  %arrayidx48 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %27 = load i32, i32* %arrayidx48, align 4
  %tobool49 = icmp ne i32 %27, 0
  br i1 %tobool49, label %if.then50, label %if.end56

if.then50:                                        ; preds = %lor.lhs.false47, %if.then44
  %arrayidx51 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %28 = load i32, i32* %arrayidx51, align 4
  %mul = mul nsw i32 %28, 10
  %arrayidx52 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %29 = load i32, i32* %arrayidx52, align 4
  %add53 = add nsw i32 %mul, %29
  %arrayidx54 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %add53
  %30 = load i8*, i8** %arrayidx54, align 4
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %30)
  br label %if.end56

if.end56:                                         ; preds = %if.then50, %lor.lhs.false47
  br label %if.end77

if.else57:                                        ; preds = %if.end40
  %arrayidx58 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %31 = load i32, i32* %arrayidx58, align 4
  %tobool59 = icmp ne i32 %31, 0
  br i1 %tobool59, label %if.then60, label %if.end69

if.then60:                                        ; preds = %if.else57
  %arrayidx61 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %32 = load i32, i32* %arrayidx61, align 4
  %arrayidx62 = getelementptr inbounds [10 x i8*], [10 x i8*]* @tens, i32 0, i32 %32
  %33 = load i8*, i8** %arrayidx62, align 4
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %33)
  %arrayidx64 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %34 = load i32, i32* %arrayidx64, align 4
  %tobool65 = icmp ne i32 %34, 0
  br i1 %tobool65, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then60
  %call67 = call i32 @putchar(i32 45)
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %if.then60
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.else57
  %arrayidx70 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %35 = load i32, i32* %arrayidx70, align 4
  %tobool71 = icmp ne i32 %35, 0
  br i1 %tobool71, label %if.then72, label %if.end76

if.then72:                                        ; preds = %if.end69
  %arrayidx73 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %36 = load i32, i32* %arrayidx73, align 4
  %arrayidx74 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %36
  %37 = load i8*, i8** %arrayidx74, align 4
  %call75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %37)
  br label %if.end76

if.end76:                                         ; preds = %if.then72, %if.end69
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end56
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end77, %if.then12
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_maxillion(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %e = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 3
  store i32 %div, i32* %n, align 4
  %1 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, 3
  store i32 %rem, i32* %r, align 4
  %2 = load i32, i32* %r, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %n, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n, align 4
  store i32 3, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %r, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  store i8* %add.ptr, i8** %e, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %r, align 4
  %8 = load i32, i32* %n, align 4
  %9 = load i32, i32* %has_lead.addr, align 4
  %call = call i32 @say_hundred(i8* %6, i32 %7, i32 %8, i32 %9)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %do.body
  %10 = load i32, i32* %n, align 4
  %tobool2 = icmp ne i32 %10, 0
  br i1 %tobool2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %land.lhs.true
  store i32 1, i32* %has_lead.addr, align 4
  %11 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @llions, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %depth.addr, align 4
  %tobool5 = icmp ne i32 %13, 0
  br i1 %tobool5, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then3
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end9

if.else:                                          ; preds = %if.then3
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0))
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %land.lhs.true, %do.body
  %14 = load i8*, i8** %e, align 4
  store i8* %14, i8** %s.addr, align 4
  %15 = load i8*, i8** %e, align 4
  %add.ptr11 = getelementptr inbounds i8, i8* %15, i32 3
  store i8* %add.ptr11, i8** %e, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end10
  store i32 3, i32* %r, align 4
  %16 = load i32, i32* %n, align 4
  %dec12 = add nsw i32 %16, -1
  store i32 %dec12, i32* %n, align 4
  %tobool13 = icmp ne i32 %16, 0
  br i1 %tobool13, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden void @say_number(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %got_sign = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %end = alloca i8*, align 4
  %has_lead = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %got_sign, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp slt i32 %conv2, 48
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv5 = sext i8 %6 to i32
  %cmp6 = icmp sgt i32 %conv5, 57
  br i1 %cmp6, label %if.then, label %if.else19

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv8 = sext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 45
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then
  store i32 -1, i32* %got_sign, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv12 = sext i8 %10 to i32
  %cmp13 = icmp eq i32 %conv12, 43
  br i1 %cmp13, label %if.then15, label %if.else16

if.then15:                                        ; preds = %if.else
  store i32 1, i32* %got_sign, align 4
  br label %if.end

if.else16:                                        ; preds = %if.else
  br label %nan

if.end:                                           ; preds = %if.then15
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then11
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  br label %if.end20

if.else19:                                        ; preds = %lor.lhs.false
  store i32 1, i32* %got_sign, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else19, %if.end17
  br label %while.cond21

while.cond21:                                     ; preds = %if.end31, %if.end20
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv22 = sext i8 %13 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond21
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr26 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr26, i8** %s.addr, align 4
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv27 = sext i8 %16 to i32
  %cmp28 = icmp eq i32 %conv27, 0
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %while.body25
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0))
  br label %return

if.end31:                                         ; preds = %while.body25
  br label %while.cond21

while.end32:                                      ; preds = %while.cond21
  %17 = load i8*, i8** %s.addr, align 4
  %call33 = call i32 @strlen(i8* %17) #3
  store i32 %call33, i32* %len, align 4
  %18 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.end35, label %if.then34

if.then34:                                        ; preds = %while.end32
  br label %nan

if.end35:                                         ; preds = %while.end32
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end35
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %len, align 4
  %cmp36 = icmp slt i32 %19, %20
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %21, i32 %22
  %23 = load i8, i8* %arrayidx, align 1
  %conv38 = sext i8 %23 to i32
  %cmp39 = icmp slt i32 %conv38, 48
  br i1 %cmp39, label %if.then46, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %for.body
  %24 = load i8*, i8** %s.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %24, i32 %25
  %26 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %26 to i32
  %cmp44 = icmp sgt i32 %conv43, 57
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %lor.lhs.false41, %for.body
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i32 0, i32 0))
  br label %return

if.end48:                                         ; preds = %lor.lhs.false41
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %got_sign, align 4
  %cmp49 = icmp eq i32 %28, -1
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %for.end
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0))
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %for.end
  %29 = load i32, i32* %len, align 4
  %div = sdiv i32 %29, 12
  store i32 %div, i32* %n, align 4
  %30 = load i32, i32* %len, align 4
  %rem = srem i32 %30, 12
  store i32 %rem, i32* %r, align 4
  %31 = load i32, i32* %r, align 4
  %tobool54 = icmp ne i32 %31, 0
  br i1 %tobool54, label %if.end56, label %if.then55

if.then55:                                        ; preds = %if.end53
  store i32 12, i32* %r, align 4
  %32 = load i32, i32* %n, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.end53
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %35, 12
  %idx.neg = sub i32 0, %mul
  %add.ptr57 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  store i8* %add.ptr57, i8** %end, align 4
  store i32 0, i32* %has_lead, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end56
  %36 = load i8*, i8** %s.addr, align 4
  %37 = load i32, i32* %r, align 4
  %38 = load i32, i32* %n, align 4
  %39 = load i32, i32* %has_lead, align 4
  %call58 = call i32 @say_maxillion(i8* %36, i32 %37, i32 %38, i32 %39)
  store i32 %call58, i32* %has_lead, align 4
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then60, label %if.end73

if.then60:                                        ; preds = %do.body
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc66, %if.then60
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %n, align 4
  %cmp62 = icmp slt i32 %40, %41
  br i1 %cmp62, label %for.body64, label %for.end68

for.body64:                                       ; preds = %for.cond61
  %42 = load i8*, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @llions, i32 0, i32 4), align 16
  %call65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %42)
  br label %for.inc66

for.inc66:                                        ; preds = %for.body64
  %43 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %43, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond61

for.end68:                                        ; preds = %for.cond61
  %44 = load i32, i32* %n, align 4
  %tobool69 = icmp ne i32 %44, 0
  br i1 %tobool69, label %if.then70, label %if.end72

if.then70:                                        ; preds = %for.end68
  %call71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %for.end68
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %do.body
  %45 = load i32, i32* %n, align 4
  %dec74 = add nsw i32 %45, -1
  store i32 %dec74, i32* %n, align 4
  store i32 12, i32* %r, align 4
  %46 = load i8*, i8** %end, align 4
  store i8* %46, i8** %s.addr, align 4
  %47 = load i32, i32* %r, align 4
  %48 = load i8*, i8** %end, align 4
  %add.ptr75 = getelementptr inbounds i8, i8* %48, i32 %47
  store i8* %add.ptr75, i8** %end, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end73
  %49 = load i32, i32* %n, align 4
  %cmp76 = icmp sge i32 %49, 0
  br i1 %cmp76, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i32 0, i32 0))
  br label %return

nan:                                              ; preds = %if.then34, %if.else16
  %call79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42, i32 0, i32 0))
  br label %return

return:                                           ; preds = %nan, %do.end, %if.then46, %if.then30
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @say_number(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.48, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %has_lead.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @say_hundred(i8* %6, i32 %7, i32 %8, i32 %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i32 %13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec12 = add nsw i32 %16, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool13 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 432013312
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for say_maxillion()

; entering Souper's runOnFunction() for say_number()

; ModuleID = './Number_names.c.bc'
source_filename = "./Number_names.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"one\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"two\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"three\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"four\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"five\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"six\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"seven\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"eight\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"nine\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"ten\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"eleven\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"twelve\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"thirteen\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"fourteen\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"fifteen\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"sixteen\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"seventeen\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"eighteen\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"nineteen\00", align 1
@ones = hidden global [20 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c"twenty\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"thirty\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"forty\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"fifty\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"sixty\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"seventy\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"eighty\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"ninety\00", align 1
@tens = hidden global [10 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0)], align 16
@.str.27 = private unnamed_addr constant [9 x i8] c"thousand\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"million\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"billion\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"trillion\00", align 1
@llions = hidden global [5 x i8*] [i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0)], align 16
@maxillion = hidden constant i32 12, align 4
@.str.31 = private unnamed_addr constant [11 x i8] c"%s hundred\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"and \00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.34 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"zero\0A\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"(not a number)\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"minus \00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.42 = private unnamed_addr constant [14 x i8] c"not a number\0A\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"-42\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"1984\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"10000\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"1024\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"1001001001001\00", align 1
@.str.48 = private unnamed_addr constant [58 x i8] c"123456789012345678901234567890123456789012345678900000001\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_hundred(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %c = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  store i32 -3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %len.addr, align 4
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, %2
  %cmp1 = icmp sge i32 %add, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %len.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add2 = add nsw i32 %4, %5
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %add2
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub = sub nsw i32 %conv, 48
  %7 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %7, 3
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add3
  store i32 %sub, i32* %arrayidx4, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %8, 3
  %arrayidx6 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add5
  store i32 0, i32* %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %10 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %11 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %10, %11
  %arrayidx10 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %12 = load i32, i32* %arrayidx10, align 4
  %add11 = add nsw i32 %add9, %12
  %tobool = icmp ne i32 %add11, 0
  br i1 %tobool, label %if.end13, label %if.then12

if.then12:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %for.end
  %arrayidx14 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %13 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %13, 0
  br i1 %tobool15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end13
  %arrayidx17 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %14 = load i32, i32* %arrayidx17, align 4
  %arrayidx18 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %14
  %15 = load i8*, i8** %arrayidx18, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* %15)
  store i32 1, i32* %has_lead.addr, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end13
  %16 = load i32, i32* %has_lead.addr, align 4
  %tobool20 = icmp ne i32 %16, 0
  br i1 %tobool20, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %if.end19
  %arrayidx21 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %17 = load i32, i32* %arrayidx21, align 4
  %tobool22 = icmp ne i32 %17, 0
  br i1 %tobool22, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %arrayidx23 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %18 = load i32, i32* %arrayidx23, align 4
  %tobool24 = icmp ne i32 %18, 0
  br i1 %tobool24, label %if.then25, label %if.end40

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %19 = load i32, i32* %depth.addr, align 4
  %tobool26 = icmp ne i32 %19, 0
  br i1 %tobool26, label %lor.lhs.false27, label %land.lhs.true30

lor.lhs.false27:                                  ; preds = %if.then25
  %arrayidx28 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %20 = load i32, i32* %arrayidx28, align 4
  %tobool29 = icmp ne i32 %20, 0
  br i1 %tobool29, label %land.lhs.true30, label %cond.false

land.lhs.true30:                                  ; preds = %lor.lhs.false27, %if.then25
  %arrayidx31 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 4
  %tobool32 = icmp ne i32 %21, 0
  br i1 %tobool32, label %lor.lhs.false33, label %cond.true

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %arrayidx34 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %22 = load i32, i32* %arrayidx34, align 4
  %tobool35 = icmp ne i32 %22, 0
  br i1 %tobool35, label %cond.false, label %cond.true

cond.true:                                        ; preds = %lor.lhs.false33, %land.lhs.true30
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false33, %lor.lhs.false27
  %arrayidx36 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %23 = load i32, i32* %arrayidx36, align 4
  %tobool37 = icmp ne i32 %23, 0
  %24 = zext i1 %tobool37 to i64
  %cond = select i1 %tobool37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond38 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %cond, %cond.false ]
  %call39 = call i32 (i8*, ...) @printf(i8* %cond38)
  br label %if.end40

if.end40:                                         ; preds = %cond.end, %lor.lhs.false, %if.end19
  %arrayidx41 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %25 = load i32, i32* %arrayidx41, align 4
  %cmp42 = icmp slt i32 %25, 2
  br i1 %cmp42, label %if.then44, label %if.else57

if.then44:                                        ; preds = %if.end40
  %arrayidx45 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %26 = load i32, i32* %arrayidx45, align 4
  %tobool46 = icmp ne i32 %26, 0
  br i1 %tobool46, label %if.then50, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %if.then44
  %arrayidx48 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %27 = load i32, i32* %arrayidx48, align 4
  %tobool49 = icmp ne i32 %27, 0
  br i1 %tobool49, label %if.then50, label %if.end56

if.then50:                                        ; preds = %lor.lhs.false47, %if.then44
  %arrayidx51 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %28 = load i32, i32* %arrayidx51, align 4
  %mul = mul nsw i32 %28, 10
  %arrayidx52 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %29 = load i32, i32* %arrayidx52, align 4
  %add53 = add nsw i32 %mul, %29
  %arrayidx54 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %add53
  %30 = load i8*, i8** %arrayidx54, align 4
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %30)
  br label %if.end56

if.end56:                                         ; preds = %if.then50, %lor.lhs.false47
  br label %if.end77

if.else57:                                        ; preds = %if.end40
  %arrayidx58 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %31 = load i32, i32* %arrayidx58, align 4
  %tobool59 = icmp ne i32 %31, 0
  br i1 %tobool59, label %if.then60, label %if.end69

if.then60:                                        ; preds = %if.else57
  %arrayidx61 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %32 = load i32, i32* %arrayidx61, align 4
  %arrayidx62 = getelementptr inbounds [10 x i8*], [10 x i8*]* @tens, i32 0, i32 %32
  %33 = load i8*, i8** %arrayidx62, align 4
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %33)
  %arrayidx64 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %34 = load i32, i32* %arrayidx64, align 4
  %tobool65 = icmp ne i32 %34, 0
  br i1 %tobool65, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then60
  %call67 = call i32 @putchar(i32 45)
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %if.then60
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.else57
  %arrayidx70 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %35 = load i32, i32* %arrayidx70, align 4
  %tobool71 = icmp ne i32 %35, 0
  br i1 %tobool71, label %if.then72, label %if.end76

if.then72:                                        ; preds = %if.end69
  %arrayidx73 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %36 = load i32, i32* %arrayidx73, align 4
  %arrayidx74 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %36
  %37 = load i8*, i8** %arrayidx74, align 4
  %call75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %37)
  br label %if.end76

if.end76:                                         ; preds = %if.then72, %if.end69
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end56
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end77, %if.then12
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_maxillion(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %e = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 3
  store i32 %div, i32* %n, align 4
  %1 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, 3
  store i32 %rem, i32* %r, align 4
  %2 = load i32, i32* %r, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %n, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n, align 4
  store i32 3, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %r, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  store i8* %add.ptr, i8** %e, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %r, align 4
  %8 = load i32, i32* %n, align 4
  %9 = load i32, i32* %has_lead.addr, align 4
  %call = call i32 @say_hundred(i8* %6, i32 %7, i32 %8, i32 %9)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %do.body
  %10 = load i32, i32* %n, align 4
  %tobool2 = icmp ne i32 %10, 0
  br i1 %tobool2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %land.lhs.true
  store i32 1, i32* %has_lead.addr, align 4
  %11 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @llions, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %depth.addr, align 4
  %tobool5 = icmp ne i32 %13, 0
  br i1 %tobool5, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then3
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end9

if.else:                                          ; preds = %if.then3
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0))
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %land.lhs.true, %do.body
  %14 = load i8*, i8** %e, align 4
  store i8* %14, i8** %s.addr, align 4
  %15 = load i8*, i8** %e, align 4
  %add.ptr11 = getelementptr inbounds i8, i8* %15, i32 3
  store i8* %add.ptr11, i8** %e, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end10
  store i32 3, i32* %r, align 4
  %16 = load i32, i32* %n, align 4
  %dec12 = add nsw i32 %16, -1
  store i32 %dec12, i32* %n, align 4
  %tobool13 = icmp ne i32 %16, 0
  br i1 %tobool13, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden void @say_number(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %got_sign = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %end = alloca i8*, align 4
  %has_lead = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %got_sign, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp slt i32 %conv2, 48
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv5 = sext i8 %6 to i32
  %cmp6 = icmp sgt i32 %conv5, 57
  br i1 %cmp6, label %if.then, label %if.else19

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv8 = sext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 45
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then
  store i32 -1, i32* %got_sign, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv12 = sext i8 %10 to i32
  %cmp13 = icmp eq i32 %conv12, 43
  br i1 %cmp13, label %if.then15, label %if.else16

if.then15:                                        ; preds = %if.else
  store i32 1, i32* %got_sign, align 4
  br label %if.end

if.else16:                                        ; preds = %if.else
  br label %nan

if.end:                                           ; preds = %if.then15
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then11
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  br label %if.end20

if.else19:                                        ; preds = %lor.lhs.false
  store i32 1, i32* %got_sign, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else19, %if.end17
  br label %while.cond21

while.cond21:                                     ; preds = %if.end31, %if.end20
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv22 = sext i8 %13 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond21
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr26 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr26, i8** %s.addr, align 4
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv27 = sext i8 %16 to i32
  %cmp28 = icmp eq i32 %conv27, 0
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %while.body25
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0))
  br label %return

if.end31:                                         ; preds = %while.body25
  br label %while.cond21

while.end32:                                      ; preds = %while.cond21
  %17 = load i8*, i8** %s.addr, align 4
  %call33 = call i32 @strlen(i8* %17) #3
  store i32 %call33, i32* %len, align 4
  %18 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.end35, label %if.then34

if.then34:                                        ; preds = %while.end32
  br label %nan

if.end35:                                         ; preds = %while.end32
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end35
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %len, align 4
  %cmp36 = icmp slt i32 %19, %20
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %21, i32 %22
  %23 = load i8, i8* %arrayidx, align 1
  %conv38 = sext i8 %23 to i32
  %cmp39 = icmp slt i32 %conv38, 48
  br i1 %cmp39, label %if.then46, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %for.body
  %24 = load i8*, i8** %s.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %24, i32 %25
  %26 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %26 to i32
  %cmp44 = icmp sgt i32 %conv43, 57
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %lor.lhs.false41, %for.body
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i32 0, i32 0))
  br label %return

if.end48:                                         ; preds = %lor.lhs.false41
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %got_sign, align 4
  %cmp49 = icmp eq i32 %28, -1
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %for.end
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0))
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %for.end
  %29 = load i32, i32* %len, align 4
  %div = sdiv i32 %29, 12
  store i32 %div, i32* %n, align 4
  %30 = load i32, i32* %len, align 4
  %rem = srem i32 %30, 12
  store i32 %rem, i32* %r, align 4
  %31 = load i32, i32* %r, align 4
  %tobool54 = icmp ne i32 %31, 0
  br i1 %tobool54, label %if.end56, label %if.then55

if.then55:                                        ; preds = %if.end53
  store i32 12, i32* %r, align 4
  %32 = load i32, i32* %n, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.end53
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %35, 12
  %idx.neg = sub i32 0, %mul
  %add.ptr57 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  store i8* %add.ptr57, i8** %end, align 4
  store i32 0, i32* %has_lead, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end56
  %36 = load i8*, i8** %s.addr, align 4
  %37 = load i32, i32* %r, align 4
  %38 = load i32, i32* %n, align 4
  %39 = load i32, i32* %has_lead, align 4
  %call58 = call i32 @say_maxillion(i8* %36, i32 %37, i32 %38, i32 %39)
  store i32 %call58, i32* %has_lead, align 4
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then60, label %if.end73

if.then60:                                        ; preds = %do.body
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc66, %if.then60
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %n, align 4
  %cmp62 = icmp slt i32 %40, %41
  br i1 %cmp62, label %for.body64, label %for.end68

for.body64:                                       ; preds = %for.cond61
  %42 = load i8*, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @llions, i32 0, i32 4), align 16
  %call65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %42)
  br label %for.inc66

for.inc66:                                        ; preds = %for.body64
  %43 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %43, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond61

for.end68:                                        ; preds = %for.cond61
  %44 = load i32, i32* %n, align 4
  %tobool69 = icmp ne i32 %44, 0
  br i1 %tobool69, label %if.then70, label %if.end72

if.then70:                                        ; preds = %for.end68
  %call71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %for.end68
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %do.body
  %45 = load i32, i32* %n, align 4
  %dec74 = add nsw i32 %45, -1
  store i32 %dec74, i32* %n, align 4
  store i32 12, i32* %r, align 4
  %46 = load i8*, i8** %end, align 4
  store i8* %46, i8** %s.addr, align 4
  %47 = load i32, i32* %r, align 4
  %48 = load i8*, i8** %end, align 4
  %add.ptr75 = getelementptr inbounds i8, i8* %48, i32 %47
  store i8* %add.ptr75, i8** %end, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end73
  %49 = load i32, i32* %n, align 4
  %cmp76 = icmp sge i32 %49, 0
  br i1 %cmp76, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i32 0, i32 0))
  br label %return

nan:                                              ; preds = %if.then34, %if.else16
  %call79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42, i32 0, i32 0))
  br label %return

return:                                           ; preds = %nan, %do.end, %if.then46, %if.then30
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @say_number(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.48, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %conv, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %conv2, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = slt %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp6 = icmp sgt i32 %conv5, 57
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = slt 57:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %conv8, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv12 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp13 = icmp eq i32 %conv12, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv22 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp23 = icmp eq i32 %conv22, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp28 = icmp eq i32 %conv27, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call33 = call i32 @strlen(i8* %17) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv38 = sext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp39 = icmp slt i32 %conv38, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = slt %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %arrayidx42, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv43 = sext i8 %26 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp44 = icmp sgt i32 %conv43, 57
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = slt 57:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %got_sign, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp49 = icmp eq i32 %28, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %29, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 12:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %30, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 12:i32
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool54 = icmp ne i32 %31, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %32, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %35, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %idx.neg = sub i32 0, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 12:i32, %0
%2:i32 = sub 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %has_lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call58 = call i32 @say_maxillion(i8* %36, i32 %37, i32 %38, i32 %39)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool59 = icmp ne i32 %call58, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp62 = icmp slt i32 %40, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc67 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool69 = icmp ne i32 %44, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec74 = add nsw i32 %45, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp76 = icmp sge i32 %49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = slt %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = slt 57:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 12:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -102623248
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 12:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 12:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 262152
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 12:i32, %0
%2:i32 = sub 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -262152
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 12:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for say_number()

; entering Souper's runOnFunction() for main()

; ModuleID = './Number_names.c.bc'
source_filename = "./Number_names.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"one\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"two\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"three\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"four\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"five\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"six\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"seven\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"eight\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"nine\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"ten\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"eleven\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"twelve\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"thirteen\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"fourteen\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"fifteen\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"sixteen\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"seventeen\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"eighteen\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"nineteen\00", align 1
@ones = hidden global [20 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c"twenty\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"thirty\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"forty\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"fifty\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"sixty\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"seventy\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"eighty\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"ninety\00", align 1
@tens = hidden global [10 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0)], align 16
@.str.27 = private unnamed_addr constant [9 x i8] c"thousand\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"million\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"billion\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"trillion\00", align 1
@llions = hidden global [5 x i8*] [i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0)], align 16
@maxillion = hidden constant i32 12, align 4
@.str.31 = private unnamed_addr constant [11 x i8] c"%s hundred\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"and \00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.34 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"zero\0A\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"(not a number)\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"minus \00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.42 = private unnamed_addr constant [14 x i8] c"not a number\0A\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"-42\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"1984\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"10000\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"1024\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"1001001001001\00", align 1
@.str.48 = private unnamed_addr constant [58 x i8] c"123456789012345678901234567890123456789012345678900000001\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_hundred(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %c = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  store i32 -3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %len.addr, align 4
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, %2
  %cmp1 = icmp sge i32 %add, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %len.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add2 = add nsw i32 %4, %5
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %add2
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub = sub nsw i32 %conv, 48
  %7 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %7, 3
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add3
  store i32 %sub, i32* %arrayidx4, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %8, 3
  %arrayidx6 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 %add5
  store i32 0, i32* %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %10 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %11 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %10, %11
  %arrayidx10 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %12 = load i32, i32* %arrayidx10, align 4
  %add11 = add nsw i32 %add9, %12
  %tobool = icmp ne i32 %add11, 0
  br i1 %tobool, label %if.end13, label %if.then12

if.then12:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %for.end
  %arrayidx14 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %13 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %13, 0
  br i1 %tobool15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end13
  %arrayidx17 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %14 = load i32, i32* %arrayidx17, align 4
  %arrayidx18 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %14
  %15 = load i8*, i8** %arrayidx18, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* %15)
  store i32 1, i32* %has_lead.addr, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end13
  %16 = load i32, i32* %has_lead.addr, align 4
  %tobool20 = icmp ne i32 %16, 0
  br i1 %tobool20, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %if.end19
  %arrayidx21 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %17 = load i32, i32* %arrayidx21, align 4
  %tobool22 = icmp ne i32 %17, 0
  br i1 %tobool22, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %arrayidx23 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %18 = load i32, i32* %arrayidx23, align 4
  %tobool24 = icmp ne i32 %18, 0
  br i1 %tobool24, label %if.then25, label %if.end40

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %19 = load i32, i32* %depth.addr, align 4
  %tobool26 = icmp ne i32 %19, 0
  br i1 %tobool26, label %lor.lhs.false27, label %land.lhs.true30

lor.lhs.false27:                                  ; preds = %if.then25
  %arrayidx28 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %20 = load i32, i32* %arrayidx28, align 4
  %tobool29 = icmp ne i32 %20, 0
  br i1 %tobool29, label %land.lhs.true30, label %cond.false

land.lhs.true30:                                  ; preds = %lor.lhs.false27, %if.then25
  %arrayidx31 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 4
  %tobool32 = icmp ne i32 %21, 0
  br i1 %tobool32, label %lor.lhs.false33, label %cond.true

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %arrayidx34 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %22 = load i32, i32* %arrayidx34, align 4
  %tobool35 = icmp ne i32 %22, 0
  br i1 %tobool35, label %cond.false, label %cond.true

cond.true:                                        ; preds = %lor.lhs.false33, %land.lhs.true30
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false33, %lor.lhs.false27
  %arrayidx36 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 0
  %23 = load i32, i32* %arrayidx36, align 4
  %tobool37 = icmp ne i32 %23, 0
  %24 = zext i1 %tobool37 to i64
  %cond = select i1 %tobool37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond38 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %cond, %cond.false ]
  %call39 = call i32 (i8*, ...) @printf(i8* %cond38)
  br label %if.end40

if.end40:                                         ; preds = %cond.end, %lor.lhs.false, %if.end19
  %arrayidx41 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %25 = load i32, i32* %arrayidx41, align 4
  %cmp42 = icmp slt i32 %25, 2
  br i1 %cmp42, label %if.then44, label %if.else57

if.then44:                                        ; preds = %if.end40
  %arrayidx45 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %26 = load i32, i32* %arrayidx45, align 4
  %tobool46 = icmp ne i32 %26, 0
  br i1 %tobool46, label %if.then50, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %if.then44
  %arrayidx48 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %27 = load i32, i32* %arrayidx48, align 4
  %tobool49 = icmp ne i32 %27, 0
  br i1 %tobool49, label %if.then50, label %if.end56

if.then50:                                        ; preds = %lor.lhs.false47, %if.then44
  %arrayidx51 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %28 = load i32, i32* %arrayidx51, align 4
  %mul = mul nsw i32 %28, 10
  %arrayidx52 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %29 = load i32, i32* %arrayidx52, align 4
  %add53 = add nsw i32 %mul, %29
  %arrayidx54 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %add53
  %30 = load i8*, i8** %arrayidx54, align 4
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %30)
  br label %if.end56

if.end56:                                         ; preds = %if.then50, %lor.lhs.false47
  br label %if.end77

if.else57:                                        ; preds = %if.end40
  %arrayidx58 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %31 = load i32, i32* %arrayidx58, align 4
  %tobool59 = icmp ne i32 %31, 0
  br i1 %tobool59, label %if.then60, label %if.end69

if.then60:                                        ; preds = %if.else57
  %arrayidx61 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 1
  %32 = load i32, i32* %arrayidx61, align 4
  %arrayidx62 = getelementptr inbounds [10 x i8*], [10 x i8*]* @tens, i32 0, i32 %32
  %33 = load i8*, i8** %arrayidx62, align 4
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %33)
  %arrayidx64 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %34 = load i32, i32* %arrayidx64, align 4
  %tobool65 = icmp ne i32 %34, 0
  br i1 %tobool65, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then60
  %call67 = call i32 @putchar(i32 45)
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %if.then60
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.else57
  %arrayidx70 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %35 = load i32, i32* %arrayidx70, align 4
  %tobool71 = icmp ne i32 %35, 0
  br i1 %tobool71, label %if.then72, label %if.end76

if.then72:                                        ; preds = %if.end69
  %arrayidx73 = getelementptr inbounds [3 x i32], [3 x i32]* %c, i32 0, i32 2
  %36 = load i32, i32* %arrayidx73, align 4
  %arrayidx74 = getelementptr inbounds [20 x i8*], [20 x i8*]* @ones, i32 0, i32 %36
  %37 = load i8*, i8** %arrayidx74, align 4
  %call75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* %37)
  br label %if.end76

if.end76:                                         ; preds = %if.then72, %if.end69
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end56
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end77, %if.then12
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @say_maxillion(i8* %s, i32 %len, i32 %depth, i32 %has_lead) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %has_lead.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %e = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %has_lead, i32* %has_lead.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 3
  store i32 %div, i32* %n, align 4
  %1 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, 3
  store i32 %rem, i32* %r, align 4
  %2 = load i32, i32* %r, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %n, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n, align 4
  store i32 3, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %r, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 %5
  store i8* %add.ptr, i8** %e, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %r, align 4
  %8 = load i32, i32* %n, align 4
  %9 = load i32, i32* %has_lead.addr, align 4
  %call = call i32 @say_hundred(i8* %6, i32 %7, i32 %8, i32 %9)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %do.body
  %10 = load i32, i32* %n, align 4
  %tobool2 = icmp ne i32 %10, 0
  br i1 %tobool2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %land.lhs.true
  store i32 1, i32* %has_lead.addr, align 4
  %11 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @llions, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %depth.addr, align 4
  %tobool5 = icmp ne i32 %13, 0
  br i1 %tobool5, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then3
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end9

if.else:                                          ; preds = %if.then3
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0))
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %land.lhs.true, %do.body
  %14 = load i8*, i8** %e, align 4
  store i8* %14, i8** %s.addr, align 4
  %15 = load i8*, i8** %e, align 4
  %add.ptr11 = getelementptr inbounds i8, i8* %15, i32 3
  store i8* %add.ptr11, i8** %e, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end10
  store i32 3, i32* %r, align 4
  %16 = load i32, i32* %n, align 4
  %dec12 = add nsw i32 %16, -1
  store i32 %dec12, i32* %n, align 4
  %tobool13 = icmp ne i32 %16, 0
  br i1 %tobool13, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden void @say_number(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %got_sign = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %end = alloca i8*, align 4
  %has_lead = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %got_sign, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp slt i32 %conv2, 48
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv5 = sext i8 %6 to i32
  %cmp6 = icmp sgt i32 %conv5, 57
  br i1 %cmp6, label %if.then, label %if.else19

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv8 = sext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 45
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then
  store i32 -1, i32* %got_sign, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv12 = sext i8 %10 to i32
  %cmp13 = icmp eq i32 %conv12, 43
  br i1 %cmp13, label %if.then15, label %if.else16

if.then15:                                        ; preds = %if.else
  store i32 1, i32* %got_sign, align 4
  br label %if.end

if.else16:                                        ; preds = %if.else
  br label %nan

if.end:                                           ; preds = %if.then15
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then11
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  br label %if.end20

if.else19:                                        ; preds = %lor.lhs.false
  store i32 1, i32* %got_sign, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else19, %if.end17
  br label %while.cond21

while.cond21:                                     ; preds = %if.end31, %if.end20
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv22 = sext i8 %13 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond21
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr26 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr26, i8** %s.addr, align 4
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv27 = sext i8 %16 to i32
  %cmp28 = icmp eq i32 %conv27, 0
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %while.body25
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0))
  br label %return

if.end31:                                         ; preds = %while.body25
  br label %while.cond21

while.end32:                                      ; preds = %while.cond21
  %17 = load i8*, i8** %s.addr, align 4
  %call33 = call i32 @strlen(i8* %17) #3
  store i32 %call33, i32* %len, align 4
  %18 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.end35, label %if.then34

if.then34:                                        ; preds = %while.end32
  br label %nan

if.end35:                                         ; preds = %while.end32
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end35
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %len, align 4
  %cmp36 = icmp slt i32 %19, %20
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %21, i32 %22
  %23 = load i8, i8* %arrayidx, align 1
  %conv38 = sext i8 %23 to i32
  %cmp39 = icmp slt i32 %conv38, 48
  br i1 %cmp39, label %if.then46, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %for.body
  %24 = load i8*, i8** %s.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %24, i32 %25
  %26 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %26 to i32
  %cmp44 = icmp sgt i32 %conv43, 57
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %lor.lhs.false41, %for.body
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i32 0, i32 0))
  br label %return

if.end48:                                         ; preds = %lor.lhs.false41
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %got_sign, align 4
  %cmp49 = icmp eq i32 %28, -1
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %for.end
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0))
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %for.end
  %29 = load i32, i32* %len, align 4
  %div = sdiv i32 %29, 12
  store i32 %div, i32* %n, align 4
  %30 = load i32, i32* %len, align 4
  %rem = srem i32 %30, 12
  store i32 %rem, i32* %r, align 4
  %31 = load i32, i32* %r, align 4
  %tobool54 = icmp ne i32 %31, 0
  br i1 %tobool54, label %if.end56, label %if.then55

if.then55:                                        ; preds = %if.end53
  store i32 12, i32* %r, align 4
  %32 = load i32, i32* %n, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %n, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.end53
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i32, i32* %len, align 4
  %add.ptr = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %35, 12
  %idx.neg = sub i32 0, %mul
  %add.ptr57 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  store i8* %add.ptr57, i8** %end, align 4
  store i32 0, i32* %has_lead, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end56
  %36 = load i8*, i8** %s.addr, align 4
  %37 = load i32, i32* %r, align 4
  %38 = load i32, i32* %n, align 4
  %39 = load i32, i32* %has_lead, align 4
  %call58 = call i32 @say_maxillion(i8* %36, i32 %37, i32 %38, i32 %39)
  store i32 %call58, i32* %has_lead, align 4
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then60, label %if.end73

if.then60:                                        ; preds = %do.body
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc66, %if.then60
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %n, align 4
  %cmp62 = icmp slt i32 %40, %41
  br i1 %cmp62, label %for.body64, label %for.end68

for.body64:                                       ; preds = %for.cond61
  %42 = load i8*, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @llions, i32 0, i32 4), align 16
  %call65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* %42)
  br label %for.inc66

for.inc66:                                        ; preds = %for.body64
  %43 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %43, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond61

for.end68:                                        ; preds = %for.cond61
  %44 = load i32, i32* %n, align 4
  %tobool69 = icmp ne i32 %44, 0
  br i1 %tobool69, label %if.then70, label %if.end72

if.then70:                                        ; preds = %for.end68
  %call71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %for.end68
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %do.body
  %45 = load i32, i32* %n, align 4
  %dec74 = add nsw i32 %45, -1
  store i32 %dec74, i32* %n, align 4
  store i32 12, i32* %r, align 4
  %46 = load i8*, i8** %end, align 4
  store i8* %46, i8** %s.addr, align 4
  %47 = load i32, i32* %r, align 4
  %48 = load i8*, i8** %end, align 4
  %add.ptr75 = getelementptr inbounds i8, i8* %48, i32 %47
  store i8* %add.ptr75, i8** %end, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end73
  %49 = load i32, i32* %n, align 4
  %cmp76 = icmp sge i32 %49, 0
  br i1 %cmp76, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i32 0, i32 0))
  br label %return

nan:                                              ; preds = %if.then34, %if.else16
  %call79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42, i32 0, i32 0))
  br label %return

return:                                           ; preds = %nan, %do.end, %if.then46, %if.then30
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @say_number(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i32 0, i32 0))
  call void @say_number(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.48, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
