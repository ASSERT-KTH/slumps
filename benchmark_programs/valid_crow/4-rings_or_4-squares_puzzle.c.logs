
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for bf()

; ModuleID = './4-rings_or_4-squares_puzzle.c.bc'
source_filename = "./4-rings_or_4-squares_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@lo = hidden global i32 0, align 4
@f = hidden global i32 0, align 4
@hi = hidden global i32 0, align 4
@unique = hidden global i32 0, align 4
@a = hidden global i32 0, align 4
@c = hidden global i32 0, align 4
@d = hidden global i32 0, align 4
@g = hidden global i32 0, align 4
@e = hidden global i32 0, align 4
@b = hidden global i32 0, align 4
@solutions = hidden global i32 0, align 4
@show = hidden global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"%d %d %d %d %d %d %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"\0A%d unique solutions in %d to %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"\0A%d non-unique solutions in %d to %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bf() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @f, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @f, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @f, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @f, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end30

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @f, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %land.lhs.true5, label %if.end30

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %10 = load i32, i32* @f, align 4
  %11 = load i32, i32* @g, align 4
  %cmp6 = icmp ne i32 %10, %11
  br i1 %cmp6, label %land.lhs.true7, label %if.end30

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %12 = load i32, i32* @f, align 4
  %13 = load i32, i32* @e, align 4
  %cmp8 = icmp ne i32 %12, %13
  br i1 %cmp8, label %if.then, label %if.end30

if.then:                                          ; preds = %land.lhs.true7, %for.body
  %14 = load i32, i32* @e, align 4
  %15 = load i32, i32* @f, align 4
  %add = add nsw i32 %14, %15
  %16 = load i32, i32* @c, align 4
  %sub = sub nsw i32 %add, %16
  store i32 %sub, i32* @b, align 4
  %17 = load i32, i32* @b, align 4
  %18 = load i32, i32* @lo, align 4
  %cmp9 = icmp sge i32 %17, %18
  br i1 %cmp9, label %land.lhs.true10, label %if.end29

land.lhs.true10:                                  ; preds = %if.then
  %19 = load i32, i32* @b, align 4
  %20 = load i32, i32* @hi, align 4
  %cmp11 = icmp sle i32 %19, %20
  br i1 %cmp11, label %land.lhs.true12, label %if.end29

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %21 = load i32, i32* @unique, align 4
  %tobool13 = icmp ne i32 %21, 0
  br i1 %tobool13, label %lor.lhs.false14, label %if.then26

lor.lhs.false14:                                  ; preds = %land.lhs.true12
  %22 = load i32, i32* @b, align 4
  %23 = load i32, i32* @a, align 4
  %cmp15 = icmp ne i32 %22, %23
  br i1 %cmp15, label %land.lhs.true16, label %if.end29

land.lhs.true16:                                  ; preds = %lor.lhs.false14
  %24 = load i32, i32* @b, align 4
  %25 = load i32, i32* @c, align 4
  %cmp17 = icmp ne i32 %24, %25
  br i1 %cmp17, label %land.lhs.true18, label %if.end29

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %26 = load i32, i32* @b, align 4
  %27 = load i32, i32* @d, align 4
  %cmp19 = icmp ne i32 %26, %27
  br i1 %cmp19, label %land.lhs.true20, label %if.end29

land.lhs.true20:                                  ; preds = %land.lhs.true18
  %28 = load i32, i32* @b, align 4
  %29 = load i32, i32* @g, align 4
  %cmp21 = icmp ne i32 %28, %29
  br i1 %cmp21, label %land.lhs.true22, label %if.end29

land.lhs.true22:                                  ; preds = %land.lhs.true20
  %30 = load i32, i32* @b, align 4
  %31 = load i32, i32* @e, align 4
  %cmp23 = icmp ne i32 %30, %31
  br i1 %cmp23, label %land.lhs.true24, label %if.end29

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %32 = load i32, i32* @b, align 4
  %33 = load i32, i32* @f, align 4
  %cmp25 = icmp ne i32 %32, %33
  br i1 %cmp25, label %if.then26, label %if.end29

if.then26:                                        ; preds = %land.lhs.true24, %land.lhs.true12
  %34 = load i32, i32* @solutions, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* @solutions, align 4
  %35 = load i32, i32* @show, align 4
  %tobool27 = icmp ne i32 %35, 0
  br i1 %tobool27, label %if.then28, label %if.end

if.then28:                                        ; preds = %if.then26
  %36 = load i32, i32* @a, align 4
  %37 = load i32, i32* @b, align 4
  %38 = load i32, i32* @c, align 4
  %39 = load i32, i32* @d, align 4
  %40 = load i32, i32* @e, align 4
  %41 = load i32, i32* @f, align 4
  %42 = load i32, i32* @g, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i32 %36, i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42)
  br label %if.end

if.end:                                           ; preds = %if.then28, %if.then26
  br label %if.end29

if.end29:                                         ; preds = %if.end, %land.lhs.true24, %land.lhs.true22, %land.lhs.true20, %land.lhs.true18, %land.lhs.true16, %lor.lhs.false14, %land.lhs.true10, %if.then
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %land.lhs.true7, %land.lhs.true5, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %43 = load i32, i32* @f, align 4
  %inc31 = add nsw i32 %43, 1
  store i32 %inc31, i32* @f, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @ge() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @e, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @e, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @e, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @e, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end19

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @e, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true3, %for.body
  %10 = load i32, i32* @d, align 4
  %11 = load i32, i32* @e, align 4
  %add = add nsw i32 %10, %11
  store i32 %add, i32* @g, align 4
  %12 = load i32, i32* @g, align 4
  %13 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %12, %13
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %14 = load i32, i32* @g, align 4
  %15 = load i32, i32* @hi, align 4
  %cmp7 = icmp sle i32 %14, %15
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %16 = load i32, i32* @unique, align 4
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then18

lor.lhs.false10:                                  ; preds = %land.lhs.true8
  %17 = load i32, i32* @g, align 4
  %18 = load i32, i32* @a, align 4
  %cmp11 = icmp ne i32 %17, %18
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %lor.lhs.false10
  %19 = load i32, i32* @g, align 4
  %20 = load i32, i32* @c, align 4
  %cmp13 = icmp ne i32 %19, %20
  br i1 %cmp13, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %21 = load i32, i32* @g, align 4
  %22 = load i32, i32* @d, align 4
  %cmp15 = icmp ne i32 %21, %22
  br i1 %cmp15, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %23 = load i32, i32* @g, align 4
  %24 = load i32, i32* @e, align 4
  %cmp17 = icmp ne i32 %23, %24
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true8
  call void @bf()
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true16, %land.lhs.true14, %land.lhs.true12, %lor.lhs.false10, %land.lhs.true6, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %25 = load i32, i32* @e, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* @e, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @acd() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* @c, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @lo, align 4
  store i32 %3, i32* @d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* @d, align 4
  %5 = load i32, i32* @hi, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body3
  %7 = load i32, i32* @c, align 4
  %8 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %7, %8
  br i1 %cmp4, label %if.then, label %if.end14

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %9 = load i32, i32* @c, align 4
  %10 = load i32, i32* @d, align 4
  %add = add nsw i32 %9, %10
  store i32 %add, i32* @a, align 4
  %11 = load i32, i32* @a, align 4
  %12 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %11, %12
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @hi, align 4
  %cmp6 = icmp sle i32 %13, %14
  br i1 %cmp6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %15 = load i32, i32* @unique, align 4
  %tobool8 = icmp ne i32 %15, 0
  br i1 %tobool8, label %lor.lhs.false9, label %if.then13

lor.lhs.false9:                                   ; preds = %land.lhs.true7
  %16 = load i32, i32* @c, align 4
  %cmp10 = icmp ne i32 %16, 0
  br i1 %cmp10, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %lor.lhs.false9
  %17 = load i32, i32* @d, align 4
  %cmp12 = icmp ne i32 %17, 0
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %land.lhs.true11, %land.lhs.true7
  call void @ge()
  br label %if.end

if.end:                                           ; preds = %if.then13, %land.lhs.true11, %lor.lhs.false9, %land.lhs.true, %if.then
  br label %if.end14

if.end14:                                         ; preds = %if.end, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %18 = load i32, i32* @d, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* @d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %19 = load i32, i32* @c, align 4
  %inc16 = add nsw i32 %19, 1
  store i32 %inc16, i32* @c, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foursquares(i32 %plo, i32 %phi, i32 %punique, i32 %pshow) #0 {
entry:
  %plo.addr = alloca i32, align 4
  %phi.addr = alloca i32, align 4
  %punique.addr = alloca i32, align 4
  %pshow.addr = alloca i32, align 4
  store i32 %plo, i32* %plo.addr, align 4
  store i32 %phi, i32* %phi.addr, align 4
  store i32 %punique, i32* %punique.addr, align 4
  store i32 %pshow, i32* %pshow.addr, align 4
  %0 = load i32, i32* %plo.addr, align 4
  store i32 %0, i32* @lo, align 4
  %1 = load i32, i32* %phi.addr, align 4
  store i32 %1, i32* @hi, align 4
  %2 = load i32, i32* %punique.addr, align 4
  store i32 %2, i32* @unique, align 4
  %3 = load i32, i32* %pshow.addr, align 4
  store i32 %3, i32* @show, align 4
  store i32 0, i32* @solutions, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  call void @acd()
  %4 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @solutions, align 4
  %6 = load i32, i32* @lo, align 4
  %7 = load i32, i32* @hi, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* @solutions, align 4
  %9 = load i32, i32* @lo, align 4
  %10 = load i32, i32* @hi, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i32 0, i32 0), i32 %8, i32 %9, i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @foursquares(i32 1, i32 7, i32 1, i32 1)
  call void @foursquares(i32 3, i32 9, i32 1, i32 1)
  call void @foursquares(i32 0, i32 9, i32 0, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @unique, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ne i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp ne i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp ne i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %add, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
infer %4

; *****
; For LLVM instruction:
;  %17 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sge i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp sle i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* @unique, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool13 = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* @a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp ne i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp ne i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp ne i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp ne i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp ne i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp25 = icmp ne i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* @solutions, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* @show, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool27 = icmp ne i32 %35, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* @a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* @b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* @f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc31 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for bf()

; entering Souper's runOnFunction() for ge()

; ModuleID = './4-rings_or_4-squares_puzzle.c.bc'
source_filename = "./4-rings_or_4-squares_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@lo = hidden global i32 0, align 4
@f = hidden global i32 0, align 4
@hi = hidden global i32 0, align 4
@unique = hidden global i32 0, align 4
@a = hidden global i32 0, align 4
@c = hidden global i32 0, align 4
@d = hidden global i32 0, align 4
@g = hidden global i32 0, align 4
@e = hidden global i32 0, align 4
@b = hidden global i32 0, align 4
@solutions = hidden global i32 0, align 4
@show = hidden global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"%d %d %d %d %d %d %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"\0A%d unique solutions in %d to %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"\0A%d non-unique solutions in %d to %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bf() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @f, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @f, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @f, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @f, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end30

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @f, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %land.lhs.true5, label %if.end30

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %10 = load i32, i32* @f, align 4
  %11 = load i32, i32* @g, align 4
  %cmp6 = icmp ne i32 %10, %11
  br i1 %cmp6, label %land.lhs.true7, label %if.end30

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %12 = load i32, i32* @f, align 4
  %13 = load i32, i32* @e, align 4
  %cmp8 = icmp ne i32 %12, %13
  br i1 %cmp8, label %if.then, label %if.end30

if.then:                                          ; preds = %land.lhs.true7, %for.body
  %14 = load i32, i32* @e, align 4
  %15 = load i32, i32* @f, align 4
  %add = add nsw i32 %14, %15
  %16 = load i32, i32* @c, align 4
  %sub = sub nsw i32 %add, %16
  store i32 %sub, i32* @b, align 4
  %17 = load i32, i32* @b, align 4
  %18 = load i32, i32* @lo, align 4
  %cmp9 = icmp sge i32 %17, %18
  br i1 %cmp9, label %land.lhs.true10, label %if.end29

land.lhs.true10:                                  ; preds = %if.then
  %19 = load i32, i32* @b, align 4
  %20 = load i32, i32* @hi, align 4
  %cmp11 = icmp sle i32 %19, %20
  br i1 %cmp11, label %land.lhs.true12, label %if.end29

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %21 = load i32, i32* @unique, align 4
  %tobool13 = icmp ne i32 %21, 0
  br i1 %tobool13, label %lor.lhs.false14, label %if.then26

lor.lhs.false14:                                  ; preds = %land.lhs.true12
  %22 = load i32, i32* @b, align 4
  %23 = load i32, i32* @a, align 4
  %cmp15 = icmp ne i32 %22, %23
  br i1 %cmp15, label %land.lhs.true16, label %if.end29

land.lhs.true16:                                  ; preds = %lor.lhs.false14
  %24 = load i32, i32* @b, align 4
  %25 = load i32, i32* @c, align 4
  %cmp17 = icmp ne i32 %24, %25
  br i1 %cmp17, label %land.lhs.true18, label %if.end29

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %26 = load i32, i32* @b, align 4
  %27 = load i32, i32* @d, align 4
  %cmp19 = icmp ne i32 %26, %27
  br i1 %cmp19, label %land.lhs.true20, label %if.end29

land.lhs.true20:                                  ; preds = %land.lhs.true18
  %28 = load i32, i32* @b, align 4
  %29 = load i32, i32* @g, align 4
  %cmp21 = icmp ne i32 %28, %29
  br i1 %cmp21, label %land.lhs.true22, label %if.end29

land.lhs.true22:                                  ; preds = %land.lhs.true20
  %30 = load i32, i32* @b, align 4
  %31 = load i32, i32* @e, align 4
  %cmp23 = icmp ne i32 %30, %31
  br i1 %cmp23, label %land.lhs.true24, label %if.end29

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %32 = load i32, i32* @b, align 4
  %33 = load i32, i32* @f, align 4
  %cmp25 = icmp ne i32 %32, %33
  br i1 %cmp25, label %if.then26, label %if.end29

if.then26:                                        ; preds = %land.lhs.true24, %land.lhs.true12
  %34 = load i32, i32* @solutions, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* @solutions, align 4
  %35 = load i32, i32* @show, align 4
  %tobool27 = icmp ne i32 %35, 0
  br i1 %tobool27, label %if.then28, label %if.end

if.then28:                                        ; preds = %if.then26
  %36 = load i32, i32* @a, align 4
  %37 = load i32, i32* @b, align 4
  %38 = load i32, i32* @c, align 4
  %39 = load i32, i32* @d, align 4
  %40 = load i32, i32* @e, align 4
  %41 = load i32, i32* @f, align 4
  %42 = load i32, i32* @g, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i32 %36, i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42)
  br label %if.end

if.end:                                           ; preds = %if.then28, %if.then26
  br label %if.end29

if.end29:                                         ; preds = %if.end, %land.lhs.true24, %land.lhs.true22, %land.lhs.true20, %land.lhs.true18, %land.lhs.true16, %lor.lhs.false14, %land.lhs.true10, %if.then
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %land.lhs.true7, %land.lhs.true5, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %43 = load i32, i32* @f, align 4
  %inc31 = add nsw i32 %43, 1
  store i32 %inc31, i32* @f, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @ge() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @e, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @e, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @e, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @e, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end19

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @e, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true3, %for.body
  %10 = load i32, i32* @d, align 4
  %11 = load i32, i32* @e, align 4
  %add = add nsw i32 %10, %11
  store i32 %add, i32* @g, align 4
  %12 = load i32, i32* @g, align 4
  %13 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %12, %13
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %14 = load i32, i32* @g, align 4
  %15 = load i32, i32* @hi, align 4
  %cmp7 = icmp sle i32 %14, %15
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %16 = load i32, i32* @unique, align 4
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then18

lor.lhs.false10:                                  ; preds = %land.lhs.true8
  %17 = load i32, i32* @g, align 4
  %18 = load i32, i32* @a, align 4
  %cmp11 = icmp ne i32 %17, %18
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %lor.lhs.false10
  %19 = load i32, i32* @g, align 4
  %20 = load i32, i32* @c, align 4
  %cmp13 = icmp ne i32 %19, %20
  br i1 %cmp13, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %21 = load i32, i32* @g, align 4
  %22 = load i32, i32* @d, align 4
  %cmp15 = icmp ne i32 %21, %22
  br i1 %cmp15, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %23 = load i32, i32* @g, align 4
  %24 = load i32, i32* @e, align 4
  %cmp17 = icmp ne i32 %23, %24
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true8
  call void @bf()
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true16, %land.lhs.true14, %land.lhs.true12, %lor.lhs.false10, %land.lhs.true6, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %25 = load i32, i32* @e, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* @e, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @acd() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* @c, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @lo, align 4
  store i32 %3, i32* @d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* @d, align 4
  %5 = load i32, i32* @hi, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body3
  %7 = load i32, i32* @c, align 4
  %8 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %7, %8
  br i1 %cmp4, label %if.then, label %if.end14

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %9 = load i32, i32* @c, align 4
  %10 = load i32, i32* @d, align 4
  %add = add nsw i32 %9, %10
  store i32 %add, i32* @a, align 4
  %11 = load i32, i32* @a, align 4
  %12 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %11, %12
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @hi, align 4
  %cmp6 = icmp sle i32 %13, %14
  br i1 %cmp6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %15 = load i32, i32* @unique, align 4
  %tobool8 = icmp ne i32 %15, 0
  br i1 %tobool8, label %lor.lhs.false9, label %if.then13

lor.lhs.false9:                                   ; preds = %land.lhs.true7
  %16 = load i32, i32* @c, align 4
  %cmp10 = icmp ne i32 %16, 0
  br i1 %cmp10, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %lor.lhs.false9
  %17 = load i32, i32* @d, align 4
  %cmp12 = icmp ne i32 %17, 0
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %land.lhs.true11, %land.lhs.true7
  call void @ge()
  br label %if.end

if.end:                                           ; preds = %if.then13, %land.lhs.true11, %lor.lhs.false9, %land.lhs.true, %if.then
  br label %if.end14

if.end14:                                         ; preds = %if.end, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %18 = load i32, i32* @d, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* @d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %19 = load i32, i32* @c, align 4
  %inc16 = add nsw i32 %19, 1
  store i32 %inc16, i32* @c, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foursquares(i32 %plo, i32 %phi, i32 %punique, i32 %pshow) #0 {
entry:
  %plo.addr = alloca i32, align 4
  %phi.addr = alloca i32, align 4
  %punique.addr = alloca i32, align 4
  %pshow.addr = alloca i32, align 4
  store i32 %plo, i32* %plo.addr, align 4
  store i32 %phi, i32* %phi.addr, align 4
  store i32 %punique, i32* %punique.addr, align 4
  store i32 %pshow, i32* %pshow.addr, align 4
  %0 = load i32, i32* %plo.addr, align 4
  store i32 %0, i32* @lo, align 4
  %1 = load i32, i32* %phi.addr, align 4
  store i32 %1, i32* @hi, align 4
  %2 = load i32, i32* %punique.addr, align 4
  store i32 %2, i32* @unique, align 4
  %3 = load i32, i32* %pshow.addr, align 4
  store i32 %3, i32* @show, align 4
  store i32 0, i32* @solutions, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  call void @acd()
  %4 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @solutions, align 4
  %6 = load i32, i32* @lo, align 4
  %7 = load i32, i32* @hi, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* @solutions, align 4
  %9 = load i32, i32* @lo, align 4
  %10 = load i32, i32* @hi, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i32 0, i32 0), i32 %8, i32 %9, i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @foursquares(i32 1, i32 7, i32 1, i32 1)
  call void @foursquares(i32 3, i32 9, i32 1, i32 1)
  call void @foursquares(i32 0, i32 9, i32 0, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @unique, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ne i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sge i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sle i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* @unique, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* @a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp ne i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp ne i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp ne i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* @g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp ne i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* @e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for ge()

; entering Souper's runOnFunction() for acd()

; ModuleID = './4-rings_or_4-squares_puzzle.c.bc'
source_filename = "./4-rings_or_4-squares_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@lo = hidden global i32 0, align 4
@f = hidden global i32 0, align 4
@hi = hidden global i32 0, align 4
@unique = hidden global i32 0, align 4
@a = hidden global i32 0, align 4
@c = hidden global i32 0, align 4
@d = hidden global i32 0, align 4
@g = hidden global i32 0, align 4
@e = hidden global i32 0, align 4
@b = hidden global i32 0, align 4
@solutions = hidden global i32 0, align 4
@show = hidden global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"%d %d %d %d %d %d %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"\0A%d unique solutions in %d to %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"\0A%d non-unique solutions in %d to %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bf() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @f, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @f, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @f, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @f, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end30

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @f, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %land.lhs.true5, label %if.end30

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %10 = load i32, i32* @f, align 4
  %11 = load i32, i32* @g, align 4
  %cmp6 = icmp ne i32 %10, %11
  br i1 %cmp6, label %land.lhs.true7, label %if.end30

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %12 = load i32, i32* @f, align 4
  %13 = load i32, i32* @e, align 4
  %cmp8 = icmp ne i32 %12, %13
  br i1 %cmp8, label %if.then, label %if.end30

if.then:                                          ; preds = %land.lhs.true7, %for.body
  %14 = load i32, i32* @e, align 4
  %15 = load i32, i32* @f, align 4
  %add = add nsw i32 %14, %15
  %16 = load i32, i32* @c, align 4
  %sub = sub nsw i32 %add, %16
  store i32 %sub, i32* @b, align 4
  %17 = load i32, i32* @b, align 4
  %18 = load i32, i32* @lo, align 4
  %cmp9 = icmp sge i32 %17, %18
  br i1 %cmp9, label %land.lhs.true10, label %if.end29

land.lhs.true10:                                  ; preds = %if.then
  %19 = load i32, i32* @b, align 4
  %20 = load i32, i32* @hi, align 4
  %cmp11 = icmp sle i32 %19, %20
  br i1 %cmp11, label %land.lhs.true12, label %if.end29

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %21 = load i32, i32* @unique, align 4
  %tobool13 = icmp ne i32 %21, 0
  br i1 %tobool13, label %lor.lhs.false14, label %if.then26

lor.lhs.false14:                                  ; preds = %land.lhs.true12
  %22 = load i32, i32* @b, align 4
  %23 = load i32, i32* @a, align 4
  %cmp15 = icmp ne i32 %22, %23
  br i1 %cmp15, label %land.lhs.true16, label %if.end29

land.lhs.true16:                                  ; preds = %lor.lhs.false14
  %24 = load i32, i32* @b, align 4
  %25 = load i32, i32* @c, align 4
  %cmp17 = icmp ne i32 %24, %25
  br i1 %cmp17, label %land.lhs.true18, label %if.end29

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %26 = load i32, i32* @b, align 4
  %27 = load i32, i32* @d, align 4
  %cmp19 = icmp ne i32 %26, %27
  br i1 %cmp19, label %land.lhs.true20, label %if.end29

land.lhs.true20:                                  ; preds = %land.lhs.true18
  %28 = load i32, i32* @b, align 4
  %29 = load i32, i32* @g, align 4
  %cmp21 = icmp ne i32 %28, %29
  br i1 %cmp21, label %land.lhs.true22, label %if.end29

land.lhs.true22:                                  ; preds = %land.lhs.true20
  %30 = load i32, i32* @b, align 4
  %31 = load i32, i32* @e, align 4
  %cmp23 = icmp ne i32 %30, %31
  br i1 %cmp23, label %land.lhs.true24, label %if.end29

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %32 = load i32, i32* @b, align 4
  %33 = load i32, i32* @f, align 4
  %cmp25 = icmp ne i32 %32, %33
  br i1 %cmp25, label %if.then26, label %if.end29

if.then26:                                        ; preds = %land.lhs.true24, %land.lhs.true12
  %34 = load i32, i32* @solutions, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* @solutions, align 4
  %35 = load i32, i32* @show, align 4
  %tobool27 = icmp ne i32 %35, 0
  br i1 %tobool27, label %if.then28, label %if.end

if.then28:                                        ; preds = %if.then26
  %36 = load i32, i32* @a, align 4
  %37 = load i32, i32* @b, align 4
  %38 = load i32, i32* @c, align 4
  %39 = load i32, i32* @d, align 4
  %40 = load i32, i32* @e, align 4
  %41 = load i32, i32* @f, align 4
  %42 = load i32, i32* @g, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i32 %36, i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42)
  br label %if.end

if.end:                                           ; preds = %if.then28, %if.then26
  br label %if.end29

if.end29:                                         ; preds = %if.end, %land.lhs.true24, %land.lhs.true22, %land.lhs.true20, %land.lhs.true18, %land.lhs.true16, %lor.lhs.false14, %land.lhs.true10, %if.then
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %land.lhs.true7, %land.lhs.true5, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %43 = load i32, i32* @f, align 4
  %inc31 = add nsw i32 %43, 1
  store i32 %inc31, i32* @f, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @ge() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @e, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @e, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @e, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @e, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end19

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @e, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true3, %for.body
  %10 = load i32, i32* @d, align 4
  %11 = load i32, i32* @e, align 4
  %add = add nsw i32 %10, %11
  store i32 %add, i32* @g, align 4
  %12 = load i32, i32* @g, align 4
  %13 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %12, %13
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %14 = load i32, i32* @g, align 4
  %15 = load i32, i32* @hi, align 4
  %cmp7 = icmp sle i32 %14, %15
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %16 = load i32, i32* @unique, align 4
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then18

lor.lhs.false10:                                  ; preds = %land.lhs.true8
  %17 = load i32, i32* @g, align 4
  %18 = load i32, i32* @a, align 4
  %cmp11 = icmp ne i32 %17, %18
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %lor.lhs.false10
  %19 = load i32, i32* @g, align 4
  %20 = load i32, i32* @c, align 4
  %cmp13 = icmp ne i32 %19, %20
  br i1 %cmp13, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %21 = load i32, i32* @g, align 4
  %22 = load i32, i32* @d, align 4
  %cmp15 = icmp ne i32 %21, %22
  br i1 %cmp15, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %23 = load i32, i32* @g, align 4
  %24 = load i32, i32* @e, align 4
  %cmp17 = icmp ne i32 %23, %24
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true8
  call void @bf()
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true16, %land.lhs.true14, %land.lhs.true12, %lor.lhs.false10, %land.lhs.true6, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %25 = load i32, i32* @e, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* @e, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @acd() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* @c, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @lo, align 4
  store i32 %3, i32* @d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* @d, align 4
  %5 = load i32, i32* @hi, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body3
  %7 = load i32, i32* @c, align 4
  %8 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %7, %8
  br i1 %cmp4, label %if.then, label %if.end14

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %9 = load i32, i32* @c, align 4
  %10 = load i32, i32* @d, align 4
  %add = add nsw i32 %9, %10
  store i32 %add, i32* @a, align 4
  %11 = load i32, i32* @a, align 4
  %12 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %11, %12
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @hi, align 4
  %cmp6 = icmp sle i32 %13, %14
  br i1 %cmp6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %15 = load i32, i32* @unique, align 4
  %tobool8 = icmp ne i32 %15, 0
  br i1 %tobool8, label %lor.lhs.false9, label %if.then13

lor.lhs.false9:                                   ; preds = %land.lhs.true7
  %16 = load i32, i32* @c, align 4
  %cmp10 = icmp ne i32 %16, 0
  br i1 %cmp10, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %lor.lhs.false9
  %17 = load i32, i32* @d, align 4
  %cmp12 = icmp ne i32 %17, 0
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %land.lhs.true11, %land.lhs.true7
  call void @ge()
  br label %if.end

if.end:                                           ; preds = %if.then13, %land.lhs.true11, %lor.lhs.false9, %land.lhs.true, %if.then
  br label %if.end14

if.end14:                                         ; preds = %if.end, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %18 = load i32, i32* @d, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* @d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %19 = load i32, i32* @c, align 4
  %inc16 = add nsw i32 %19, 1
  store i32 %inc16, i32* @c, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foursquares(i32 %plo, i32 %phi, i32 %punique, i32 %pshow) #0 {
entry:
  %plo.addr = alloca i32, align 4
  %phi.addr = alloca i32, align 4
  %punique.addr = alloca i32, align 4
  %pshow.addr = alloca i32, align 4
  store i32 %plo, i32* %plo.addr, align 4
  store i32 %phi, i32* %phi.addr, align 4
  store i32 %punique, i32* %punique.addr, align 4
  store i32 %pshow, i32* %pshow.addr, align 4
  %0 = load i32, i32* %plo.addr, align 4
  store i32 %0, i32* @lo, align 4
  %1 = load i32, i32* %phi.addr, align 4
  store i32 %1, i32* @hi, align 4
  %2 = load i32, i32* %punique.addr, align 4
  store i32 %2, i32* @unique, align 4
  %3 = load i32, i32* %pshow.addr, align 4
  store i32 %3, i32* @show, align 4
  store i32 0, i32* @solutions, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  call void @acd()
  %4 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @solutions, align 4
  %6 = load i32, i32* @lo, align 4
  %7 = load i32, i32* @hi, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* @solutions, align 4
  %9 = load i32, i32* @lo, align 4
  %10 = load i32, i32* @hi, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i32 0, i32 0), i32 %8, i32 %9, i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @foursquares(i32 1, i32 7, i32 1, i32 1)
  call void @foursquares(i32 3, i32 9, i32 1, i32 1)
  call void @foursquares(i32 0, i32 9, i32 0, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @unique, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ne i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* @a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sge i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* @a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sle i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* @unique, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool8 = icmp ne i32 %15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp ne i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* @d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* @c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for acd()

; entering Souper's runOnFunction() for foursquares()

; ModuleID = './4-rings_or_4-squares_puzzle.c.bc'
source_filename = "./4-rings_or_4-squares_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@lo = hidden global i32 0, align 4
@f = hidden global i32 0, align 4
@hi = hidden global i32 0, align 4
@unique = hidden global i32 0, align 4
@a = hidden global i32 0, align 4
@c = hidden global i32 0, align 4
@d = hidden global i32 0, align 4
@g = hidden global i32 0, align 4
@e = hidden global i32 0, align 4
@b = hidden global i32 0, align 4
@solutions = hidden global i32 0, align 4
@show = hidden global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"%d %d %d %d %d %d %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"\0A%d unique solutions in %d to %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"\0A%d non-unique solutions in %d to %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bf() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @f, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @f, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @f, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @f, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end30

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @f, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %land.lhs.true5, label %if.end30

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %10 = load i32, i32* @f, align 4
  %11 = load i32, i32* @g, align 4
  %cmp6 = icmp ne i32 %10, %11
  br i1 %cmp6, label %land.lhs.true7, label %if.end30

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %12 = load i32, i32* @f, align 4
  %13 = load i32, i32* @e, align 4
  %cmp8 = icmp ne i32 %12, %13
  br i1 %cmp8, label %if.then, label %if.end30

if.then:                                          ; preds = %land.lhs.true7, %for.body
  %14 = load i32, i32* @e, align 4
  %15 = load i32, i32* @f, align 4
  %add = add nsw i32 %14, %15
  %16 = load i32, i32* @c, align 4
  %sub = sub nsw i32 %add, %16
  store i32 %sub, i32* @b, align 4
  %17 = load i32, i32* @b, align 4
  %18 = load i32, i32* @lo, align 4
  %cmp9 = icmp sge i32 %17, %18
  br i1 %cmp9, label %land.lhs.true10, label %if.end29

land.lhs.true10:                                  ; preds = %if.then
  %19 = load i32, i32* @b, align 4
  %20 = load i32, i32* @hi, align 4
  %cmp11 = icmp sle i32 %19, %20
  br i1 %cmp11, label %land.lhs.true12, label %if.end29

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %21 = load i32, i32* @unique, align 4
  %tobool13 = icmp ne i32 %21, 0
  br i1 %tobool13, label %lor.lhs.false14, label %if.then26

lor.lhs.false14:                                  ; preds = %land.lhs.true12
  %22 = load i32, i32* @b, align 4
  %23 = load i32, i32* @a, align 4
  %cmp15 = icmp ne i32 %22, %23
  br i1 %cmp15, label %land.lhs.true16, label %if.end29

land.lhs.true16:                                  ; preds = %lor.lhs.false14
  %24 = load i32, i32* @b, align 4
  %25 = load i32, i32* @c, align 4
  %cmp17 = icmp ne i32 %24, %25
  br i1 %cmp17, label %land.lhs.true18, label %if.end29

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %26 = load i32, i32* @b, align 4
  %27 = load i32, i32* @d, align 4
  %cmp19 = icmp ne i32 %26, %27
  br i1 %cmp19, label %land.lhs.true20, label %if.end29

land.lhs.true20:                                  ; preds = %land.lhs.true18
  %28 = load i32, i32* @b, align 4
  %29 = load i32, i32* @g, align 4
  %cmp21 = icmp ne i32 %28, %29
  br i1 %cmp21, label %land.lhs.true22, label %if.end29

land.lhs.true22:                                  ; preds = %land.lhs.true20
  %30 = load i32, i32* @b, align 4
  %31 = load i32, i32* @e, align 4
  %cmp23 = icmp ne i32 %30, %31
  br i1 %cmp23, label %land.lhs.true24, label %if.end29

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %32 = load i32, i32* @b, align 4
  %33 = load i32, i32* @f, align 4
  %cmp25 = icmp ne i32 %32, %33
  br i1 %cmp25, label %if.then26, label %if.end29

if.then26:                                        ; preds = %land.lhs.true24, %land.lhs.true12
  %34 = load i32, i32* @solutions, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* @solutions, align 4
  %35 = load i32, i32* @show, align 4
  %tobool27 = icmp ne i32 %35, 0
  br i1 %tobool27, label %if.then28, label %if.end

if.then28:                                        ; preds = %if.then26
  %36 = load i32, i32* @a, align 4
  %37 = load i32, i32* @b, align 4
  %38 = load i32, i32* @c, align 4
  %39 = load i32, i32* @d, align 4
  %40 = load i32, i32* @e, align 4
  %41 = load i32, i32* @f, align 4
  %42 = load i32, i32* @g, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i32 %36, i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42)
  br label %if.end

if.end:                                           ; preds = %if.then28, %if.then26
  br label %if.end29

if.end29:                                         ; preds = %if.end, %land.lhs.true24, %land.lhs.true22, %land.lhs.true20, %land.lhs.true18, %land.lhs.true16, %lor.lhs.false14, %land.lhs.true10, %if.then
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %land.lhs.true7, %land.lhs.true5, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %43 = load i32, i32* @f, align 4
  %inc31 = add nsw i32 %43, 1
  store i32 %inc31, i32* @f, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @ge() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @e, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @e, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @e, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @e, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end19

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @e, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true3, %for.body
  %10 = load i32, i32* @d, align 4
  %11 = load i32, i32* @e, align 4
  %add = add nsw i32 %10, %11
  store i32 %add, i32* @g, align 4
  %12 = load i32, i32* @g, align 4
  %13 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %12, %13
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %14 = load i32, i32* @g, align 4
  %15 = load i32, i32* @hi, align 4
  %cmp7 = icmp sle i32 %14, %15
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %16 = load i32, i32* @unique, align 4
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then18

lor.lhs.false10:                                  ; preds = %land.lhs.true8
  %17 = load i32, i32* @g, align 4
  %18 = load i32, i32* @a, align 4
  %cmp11 = icmp ne i32 %17, %18
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %lor.lhs.false10
  %19 = load i32, i32* @g, align 4
  %20 = load i32, i32* @c, align 4
  %cmp13 = icmp ne i32 %19, %20
  br i1 %cmp13, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %21 = load i32, i32* @g, align 4
  %22 = load i32, i32* @d, align 4
  %cmp15 = icmp ne i32 %21, %22
  br i1 %cmp15, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %23 = load i32, i32* @g, align 4
  %24 = load i32, i32* @e, align 4
  %cmp17 = icmp ne i32 %23, %24
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true8
  call void @bf()
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true16, %land.lhs.true14, %land.lhs.true12, %lor.lhs.false10, %land.lhs.true6, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %25 = load i32, i32* @e, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* @e, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @acd() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* @c, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @lo, align 4
  store i32 %3, i32* @d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* @d, align 4
  %5 = load i32, i32* @hi, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body3
  %7 = load i32, i32* @c, align 4
  %8 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %7, %8
  br i1 %cmp4, label %if.then, label %if.end14

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %9 = load i32, i32* @c, align 4
  %10 = load i32, i32* @d, align 4
  %add = add nsw i32 %9, %10
  store i32 %add, i32* @a, align 4
  %11 = load i32, i32* @a, align 4
  %12 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %11, %12
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @hi, align 4
  %cmp6 = icmp sle i32 %13, %14
  br i1 %cmp6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %15 = load i32, i32* @unique, align 4
  %tobool8 = icmp ne i32 %15, 0
  br i1 %tobool8, label %lor.lhs.false9, label %if.then13

lor.lhs.false9:                                   ; preds = %land.lhs.true7
  %16 = load i32, i32* @c, align 4
  %cmp10 = icmp ne i32 %16, 0
  br i1 %cmp10, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %lor.lhs.false9
  %17 = load i32, i32* @d, align 4
  %cmp12 = icmp ne i32 %17, 0
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %land.lhs.true11, %land.lhs.true7
  call void @ge()
  br label %if.end

if.end:                                           ; preds = %if.then13, %land.lhs.true11, %lor.lhs.false9, %land.lhs.true, %if.then
  br label %if.end14

if.end14:                                         ; preds = %if.end, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %18 = load i32, i32* @d, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* @d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %19 = load i32, i32* @c, align 4
  %inc16 = add nsw i32 %19, 1
  store i32 %inc16, i32* @c, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foursquares(i32 %plo, i32 %phi, i32 %punique, i32 %pshow) #0 {
entry:
  %plo.addr = alloca i32, align 4
  %phi.addr = alloca i32, align 4
  %punique.addr = alloca i32, align 4
  %pshow.addr = alloca i32, align 4
  store i32 %plo, i32* %plo.addr, align 4
  store i32 %phi, i32* %phi.addr, align 4
  store i32 %punique, i32* %punique.addr, align 4
  store i32 %pshow, i32* %pshow.addr, align 4
  %0 = load i32, i32* %plo.addr, align 4
  store i32 %0, i32* @lo, align 4
  %1 = load i32, i32* %phi.addr, align 4
  store i32 %1, i32* @hi, align 4
  %2 = load i32, i32* %punique.addr, align 4
  store i32 %2, i32* @unique, align 4
  %3 = load i32, i32* %pshow.addr, align 4
  store i32 %3, i32* @show, align 4
  store i32 0, i32* @solutions, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  call void @acd()
  %4 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @solutions, align 4
  %6 = load i32, i32* @lo, align 4
  %7 = load i32, i32* @hi, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* @solutions, align 4
  %9 = load i32, i32* @lo, align 4
  %10 = load i32, i32* @hi, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i32 0, i32 0), i32 %8, i32 %9, i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @foursquares(i32 1, i32 7, i32 1, i32 1)
  call void @foursquares(i32 3, i32 9, i32 1, i32 1)
  call void @foursquares(i32 0, i32 9, i32 0, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %plo.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %phi.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %punique.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %pshow.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @unique, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @solutions, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @solutions, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @lo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @hi, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for foursquares()

; entering Souper's runOnFunction() for main()

; ModuleID = './4-rings_or_4-squares_puzzle.c.bc'
source_filename = "./4-rings_or_4-squares_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@lo = hidden global i32 0, align 4
@f = hidden global i32 0, align 4
@hi = hidden global i32 0, align 4
@unique = hidden global i32 0, align 4
@a = hidden global i32 0, align 4
@c = hidden global i32 0, align 4
@d = hidden global i32 0, align 4
@g = hidden global i32 0, align 4
@e = hidden global i32 0, align 4
@b = hidden global i32 0, align 4
@solutions = hidden global i32 0, align 4
@show = hidden global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"%d %d %d %d %d %d %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"\0A%d unique solutions in %d to %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"\0A%d non-unique solutions in %d to %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bf() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @f, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @f, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @f, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @f, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end30

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @f, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %land.lhs.true5, label %if.end30

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %10 = load i32, i32* @f, align 4
  %11 = load i32, i32* @g, align 4
  %cmp6 = icmp ne i32 %10, %11
  br i1 %cmp6, label %land.lhs.true7, label %if.end30

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %12 = load i32, i32* @f, align 4
  %13 = load i32, i32* @e, align 4
  %cmp8 = icmp ne i32 %12, %13
  br i1 %cmp8, label %if.then, label %if.end30

if.then:                                          ; preds = %land.lhs.true7, %for.body
  %14 = load i32, i32* @e, align 4
  %15 = load i32, i32* @f, align 4
  %add = add nsw i32 %14, %15
  %16 = load i32, i32* @c, align 4
  %sub = sub nsw i32 %add, %16
  store i32 %sub, i32* @b, align 4
  %17 = load i32, i32* @b, align 4
  %18 = load i32, i32* @lo, align 4
  %cmp9 = icmp sge i32 %17, %18
  br i1 %cmp9, label %land.lhs.true10, label %if.end29

land.lhs.true10:                                  ; preds = %if.then
  %19 = load i32, i32* @b, align 4
  %20 = load i32, i32* @hi, align 4
  %cmp11 = icmp sle i32 %19, %20
  br i1 %cmp11, label %land.lhs.true12, label %if.end29

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %21 = load i32, i32* @unique, align 4
  %tobool13 = icmp ne i32 %21, 0
  br i1 %tobool13, label %lor.lhs.false14, label %if.then26

lor.lhs.false14:                                  ; preds = %land.lhs.true12
  %22 = load i32, i32* @b, align 4
  %23 = load i32, i32* @a, align 4
  %cmp15 = icmp ne i32 %22, %23
  br i1 %cmp15, label %land.lhs.true16, label %if.end29

land.lhs.true16:                                  ; preds = %lor.lhs.false14
  %24 = load i32, i32* @b, align 4
  %25 = load i32, i32* @c, align 4
  %cmp17 = icmp ne i32 %24, %25
  br i1 %cmp17, label %land.lhs.true18, label %if.end29

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %26 = load i32, i32* @b, align 4
  %27 = load i32, i32* @d, align 4
  %cmp19 = icmp ne i32 %26, %27
  br i1 %cmp19, label %land.lhs.true20, label %if.end29

land.lhs.true20:                                  ; preds = %land.lhs.true18
  %28 = load i32, i32* @b, align 4
  %29 = load i32, i32* @g, align 4
  %cmp21 = icmp ne i32 %28, %29
  br i1 %cmp21, label %land.lhs.true22, label %if.end29

land.lhs.true22:                                  ; preds = %land.lhs.true20
  %30 = load i32, i32* @b, align 4
  %31 = load i32, i32* @e, align 4
  %cmp23 = icmp ne i32 %30, %31
  br i1 %cmp23, label %land.lhs.true24, label %if.end29

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %32 = load i32, i32* @b, align 4
  %33 = load i32, i32* @f, align 4
  %cmp25 = icmp ne i32 %32, %33
  br i1 %cmp25, label %if.then26, label %if.end29

if.then26:                                        ; preds = %land.lhs.true24, %land.lhs.true12
  %34 = load i32, i32* @solutions, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* @solutions, align 4
  %35 = load i32, i32* @show, align 4
  %tobool27 = icmp ne i32 %35, 0
  br i1 %tobool27, label %if.then28, label %if.end

if.then28:                                        ; preds = %if.then26
  %36 = load i32, i32* @a, align 4
  %37 = load i32, i32* @b, align 4
  %38 = load i32, i32* @c, align 4
  %39 = load i32, i32* @d, align 4
  %40 = load i32, i32* @e, align 4
  %41 = load i32, i32* @f, align 4
  %42 = load i32, i32* @g, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i32 %36, i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42)
  br label %if.end

if.end:                                           ; preds = %if.then28, %if.then26
  br label %if.end29

if.end29:                                         ; preds = %if.end, %land.lhs.true24, %land.lhs.true22, %land.lhs.true20, %land.lhs.true18, %land.lhs.true16, %lor.lhs.false14, %land.lhs.true10, %if.then
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %land.lhs.true7, %land.lhs.true5, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %43 = load i32, i32* @f, align 4
  %inc31 = add nsw i32 %43, 1
  store i32 %inc31, i32* @f, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @ge() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @e, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* @e, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* @e, align 4
  %5 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @e, align 4
  %7 = load i32, i32* @c, align 4
  %cmp2 = icmp ne i32 %6, %7
  br i1 %cmp2, label %land.lhs.true3, label %if.end19

land.lhs.true3:                                   ; preds = %land.lhs.true
  %8 = load i32, i32* @e, align 4
  %9 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %8, %9
  br i1 %cmp4, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true3, %for.body
  %10 = load i32, i32* @d, align 4
  %11 = load i32, i32* @e, align 4
  %add = add nsw i32 %10, %11
  store i32 %add, i32* @g, align 4
  %12 = load i32, i32* @g, align 4
  %13 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %12, %13
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %14 = load i32, i32* @g, align 4
  %15 = load i32, i32* @hi, align 4
  %cmp7 = icmp sle i32 %14, %15
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %16 = load i32, i32* @unique, align 4
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then18

lor.lhs.false10:                                  ; preds = %land.lhs.true8
  %17 = load i32, i32* @g, align 4
  %18 = load i32, i32* @a, align 4
  %cmp11 = icmp ne i32 %17, %18
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %lor.lhs.false10
  %19 = load i32, i32* @g, align 4
  %20 = load i32, i32* @c, align 4
  %cmp13 = icmp ne i32 %19, %20
  br i1 %cmp13, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %21 = load i32, i32* @g, align 4
  %22 = load i32, i32* @d, align 4
  %cmp15 = icmp ne i32 %21, %22
  br i1 %cmp15, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %23 = load i32, i32* @g, align 4
  %24 = load i32, i32* @e, align 4
  %cmp17 = icmp ne i32 %23, %24
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true8
  call void @bf()
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true16, %land.lhs.true14, %land.lhs.true12, %lor.lhs.false10, %land.lhs.true6, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %25 = load i32, i32* @e, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* @e, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @acd() #0 {
entry:
  %0 = load i32, i32* @lo, align 4
  store i32 %0, i32* @c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* @c, align 4
  %2 = load i32, i32* @hi, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @lo, align 4
  store i32 %3, i32* @d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* @d, align 4
  %5 = load i32, i32* @hi, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body3
  %7 = load i32, i32* @c, align 4
  %8 = load i32, i32* @d, align 4
  %cmp4 = icmp ne i32 %7, %8
  br i1 %cmp4, label %if.then, label %if.end14

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %9 = load i32, i32* @c, align 4
  %10 = load i32, i32* @d, align 4
  %add = add nsw i32 %9, %10
  store i32 %add, i32* @a, align 4
  %11 = load i32, i32* @a, align 4
  %12 = load i32, i32* @lo, align 4
  %cmp5 = icmp sge i32 %11, %12
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @hi, align 4
  %cmp6 = icmp sle i32 %13, %14
  br i1 %cmp6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %15 = load i32, i32* @unique, align 4
  %tobool8 = icmp ne i32 %15, 0
  br i1 %tobool8, label %lor.lhs.false9, label %if.then13

lor.lhs.false9:                                   ; preds = %land.lhs.true7
  %16 = load i32, i32* @c, align 4
  %cmp10 = icmp ne i32 %16, 0
  br i1 %cmp10, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %lor.lhs.false9
  %17 = load i32, i32* @d, align 4
  %cmp12 = icmp ne i32 %17, 0
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %land.lhs.true11, %land.lhs.true7
  call void @ge()
  br label %if.end

if.end:                                           ; preds = %if.then13, %land.lhs.true11, %lor.lhs.false9, %land.lhs.true, %if.then
  br label %if.end14

if.end14:                                         ; preds = %if.end, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %18 = load i32, i32* @d, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* @d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %19 = load i32, i32* @c, align 4
  %inc16 = add nsw i32 %19, 1
  store i32 %inc16, i32* @c, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foursquares(i32 %plo, i32 %phi, i32 %punique, i32 %pshow) #0 {
entry:
  %plo.addr = alloca i32, align 4
  %phi.addr = alloca i32, align 4
  %punique.addr = alloca i32, align 4
  %pshow.addr = alloca i32, align 4
  store i32 %plo, i32* %plo.addr, align 4
  store i32 %phi, i32* %phi.addr, align 4
  store i32 %punique, i32* %punique.addr, align 4
  store i32 %pshow, i32* %pshow.addr, align 4
  %0 = load i32, i32* %plo.addr, align 4
  store i32 %0, i32* @lo, align 4
  %1 = load i32, i32* %phi.addr, align 4
  store i32 %1, i32* @hi, align 4
  %2 = load i32, i32* %punique.addr, align 4
  store i32 %2, i32* @unique, align 4
  %3 = load i32, i32* %pshow.addr, align 4
  store i32 %3, i32* @show, align 4
  store i32 0, i32* @solutions, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  call void @acd()
  %4 = load i32, i32* @unique, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @solutions, align 4
  %6 = load i32, i32* @lo, align 4
  %7 = load i32, i32* @hi, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* @solutions, align 4
  %9 = load i32, i32* @lo, align 4
  %10 = load i32, i32* @hi, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i32 0, i32 0), i32 %8, i32 %9, i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @foursquares(i32 1, i32 7, i32 1, i32 1)
  call void @foursquares(i32 3, i32 9, i32 1, i32 1)
  call void @foursquares(i32 0, i32 9, i32 0, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
