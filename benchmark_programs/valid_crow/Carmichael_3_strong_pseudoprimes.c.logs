
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for is_prime()

; ModuleID = './Carmichael_3_strong_pseudoprimes.c.bc'
source_filename = "./Carmichael_3_strong_pseudoprimes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [10 x i8] c"%d %d %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_prime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ule i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp ugt i32 %1, 1
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %2, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then4

lor.lhs.false:                                    ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %rem2 = urem i32 %3, 3
  %tobool3 = icmp ne i32 %rem2, 0
  br i1 %tobool3, label %if.else5, label %if.then4

if.then4:                                         ; preds = %lor.lhs.false, %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else5:                                         ; preds = %lor.lhs.false
  store i32 5, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else5
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %i, align 4
  %mul = mul i32 %4, %5
  %6 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp ule i32 %mul, %6
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %i, align 4
  %rem8 = urem i32 %7, %8
  %tobool9 = icmp ne i32 %rem8, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then13

lor.lhs.false10:                                  ; preds = %for.body
  %9 = load i32, i32* %n.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add i32 %10, 2
  %rem11 = urem i32 %9, %add
  %tobool12 = icmp ne i32 %rem11, 0
  br i1 %tobool12, label %if.end, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false10, %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false10
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4
  %add14 = add i32 %11, 6
  store i32 %add14, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @carmichael3(i32 %p1) #0 {
entry:
  %p1.addr = alloca i32, align 4
  %h3 = alloca i32, align 4
  %d = alloca i32, align 4
  %p2 = alloca i32, align 4
  %p3 = alloca i32, align 4
  store i32 %p1, i32* %p1.addr, align 4
  %0 = load i32, i32* %p1.addr, align 4
  %call = call i32 @is_prime(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %for.end37

if.end:                                           ; preds = %entry
  store i32 1, i32* %h3, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %if.end
  %1 = load i32, i32* %h3, align 4
  %2 = load i32, i32* %p1.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %d, align 4
  %4 = load i32, i32* %h3, align 4
  %5 = load i32, i32* %p1.addr, align 4
  %add = add nsw i32 %4, %5
  %cmp2 = icmp slt i32 %3, %add
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %h3, align 4
  %7 = load i32, i32* %p1.addr, align 4
  %add4 = add nsw i32 %6, %7
  %8 = load i32, i32* %p1.addr, align 4
  %sub = sub nsw i32 %8, 1
  %mul = mul nsw i32 %add4, %sub
  %9 = load i32, i32* %d, align 4
  %rem = srem i32 %mul, %9
  %cmp5 = icmp eq i32 %rem, 0
  br i1 %cmp5, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %for.body3
  %10 = load i32, i32* %p1.addr, align 4
  %sub6 = sub nsw i32 0, %10
  %11 = load i32, i32* %p1.addr, align 4
  %mul7 = mul nsw i32 %sub6, %11
  %12 = load i32, i32* %h3, align 4
  %rem8 = srem i32 %mul7, %12
  %13 = load i32, i32* %h3, align 4
  %add9 = add nsw i32 %rem8, %13
  %14 = load i32, i32* %h3, align 4
  %rem10 = srem i32 %add9, %14
  %15 = load i32, i32* %d, align 4
  %16 = load i32, i32* %h3, align 4
  %rem11 = srem i32 %15, %16
  %cmp12 = icmp eq i32 %rem10, %rem11
  br i1 %cmp12, label %if.then13, label %if.end34

if.then13:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %p1.addr, align 4
  %sub14 = sub nsw i32 %17, 1
  %18 = load i32, i32* %h3, align 4
  %19 = load i32, i32* %p1.addr, align 4
  %add15 = add nsw i32 %18, %19
  %mul16 = mul nsw i32 %sub14, %add15
  %20 = load i32, i32* %d, align 4
  %div = sdiv i32 %mul16, %20
  %add17 = add nsw i32 1, %div
  store i32 %add17, i32* %p2, align 4
  %21 = load i32, i32* %p2, align 4
  %call18 = call i32 @is_prime(i32 %21)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.then13
  br label %for.inc

if.end21:                                         ; preds = %if.then13
  %22 = load i32, i32* %p1.addr, align 4
  %23 = load i32, i32* %p2, align 4
  %mul22 = mul nsw i32 %22, %23
  %24 = load i32, i32* %h3, align 4
  %div23 = sdiv i32 %mul22, %24
  %add24 = add nsw i32 1, %div23
  store i32 %add24, i32* %p3, align 4
  %25 = load i32, i32* %p3, align 4
  %call25 = call i32 @is_prime(i32 %25)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %lor.lhs.false, label %if.then31

lor.lhs.false:                                    ; preds = %if.end21
  %26 = load i32, i32* %p2, align 4
  %27 = load i32, i32* %p3, align 4
  %mul27 = mul nsw i32 %26, %27
  %28 = load i32, i32* %p1.addr, align 4
  %sub28 = sub nsw i32 %28, 1
  %rem29 = srem i32 %mul27, %sub28
  %cmp30 = icmp ne i32 %rem29, 1
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %lor.lhs.false, %if.end21
  br label %for.inc

if.end32:                                         ; preds = %lor.lhs.false
  %29 = load i32, i32* %p1.addr, align 4
  %30 = load i32, i32* %p2, align 4
  %31 = load i32, i32* %p3, align 4
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %29, i32 %30, i32 %31)
  br label %if.end34

if.end34:                                         ; preds = %if.end32, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end34, %if.then31, %if.then20
  %32 = load i32, i32* %d, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc35

for.inc35:                                        ; preds = %for.end
  %33 = load i32, i32* %h3, align 4
  %inc36 = add nsw i32 %33, 1
  store i32 %inc36, i32* %h3, align 4
  br label %for.cond

for.end37:                                        ; preds = %if.then, %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p1 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 2, i32* %p1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %p1, align 4
  %cmp = icmp slt i32 %0, 62
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %p1, align 4
  call void @carmichael3(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %p1, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %p1, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ugt i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp1 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %2, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 2:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem2 = urem i32 %3, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %rem2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 3:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp ule i32 %mul, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
%3:i32 = var
%4:i1 = ule %2, %3
infer %4

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem8 = urem i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %rem8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %10, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem11 = urem i32 %9, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1
%3:i32 = urem %0, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool12 = icmp ne i32 %rem11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1
%3:i32 = urem %0, %2
%4:i1 = ne 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add i32 %11, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 1:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 2:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 3:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
%3:i32 = var
%4:i1 = ule %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109431
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1
%3:i32 = urem %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = add 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1
%3:i32 = urem %0, %2
%4:i1 = ne 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 6:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for is_prime()

; entering Souper's runOnFunction() for carmichael3()

; ModuleID = './Carmichael_3_strong_pseudoprimes.c.bc'
source_filename = "./Carmichael_3_strong_pseudoprimes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [10 x i8] c"%d %d %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_prime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ule i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp ugt i32 %1, 1
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %2, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then4

lor.lhs.false:                                    ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %rem2 = urem i32 %3, 3
  %tobool3 = icmp ne i32 %rem2, 0
  br i1 %tobool3, label %if.else5, label %if.then4

if.then4:                                         ; preds = %lor.lhs.false, %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else5:                                         ; preds = %lor.lhs.false
  store i32 5, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else5
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %i, align 4
  %mul = mul i32 %4, %5
  %6 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp ule i32 %mul, %6
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %i, align 4
  %rem8 = urem i32 %7, %8
  %tobool9 = icmp ne i32 %rem8, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then13

lor.lhs.false10:                                  ; preds = %for.body
  %9 = load i32, i32* %n.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add i32 %10, 2
  %rem11 = urem i32 %9, %add
  %tobool12 = icmp ne i32 %rem11, 0
  br i1 %tobool12, label %if.end, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false10, %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false10
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4
  %add14 = add i32 %11, 6
  store i32 %add14, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @carmichael3(i32 %p1) #0 {
entry:
  %p1.addr = alloca i32, align 4
  %h3 = alloca i32, align 4
  %d = alloca i32, align 4
  %p2 = alloca i32, align 4
  %p3 = alloca i32, align 4
  store i32 %p1, i32* %p1.addr, align 4
  %0 = load i32, i32* %p1.addr, align 4
  %call = call i32 @is_prime(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %for.end37

if.end:                                           ; preds = %entry
  store i32 1, i32* %h3, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %if.end
  %1 = load i32, i32* %h3, align 4
  %2 = load i32, i32* %p1.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %d, align 4
  %4 = load i32, i32* %h3, align 4
  %5 = load i32, i32* %p1.addr, align 4
  %add = add nsw i32 %4, %5
  %cmp2 = icmp slt i32 %3, %add
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %h3, align 4
  %7 = load i32, i32* %p1.addr, align 4
  %add4 = add nsw i32 %6, %7
  %8 = load i32, i32* %p1.addr, align 4
  %sub = sub nsw i32 %8, 1
  %mul = mul nsw i32 %add4, %sub
  %9 = load i32, i32* %d, align 4
  %rem = srem i32 %mul, %9
  %cmp5 = icmp eq i32 %rem, 0
  br i1 %cmp5, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %for.body3
  %10 = load i32, i32* %p1.addr, align 4
  %sub6 = sub nsw i32 0, %10
  %11 = load i32, i32* %p1.addr, align 4
  %mul7 = mul nsw i32 %sub6, %11
  %12 = load i32, i32* %h3, align 4
  %rem8 = srem i32 %mul7, %12
  %13 = load i32, i32* %h3, align 4
  %add9 = add nsw i32 %rem8, %13
  %14 = load i32, i32* %h3, align 4
  %rem10 = srem i32 %add9, %14
  %15 = load i32, i32* %d, align 4
  %16 = load i32, i32* %h3, align 4
  %rem11 = srem i32 %15, %16
  %cmp12 = icmp eq i32 %rem10, %rem11
  br i1 %cmp12, label %if.then13, label %if.end34

if.then13:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %p1.addr, align 4
  %sub14 = sub nsw i32 %17, 1
  %18 = load i32, i32* %h3, align 4
  %19 = load i32, i32* %p1.addr, align 4
  %add15 = add nsw i32 %18, %19
  %mul16 = mul nsw i32 %sub14, %add15
  %20 = load i32, i32* %d, align 4
  %div = sdiv i32 %mul16, %20
  %add17 = add nsw i32 1, %div
  store i32 %add17, i32* %p2, align 4
  %21 = load i32, i32* %p2, align 4
  %call18 = call i32 @is_prime(i32 %21)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.then13
  br label %for.inc

if.end21:                                         ; preds = %if.then13
  %22 = load i32, i32* %p1.addr, align 4
  %23 = load i32, i32* %p2, align 4
  %mul22 = mul nsw i32 %22, %23
  %24 = load i32, i32* %h3, align 4
  %div23 = sdiv i32 %mul22, %24
  %add24 = add nsw i32 1, %div23
  store i32 %add24, i32* %p3, align 4
  %25 = load i32, i32* %p3, align 4
  %call25 = call i32 @is_prime(i32 %25)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %lor.lhs.false, label %if.then31

lor.lhs.false:                                    ; preds = %if.end21
  %26 = load i32, i32* %p2, align 4
  %27 = load i32, i32* %p3, align 4
  %mul27 = mul nsw i32 %26, %27
  %28 = load i32, i32* %p1.addr, align 4
  %sub28 = sub nsw i32 %28, 1
  %rem29 = srem i32 %mul27, %sub28
  %cmp30 = icmp ne i32 %rem29, 1
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %lor.lhs.false, %if.end21
  br label %for.inc

if.end32:                                         ; preds = %lor.lhs.false
  %29 = load i32, i32* %p1.addr, align 4
  %30 = load i32, i32* %p2, align 4
  %31 = load i32, i32* %p3, align 4
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %29, i32 %30, i32 %31)
  br label %if.end34

if.end34:                                         ; preds = %if.end32, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end34, %if.then31, %if.then20
  %32 = load i32, i32* %d, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc35

for.inc35:                                        ; preds = %for.end
  %33 = load i32, i32* %h3, align 4
  %inc36 = add nsw i32 %33, 1
  store i32 %inc36, i32* %h3, align 4
  br label %for.cond

for.end37:                                        ; preds = %if.then, %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p1 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 2, i32* %p1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %p1, align 4
  %cmp = icmp slt i32 %0, 62
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %p1, align 4
  call void @carmichael3(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %p1, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %p1, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @is_prime(i32 %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add4, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
infer %5

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %mul, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = srem %5, %6
infer %7

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = srem %5, %6
%8:i1 = eq 0:i32, %7
infer %8

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 0, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %sub6, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 0:i32, %1
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem8 = srem i32 %mul7, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 0:i32, %1
%3:i32 = mulnsw %0, %2
%4:i32 = var
%5:i32 = srem %3, %4
infer %5

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %rem8, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw 0:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = var
%6:i32 = srem %4, %5
%7:i32 = addnsw %0, %6
infer %7

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem10 = srem i32 %add9, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw 0:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = var
%6:i32 = srem %4, %5
%7:i32 = addnsw %0, %6
%8:i32 = var
%9:i32 = srem %7, %8
infer %9

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem11 = srem i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %rem10, %rem11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw 0:i32, %5
%7:i32 = mulnsw %4, %6
%8:i32 = var
%9:i32 = srem %7, %8
%10:i32 = addnsw %3, %9
%11:i32 = var
%12:i32 = srem %10, %11
%13:i1 = eq %2, %12
infer %13

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add15 = add nsw i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %mul16 = mul nsw i32 %sub14, %add15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
infer %5

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %mul16, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = sdiv %5, %6
infer %7

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 1, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = sdiv %5, %6
%8:i32 = addnsw 1:i32, %7
infer %8

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call18 = call i32 @is_prime(i32 %21)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool19 = icmp ne i32 %call18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul22 = mul nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div23 = sdiv i32 %mul22, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = sdiv %2, %3
infer %4

; *****
; For LLVM instruction:
;  %add24 = add nsw i32 1, %div23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = sdiv %2, %3
%5:i32 = addnsw 1:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %p3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call25 = call i32 @is_prime(i32 %25)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool26 = icmp ne i32 %call25, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %p3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul27 = mul nsw i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub28 = sub nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %rem29 = srem i32 %mul27, %sub28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = srem %2, %4
infer %5

; *****
; For LLVM instruction:
;  %cmp30 = icmp ne i32 %rem29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = srem %2, %4
%6:i1 = ne 1:i32, %5
infer %6

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %p3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %h3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i1 = slt %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = srem %5, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = srem %5, %6
%8:i1 = eq 0:i32, %7
infer %8


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 0:i32, %1
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 0:i32, %1
%3:i32 = mulnsw %0, %2
%4:i32 = var
%5:i32 = srem %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw 0:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = var
%6:i32 = srem %4, %5
%7:i32 = addnsw %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw 0:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = var
%6:i32 = srem %4, %5
%7:i32 = addnsw %0, %6
%8:i32 = var
%9:i32 = srem %7, %8
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = subnsw 0:i32, %5
%7:i32 = mulnsw %4, %6
%8:i32 = var
%9:i32 = srem %7, %8
%10:i32 = addnsw %3, %9
%11:i32 = var
%12:i32 = srem %10, %11
%13:i1 = eq %2, %12
infer %13


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = sdiv %5, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = mulnsw %2, %4
%6:i32 = var
%7:i32 = sdiv %5, %6
%8:i32 = addnsw 1:i32, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = sdiv %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1872368
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = sdiv %2, %3
%5:i32 = addnsw 1:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = srem %2, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = subnsw %3, 1:i32
%5:i32 = srem %2, %4
%6:i1 = ne 1:i32, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for carmichael3()

; entering Souper's runOnFunction() for main()

; ModuleID = './Carmichael_3_strong_pseudoprimes.c.bc'
source_filename = "./Carmichael_3_strong_pseudoprimes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [10 x i8] c"%d %d %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_prime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ule i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp ugt i32 %1, 1
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %2, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then4

lor.lhs.false:                                    ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %rem2 = urem i32 %3, 3
  %tobool3 = icmp ne i32 %rem2, 0
  br i1 %tobool3, label %if.else5, label %if.then4

if.then4:                                         ; preds = %lor.lhs.false, %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.else5:                                         ; preds = %lor.lhs.false
  store i32 5, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else5
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %i, align 4
  %mul = mul i32 %4, %5
  %6 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp ule i32 %mul, %6
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %i, align 4
  %rem8 = urem i32 %7, %8
  %tobool9 = icmp ne i32 %rem8, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then13

lor.lhs.false10:                                  ; preds = %for.body
  %9 = load i32, i32* %n.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add i32 %10, 2
  %rem11 = urem i32 %9, %add
  %tobool12 = icmp ne i32 %rem11, 0
  br i1 %tobool12, label %if.end, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false10, %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false10
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4
  %add14 = add i32 %11, 6
  store i32 %add14, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @carmichael3(i32 %p1) #0 {
entry:
  %p1.addr = alloca i32, align 4
  %h3 = alloca i32, align 4
  %d = alloca i32, align 4
  %p2 = alloca i32, align 4
  %p3 = alloca i32, align 4
  store i32 %p1, i32* %p1.addr, align 4
  %0 = load i32, i32* %p1.addr, align 4
  %call = call i32 @is_prime(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %for.end37

if.end:                                           ; preds = %entry
  store i32 1, i32* %h3, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %if.end
  %1 = load i32, i32* %h3, align 4
  %2 = load i32, i32* %p1.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %d, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %d, align 4
  %4 = load i32, i32* %h3, align 4
  %5 = load i32, i32* %p1.addr, align 4
  %add = add nsw i32 %4, %5
  %cmp2 = icmp slt i32 %3, %add
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %h3, align 4
  %7 = load i32, i32* %p1.addr, align 4
  %add4 = add nsw i32 %6, %7
  %8 = load i32, i32* %p1.addr, align 4
  %sub = sub nsw i32 %8, 1
  %mul = mul nsw i32 %add4, %sub
  %9 = load i32, i32* %d, align 4
  %rem = srem i32 %mul, %9
  %cmp5 = icmp eq i32 %rem, 0
  br i1 %cmp5, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %for.body3
  %10 = load i32, i32* %p1.addr, align 4
  %sub6 = sub nsw i32 0, %10
  %11 = load i32, i32* %p1.addr, align 4
  %mul7 = mul nsw i32 %sub6, %11
  %12 = load i32, i32* %h3, align 4
  %rem8 = srem i32 %mul7, %12
  %13 = load i32, i32* %h3, align 4
  %add9 = add nsw i32 %rem8, %13
  %14 = load i32, i32* %h3, align 4
  %rem10 = srem i32 %add9, %14
  %15 = load i32, i32* %d, align 4
  %16 = load i32, i32* %h3, align 4
  %rem11 = srem i32 %15, %16
  %cmp12 = icmp eq i32 %rem10, %rem11
  br i1 %cmp12, label %if.then13, label %if.end34

if.then13:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %p1.addr, align 4
  %sub14 = sub nsw i32 %17, 1
  %18 = load i32, i32* %h3, align 4
  %19 = load i32, i32* %p1.addr, align 4
  %add15 = add nsw i32 %18, %19
  %mul16 = mul nsw i32 %sub14, %add15
  %20 = load i32, i32* %d, align 4
  %div = sdiv i32 %mul16, %20
  %add17 = add nsw i32 1, %div
  store i32 %add17, i32* %p2, align 4
  %21 = load i32, i32* %p2, align 4
  %call18 = call i32 @is_prime(i32 %21)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.then13
  br label %for.inc

if.end21:                                         ; preds = %if.then13
  %22 = load i32, i32* %p1.addr, align 4
  %23 = load i32, i32* %p2, align 4
  %mul22 = mul nsw i32 %22, %23
  %24 = load i32, i32* %h3, align 4
  %div23 = sdiv i32 %mul22, %24
  %add24 = add nsw i32 1, %div23
  store i32 %add24, i32* %p3, align 4
  %25 = load i32, i32* %p3, align 4
  %call25 = call i32 @is_prime(i32 %25)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %lor.lhs.false, label %if.then31

lor.lhs.false:                                    ; preds = %if.end21
  %26 = load i32, i32* %p2, align 4
  %27 = load i32, i32* %p3, align 4
  %mul27 = mul nsw i32 %26, %27
  %28 = load i32, i32* %p1.addr, align 4
  %sub28 = sub nsw i32 %28, 1
  %rem29 = srem i32 %mul27, %sub28
  %cmp30 = icmp ne i32 %rem29, 1
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %lor.lhs.false, %if.end21
  br label %for.inc

if.end32:                                         ; preds = %lor.lhs.false
  %29 = load i32, i32* %p1.addr, align 4
  %30 = load i32, i32* %p2, align 4
  %31 = load i32, i32* %p3, align 4
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %29, i32 %30, i32 %31)
  br label %if.end34

if.end34:                                         ; preds = %if.end32, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end34, %if.then31, %if.then20
  %32 = load i32, i32* %d, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %d, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc35

for.inc35:                                        ; preds = %for.end
  %33 = load i32, i32* %h3, align 4
  %inc36 = add nsw i32 %33, 1
  store i32 %inc36, i32* %h3, align 4
  br label %for.cond

for.end37:                                        ; preds = %if.then, %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p1 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 2, i32* %p1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %p1, align 4
  %cmp = icmp slt i32 %0, 62
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %p1, align 4
  call void @carmichael3(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %p1, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %p1, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %p1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 62
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 62:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %p1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %p1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 62:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
