
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for search_get_index_by_name()

; ModuleID = './Search_a_list_of_records.c.bc'
source_filename = "./Search_a_list_of_records.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.cd = type { i8*, double }

@.str = private unnamed_addr constant [6 x i8] c"Lagos\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Cairo\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Kinshasa-Brazzaville\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Greater Johannesburg\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Mogadishu\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Khartoum-Omdurman\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Dar Es Salaam\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"Alexandria\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Abidjan\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Casablanca\00", align 1
@__const.main.citydata = private unnamed_addr constant [10 x %struct.cd] [%struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double 2.100000e+01 }, %struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.520000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), double 1.130000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), double 0x401E333333333333 }, %struct.cd { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), double 5.850000e+00 }, %struct.cd { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), double 4.980000e+00 }, %struct.cd { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), double 4.700000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double 4.580000e+00 }, %struct.cd { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), double 4.400000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), double 3.980000e+00 }], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @search_get_index_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32, i32* %data_length.addr, align 4
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @bsearch(i8* %1, i8* %3, i32 %4, i32 16, i32 (i8*, i8*)* %5)
  %6 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %6, %struct.cd** %match, align 4
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.cd*, %struct.cd** %match, align 4
  %9 = ptrtoint %struct.cd* %8 to i32
  %10 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %11 = ptrtoint %struct.cd* %10 to i32
  %sub = sub nsw i32 %9, %11
  %div = udiv i32 %sub, 16
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden double @search_get_pop_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca double, align 8
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %population2 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 1
  %8 = load double, double* %population2, align 8
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

declare i8* @lfind(i8* %0, i8* %1, i32* %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @search_get_pop_threshold(double %pop_threshold, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i8*, align 4
  %pop_threshold.addr = alloca double, align 8
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store double %pop_threshold, double* %pop_threshold.addr, align 8
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  store i8* null, i8** %name, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  %0 = load double, double* %pop_threshold.addr, align 8
  store double %0, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 0
  %8 = load i8*, i8** %name1, align 8
  store i8* %8, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 4
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_nameChar_cmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %aa, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %call = call i32 @strlen(i8* %5) #4
  store i32 %call, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cd*, %struct.cd** %bb, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %12 = load %struct.cd*, %struct.cd** %aa, align 4
  %name2 = getelementptr inbounds %struct.cd, %struct.cd* %12, i32 0, i32 0
  %13 = load i8*, i8** %name2, align 8
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_name_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 0
  %7 = load i8*, i8** %name1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_pop_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %population = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 1
  %5 = load double, double* %population, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %population1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 1
  %7 = load double, double* %population1, align 8
  %cmp = fcmp oge double %5, %7
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %citydata = alloca [10 x %struct.cd], align 16
  %citydata_length = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x %struct.cd]* %citydata to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x %struct.cd]* @__const.main.citydata to i8*), i32 160, i1 false)
  store i32 10, i32* %citydata_length, align 4
  %arraydecay = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 %call)
  %arraydecay2 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call3 = call i8* @search_get_pop_threshold(double 5.000000e+00, %struct.cd* %arraydecay2, i32 10, i32 (i8*, i8*)* @cd_pop_cmp)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* %call3)
  %arraydecay5 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call6 = call double @search_get_pop_by_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %struct.cd* %arraydecay5, i32 10, i32 (i8*, i8*)* @cd_nameChar_cmp)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %data_length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.cd* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = ptrtoint %struct.cd* %8 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = ptrtoint %struct.cd* %10 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %9, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %div = udiv i32 %sub, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = udiv %2, 16:i32
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = udiv %2, 16:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 33554432
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for search_get_index_by_name()

; entering Souper's runOnFunction() for search_get_pop_by_name()

; ModuleID = './Search_a_list_of_records.c.bc'
source_filename = "./Search_a_list_of_records.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.cd = type { i8*, double }

@.str = private unnamed_addr constant [6 x i8] c"Lagos\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Cairo\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Kinshasa-Brazzaville\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Greater Johannesburg\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Mogadishu\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Khartoum-Omdurman\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Dar Es Salaam\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"Alexandria\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Abidjan\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Casablanca\00", align 1
@__const.main.citydata = private unnamed_addr constant [10 x %struct.cd] [%struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double 2.100000e+01 }, %struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.520000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), double 1.130000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), double 0x401E333333333333 }, %struct.cd { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), double 5.850000e+00 }, %struct.cd { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), double 4.980000e+00 }, %struct.cd { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), double 4.700000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double 4.580000e+00 }, %struct.cd { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), double 4.400000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), double 3.980000e+00 }], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @search_get_index_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32, i32* %data_length.addr, align 4
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @bsearch(i8* %1, i8* %3, i32 %4, i32 16, i32 (i8*, i8*)* %5)
  %6 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %6, %struct.cd** %match, align 4
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.cd*, %struct.cd** %match, align 4
  %9 = ptrtoint %struct.cd* %8 to i32
  %10 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %11 = ptrtoint %struct.cd* %10 to i32
  %sub = sub nsw i32 %9, %11
  %div = udiv i32 %sub, 16
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden double @search_get_pop_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca double, align 8
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %population2 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 1
  %8 = load double, double* %population2, align 8
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

declare i8* @lfind(i8* %0, i8* %1, i32* %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @search_get_pop_threshold(double %pop_threshold, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i8*, align 4
  %pop_threshold.addr = alloca double, align 8
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store double %pop_threshold, double* %pop_threshold.addr, align 8
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  store i8* null, i8** %name, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  %0 = load double, double* %pop_threshold.addr, align 8
  store double %0, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 0
  %8 = load i8*, i8** %name1, align 8
  store i8* %8, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 4
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_nameChar_cmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %aa, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %call = call i32 @strlen(i8* %5) #4
  store i32 %call, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cd*, %struct.cd** %bb, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %12 = load %struct.cd*, %struct.cd** %aa, align 4
  %name2 = getelementptr inbounds %struct.cd, %struct.cd* %12, i32 0, i32 0
  %13 = load i8*, i8** %name2, align 8
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_name_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 0
  %7 = load i8*, i8** %name1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_pop_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %population = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 1
  %5 = load double, double* %population, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %population1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 1
  %7 = load double, double* %population1, align 8
  %cmp = fcmp oge double %5, %7
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %citydata = alloca [10 x %struct.cd], align 16
  %citydata_length = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x %struct.cd]* %citydata to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x %struct.cd]* @__const.main.citydata to i8*), i32 160, i1 false)
  store i32 10, i32* %citydata_length, align 4
  %arraydecay = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 %call)
  %arraydecay2 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call3 = call i8* @search_get_pop_threshold(double 5.000000e+00, %struct.cd* %arraydecay2, i32 10, i32 (i8*, i8*)* @cd_pop_cmp)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* %call3)
  %arraydecay5 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call6 = call double @search_get_pop_by_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %struct.cd* %arraydecay5, i32 10, i32 (i8*, i8*)* @cd_nameChar_cmp)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.cd* %6, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for search_get_pop_by_name()

; entering Souper's runOnFunction() for search_get_pop_threshold()

; ModuleID = './Search_a_list_of_records.c.bc'
source_filename = "./Search_a_list_of_records.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.cd = type { i8*, double }

@.str = private unnamed_addr constant [6 x i8] c"Lagos\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Cairo\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Kinshasa-Brazzaville\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Greater Johannesburg\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Mogadishu\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Khartoum-Omdurman\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Dar Es Salaam\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"Alexandria\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Abidjan\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Casablanca\00", align 1
@__const.main.citydata = private unnamed_addr constant [10 x %struct.cd] [%struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double 2.100000e+01 }, %struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.520000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), double 1.130000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), double 0x401E333333333333 }, %struct.cd { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), double 5.850000e+00 }, %struct.cd { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), double 4.980000e+00 }, %struct.cd { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), double 4.700000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double 4.580000e+00 }, %struct.cd { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), double 4.400000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), double 3.980000e+00 }], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @search_get_index_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32, i32* %data_length.addr, align 4
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @bsearch(i8* %1, i8* %3, i32 %4, i32 16, i32 (i8*, i8*)* %5)
  %6 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %6, %struct.cd** %match, align 4
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.cd*, %struct.cd** %match, align 4
  %9 = ptrtoint %struct.cd* %8 to i32
  %10 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %11 = ptrtoint %struct.cd* %10 to i32
  %sub = sub nsw i32 %9, %11
  %div = udiv i32 %sub, 16
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden double @search_get_pop_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca double, align 8
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %population2 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 1
  %8 = load double, double* %population2, align 8
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

declare i8* @lfind(i8* %0, i8* %1, i32* %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @search_get_pop_threshold(double %pop_threshold, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i8*, align 4
  %pop_threshold.addr = alloca double, align 8
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store double %pop_threshold, double* %pop_threshold.addr, align 8
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  store i8* null, i8** %name, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  %0 = load double, double* %pop_threshold.addr, align 8
  store double %0, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 0
  %8 = load i8*, i8** %name1, align 8
  store i8* %8, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 4
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_nameChar_cmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %aa, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %call = call i32 @strlen(i8* %5) #4
  store i32 %call, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cd*, %struct.cd** %bb, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %12 = load %struct.cd*, %struct.cd** %aa, align 4
  %name2 = getelementptr inbounds %struct.cd, %struct.cd* %12, i32 0, i32 0
  %13 = load i8*, i8** %name2, align 8
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_name_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 0
  %7 = load i8*, i8** %name1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_pop_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %population = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 1
  %5 = load double, double* %population, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %population1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 1
  %7 = load double, double* %population1, align 8
  %cmp = fcmp oge double %5, %7
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %citydata = alloca [10 x %struct.cd], align 16
  %citydata_length = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x %struct.cd]* %citydata to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x %struct.cd]* @__const.main.citydata to i8*), i32 160, i1 false)
  store i32 10, i32* %citydata_length, align 4
  %arraydecay = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 %call)
  %arraydecay2 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call3 = call i8* @search_get_pop_threshold(double 5.000000e+00, %struct.cd* %arraydecay2, i32 10, i32 (i8*, i8*)* @cd_pop_cmp)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* %call3)
  %arraydecay5 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call6 = call double @search_get_pop_by_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %struct.cd* %arraydecay5, i32 10, i32 (i8*, i8*)* @cd_nameChar_cmp)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.cd* %6, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for search_get_pop_threshold()

; entering Souper's runOnFunction() for cd_nameChar_cmp()

; ModuleID = './Search_a_list_of_records.c.bc'
source_filename = "./Search_a_list_of_records.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.cd = type { i8*, double }

@.str = private unnamed_addr constant [6 x i8] c"Lagos\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Cairo\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Kinshasa-Brazzaville\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Greater Johannesburg\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Mogadishu\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Khartoum-Omdurman\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Dar Es Salaam\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"Alexandria\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Abidjan\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Casablanca\00", align 1
@__const.main.citydata = private unnamed_addr constant [10 x %struct.cd] [%struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double 2.100000e+01 }, %struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.520000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), double 1.130000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), double 0x401E333333333333 }, %struct.cd { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), double 5.850000e+00 }, %struct.cd { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), double 4.980000e+00 }, %struct.cd { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), double 4.700000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double 4.580000e+00 }, %struct.cd { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), double 4.400000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), double 3.980000e+00 }], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @search_get_index_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32, i32* %data_length.addr, align 4
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @bsearch(i8* %1, i8* %3, i32 %4, i32 16, i32 (i8*, i8*)* %5)
  %6 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %6, %struct.cd** %match, align 4
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.cd*, %struct.cd** %match, align 4
  %9 = ptrtoint %struct.cd* %8 to i32
  %10 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %11 = ptrtoint %struct.cd* %10 to i32
  %sub = sub nsw i32 %9, %11
  %div = udiv i32 %sub, 16
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden double @search_get_pop_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca double, align 8
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %population2 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 1
  %8 = load double, double* %population2, align 8
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

declare i8* @lfind(i8* %0, i8* %1, i32* %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @search_get_pop_threshold(double %pop_threshold, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i8*, align 4
  %pop_threshold.addr = alloca double, align 8
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store double %pop_threshold, double* %pop_threshold.addr, align 8
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  store i8* null, i8** %name, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  %0 = load double, double* %pop_threshold.addr, align 8
  store double %0, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 0
  %8 = load i8*, i8** %name1, align 8
  store i8* %8, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 4
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_nameChar_cmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %aa, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %call = call i32 @strlen(i8* %5) #4
  store i32 %call, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cd*, %struct.cd** %bb, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %12 = load %struct.cd*, %struct.cd** %aa, align 4
  %name2 = getelementptr inbounds %struct.cd, %struct.cd* %12, i32 0, i32 0
  %13 = load i8*, i8** %name2, align 8
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_name_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 0
  %7 = load i8*, i8** %name1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_pop_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %population = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 1
  %5 = load double, double* %population, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %population1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 1
  %7 = load double, double* %population1, align 8
  %cmp = fcmp oge double %5, %7
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %citydata = alloca [10 x %struct.cd], align 16
  %citydata_length = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x %struct.cd]* %citydata to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x %struct.cd]* @__const.main.citydata to i8*), i32 160, i1 false)
  store i32 10, i32* %citydata_length, align 4
  %arraydecay = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 %call)
  %arraydecay2 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call3 = call i8* @search_get_pop_threshold(double 5.000000e+00, %struct.cd* %arraydecay2, i32 10, i32 (i8*, i8*)* @cd_pop_cmp)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* %call3)
  %arraydecay5 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call6 = call double @search_get_pop_by_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %struct.cd* %arraydecay5, i32 10, i32 (i8*, i8*)* @cd_nameChar_cmp)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %5) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne i32 %conv, %conv4
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cd_nameChar_cmp()

; entering Souper's runOnFunction() for cd_name_cmp()

; ModuleID = './Search_a_list_of_records.c.bc'
source_filename = "./Search_a_list_of_records.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.cd = type { i8*, double }

@.str = private unnamed_addr constant [6 x i8] c"Lagos\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Cairo\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Kinshasa-Brazzaville\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Greater Johannesburg\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Mogadishu\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Khartoum-Omdurman\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Dar Es Salaam\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"Alexandria\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Abidjan\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Casablanca\00", align 1
@__const.main.citydata = private unnamed_addr constant [10 x %struct.cd] [%struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double 2.100000e+01 }, %struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.520000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), double 1.130000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), double 0x401E333333333333 }, %struct.cd { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), double 5.850000e+00 }, %struct.cd { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), double 4.980000e+00 }, %struct.cd { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), double 4.700000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double 4.580000e+00 }, %struct.cd { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), double 4.400000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), double 3.980000e+00 }], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @search_get_index_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32, i32* %data_length.addr, align 4
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @bsearch(i8* %1, i8* %3, i32 %4, i32 16, i32 (i8*, i8*)* %5)
  %6 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %6, %struct.cd** %match, align 4
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.cd*, %struct.cd** %match, align 4
  %9 = ptrtoint %struct.cd* %8 to i32
  %10 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %11 = ptrtoint %struct.cd* %10 to i32
  %sub = sub nsw i32 %9, %11
  %div = udiv i32 %sub, 16
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden double @search_get_pop_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca double, align 8
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %population2 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 1
  %8 = load double, double* %population2, align 8
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

declare i8* @lfind(i8* %0, i8* %1, i32* %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @search_get_pop_threshold(double %pop_threshold, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i8*, align 4
  %pop_threshold.addr = alloca double, align 8
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store double %pop_threshold, double* %pop_threshold.addr, align 8
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  store i8* null, i8** %name, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  %0 = load double, double* %pop_threshold.addr, align 8
  store double %0, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 0
  %8 = load i8*, i8** %name1, align 8
  store i8* %8, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 4
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_nameChar_cmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %aa, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %call = call i32 @strlen(i8* %5) #4
  store i32 %call, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cd*, %struct.cd** %bb, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %12 = load %struct.cd*, %struct.cd** %aa, align 4
  %name2 = getelementptr inbounds %struct.cd, %struct.cd* %12, i32 0, i32 0
  %13 = load i8*, i8** %name2, align 8
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_name_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 0
  %7 = load i8*, i8** %name1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_pop_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %population = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 1
  %5 = load double, double* %population, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %population1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 1
  %7 = load double, double* %population1, align 8
  %cmp = fcmp oge double %5, %7
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %citydata = alloca [10 x %struct.cd], align 16
  %citydata_length = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x %struct.cd]* %citydata to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x %struct.cd]* @__const.main.citydata to i8*), i32 160, i1 false)
  store i32 10, i32* %citydata_length, align 4
  %arraydecay = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 %call)
  %arraydecay2 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call3 = call i8* @search_get_pop_threshold(double 5.000000e+00, %struct.cd* %arraydecay2, i32 10, i32 (i8*, i8*)* @cd_pop_cmp)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* %call3)
  %arraydecay5 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call6 = call double @search_get_pop_by_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %struct.cd* %arraydecay5, i32 10, i32 (i8*, i8*)* @cd_nameChar_cmp)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %5, i8* %7) #4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for cd_name_cmp()

; entering Souper's runOnFunction() for cd_pop_cmp()

; ModuleID = './Search_a_list_of_records.c.bc'
source_filename = "./Search_a_list_of_records.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.cd = type { i8*, double }

@.str = private unnamed_addr constant [6 x i8] c"Lagos\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Cairo\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Kinshasa-Brazzaville\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Greater Johannesburg\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Mogadishu\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Khartoum-Omdurman\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Dar Es Salaam\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"Alexandria\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Abidjan\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Casablanca\00", align 1
@__const.main.citydata = private unnamed_addr constant [10 x %struct.cd] [%struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double 2.100000e+01 }, %struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.520000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), double 1.130000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), double 0x401E333333333333 }, %struct.cd { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), double 5.850000e+00 }, %struct.cd { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), double 4.980000e+00 }, %struct.cd { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), double 4.700000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double 4.580000e+00 }, %struct.cd { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), double 4.400000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), double 3.980000e+00 }], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @search_get_index_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32, i32* %data_length.addr, align 4
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @bsearch(i8* %1, i8* %3, i32 %4, i32 16, i32 (i8*, i8*)* %5)
  %6 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %6, %struct.cd** %match, align 4
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.cd*, %struct.cd** %match, align 4
  %9 = ptrtoint %struct.cd* %8 to i32
  %10 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %11 = ptrtoint %struct.cd* %10 to i32
  %sub = sub nsw i32 %9, %11
  %div = udiv i32 %sub, 16
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden double @search_get_pop_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca double, align 8
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %population2 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 1
  %8 = load double, double* %population2, align 8
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

declare i8* @lfind(i8* %0, i8* %1, i32* %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @search_get_pop_threshold(double %pop_threshold, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i8*, align 4
  %pop_threshold.addr = alloca double, align 8
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store double %pop_threshold, double* %pop_threshold.addr, align 8
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  store i8* null, i8** %name, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  %0 = load double, double* %pop_threshold.addr, align 8
  store double %0, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 0
  %8 = load i8*, i8** %name1, align 8
  store i8* %8, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 4
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_nameChar_cmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %aa, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %call = call i32 @strlen(i8* %5) #4
  store i32 %call, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cd*, %struct.cd** %bb, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %12 = load %struct.cd*, %struct.cd** %aa, align 4
  %name2 = getelementptr inbounds %struct.cd, %struct.cd* %12, i32 0, i32 0
  %13 = load i8*, i8** %name2, align 8
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_name_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 0
  %7 = load i8*, i8** %name1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_pop_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %population = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 1
  %5 = load double, double* %population, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %population1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 1
  %7 = load double, double* %population1, align 8
  %cmp = fcmp oge double %5, %7
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %citydata = alloca [10 x %struct.cd], align 16
  %citydata_length = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x %struct.cd]* %citydata to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x %struct.cd]* @__const.main.citydata to i8*), i32 160, i1 false)
  store i32 10, i32* %citydata_length, align 4
  %arraydecay = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 %call)
  %arraydecay2 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call3 = call i8* @search_get_pop_threshold(double 5.000000e+00, %struct.cd* %arraydecay2, i32 10, i32 (i8*, i8*)* @cd_pop_cmp)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* %call3)
  %arraydecay5 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call6 = call double @search_get_pop_by_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %struct.cd* %arraydecay5, i32 10, i32 (i8*, i8*)* @cd_nameChar_cmp)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp oge double %5, %7
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cd_pop_cmp()

; entering Souper's runOnFunction() for main()

; ModuleID = './Search_a_list_of_records.c.bc'
source_filename = "./Search_a_list_of_records.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.cd = type { i8*, double }

@.str = private unnamed_addr constant [6 x i8] c"Lagos\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Cairo\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Kinshasa-Brazzaville\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Greater Johannesburg\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Mogadishu\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Khartoum-Omdurman\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Dar Es Salaam\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"Alexandria\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Abidjan\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Casablanca\00", align 1
@__const.main.citydata = private unnamed_addr constant [10 x %struct.cd] [%struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double 2.100000e+01 }, %struct.cd { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.520000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), double 1.130000e+01 }, %struct.cd { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), double 0x401E333333333333 }, %struct.cd { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), double 5.850000e+00 }, %struct.cd { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), double 4.980000e+00 }, %struct.cd { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), double 4.700000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double 4.580000e+00 }, %struct.cd { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), double 4.400000e+00 }, %struct.cd { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), double 3.980000e+00 }], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @search_get_index_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32, i32* %data_length.addr, align 4
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @bsearch(i8* %1, i8* %3, i32 %4, i32 16, i32 (i8*, i8*)* %5)
  %6 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %6, %struct.cd** %match, align 4
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %7, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.cd*, %struct.cd** %match, align 4
  %9 = ptrtoint %struct.cd* %8 to i32
  %10 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %11 = ptrtoint %struct.cd* %10 to i32
  %sub = sub nsw i32 %9, %11
  %div = udiv i32 %sub, 16
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden double @search_get_pop_by_name(i8* %name, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca double, align 8
  %name.addr = alloca i8*, align 4
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  %0 = load i8*, i8** %name.addr, align 4
  store i8* %0, i8** %name1, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  store double 0.000000e+00, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %population2 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 1
  %8 = load double, double* %population2, align 8
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

declare i8* @lfind(i8* %0, i8* %1, i32* %2, i32 %3, i32 (i8*, i8*)* %4) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @search_get_pop_threshold(double %pop_threshold, %struct.cd* %data, i32 %data_length, i32 (i8*, i8*)* %cmp_func) #0 {
entry:
  %retval = alloca i8*, align 4
  %pop_threshold.addr = alloca double, align 8
  %data.addr = alloca %struct.cd*, align 4
  %data_length.addr = alloca i32, align 4
  %cmp_func.addr = alloca i32 (i8*, i8*)*, align 4
  %key = alloca %struct.cd, align 8
  %match = alloca %struct.cd*, align 4
  store double %pop_threshold, double* %pop_threshold.addr, align 8
  store %struct.cd* %data, %struct.cd** %data.addr, align 4
  store i32 %data_length, i32* %data_length.addr, align 4
  store i32 (i8*, i8*)* %cmp_func, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 0
  store i8* null, i8** %name, align 8
  %population = getelementptr inbounds %struct.cd, %struct.cd* %key, i32 0, i32 1
  %0 = load double, double* %pop_threshold.addr, align 8
  store double %0, double* %population, align 8
  %1 = bitcast %struct.cd* %key to i8*
  %2 = load %struct.cd*, %struct.cd** %data.addr, align 4
  %3 = bitcast %struct.cd* %2 to i8*
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp_func.addr, align 4
  %call = call i8* @lfind(i8* %1, i8* %3, i32* %data_length.addr, i32 16, i32 (i8*, i8*)* %4)
  %5 = bitcast i8* %call to %struct.cd*
  store %struct.cd* %5, %struct.cd** %match, align 4
  %6 = load %struct.cd*, %struct.cd** %match, align 4
  %cmp = icmp eq %struct.cd* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %7 = load %struct.cd*, %struct.cd** %match, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %7, i32 0, i32 0
  %8 = load i8*, i8** %name1, align 8
  store i8* %8, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 4
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_nameChar_cmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %aa, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %call = call i32 @strlen(i8* %5) #4
  store i32 %call, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cd*, %struct.cd** %bb, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %12 = load %struct.cd*, %struct.cd** %aa, align 4
  %name2 = getelementptr inbounds %struct.cd, %struct.cd* %12, i32 0, i32 0
  %13 = load i8*, i8** %name2, align 8
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_name_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %name = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 0
  %5 = load i8*, i8** %name, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %name1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 0
  %7 = load i8*, i8** %name1, align 8
  %call = call i32 @strcmp(i8* %5, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @cd_pop_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.cd*, align 4
  %bb = alloca %struct.cd*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.cd*
  store %struct.cd* %1, %struct.cd** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.cd*
  store %struct.cd* %3, %struct.cd** %bb, align 4
  %4 = load %struct.cd*, %struct.cd** %bb, align 4
  %population = getelementptr inbounds %struct.cd, %struct.cd* %4, i32 0, i32 1
  %5 = load double, double* %population, align 8
  %6 = load %struct.cd*, %struct.cd** %aa, align 4
  %population1 = getelementptr inbounds %struct.cd, %struct.cd* %6, i32 0, i32 1
  %7 = load double, double* %population1, align 8
  %cmp = fcmp oge double %5, %7
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %citydata = alloca [10 x %struct.cd], align 16
  %citydata_length = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x %struct.cd]* %citydata to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x %struct.cd]* @__const.main.citydata to i8*), i32 160, i1 false)
  store i32 10, i32* %citydata_length, align 4
  %arraydecay = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 %call)
  %arraydecay2 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call3 = call i8* @search_get_pop_threshold(double 5.000000e+00, %struct.cd* %arraydecay2, i32 10, i32 (i8*, i8*)* @cd_pop_cmp)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* %call3)
  %arraydecay5 = getelementptr inbounds [10 x %struct.cd], [10 x %struct.cd]* %citydata, i32 0, i32 0
  %call6 = call double @search_get_pop_by_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %struct.cd* %arraydecay5, i32 10, i32 (i8*, i8*)* @cd_nameChar_cmp)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @search_get_index_by_name(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct.cd* %arraydecay, i32 10, i32 (i8*, i8*)* @cd_name_cmp)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
