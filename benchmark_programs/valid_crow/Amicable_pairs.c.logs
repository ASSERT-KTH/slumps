
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Amicable_pairs.c.bc'
source_filename = "./Amicable_pairs.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"%u %u\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"\0ATop %u count : %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %top = alloca i32, align 4
  %divsum = alloca i32*, align 4
  %pows = alloca [32 x i32], align 16
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  %x = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %s = alloca i32, align 4
  %i31 = alloca i32, align 4
  %p50 = alloca i32, align 4
  %cnt = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %0, i32 1
  %1 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %1)
  store i32 %call, i32* %top, align 4
  %2 = load i32, i32* %top, align 4
  %add = add i32 %2, 1
  %mul = mul i32 %add, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %3 = bitcast i8* %call1 to i32*
  store i32* %3, i32** %divsum, align 4
  %4 = bitcast [32 x i32]* %pows to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %4, i8 0, i32 128, i1 false)
  %5 = bitcast i8* %4 to <{ i32, [31 x i32] }>*
  %6 = getelementptr inbounds <{ i32, [31 x i32] }>, <{ i32, [31 x i32] }>* %5, i32 0, i32 0
  store i32 1, i32* %6, align 16
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %top, align 4
  %cmp = icmp ule i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %divsum, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  store i32 1, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %p, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc47, %for.end
  %12 = load i32, i32* %p, align 4
  %13 = load i32, i32* %p, align 4
  %add4 = add i32 %12, %13
  %14 = load i32, i32* %top, align 4
  %cmp5 = icmp ule i32 %add4, %14
  br i1 %cmp5, label %for.body6, label %for.end49

for.body6:                                        ; preds = %for.cond3
  %15 = load i32*, i32** %divsum, align 4
  %16 = load i32, i32* %p, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx7, align 4
  %cmp8 = icmp ugt i32 %17, 1
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body6
  %18 = load i32, i32* %p, align 4
  %19 = load i32*, i32** %divsum, align 4
  %20 = load i32, i32* %p, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx9, align 4
  %sub = sub i32 %21, %18
  store i32 %sub, i32* %arrayidx9, align 4
  br label %for.inc47

if.end:                                           ; preds = %for.body6
  store i32 1, i32* %x, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc19, %if.end
  %22 = load i32, i32* %x, align 4
  %sub11 = sub i32 %22, 1
  %arrayidx12 = getelementptr inbounds [32 x i32], [32 x i32]* %pows, i32 0, i32 %sub11
  %23 = load i32, i32* %arrayidx12, align 4
  %24 = load i32, i32* %top, align 4
  %25 = load i32, i32* %p, align 4
  %div = udiv i32 %24, %25
  %cmp13 = icmp ule i32 %23, %div
  br i1 %cmp13, label %for.body14, label %for.end21

for.body14:                                       ; preds = %for.cond10
  %26 = load i32, i32* %p, align 4
  %27 = load i32, i32* %x, align 4
  %sub15 = sub i32 %27, 1
  %arrayidx16 = getelementptr inbounds [32 x i32], [32 x i32]* %pows, i32 0, i32 %sub15
  %28 = load i32, i32* %arrayidx16, align 4
  %mul17 = mul i32 %26, %28
  %29 = load i32, i32* %x, align 4
  %arrayidx18 = getelementptr inbounds [32 x i32], [32 x i32]* %pows, i32 0, i32 %29
  store i32 %mul17, i32* %arrayidx18, align 4
  br label %for.inc19

for.inc19:                                        ; preds = %for.body14
  %30 = load i32, i32* %x, align 4
  %inc20 = add i32 %30, 1
  store i32 %inc20, i32* %x, align 4
  br label %for.cond10

for.end21:                                        ; preds = %for.cond10
  %31 = load i32, i32* %p, align 4
  %sub22 = sub i32 %31, 1
  store i32 %sub22, i32* %k, align 4
  %32 = load i32, i32* %p, align 4
  %33 = load i32, i32* %p, align 4
  %add23 = add i32 %32, %33
  store i32 %add23, i32* %n, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc44, %for.end21
  %34 = load i32, i32* %n, align 4
  %35 = load i32, i32* %top, align 4
  %cmp25 = icmp ule i32 %34, %35
  br i1 %cmp25, label %for.body26, label %for.end46

for.body26:                                       ; preds = %for.cond24
  %arrayidx27 = getelementptr inbounds [32 x i32], [32 x i32]* %pows, i32 0, i32 1
  %36 = load i32, i32* %arrayidx27, align 4
  %add28 = add i32 1, %36
  store i32 %add28, i32* %s, align 4
  %37 = load i32, i32* %k, align 4
  %dec = add i32 %37, -1
  store i32 %dec, i32* %k, align 4
  %38 = load i32, i32* %k, align 4
  %cmp29 = icmp eq i32 %38, 0
  br i1 %cmp29, label %if.then30, label %if.end41

if.then30:                                        ; preds = %for.body26
  store i32 2, i32* %i31, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc36, %if.then30
  %39 = load i32, i32* %i31, align 4
  %40 = load i32, i32* %x, align 4
  %cmp33 = icmp ult i32 %39, %40
  br i1 %cmp33, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond32
  %41 = load i32, i32* %n, align 4
  %42 = load i32, i32* %i31, align 4
  %arrayidx34 = getelementptr inbounds [32 x i32], [32 x i32]* %pows, i32 0, i32 %42
  %43 = load i32, i32* %arrayidx34, align 4
  %rem = urem i32 %41, %43
  %tobool = icmp ne i32 %rem, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond32
  %44 = phi i1 [ false, %for.cond32 ], [ %lnot, %land.rhs ]
  br i1 %44, label %for.body35, label %for.end40

for.body35:                                       ; preds = %land.end
  br label %for.inc36

for.inc36:                                        ; preds = %for.body35
  %45 = load i32, i32* %i31, align 4
  %inc37 = add i32 %45, 1
  store i32 %inc37, i32* %i31, align 4
  %arrayidx38 = getelementptr inbounds [32 x i32], [32 x i32]* %pows, i32 0, i32 %45
  %46 = load i32, i32* %arrayidx38, align 4
  %47 = load i32, i32* %s, align 4
  %add39 = add i32 %47, %46
  store i32 %add39, i32* %s, align 4
  br label %for.cond32

for.end40:                                        ; preds = %land.end
  %48 = load i32, i32* %p, align 4
  store i32 %48, i32* %k, align 4
  br label %if.end41

if.end41:                                         ; preds = %for.end40, %for.body26
  %49 = load i32, i32* %s, align 4
  %50 = load i32*, i32** %divsum, align 4
  %51 = load i32, i32* %n, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %50, i32 %51
  %52 = load i32, i32* %arrayidx42, align 4
  %mul43 = mul i32 %52, %49
  store i32 %mul43, i32* %arrayidx42, align 4
  br label %for.inc44

for.inc44:                                        ; preds = %if.end41
  %53 = load i32, i32* %p, align 4
  %54 = load i32, i32* %n, align 4
  %add45 = add i32 %54, %53
  store i32 %add45, i32* %n, align 4
  br label %for.cond24

for.end46:                                        ; preds = %for.cond24
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46, %if.then
  %55 = load i32, i32* %p, align 4
  %inc48 = add i32 %55, 1
  store i32 %inc48, i32* %p, align 4
  br label %for.cond3

for.end49:                                        ; preds = %for.cond3
  %56 = load i32, i32* %top, align 4
  %shr = lshr i32 %56, 1
  %add51 = add i32 %shr, 1
  store i32 %add51, i32* %p50, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc61, %for.end49
  %57 = load i32, i32* %p50, align 4
  %58 = load i32, i32* %top, align 4
  %cmp53 = icmp ule i32 %57, %58
  br i1 %cmp53, label %for.body54, label %for.end63

for.body54:                                       ; preds = %for.cond52
  %59 = load i32*, i32** %divsum, align 4
  %60 = load i32, i32* %p50, align 4
  %arrayidx55 = getelementptr inbounds i32, i32* %59, i32 %60
  %61 = load i32, i32* %arrayidx55, align 4
  %cmp56 = icmp ugt i32 %61, 1
  br i1 %cmp56, label %if.then57, label %if.end60

if.then57:                                        ; preds = %for.body54
  %62 = load i32, i32* %p50, align 4
  %63 = load i32*, i32** %divsum, align 4
  %64 = load i32, i32* %p50, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %63, i32 %64
  %65 = load i32, i32* %arrayidx58, align 4
  %sub59 = sub i32 %65, %62
  store i32 %sub59, i32* %arrayidx58, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.then57, %for.body54
  br label %for.inc61

for.inc61:                                        ; preds = %if.end60
  %66 = load i32, i32* %p50, align 4
  %inc62 = add i32 %66, 1
  store i32 %inc62, i32* %p50, align 4
  br label %for.cond52

for.end63:                                        ; preds = %for.cond52
  store i32 0, i32* %cnt, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc77, %for.end63
  %67 = load i32, i32* %a, align 4
  %68 = load i32, i32* %top, align 4
  %cmp65 = icmp ule i32 %67, %68
  br i1 %cmp65, label %for.body66, label %for.end79

for.body66:                                       ; preds = %for.cond64
  %69 = load i32*, i32** %divsum, align 4
  %70 = load i32, i32* %a, align 4
  %arrayidx67 = getelementptr inbounds i32, i32* %69, i32 %70
  %71 = load i32, i32* %arrayidx67, align 4
  store i32 %71, i32* %b, align 4
  %72 = load i32, i32* %b, align 4
  %73 = load i32, i32* %a, align 4
  %cmp68 = icmp ugt i32 %72, %73
  br i1 %cmp68, label %land.lhs.true, label %if.end76

land.lhs.true:                                    ; preds = %for.body66
  %74 = load i32, i32* %b, align 4
  %75 = load i32, i32* %top, align 4
  %cmp69 = icmp ule i32 %74, %75
  br i1 %cmp69, label %land.lhs.true70, label %if.end76

land.lhs.true70:                                  ; preds = %land.lhs.true
  %76 = load i32*, i32** %divsum, align 4
  %77 = load i32, i32* %b, align 4
  %arrayidx71 = getelementptr inbounds i32, i32* %76, i32 %77
  %78 = load i32, i32* %arrayidx71, align 4
  %79 = load i32, i32* %a, align 4
  %cmp72 = icmp eq i32 %78, %79
  br i1 %cmp72, label %if.then73, label %if.end76

if.then73:                                        ; preds = %land.lhs.true70
  %80 = load i32, i32* %a, align 4
  %81 = load i32, i32* %b, align 4
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 %80, i32 %81)
  %82 = load i32, i32* %cnt, align 4
  %inc75 = add i32 %82, 1
  store i32 %inc75, i32* %cnt, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then73, %land.lhs.true70, %land.lhs.true, %for.body66
  br label %for.inc77

for.inc77:                                        ; preds = %if.end76
  %83 = load i32, i32* %a, align 4
  %inc78 = add i32 %83, 1
  store i32 %inc78, i32* %a, align 4
  br label %for.cond64

for.end79:                                        ; preds = %for.cond64
  %84 = load i32, i32* %top, align 4
  %85 = load i32, i32* %cnt, align 4
  %call80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 %84, i32 %85)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %add, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ule i32 %add4, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i1 = ule %2, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp ugt i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %21, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub11 = sub i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp13 = icmp ule i32 %23, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = udiv %1, %2
%4:i1 = ule %0, %3
infer %4

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul17 = mul i32 %26, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add23 = add i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp25 = icmp ule i32 %34, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %arrayidx27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add i32 1, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %37, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp29 = icmp eq i32 %38, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp ult i32 %39, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %arrayidx34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %41, %43
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
%4:i1 = xor 1:i1, %3
infer %4

; *****
; For LLVM instruction:
;  %44 = phi i1 [ false, %for.cond32 ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add i32 %45, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %arrayidx38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add39 = add i32 %47, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %arrayidx42, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul43 = mul i32 %52, %49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add45 = add i32 %54, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc48 = add i32 %55, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = lshr i32 %56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %add51 = add i32 %shr, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 1:i32
%2:i32 = add 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %p50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp ule i32 %57, %58
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %p50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %arrayidx55, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp56 = icmp ugt i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %p50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %p50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %arrayidx58, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub59 = sub i32 %65, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %p50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc62 = add i32 %66, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp65 = icmp ule i32 %67, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %arrayidx67, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp68 = icmp ugt i32 %72, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp69 = icmp ule i32 %74, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %arrayidx71, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp72 = icmp eq i32 %78, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %cnt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc75 = add i32 %82, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc78 = add i32 %83, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %top, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %cnt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741828
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = add 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i1 = ule %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 22789806
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = udiv %1, %2
%4:i1 = ule %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109431
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
%4:i1 = xor 1:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 1:i32
%2:i32 = add 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
