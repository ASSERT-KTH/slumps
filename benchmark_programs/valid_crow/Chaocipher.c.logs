
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for chao()

; ModuleID = './Chaocipher.c.bc'
source_filename = "./Chaocipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [27 x i8] c"HXUCZVAMDSLKPEFJRIGTWOBNYQ\00", align 1
@l_alphabet = hidden global i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"PTLNBQDEOYSFAVZKGJRIHWXUMC\00", align 1
@r_alphabet = hidden global i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i32 0, i32 0), align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"%s  %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"WELLDONEISBETTERTHANWELLSAID\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"The original plaintext is : %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [79 x i8] c"\0AThe left and right alphabets after each permutation during encryption are :\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"\0AThe ciphertext is : %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"\0AThe recovered plaintext is : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @chao(i8* %in, i8* %out, i32 %mode, i32 %show_steps) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %mode.addr = alloca i32, align 4
  %show_steps.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %index = alloca i32, align 4
  %store = alloca i8, align 1
  %len = alloca i32, align 4
  %left = alloca [27 x i8], align 16
  %right = alloca [27 x i8], align 16
  %temp = alloca [27 x i8], align 16
  store i8* %in, i8** %in.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %show_steps, i32* %show_steps.addr, align 4
  %0 = load i8*, i8** %in.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %len, align 4
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %1 = load i8*, i8** @l_alphabet, align 4
  %call1 = call i8* @strcpy(i8* %arraydecay, i8* %1)
  %arraydecay2 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %2 = load i8*, i8** @r_alphabet, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arrayidx = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 26
  store i8 0, i8* %arrayidx, align 2
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc110, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end112

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %show_steps.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %arraydecay4 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay4, i8* %arraydecay5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %6 = load i32, i32* %mode.addr, align 4
  %cmp7 = icmp eq i32 %6, 0
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end
  %arraydecay9 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %7 = load i8*, i8** %in.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx10, align 1
  %conv = sext i8 %9 to i32
  %call11 = call i8* @strchr(i8* %arraydecay9, i32 %conv)
  %arraydecay12 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %call11 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay12 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %index, align 4
  %10 = load i32, i32* %index, align 4
  %arrayidx13 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx13, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i32 %13
  store i8 %11, i8* %arrayidx14, align 1
  br label %if.end25

if.else:                                          ; preds = %if.end
  %arraydecay15 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %14 = load i8*, i8** %in.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %16 to i32
  %call18 = call i8* @strchr(i8* %arraydecay15, i32 %conv17)
  %arraydecay19 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %sub.ptr.lhs.cast20 = ptrtoint i8* %call18 to i32
  %sub.ptr.rhs.cast21 = ptrtoint i8* %arraydecay19 to i32
  %sub.ptr.sub22 = sub i32 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
  store i32 %sub.ptr.sub22, i32* %index, align 4
  %17 = load i32, i32* %index, align 4
  %arrayidx23 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 %17
  %18 = load i8, i8* %arrayidx23, align 1
  %19 = load i8*, i8** %out.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8, i8* %19, i32 %20
  store i8 %18, i8* %arrayidx24, align 1
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then8
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %len, align 4
  %sub = sub i32 %22, 1
  %cmp26 = icmp eq i32 %21, %sub
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end25
  br label %for.end112

if.end29:                                         ; preds = %if.end25
  %23 = load i32, i32* %index, align 4
  store i32 %23, i32* %j, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc, %if.end29
  %24 = load i32, i32* %j, align 4
  %cmp31 = icmp slt i32 %24, 26
  br i1 %cmp31, label %for.body33, label %for.end

for.body33:                                       ; preds = %for.cond30
  %25 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 %25
  %26 = load i8, i8* %arrayidx34, align 1
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %index, align 4
  %sub35 = sub nsw i32 %27, %28
  %arrayidx36 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub35
  store i8 %26, i8* %arrayidx36, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body33
  %29 = load i32, i32* %j, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond30

for.end:                                          ; preds = %for.cond30
  store i32 0, i32* %j, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc44, %for.end
  %30 = load i32, i32* %j, align 4
  %31 = load i32, i32* %index, align 4
  %cmp38 = icmp slt i32 %30, %31
  br i1 %cmp38, label %for.body40, label %for.end46

for.body40:                                       ; preds = %for.cond37
  %32 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 %32
  %33 = load i8, i8* %arrayidx41, align 1
  %34 = load i32, i32* %index, align 4
  %sub42 = sub nsw i32 26, %34
  %35 = load i32, i32* %j, align 4
  %add = add nsw i32 %sub42, %35
  %arrayidx43 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %add
  store i8 %33, i8* %arrayidx43, align 1
  br label %for.inc44

for.inc44:                                        ; preds = %for.body40
  %36 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %36, 1
  store i32 %inc45, i32* %j, align 4
  br label %for.cond37

for.end46:                                        ; preds = %for.cond37
  %arrayidx47 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 1
  %37 = load i8, i8* %arrayidx47, align 1
  store i8 %37, i8* %store, align 1
  store i32 2, i32* %j, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc55, %for.end46
  %38 = load i32, i32* %j, align 4
  %cmp49 = icmp slt i32 %38, 14
  br i1 %cmp49, label %for.body51, label %for.end57

for.body51:                                       ; preds = %for.cond48
  %39 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx52, align 1
  %41 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %41, 1
  %arrayidx54 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub53
  store i8 %40, i8* %arrayidx54, align 1
  br label %for.inc55

for.inc55:                                        ; preds = %for.body51
  %42 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %42, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond48

for.end57:                                        ; preds = %for.cond48
  %43 = load i8, i8* %store, align 1
  %arrayidx58 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 13
  store i8 %43, i8* %arrayidx58, align 1
  %arraydecay59 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %arraydecay60 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 0
  %call61 = call i8* @strcpy(i8* %arraydecay59, i8* %arraydecay60)
  %44 = load i32, i32* %index, align 4
  store i32 %44, i32* %j, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc69, %for.end57
  %45 = load i32, i32* %j, align 4
  %cmp63 = icmp slt i32 %45, 26
  br i1 %cmp63, label %for.body65, label %for.end71

for.body65:                                       ; preds = %for.cond62
  %46 = load i32, i32* %j, align 4
  %arrayidx66 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 %46
  %47 = load i8, i8* %arrayidx66, align 1
  %48 = load i32, i32* %j, align 4
  %49 = load i32, i32* %index, align 4
  %sub67 = sub nsw i32 %48, %49
  %arrayidx68 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub67
  store i8 %47, i8* %arrayidx68, align 1
  br label %for.inc69

for.inc69:                                        ; preds = %for.body65
  %50 = load i32, i32* %j, align 4
  %inc70 = add nsw i32 %50, 1
  store i32 %inc70, i32* %j, align 4
  br label %for.cond62

for.end71:                                        ; preds = %for.cond62
  store i32 0, i32* %j, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc80, %for.end71
  %51 = load i32, i32* %j, align 4
  %52 = load i32, i32* %index, align 4
  %cmp73 = icmp slt i32 %51, %52
  br i1 %cmp73, label %for.body75, label %for.end82

for.body75:                                       ; preds = %for.cond72
  %53 = load i32, i32* %j, align 4
  %arrayidx76 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 %53
  %54 = load i8, i8* %arrayidx76, align 1
  %55 = load i32, i32* %index, align 4
  %sub77 = sub nsw i32 26, %55
  %56 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %sub77, %56
  %arrayidx79 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %add78
  store i8 %54, i8* %arrayidx79, align 1
  br label %for.inc80

for.inc80:                                        ; preds = %for.body75
  %57 = load i32, i32* %j, align 4
  %inc81 = add nsw i32 %57, 1
  store i32 %inc81, i32* %j, align 4
  br label %for.cond72

for.end82:                                        ; preds = %for.cond72
  %arrayidx83 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 0
  %58 = load i8, i8* %arrayidx83, align 16
  store i8 %58, i8* %store, align 1
  store i32 1, i32* %j, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc91, %for.end82
  %59 = load i32, i32* %j, align 4
  %cmp85 = icmp slt i32 %59, 26
  br i1 %cmp85, label %for.body87, label %for.end93

for.body87:                                       ; preds = %for.cond84
  %60 = load i32, i32* %j, align 4
  %arrayidx88 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %60
  %61 = load i8, i8* %arrayidx88, align 1
  %62 = load i32, i32* %j, align 4
  %sub89 = sub nsw i32 %62, 1
  %arrayidx90 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub89
  store i8 %61, i8* %arrayidx90, align 1
  br label %for.inc91

for.inc91:                                        ; preds = %for.body87
  %63 = load i32, i32* %j, align 4
  %inc92 = add nsw i32 %63, 1
  store i32 %inc92, i32* %j, align 4
  br label %for.cond84

for.end93:                                        ; preds = %for.cond84
  %64 = load i8, i8* %store, align 1
  %arrayidx94 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 25
  store i8 %64, i8* %arrayidx94, align 1
  %arrayidx95 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 2
  %65 = load i8, i8* %arrayidx95, align 2
  store i8 %65, i8* %store, align 1
  store i32 3, i32* %j, align 4
  br label %for.cond96

for.cond96:                                       ; preds = %for.inc103, %for.end93
  %66 = load i32, i32* %j, align 4
  %cmp97 = icmp slt i32 %66, 14
  br i1 %cmp97, label %for.body99, label %for.end105

for.body99:                                       ; preds = %for.cond96
  %67 = load i32, i32* %j, align 4
  %arrayidx100 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %67
  %68 = load i8, i8* %arrayidx100, align 1
  %69 = load i32, i32* %j, align 4
  %sub101 = sub nsw i32 %69, 1
  %arrayidx102 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub101
  store i8 %68, i8* %arrayidx102, align 1
  br label %for.inc103

for.inc103:                                       ; preds = %for.body99
  %70 = load i32, i32* %j, align 4
  %inc104 = add nsw i32 %70, 1
  store i32 %inc104, i32* %j, align 4
  br label %for.cond96

for.end105:                                       ; preds = %for.cond96
  %71 = load i8, i8* %store, align 1
  %arrayidx106 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 13
  store i8 %71, i8* %arrayidx106, align 1
  %arraydecay107 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %arraydecay108 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 0
  %call109 = call i8* @strcpy(i8* %arraydecay107, i8* %arraydecay108)
  br label %for.inc110

for.inc110:                                       ; preds = %for.end105
  %72 = load i32, i32* %i, align 4
  %inc111 = add nsw i32 %72, 1
  store i32 %inc111, i32* %i, align 4
  br label %for.cond

for.end112:                                       ; preds = %if.then28, %for.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i32 @printf(i8* %0, ...) #2

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %plain_text = alloca i8*, align 4
  %cipher_text = alloca i8*, align 4
  %plain_text2 = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i32 0, i32 0), i8** %plain_text, align 4
  %0 = load i8*, i8** %plain_text, align 4
  %call = call i32 @strlen(i8* %0) #3
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %cipher_text, align 4
  %1 = load i8*, i8** %plain_text, align 4
  %call2 = call i32 @strlen(i8* %1) #3
  %add3 = add i32 %call2, 1
  %call4 = call noalias i8* @malloc(i32 %add3)
  store i8* %call4, i8** %plain_text2, align 4
  %2 = load i8*, i8** %plain_text, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.5, i32 0, i32 0))
  %3 = load i8*, i8** %plain_text, align 4
  %4 = load i8*, i8** %cipher_text, align 4
  call void @chao(i8* %3, i8* %4, i32 0, i32 1)
  %5 = load i8*, i8** %cipher_text, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %cipher_text, align 4
  %7 = load i8*, i8** %plain_text2, align 4
  call void @chao(i8* %6, i8* %7, i32 1, i32 0)
  %8 = load i8*, i8** %plain_text2, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* %8)
  %9 = load i8*, i8** %cipher_text, align 4
  call void @free(i8* %9)
  %10 = load i8*, i8** %plain_text2, align 4
  call void @free(i8* %10)
  ret i32 0
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %show_steps.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %mode.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx10, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint i8* %call11 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay12 to i32
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast20 = ptrtoint i8* %call18 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast21 = ptrtoint i8* %arraydecay19 to i32
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub22 = sub i32 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %arrayidx23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp26 = icmp eq i32 %21, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp31 = icmp slt i32 %24, 26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub35 = sub nsw i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp38 = icmp slt i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i8, i8* %arrayidx41, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub42 = sub nsw i32 26, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 26:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %sub42, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 26:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i8, i8* %arrayidx47, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp49 = icmp slt i32 %38, 14
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 14:i32
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i8, i8* %arrayidx52, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub53 = sub nsw i32 %41, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc56 = add nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %store, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp slt i32 %45, 26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i8, i8* %arrayidx66, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub67 = sub nsw i32 %48, %49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc70 = add nsw i32 %50, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp slt i32 %51, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i8, i8* %arrayidx76, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub77 = sub nsw i32 26, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 26:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add78 = add nsw i32 %sub77, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 26:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc81 = add nsw i32 %57, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i8, i8* %arrayidx83, align 16
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp85 = icmp slt i32 %59, 26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i8, i8* %arrayidx88, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub89 = sub nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc92 = add nsw i32 %63, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %64 = load i8, i8* %store, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i8, i8* %arrayidx95, align 2
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp97 = icmp slt i32 %66, 14
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 14:i32
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i8, i8* %arrayidx100, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub101 = sub nsw i32 %69, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc104 = add nsw i32 %70, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %71 = load i8, i8* %store, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc111 = add nsw i32 %72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 1:i32
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 26:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 26
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1308764518
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 26:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 26
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741850
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw 26:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 14:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for chao()

; entering Souper's runOnFunction() for main()

; ModuleID = './Chaocipher.c.bc'
source_filename = "./Chaocipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [27 x i8] c"HXUCZVAMDSLKPEFJRIGTWOBNYQ\00", align 1
@l_alphabet = hidden global i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"PTLNBQDEOYSFAVZKGJRIHWXUMC\00", align 1
@r_alphabet = hidden global i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i32 0, i32 0), align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"%s  %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"WELLDONEISBETTERTHANWELLSAID\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"The original plaintext is : %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [79 x i8] c"\0AThe left and right alphabets after each permutation during encryption are :\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"\0AThe ciphertext is : %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"\0AThe recovered plaintext is : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @chao(i8* %in, i8* %out, i32 %mode, i32 %show_steps) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %mode.addr = alloca i32, align 4
  %show_steps.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %index = alloca i32, align 4
  %store = alloca i8, align 1
  %len = alloca i32, align 4
  %left = alloca [27 x i8], align 16
  %right = alloca [27 x i8], align 16
  %temp = alloca [27 x i8], align 16
  store i8* %in, i8** %in.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %show_steps, i32* %show_steps.addr, align 4
  %0 = load i8*, i8** %in.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %len, align 4
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %1 = load i8*, i8** @l_alphabet, align 4
  %call1 = call i8* @strcpy(i8* %arraydecay, i8* %1)
  %arraydecay2 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %2 = load i8*, i8** @r_alphabet, align 4
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %2)
  %arrayidx = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 26
  store i8 0, i8* %arrayidx, align 2
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc110, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end112

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %show_steps.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %arraydecay4 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay4, i8* %arraydecay5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %6 = load i32, i32* %mode.addr, align 4
  %cmp7 = icmp eq i32 %6, 0
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end
  %arraydecay9 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %7 = load i8*, i8** %in.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx10, align 1
  %conv = sext i8 %9 to i32
  %call11 = call i8* @strchr(i8* %arraydecay9, i32 %conv)
  %arraydecay12 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %call11 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay12 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i32 %sub.ptr.sub, i32* %index, align 4
  %10 = load i32, i32* %index, align 4
  %arrayidx13 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx13, align 1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i32 %13
  store i8 %11, i8* %arrayidx14, align 1
  br label %if.end25

if.else:                                          ; preds = %if.end
  %arraydecay15 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %14 = load i8*, i8** %in.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %16 to i32
  %call18 = call i8* @strchr(i8* %arraydecay15, i32 %conv17)
  %arraydecay19 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %sub.ptr.lhs.cast20 = ptrtoint i8* %call18 to i32
  %sub.ptr.rhs.cast21 = ptrtoint i8* %arraydecay19 to i32
  %sub.ptr.sub22 = sub i32 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
  store i32 %sub.ptr.sub22, i32* %index, align 4
  %17 = load i32, i32* %index, align 4
  %arrayidx23 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 %17
  %18 = load i8, i8* %arrayidx23, align 1
  %19 = load i8*, i8** %out.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8, i8* %19, i32 %20
  store i8 %18, i8* %arrayidx24, align 1
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then8
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %len, align 4
  %sub = sub i32 %22, 1
  %cmp26 = icmp eq i32 %21, %sub
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end25
  br label %for.end112

if.end29:                                         ; preds = %if.end25
  %23 = load i32, i32* %index, align 4
  store i32 %23, i32* %j, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc, %if.end29
  %24 = load i32, i32* %j, align 4
  %cmp31 = icmp slt i32 %24, 26
  br i1 %cmp31, label %for.body33, label %for.end

for.body33:                                       ; preds = %for.cond30
  %25 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 %25
  %26 = load i8, i8* %arrayidx34, align 1
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %index, align 4
  %sub35 = sub nsw i32 %27, %28
  %arrayidx36 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub35
  store i8 %26, i8* %arrayidx36, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body33
  %29 = load i32, i32* %j, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond30

for.end:                                          ; preds = %for.cond30
  store i32 0, i32* %j, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc44, %for.end
  %30 = load i32, i32* %j, align 4
  %31 = load i32, i32* %index, align 4
  %cmp38 = icmp slt i32 %30, %31
  br i1 %cmp38, label %for.body40, label %for.end46

for.body40:                                       ; preds = %for.cond37
  %32 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 %32
  %33 = load i8, i8* %arrayidx41, align 1
  %34 = load i32, i32* %index, align 4
  %sub42 = sub nsw i32 26, %34
  %35 = load i32, i32* %j, align 4
  %add = add nsw i32 %sub42, %35
  %arrayidx43 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %add
  store i8 %33, i8* %arrayidx43, align 1
  br label %for.inc44

for.inc44:                                        ; preds = %for.body40
  %36 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %36, 1
  store i32 %inc45, i32* %j, align 4
  br label %for.cond37

for.end46:                                        ; preds = %for.cond37
  %arrayidx47 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 1
  %37 = load i8, i8* %arrayidx47, align 1
  store i8 %37, i8* %store, align 1
  store i32 2, i32* %j, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc55, %for.end46
  %38 = load i32, i32* %j, align 4
  %cmp49 = icmp slt i32 %38, 14
  br i1 %cmp49, label %for.body51, label %for.end57

for.body51:                                       ; preds = %for.cond48
  %39 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx52, align 1
  %41 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %41, 1
  %arrayidx54 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub53
  store i8 %40, i8* %arrayidx54, align 1
  br label %for.inc55

for.inc55:                                        ; preds = %for.body51
  %42 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %42, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond48

for.end57:                                        ; preds = %for.cond48
  %43 = load i8, i8* %store, align 1
  %arrayidx58 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 13
  store i8 %43, i8* %arrayidx58, align 1
  %arraydecay59 = getelementptr inbounds [27 x i8], [27 x i8]* %left, i32 0, i32 0
  %arraydecay60 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 0
  %call61 = call i8* @strcpy(i8* %arraydecay59, i8* %arraydecay60)
  %44 = load i32, i32* %index, align 4
  store i32 %44, i32* %j, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc69, %for.end57
  %45 = load i32, i32* %j, align 4
  %cmp63 = icmp slt i32 %45, 26
  br i1 %cmp63, label %for.body65, label %for.end71

for.body65:                                       ; preds = %for.cond62
  %46 = load i32, i32* %j, align 4
  %arrayidx66 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 %46
  %47 = load i8, i8* %arrayidx66, align 1
  %48 = load i32, i32* %j, align 4
  %49 = load i32, i32* %index, align 4
  %sub67 = sub nsw i32 %48, %49
  %arrayidx68 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub67
  store i8 %47, i8* %arrayidx68, align 1
  br label %for.inc69

for.inc69:                                        ; preds = %for.body65
  %50 = load i32, i32* %j, align 4
  %inc70 = add nsw i32 %50, 1
  store i32 %inc70, i32* %j, align 4
  br label %for.cond62

for.end71:                                        ; preds = %for.cond62
  store i32 0, i32* %j, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc80, %for.end71
  %51 = load i32, i32* %j, align 4
  %52 = load i32, i32* %index, align 4
  %cmp73 = icmp slt i32 %51, %52
  br i1 %cmp73, label %for.body75, label %for.end82

for.body75:                                       ; preds = %for.cond72
  %53 = load i32, i32* %j, align 4
  %arrayidx76 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 %53
  %54 = load i8, i8* %arrayidx76, align 1
  %55 = load i32, i32* %index, align 4
  %sub77 = sub nsw i32 26, %55
  %56 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %sub77, %56
  %arrayidx79 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %add78
  store i8 %54, i8* %arrayidx79, align 1
  br label %for.inc80

for.inc80:                                        ; preds = %for.body75
  %57 = load i32, i32* %j, align 4
  %inc81 = add nsw i32 %57, 1
  store i32 %inc81, i32* %j, align 4
  br label %for.cond72

for.end82:                                        ; preds = %for.cond72
  %arrayidx83 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 0
  %58 = load i8, i8* %arrayidx83, align 16
  store i8 %58, i8* %store, align 1
  store i32 1, i32* %j, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc91, %for.end82
  %59 = load i32, i32* %j, align 4
  %cmp85 = icmp slt i32 %59, 26
  br i1 %cmp85, label %for.body87, label %for.end93

for.body87:                                       ; preds = %for.cond84
  %60 = load i32, i32* %j, align 4
  %arrayidx88 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %60
  %61 = load i8, i8* %arrayidx88, align 1
  %62 = load i32, i32* %j, align 4
  %sub89 = sub nsw i32 %62, 1
  %arrayidx90 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub89
  store i8 %61, i8* %arrayidx90, align 1
  br label %for.inc91

for.inc91:                                        ; preds = %for.body87
  %63 = load i32, i32* %j, align 4
  %inc92 = add nsw i32 %63, 1
  store i32 %inc92, i32* %j, align 4
  br label %for.cond84

for.end93:                                        ; preds = %for.cond84
  %64 = load i8, i8* %store, align 1
  %arrayidx94 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 25
  store i8 %64, i8* %arrayidx94, align 1
  %arrayidx95 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 2
  %65 = load i8, i8* %arrayidx95, align 2
  store i8 %65, i8* %store, align 1
  store i32 3, i32* %j, align 4
  br label %for.cond96

for.cond96:                                       ; preds = %for.inc103, %for.end93
  %66 = load i32, i32* %j, align 4
  %cmp97 = icmp slt i32 %66, 14
  br i1 %cmp97, label %for.body99, label %for.end105

for.body99:                                       ; preds = %for.cond96
  %67 = load i32, i32* %j, align 4
  %arrayidx100 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %67
  %68 = load i8, i8* %arrayidx100, align 1
  %69 = load i32, i32* %j, align 4
  %sub101 = sub nsw i32 %69, 1
  %arrayidx102 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 %sub101
  store i8 %68, i8* %arrayidx102, align 1
  br label %for.inc103

for.inc103:                                       ; preds = %for.body99
  %70 = load i32, i32* %j, align 4
  %inc104 = add nsw i32 %70, 1
  store i32 %inc104, i32* %j, align 4
  br label %for.cond96

for.end105:                                       ; preds = %for.cond96
  %71 = load i8, i8* %store, align 1
  %arrayidx106 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 13
  store i8 %71, i8* %arrayidx106, align 1
  %arraydecay107 = getelementptr inbounds [27 x i8], [27 x i8]* %right, i32 0, i32 0
  %arraydecay108 = getelementptr inbounds [27 x i8], [27 x i8]* %temp, i32 0, i32 0
  %call109 = call i8* @strcpy(i8* %arraydecay107, i8* %arraydecay108)
  br label %for.inc110

for.inc110:                                       ; preds = %for.end105
  %72 = load i32, i32* %i, align 4
  %inc111 = add nsw i32 %72, 1
  store i32 %inc111, i32* %i, align 4
  br label %for.cond

for.end112:                                       ; preds = %if.then28, %for.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i32 @printf(i8* %0, ...) #2

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %plain_text = alloca i8*, align 4
  %cipher_text = alloca i8*, align 4
  %plain_text2 = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i32 0, i32 0), i8** %plain_text, align 4
  %0 = load i8*, i8** %plain_text, align 4
  %call = call i32 @strlen(i8* %0) #3
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %cipher_text, align 4
  %1 = load i8*, i8** %plain_text, align 4
  %call2 = call i32 @strlen(i8* %1) #3
  %add3 = add i32 %call2, 1
  %call4 = call noalias i8* @malloc(i32 %add3)
  store i8* %call4, i8** %plain_text2, align 4
  %2 = load i8*, i8** %plain_text, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.5, i32 0, i32 0))
  %3 = load i8*, i8** %plain_text, align 4
  %4 = load i8*, i8** %cipher_text, align 4
  call void @chao(i8* %3, i8* %4, i32 0, i32 1)
  %5 = load i8*, i8** %cipher_text, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %cipher_text, align 4
  %7 = load i8*, i8** %plain_text2, align 4
  call void @chao(i8* %6, i8* %7, i32 1, i32 0)
  %8 = load i8*, i8** %plain_text2, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* %8)
  %9 = load i8*, i8** %cipher_text, align 4
  call void @free(i8* %9)
  %10 = load i8*, i8** %plain_text2, align 4
  call void @free(i8* %10)
  ret i32 0
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @strlen(i8* %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add i32 %call2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
