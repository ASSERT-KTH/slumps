
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for scs()

; ModuleID = './Shortest_common_supersequence.c.bc'
source_filename = "./Shortest_common_supersequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.link = type { i32, i8, %struct.link* }

@__const.main.x = private unnamed_addr constant [8 x i8] c"abcbdab\00", align 1
@__const.main.y = private unnamed_addr constant [7 x i8] c"bdcaba\00", align 1
@.str = private unnamed_addr constant [19 x i8] c"SCS(%s, %s) -> %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @scs(i8* %x, i8* %y, i8* %out) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %y.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.compoundliteral = alloca %struct.link, align 4
  %j = alloca i32, align 4
  %.compoundliteral13 = alloca %struct.link, align 4
  %.compoundliteral27 = alloca %struct.link, align 4
  %i31 = alloca i32, align 4
  %j34 = alloca i32, align 4
  %lp = alloca %struct.link*, align 4
  %lp84 = alloca %struct.link*, align 4
  store i8* %x, i8** %x.addr, align 4
  store i8* %y, i8** %y.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %lx, align 4
  %1 = load i8*, i8** %y.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #5
  store i32 %call1, i32* %ly, align 4
  %2 = load i32, i32* %ly, align 4
  %add = add nsw i32 %2, 1
  %3 = load i32, i32* %lx, align 4
  %add2 = add nsw i32 %3, 1
  %4 = call i8* @llvm.stacksave()
  store i8* %4, i8** %saved_stack, align 4
  %5 = mul nuw i32 %add, %add2
  %vla = alloca %struct.link, i32 %5, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %ly, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %add2
  %arrayidx = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %9
  %10 = load i32, i32* %lx, align 4
  %arrayidx3 = getelementptr inbounds %struct.link, %struct.link* %arrayidx, i32 %10
  %len = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 0
  %11 = load i32, i32* %ly, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %len, align 4
  %letter = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 1
  %13 = load i8*, i8** %y.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx4, align 1
  store i8 %15, i8* %letter, align 4
  %next = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 2
  %16 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %16, 1
  %17 = mul nsw i32 %add5, %add2
  %arrayidx6 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %17
  %18 = load i32, i32* %lx, align 4
  %arrayidx7 = getelementptr inbounds %struct.link, %struct.link* %arrayidx6, i32 %18
  store %struct.link* %arrayidx7, %struct.link** %next, align 4
  %19 = bitcast %struct.link* %arrayidx3 to i8*
  %20 = bitcast %struct.link* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 12, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc22, %for.end
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %lx, align 4
  %cmp9 = icmp slt i32 %22, %23
  br i1 %cmp9, label %for.body10, label %for.end24

for.body10:                                       ; preds = %for.cond8
  %24 = load i32, i32* %ly, align 4
  %25 = mul nsw i32 %24, %add2
  %arrayidx11 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %25
  %26 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds %struct.link, %struct.link* %arrayidx11, i32 %26
  %len14 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 0
  %27 = load i32, i32* %lx, align 4
  %28 = load i32, i32* %j, align 4
  %sub15 = sub nsw i32 %27, %28
  store i32 %sub15, i32* %len14, align 4
  %letter16 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 1
  %29 = load i8*, i8** %x.addr, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %29, i32 %30
  %31 = load i8, i8* %arrayidx17, align 1
  store i8 %31, i8* %letter16, align 4
  %next18 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 2
  %32 = load i32, i32* %ly, align 4
  %33 = mul nsw i32 %32, %add2
  %arrayidx19 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %34, 1
  %arrayidx21 = getelementptr inbounds %struct.link, %struct.link* %arrayidx19, i32 %add20
  store %struct.link* %arrayidx21, %struct.link** %next18, align 4
  %35 = bitcast %struct.link* %arrayidx12 to i8*
  %36 = bitcast %struct.link* %.compoundliteral13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %35, i8* align 4 %36, i32 12, i1 false)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body10
  %37 = load i32, i32* %j, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %j, align 4
  br label %for.cond8

for.end24:                                        ; preds = %for.cond8
  %38 = load i32, i32* %ly, align 4
  %39 = mul nsw i32 %38, %add2
  %arrayidx25 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %39
  %40 = load i32, i32* %lx, align 4
  %arrayidx26 = getelementptr inbounds %struct.link, %struct.link* %arrayidx25, i32 %40
  %len28 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 0
  store i32 0, i32* %len28, align 4
  %letter29 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 1
  store i8 0, i8* %letter29, align 4
  %next30 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 2
  store %struct.link* null, %struct.link** %next30, align 4
  %41 = bitcast %struct.link* %arrayidx26 to i8*
  %42 = bitcast %struct.link* %.compoundliteral27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %41, i8* align 4 %42, i32 12, i1 false)
  %43 = load i32, i32* %ly, align 4
  store i32 %43, i32* %i31, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.end82, %for.end24
  %44 = load i32, i32* %i31, align 4
  %dec = add nsw i32 %44, -1
  store i32 %dec, i32* %i31, align 4
  %tobool = icmp ne i32 %44, 0
  br i1 %tobool, label %for.body33, label %for.end83

for.body33:                                       ; preds = %for.cond32
  %45 = load i32, i32* %lx, align 4
  store i32 %45, i32* %j34, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %if.end77, %for.body33
  %46 = load i32, i32* %j34, align 4
  %dec36 = add nsw i32 %46, -1
  store i32 %dec36, i32* %j34, align 4
  %tobool37 = icmp ne i32 %46, 0
  br i1 %tobool37, label %for.body38, label %for.end82

for.body38:                                       ; preds = %for.cond35
  %47 = load i32, i32* %i31, align 4
  %48 = mul nsw i32 %47, %add2
  %arrayidx39 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %48
  %49 = load i32, i32* %j34, align 4
  %arrayidx40 = getelementptr inbounds %struct.link, %struct.link* %arrayidx39, i32 %49
  store %struct.link* %arrayidx40, %struct.link** %lp, align 4
  %50 = load i8*, i8** %y.addr, align 4
  %51 = load i32, i32* %i31, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %50, i32 %51
  %52 = load i8, i8* %arrayidx41, align 1
  %conv = sext i8 %52 to i32
  %53 = load i8*, i8** %x.addr, align 4
  %54 = load i32, i32* %j34, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %55 to i32
  %cmp44 = icmp eq i32 %conv, %conv43
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %for.body38
  %56 = load i32, i32* %i31, align 4
  %add46 = add nsw i32 %56, 1
  %57 = mul nsw i32 %add46, %add2
  %arrayidx47 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %57
  %58 = load i32, i32* %j34, align 4
  %add48 = add nsw i32 %58, 1
  %arrayidx49 = getelementptr inbounds %struct.link, %struct.link* %arrayidx47, i32 %add48
  %59 = load %struct.link*, %struct.link** %lp, align 4
  %next50 = getelementptr inbounds %struct.link, %struct.link* %59, i32 0, i32 2
  store %struct.link* %arrayidx49, %struct.link** %next50, align 4
  %60 = load i8*, i8** %x.addr, align 4
  %61 = load i32, i32* %j34, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %60, i32 %61
  %62 = load i8, i8* %arrayidx51, align 1
  %63 = load %struct.link*, %struct.link** %lp, align 4
  %letter52 = getelementptr inbounds %struct.link, %struct.link* %63, i32 0, i32 1
  store i8 %62, i8* %letter52, align 4
  br label %if.end77

if.else:                                          ; preds = %for.body38
  %64 = load i32, i32* %i31, align 4
  %65 = mul nsw i32 %64, %add2
  %arrayidx53 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %65
  %66 = load i32, i32* %j34, align 4
  %add54 = add nsw i32 %66, 1
  %arrayidx55 = getelementptr inbounds %struct.link, %struct.link* %arrayidx53, i32 %add54
  %len56 = getelementptr inbounds %struct.link, %struct.link* %arrayidx55, i32 0, i32 0
  %67 = load i32, i32* %len56, align 4
  %68 = load i32, i32* %i31, align 4
  %add57 = add nsw i32 %68, 1
  %69 = mul nsw i32 %add57, %add2
  %arrayidx58 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %69
  %70 = load i32, i32* %j34, align 4
  %arrayidx59 = getelementptr inbounds %struct.link, %struct.link* %arrayidx58, i32 %70
  %len60 = getelementptr inbounds %struct.link, %struct.link* %arrayidx59, i32 0, i32 0
  %71 = load i32, i32* %len60, align 4
  %cmp61 = icmp slt i32 %67, %71
  br i1 %cmp61, label %if.then63, label %if.else70

if.then63:                                        ; preds = %if.else
  %72 = load i32, i32* %i31, align 4
  %73 = mul nsw i32 %72, %add2
  %arrayidx64 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %73
  %74 = load i32, i32* %j34, align 4
  %add65 = add nsw i32 %74, 1
  %arrayidx66 = getelementptr inbounds %struct.link, %struct.link* %arrayidx64, i32 %add65
  %75 = load %struct.link*, %struct.link** %lp, align 4
  %next67 = getelementptr inbounds %struct.link, %struct.link* %75, i32 0, i32 2
  store %struct.link* %arrayidx66, %struct.link** %next67, align 4
  %76 = load i8*, i8** %x.addr, align 4
  %77 = load i32, i32* %j34, align 4
  %arrayidx68 = getelementptr inbounds i8, i8* %76, i32 %77
  %78 = load i8, i8* %arrayidx68, align 1
  %79 = load %struct.link*, %struct.link** %lp, align 4
  %letter69 = getelementptr inbounds %struct.link, %struct.link* %79, i32 0, i32 1
  store i8 %78, i8* %letter69, align 4
  br label %if.end

if.else70:                                        ; preds = %if.else
  %80 = load i32, i32* %i31, align 4
  %add71 = add nsw i32 %80, 1
  %81 = mul nsw i32 %add71, %add2
  %arrayidx72 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %81
  %82 = load i32, i32* %j34, align 4
  %arrayidx73 = getelementptr inbounds %struct.link, %struct.link* %arrayidx72, i32 %82
  %83 = load %struct.link*, %struct.link** %lp, align 4
  %next74 = getelementptr inbounds %struct.link, %struct.link* %83, i32 0, i32 2
  store %struct.link* %arrayidx73, %struct.link** %next74, align 4
  %84 = load i8*, i8** %y.addr, align 4
  %85 = load i32, i32* %i31, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %84, i32 %85
  %86 = load i8, i8* %arrayidx75, align 1
  %87 = load %struct.link*, %struct.link** %lp, align 4
  %letter76 = getelementptr inbounds %struct.link, %struct.link* %87, i32 0, i32 1
  store i8 %86, i8* %letter76, align 4
  br label %if.end

if.end:                                           ; preds = %if.else70, %if.then63
  br label %if.end77

if.end77:                                         ; preds = %if.end, %if.then
  %88 = load %struct.link*, %struct.link** %lp, align 4
  %next78 = getelementptr inbounds %struct.link, %struct.link* %88, i32 0, i32 2
  %89 = load %struct.link*, %struct.link** %next78, align 4
  %len79 = getelementptr inbounds %struct.link, %struct.link* %89, i32 0, i32 0
  %90 = load i32, i32* %len79, align 4
  %add80 = add nsw i32 %90, 1
  %91 = load %struct.link*, %struct.link** %lp, align 4
  %len81 = getelementptr inbounds %struct.link, %struct.link* %91, i32 0, i32 0
  store i32 %add80, i32* %len81, align 4
  br label %for.cond35

for.end82:                                        ; preds = %for.cond35
  br label %for.cond32

for.end83:                                        ; preds = %for.cond32
  %92 = mul nsw i32 0, %add2
  %arrayidx85 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %92
  %arrayidx86 = getelementptr inbounds %struct.link, %struct.link* %arrayidx85, i32 0
  store %struct.link* %arrayidx86, %struct.link** %lp84, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc91, %for.end83
  %93 = load %struct.link*, %struct.link** %lp84, align 4
  %tobool88 = icmp ne %struct.link* %93, null
  br i1 %tobool88, label %for.body89, label %for.end93

for.body89:                                       ; preds = %for.cond87
  %94 = load %struct.link*, %struct.link** %lp84, align 4
  %letter90 = getelementptr inbounds %struct.link, %struct.link* %94, i32 0, i32 1
  %95 = load i8, i8* %letter90, align 4
  %96 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %95, i8* %96, align 1
  br label %for.inc91

for.inc91:                                        ; preds = %for.body89
  %97 = load %struct.link*, %struct.link** %lp84, align 4
  %next92 = getelementptr inbounds %struct.link, %struct.link* %97, i32 0, i32 2
  %98 = load %struct.link*, %struct.link** %next92, align 4
  store %struct.link* %98, %struct.link** %lp84, align 4
  br label %for.cond87

for.end93:                                        ; preds = %for.cond87
  %99 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %99)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [8 x i8], align 1
  %y = alloca [7 x i8], align 1
  %res = alloca [128 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i8]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.x, i32 0, i32 0), i32 8, i1 false)
  %1 = bitcast [7 x i8]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.main.y, i32 0, i32 0), i32 7, i1 false)
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call = call i32 @scs(i8* %arraydecay, i8* %arraydecay1, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* %arraydecay3, i8* %arraydecay4, i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = mul nuw i32 %add, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = mulnuw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = mul nsw i32 %8, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = mul nsw i32 %add5, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = mul nsw i32 %24, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub nsw i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %arrayidx17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = mul nsw i32 %32, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add20 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = mul nsw i32 %38, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %44, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %44, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec36 = add nsw i32 %46, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool37 = icmp ne i32 %46, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = mul nsw i32 %47, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i8, i8* %arrayidx41, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %52 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i8, i8* %arrayidx42, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv43 = sext i8 %55 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp44 = icmp eq i32 %conv, %conv43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add46 = add nsw i32 %56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %57 = mul nsw i32 %add46, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add48 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i8, i8* %arrayidx51, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = mul nsw i32 %64, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add54 = add nsw i32 %66, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %len56, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add57 = add nsw i32 %68, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %69 = mul nsw i32 %add57, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %len60, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp61 = icmp slt i32 %67, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = mul nsw i32 %72, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add65 = add nsw i32 %74, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i8, i8* %arrayidx68, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add71 = add nsw i32 %80, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = mul nsw i32 %add71, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %86 = load i8, i8* %arrayidx75, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %90 = load i32, i32* %len79, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add80 = add nsw i32 %90, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %92 = mul nsw i32 0, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = mulnsw 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool88 = icmp ne %struct.link* %93, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %95 = load i8, i8* %letter90, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = mulnuw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = mulnsw 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Shortest_common_supersequence.c.bc'
source_filename = "./Shortest_common_supersequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.link = type { i32, i8, %struct.link* }

@__const.main.x = private unnamed_addr constant [8 x i8] c"abcbdab\00", align 1
@__const.main.y = private unnamed_addr constant [7 x i8] c"bdcaba\00", align 1
@.str = private unnamed_addr constant [19 x i8] c"SCS(%s, %s) -> %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @scs(i8* %x, i8* %y, i8* %out) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %y.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.compoundliteral = alloca %struct.link, align 4
  %j = alloca i32, align 4
  %.compoundliteral13 = alloca %struct.link, align 4
  %.compoundliteral27 = alloca %struct.link, align 4
  %i31 = alloca i32, align 4
  %j34 = alloca i32, align 4
  %lp = alloca %struct.link*, align 4
  %lp84 = alloca %struct.link*, align 4
  store i8* %x, i8** %x.addr, align 4
  store i8* %y, i8** %y.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %lx, align 4
  %1 = load i8*, i8** %y.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #5
  store i32 %call1, i32* %ly, align 4
  %2 = load i32, i32* %ly, align 4
  %add = add nsw i32 %2, 1
  %3 = load i32, i32* %lx, align 4
  %add2 = add nsw i32 %3, 1
  %4 = call i8* @llvm.stacksave()
  store i8* %4, i8** %saved_stack, align 4
  %5 = mul nuw i32 %add, %add2
  %vla = alloca %struct.link, i32 %5, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %ly, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %add2
  %arrayidx = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %9
  %10 = load i32, i32* %lx, align 4
  %arrayidx3 = getelementptr inbounds %struct.link, %struct.link* %arrayidx, i32 %10
  %len = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 0
  %11 = load i32, i32* %ly, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %len, align 4
  %letter = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 1
  %13 = load i8*, i8** %y.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx4, align 1
  store i8 %15, i8* %letter, align 4
  %next = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 2
  %16 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %16, 1
  %17 = mul nsw i32 %add5, %add2
  %arrayidx6 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %17
  %18 = load i32, i32* %lx, align 4
  %arrayidx7 = getelementptr inbounds %struct.link, %struct.link* %arrayidx6, i32 %18
  store %struct.link* %arrayidx7, %struct.link** %next, align 4
  %19 = bitcast %struct.link* %arrayidx3 to i8*
  %20 = bitcast %struct.link* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 12, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc22, %for.end
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %lx, align 4
  %cmp9 = icmp slt i32 %22, %23
  br i1 %cmp9, label %for.body10, label %for.end24

for.body10:                                       ; preds = %for.cond8
  %24 = load i32, i32* %ly, align 4
  %25 = mul nsw i32 %24, %add2
  %arrayidx11 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %25
  %26 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds %struct.link, %struct.link* %arrayidx11, i32 %26
  %len14 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 0
  %27 = load i32, i32* %lx, align 4
  %28 = load i32, i32* %j, align 4
  %sub15 = sub nsw i32 %27, %28
  store i32 %sub15, i32* %len14, align 4
  %letter16 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 1
  %29 = load i8*, i8** %x.addr, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %29, i32 %30
  %31 = load i8, i8* %arrayidx17, align 1
  store i8 %31, i8* %letter16, align 4
  %next18 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 2
  %32 = load i32, i32* %ly, align 4
  %33 = mul nsw i32 %32, %add2
  %arrayidx19 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %34, 1
  %arrayidx21 = getelementptr inbounds %struct.link, %struct.link* %arrayidx19, i32 %add20
  store %struct.link* %arrayidx21, %struct.link** %next18, align 4
  %35 = bitcast %struct.link* %arrayidx12 to i8*
  %36 = bitcast %struct.link* %.compoundliteral13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %35, i8* align 4 %36, i32 12, i1 false)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body10
  %37 = load i32, i32* %j, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %j, align 4
  br label %for.cond8

for.end24:                                        ; preds = %for.cond8
  %38 = load i32, i32* %ly, align 4
  %39 = mul nsw i32 %38, %add2
  %arrayidx25 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %39
  %40 = load i32, i32* %lx, align 4
  %arrayidx26 = getelementptr inbounds %struct.link, %struct.link* %arrayidx25, i32 %40
  %len28 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 0
  store i32 0, i32* %len28, align 4
  %letter29 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 1
  store i8 0, i8* %letter29, align 4
  %next30 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 2
  store %struct.link* null, %struct.link** %next30, align 4
  %41 = bitcast %struct.link* %arrayidx26 to i8*
  %42 = bitcast %struct.link* %.compoundliteral27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %41, i8* align 4 %42, i32 12, i1 false)
  %43 = load i32, i32* %ly, align 4
  store i32 %43, i32* %i31, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.end82, %for.end24
  %44 = load i32, i32* %i31, align 4
  %dec = add nsw i32 %44, -1
  store i32 %dec, i32* %i31, align 4
  %tobool = icmp ne i32 %44, 0
  br i1 %tobool, label %for.body33, label %for.end83

for.body33:                                       ; preds = %for.cond32
  %45 = load i32, i32* %lx, align 4
  store i32 %45, i32* %j34, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %if.end77, %for.body33
  %46 = load i32, i32* %j34, align 4
  %dec36 = add nsw i32 %46, -1
  store i32 %dec36, i32* %j34, align 4
  %tobool37 = icmp ne i32 %46, 0
  br i1 %tobool37, label %for.body38, label %for.end82

for.body38:                                       ; preds = %for.cond35
  %47 = load i32, i32* %i31, align 4
  %48 = mul nsw i32 %47, %add2
  %arrayidx39 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %48
  %49 = load i32, i32* %j34, align 4
  %arrayidx40 = getelementptr inbounds %struct.link, %struct.link* %arrayidx39, i32 %49
  store %struct.link* %arrayidx40, %struct.link** %lp, align 4
  %50 = load i8*, i8** %y.addr, align 4
  %51 = load i32, i32* %i31, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %50, i32 %51
  %52 = load i8, i8* %arrayidx41, align 1
  %conv = sext i8 %52 to i32
  %53 = load i8*, i8** %x.addr, align 4
  %54 = load i32, i32* %j34, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %55 to i32
  %cmp44 = icmp eq i32 %conv, %conv43
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %for.body38
  %56 = load i32, i32* %i31, align 4
  %add46 = add nsw i32 %56, 1
  %57 = mul nsw i32 %add46, %add2
  %arrayidx47 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %57
  %58 = load i32, i32* %j34, align 4
  %add48 = add nsw i32 %58, 1
  %arrayidx49 = getelementptr inbounds %struct.link, %struct.link* %arrayidx47, i32 %add48
  %59 = load %struct.link*, %struct.link** %lp, align 4
  %next50 = getelementptr inbounds %struct.link, %struct.link* %59, i32 0, i32 2
  store %struct.link* %arrayidx49, %struct.link** %next50, align 4
  %60 = load i8*, i8** %x.addr, align 4
  %61 = load i32, i32* %j34, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %60, i32 %61
  %62 = load i8, i8* %arrayidx51, align 1
  %63 = load %struct.link*, %struct.link** %lp, align 4
  %letter52 = getelementptr inbounds %struct.link, %struct.link* %63, i32 0, i32 1
  store i8 %62, i8* %letter52, align 4
  br label %if.end77

if.else:                                          ; preds = %for.body38
  %64 = load i32, i32* %i31, align 4
  %65 = mul nsw i32 %64, %add2
  %arrayidx53 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %65
  %66 = load i32, i32* %j34, align 4
  %add54 = add nsw i32 %66, 1
  %arrayidx55 = getelementptr inbounds %struct.link, %struct.link* %arrayidx53, i32 %add54
  %len56 = getelementptr inbounds %struct.link, %struct.link* %arrayidx55, i32 0, i32 0
  %67 = load i32, i32* %len56, align 4
  %68 = load i32, i32* %i31, align 4
  %add57 = add nsw i32 %68, 1
  %69 = mul nsw i32 %add57, %add2
  %arrayidx58 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %69
  %70 = load i32, i32* %j34, align 4
  %arrayidx59 = getelementptr inbounds %struct.link, %struct.link* %arrayidx58, i32 %70
  %len60 = getelementptr inbounds %struct.link, %struct.link* %arrayidx59, i32 0, i32 0
  %71 = load i32, i32* %len60, align 4
  %cmp61 = icmp slt i32 %67, %71
  br i1 %cmp61, label %if.then63, label %if.else70

if.then63:                                        ; preds = %if.else
  %72 = load i32, i32* %i31, align 4
  %73 = mul nsw i32 %72, %add2
  %arrayidx64 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %73
  %74 = load i32, i32* %j34, align 4
  %add65 = add nsw i32 %74, 1
  %arrayidx66 = getelementptr inbounds %struct.link, %struct.link* %arrayidx64, i32 %add65
  %75 = load %struct.link*, %struct.link** %lp, align 4
  %next67 = getelementptr inbounds %struct.link, %struct.link* %75, i32 0, i32 2
  store %struct.link* %arrayidx66, %struct.link** %next67, align 4
  %76 = load i8*, i8** %x.addr, align 4
  %77 = load i32, i32* %j34, align 4
  %arrayidx68 = getelementptr inbounds i8, i8* %76, i32 %77
  %78 = load i8, i8* %arrayidx68, align 1
  %79 = load %struct.link*, %struct.link** %lp, align 4
  %letter69 = getelementptr inbounds %struct.link, %struct.link* %79, i32 0, i32 1
  store i8 %78, i8* %letter69, align 4
  br label %if.end

if.else70:                                        ; preds = %if.else
  %80 = load i32, i32* %i31, align 4
  %add71 = add nsw i32 %80, 1
  %81 = mul nsw i32 %add71, %add2
  %arrayidx72 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %81
  %82 = load i32, i32* %j34, align 4
  %arrayidx73 = getelementptr inbounds %struct.link, %struct.link* %arrayidx72, i32 %82
  %83 = load %struct.link*, %struct.link** %lp, align 4
  %next74 = getelementptr inbounds %struct.link, %struct.link* %83, i32 0, i32 2
  store %struct.link* %arrayidx73, %struct.link** %next74, align 4
  %84 = load i8*, i8** %y.addr, align 4
  %85 = load i32, i32* %i31, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %84, i32 %85
  %86 = load i8, i8* %arrayidx75, align 1
  %87 = load %struct.link*, %struct.link** %lp, align 4
  %letter76 = getelementptr inbounds %struct.link, %struct.link* %87, i32 0, i32 1
  store i8 %86, i8* %letter76, align 4
  br label %if.end

if.end:                                           ; preds = %if.else70, %if.then63
  br label %if.end77

if.end77:                                         ; preds = %if.end, %if.then
  %88 = load %struct.link*, %struct.link** %lp, align 4
  %next78 = getelementptr inbounds %struct.link, %struct.link* %88, i32 0, i32 2
  %89 = load %struct.link*, %struct.link** %next78, align 4
  %len79 = getelementptr inbounds %struct.link, %struct.link* %89, i32 0, i32 0
  %90 = load i32, i32* %len79, align 4
  %add80 = add nsw i32 %90, 1
  %91 = load %struct.link*, %struct.link** %lp, align 4
  %len81 = getelementptr inbounds %struct.link, %struct.link* %91, i32 0, i32 0
  store i32 %add80, i32* %len81, align 4
  br label %for.cond35

for.end82:                                        ; preds = %for.cond35
  br label %for.cond32

for.end83:                                        ; preds = %for.cond32
  %92 = mul nsw i32 0, %add2
  %arrayidx85 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %92
  %arrayidx86 = getelementptr inbounds %struct.link, %struct.link* %arrayidx85, i32 0
  store %struct.link* %arrayidx86, %struct.link** %lp84, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc91, %for.end83
  %93 = load %struct.link*, %struct.link** %lp84, align 4
  %tobool88 = icmp ne %struct.link* %93, null
  br i1 %tobool88, label %for.body89, label %for.end93

for.body89:                                       ; preds = %for.cond87
  %94 = load %struct.link*, %struct.link** %lp84, align 4
  %letter90 = getelementptr inbounds %struct.link, %struct.link* %94, i32 0, i32 1
  %95 = load i8, i8* %letter90, align 4
  %96 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %95, i8* %96, align 1
  br label %for.inc91

for.inc91:                                        ; preds = %for.body89
  %97 = load %struct.link*, %struct.link** %lp84, align 4
  %next92 = getelementptr inbounds %struct.link, %struct.link* %97, i32 0, i32 2
  %98 = load %struct.link*, %struct.link** %next92, align 4
  store %struct.link* %98, %struct.link** %lp84, align 4
  br label %for.cond87

for.end93:                                        ; preds = %for.cond87
  %99 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %99)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [8 x i8], align 1
  %y = alloca [7 x i8], align 1
  %res = alloca [128 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i8]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.x, i32 0, i32 0), i32 8, i1 false)
  %1 = bitcast [7 x i8]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.main.y, i32 0, i32 0), i32 7, i1 false)
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call = call i32 @scs(i8* %arraydecay, i8* %arraydecay1, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* %arraydecay3, i8* %arraydecay4, i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %92 = mul nsw i32 0, %add2"
; from ""
; with "i32 0" in:
"%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = mulnsw 0:i32, %1
cand %2 0:i32
"
; with "i32 0"

Module after replacement:
; ModuleID = './Shortest_common_supersequence.c.bc'
source_filename = "./Shortest_common_supersequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.link = type { i32, i8, %struct.link* }

@__const.main.x = private unnamed_addr constant [8 x i8] c"abcbdab\00", align 1
@__const.main.y = private unnamed_addr constant [7 x i8] c"bdcaba\00", align 1
@.str = private unnamed_addr constant [19 x i8] c"SCS(%s, %s) -> %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @scs(i8* %x, i8* %y, i8* %out) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %y.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.compoundliteral = alloca %struct.link, align 4
  %j = alloca i32, align 4
  %.compoundliteral13 = alloca %struct.link, align 4
  %.compoundliteral27 = alloca %struct.link, align 4
  %i31 = alloca i32, align 4
  %j34 = alloca i32, align 4
  %lp = alloca %struct.link*, align 4
  %lp84 = alloca %struct.link*, align 4
  store i8* %x, i8** %x.addr, align 4
  store i8* %y, i8** %y.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %lx, align 4
  %1 = load i8*, i8** %y.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #5
  store i32 %call1, i32* %ly, align 4
  %2 = load i32, i32* %ly, align 4
  %add = add nsw i32 %2, 1
  %3 = load i32, i32* %lx, align 4
  %add2 = add nsw i32 %3, 1
  %4 = call i8* @llvm.stacksave()
  store i8* %4, i8** %saved_stack, align 4
  %5 = mul nuw i32 %add, %add2
  %vla = alloca %struct.link, i32 %5, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %ly, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %add2
  %arrayidx = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %9
  %10 = load i32, i32* %lx, align 4
  %arrayidx3 = getelementptr inbounds %struct.link, %struct.link* %arrayidx, i32 %10
  %len = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 0
  %11 = load i32, i32* %ly, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %len, align 4
  %letter = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 1
  %13 = load i8*, i8** %y.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx4, align 1
  store i8 %15, i8* %letter, align 4
  %next = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 2
  %16 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %16, 1
  %17 = mul nsw i32 %add5, %add2
  %arrayidx6 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %17
  %18 = load i32, i32* %lx, align 4
  %arrayidx7 = getelementptr inbounds %struct.link, %struct.link* %arrayidx6, i32 %18
  store %struct.link* %arrayidx7, %struct.link** %next, align 4
  %19 = bitcast %struct.link* %arrayidx3 to i8*
  %20 = bitcast %struct.link* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 12, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc22, %for.end
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %lx, align 4
  %cmp9 = icmp slt i32 %22, %23
  br i1 %cmp9, label %for.body10, label %for.end24

for.body10:                                       ; preds = %for.cond8
  %24 = load i32, i32* %ly, align 4
  %25 = mul nsw i32 %24, %add2
  %arrayidx11 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %25
  %26 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds %struct.link, %struct.link* %arrayidx11, i32 %26
  %len14 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 0
  %27 = load i32, i32* %lx, align 4
  %28 = load i32, i32* %j, align 4
  %sub15 = sub nsw i32 %27, %28
  store i32 %sub15, i32* %len14, align 4
  %letter16 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 1
  %29 = load i8*, i8** %x.addr, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %29, i32 %30
  %31 = load i8, i8* %arrayidx17, align 1
  store i8 %31, i8* %letter16, align 4
  %next18 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 2
  %32 = load i32, i32* %ly, align 4
  %33 = mul nsw i32 %32, %add2
  %arrayidx19 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %34, 1
  %arrayidx21 = getelementptr inbounds %struct.link, %struct.link* %arrayidx19, i32 %add20
  store %struct.link* %arrayidx21, %struct.link** %next18, align 4
  %35 = bitcast %struct.link* %arrayidx12 to i8*
  %36 = bitcast %struct.link* %.compoundliteral13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %35, i8* align 4 %36, i32 12, i1 false)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body10
  %37 = load i32, i32* %j, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %j, align 4
  br label %for.cond8

for.end24:                                        ; preds = %for.cond8
  %38 = load i32, i32* %ly, align 4
  %39 = mul nsw i32 %38, %add2
  %arrayidx25 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %39
  %40 = load i32, i32* %lx, align 4
  %arrayidx26 = getelementptr inbounds %struct.link, %struct.link* %arrayidx25, i32 %40
  %len28 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 0
  store i32 0, i32* %len28, align 4
  %letter29 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 1
  store i8 0, i8* %letter29, align 4
  %next30 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 2
  store %struct.link* null, %struct.link** %next30, align 4
  %41 = bitcast %struct.link* %arrayidx26 to i8*
  %42 = bitcast %struct.link* %.compoundliteral27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %41, i8* align 4 %42, i32 12, i1 false)
  %43 = load i32, i32* %ly, align 4
  store i32 %43, i32* %i31, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.end82, %for.end24
  %44 = load i32, i32* %i31, align 4
  %dec = add nsw i32 %44, -1
  store i32 %dec, i32* %i31, align 4
  %tobool = icmp ne i32 %44, 0
  br i1 %tobool, label %for.body33, label %for.end83

for.body33:                                       ; preds = %for.cond32
  %45 = load i32, i32* %lx, align 4
  store i32 %45, i32* %j34, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %if.end77, %for.body33
  %46 = load i32, i32* %j34, align 4
  %dec36 = add nsw i32 %46, -1
  store i32 %dec36, i32* %j34, align 4
  %tobool37 = icmp ne i32 %46, 0
  br i1 %tobool37, label %for.body38, label %for.end82

for.body38:                                       ; preds = %for.cond35
  %47 = load i32, i32* %i31, align 4
  %48 = mul nsw i32 %47, %add2
  %arrayidx39 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %48
  %49 = load i32, i32* %j34, align 4
  %arrayidx40 = getelementptr inbounds %struct.link, %struct.link* %arrayidx39, i32 %49
  store %struct.link* %arrayidx40, %struct.link** %lp, align 4
  %50 = load i8*, i8** %y.addr, align 4
  %51 = load i32, i32* %i31, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %50, i32 %51
  %52 = load i8, i8* %arrayidx41, align 1
  %conv = sext i8 %52 to i32
  %53 = load i8*, i8** %x.addr, align 4
  %54 = load i32, i32* %j34, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %55 to i32
  %cmp44 = icmp eq i32 %conv, %conv43
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %for.body38
  %56 = load i32, i32* %i31, align 4
  %add46 = add nsw i32 %56, 1
  %57 = mul nsw i32 %add46, %add2
  %arrayidx47 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %57
  %58 = load i32, i32* %j34, align 4
  %add48 = add nsw i32 %58, 1
  %arrayidx49 = getelementptr inbounds %struct.link, %struct.link* %arrayidx47, i32 %add48
  %59 = load %struct.link*, %struct.link** %lp, align 4
  %next50 = getelementptr inbounds %struct.link, %struct.link* %59, i32 0, i32 2
  store %struct.link* %arrayidx49, %struct.link** %next50, align 4
  %60 = load i8*, i8** %x.addr, align 4
  %61 = load i32, i32* %j34, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %60, i32 %61
  %62 = load i8, i8* %arrayidx51, align 1
  %63 = load %struct.link*, %struct.link** %lp, align 4
  %letter52 = getelementptr inbounds %struct.link, %struct.link* %63, i32 0, i32 1
  store i8 %62, i8* %letter52, align 4
  br label %if.end77

if.else:                                          ; preds = %for.body38
  %64 = load i32, i32* %i31, align 4
  %65 = mul nsw i32 %64, %add2
  %arrayidx53 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %65
  %66 = load i32, i32* %j34, align 4
  %add54 = add nsw i32 %66, 1
  %arrayidx55 = getelementptr inbounds %struct.link, %struct.link* %arrayidx53, i32 %add54
  %len56 = getelementptr inbounds %struct.link, %struct.link* %arrayidx55, i32 0, i32 0
  %67 = load i32, i32* %len56, align 4
  %68 = load i32, i32* %i31, align 4
  %add57 = add nsw i32 %68, 1
  %69 = mul nsw i32 %add57, %add2
  %arrayidx58 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %69
  %70 = load i32, i32* %j34, align 4
  %arrayidx59 = getelementptr inbounds %struct.link, %struct.link* %arrayidx58, i32 %70
  %len60 = getelementptr inbounds %struct.link, %struct.link* %arrayidx59, i32 0, i32 0
  %71 = load i32, i32* %len60, align 4
  %cmp61 = icmp slt i32 %67, %71
  br i1 %cmp61, label %if.then63, label %if.else70

if.then63:                                        ; preds = %if.else
  %72 = load i32, i32* %i31, align 4
  %73 = mul nsw i32 %72, %add2
  %arrayidx64 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %73
  %74 = load i32, i32* %j34, align 4
  %add65 = add nsw i32 %74, 1
  %arrayidx66 = getelementptr inbounds %struct.link, %struct.link* %arrayidx64, i32 %add65
  %75 = load %struct.link*, %struct.link** %lp, align 4
  %next67 = getelementptr inbounds %struct.link, %struct.link* %75, i32 0, i32 2
  store %struct.link* %arrayidx66, %struct.link** %next67, align 4
  %76 = load i8*, i8** %x.addr, align 4
  %77 = load i32, i32* %j34, align 4
  %arrayidx68 = getelementptr inbounds i8, i8* %76, i32 %77
  %78 = load i8, i8* %arrayidx68, align 1
  %79 = load %struct.link*, %struct.link** %lp, align 4
  %letter69 = getelementptr inbounds %struct.link, %struct.link* %79, i32 0, i32 1
  store i8 %78, i8* %letter69, align 4
  br label %if.end

if.else70:                                        ; preds = %if.else
  %80 = load i32, i32* %i31, align 4
  %add71 = add nsw i32 %80, 1
  %81 = mul nsw i32 %add71, %add2
  %arrayidx72 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %81
  %82 = load i32, i32* %j34, align 4
  %arrayidx73 = getelementptr inbounds %struct.link, %struct.link* %arrayidx72, i32 %82
  %83 = load %struct.link*, %struct.link** %lp, align 4
  %next74 = getelementptr inbounds %struct.link, %struct.link* %83, i32 0, i32 2
  store %struct.link* %arrayidx73, %struct.link** %next74, align 4
  %84 = load i8*, i8** %y.addr, align 4
  %85 = load i32, i32* %i31, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %84, i32 %85
  %86 = load i8, i8* %arrayidx75, align 1
  %87 = load %struct.link*, %struct.link** %lp, align 4
  %letter76 = getelementptr inbounds %struct.link, %struct.link* %87, i32 0, i32 1
  store i8 %86, i8* %letter76, align 4
  br label %if.end

if.end:                                           ; preds = %if.else70, %if.then63
  br label %if.end77

if.end77:                                         ; preds = %if.end, %if.then
  %88 = load %struct.link*, %struct.link** %lp, align 4
  %next78 = getelementptr inbounds %struct.link, %struct.link* %88, i32 0, i32 2
  %89 = load %struct.link*, %struct.link** %next78, align 4
  %len79 = getelementptr inbounds %struct.link, %struct.link* %89, i32 0, i32 0
  %90 = load i32, i32* %len79, align 4
  %add80 = add nsw i32 %90, 1
  %91 = load %struct.link*, %struct.link** %lp, align 4
  %len81 = getelementptr inbounds %struct.link, %struct.link* %91, i32 0, i32 0
  store i32 %add80, i32* %len81, align 4
  br label %for.cond35

for.end82:                                        ; preds = %for.cond35
  br label %for.cond32

for.end83:                                        ; preds = %for.cond32
  %arrayidx85 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 0
  %arrayidx86 = getelementptr inbounds %struct.link, %struct.link* %arrayidx85, i32 0
  store %struct.link* %arrayidx86, %struct.link** %lp84, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc91, %for.end83
  %92 = load %struct.link*, %struct.link** %lp84, align 4
  %tobool88 = icmp ne %struct.link* %92, null
  br i1 %tobool88, label %for.body89, label %for.end93

for.body89:                                       ; preds = %for.cond87
  %93 = load %struct.link*, %struct.link** %lp84, align 4
  %letter90 = getelementptr inbounds %struct.link, %struct.link* %93, i32 0, i32 1
  %94 = load i8, i8* %letter90, align 4
  %95 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %95, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %94, i8* %95, align 1
  br label %for.inc91

for.inc91:                                        ; preds = %for.body89
  %96 = load %struct.link*, %struct.link** %lp84, align 4
  %next92 = getelementptr inbounds %struct.link, %struct.link* %96, i32 0, i32 2
  %97 = load %struct.link*, %struct.link** %next92, align 4
  store %struct.link* %97, %struct.link** %lp84, align 4
  br label %for.cond87

for.end93:                                        ; preds = %for.cond87
  %98 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %98)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [8 x i8], align 1
  %y = alloca [7 x i8], align 1
  %res = alloca [128 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i8]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.x, i32 0, i32 0), i32 8, i1 false)
  %1 = bitcast [7 x i8]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.main.y, i32 0, i32 0), i32 7, i1 false)
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call = call i32 @scs(i8* %arraydecay, i8* %arraydecay1, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* %arraydecay3, i8* %arraydecay4, i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for scs()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for scs()

; ModuleID = './Shortest_common_supersequence.c.bc'
source_filename = "./Shortest_common_supersequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.link = type { i32, i8, %struct.link* }

@__const.main.x = private unnamed_addr constant [8 x i8] c"abcbdab\00", align 1
@__const.main.y = private unnamed_addr constant [7 x i8] c"bdcaba\00", align 1
@.str = private unnamed_addr constant [19 x i8] c"SCS(%s, %s) -> %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @scs(i8* %x, i8* %y, i8* %out) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %y.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.compoundliteral = alloca %struct.link, align 4
  %j = alloca i32, align 4
  %.compoundliteral13 = alloca %struct.link, align 4
  %.compoundliteral27 = alloca %struct.link, align 4
  %i31 = alloca i32, align 4
  %j34 = alloca i32, align 4
  %lp = alloca %struct.link*, align 4
  %lp84 = alloca %struct.link*, align 4
  store i8* %x, i8** %x.addr, align 4
  store i8* %y, i8** %y.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %lx, align 4
  %1 = load i8*, i8** %y.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #5
  store i32 %call1, i32* %ly, align 4
  %2 = load i32, i32* %ly, align 4
  %add = add nsw i32 %2, 1
  %3 = load i32, i32* %lx, align 4
  %add2 = add nsw i32 %3, 1
  %4 = call i8* @llvm.stacksave()
  store i8* %4, i8** %saved_stack, align 4
  %5 = mul nuw i32 %add, %add2
  %vla = alloca %struct.link, i32 %5, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %ly, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %add2
  %arrayidx = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %9
  %10 = load i32, i32* %lx, align 4
  %arrayidx3 = getelementptr inbounds %struct.link, %struct.link* %arrayidx, i32 %10
  %len = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 0
  %11 = load i32, i32* %ly, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %len, align 4
  %letter = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 1
  %13 = load i8*, i8** %y.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx4, align 1
  store i8 %15, i8* %letter, align 4
  %next = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 2
  %16 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %16, 1
  %17 = mul nsw i32 %add5, %add2
  %arrayidx6 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %17
  %18 = load i32, i32* %lx, align 4
  %arrayidx7 = getelementptr inbounds %struct.link, %struct.link* %arrayidx6, i32 %18
  store %struct.link* %arrayidx7, %struct.link** %next, align 4
  %19 = bitcast %struct.link* %arrayidx3 to i8*
  %20 = bitcast %struct.link* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 12, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc22, %for.end
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %lx, align 4
  %cmp9 = icmp slt i32 %22, %23
  br i1 %cmp9, label %for.body10, label %for.end24

for.body10:                                       ; preds = %for.cond8
  %24 = load i32, i32* %ly, align 4
  %25 = mul nsw i32 %24, %add2
  %arrayidx11 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %25
  %26 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds %struct.link, %struct.link* %arrayidx11, i32 %26
  %len14 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 0
  %27 = load i32, i32* %lx, align 4
  %28 = load i32, i32* %j, align 4
  %sub15 = sub nsw i32 %27, %28
  store i32 %sub15, i32* %len14, align 4
  %letter16 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 1
  %29 = load i8*, i8** %x.addr, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %29, i32 %30
  %31 = load i8, i8* %arrayidx17, align 1
  store i8 %31, i8* %letter16, align 4
  %next18 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 2
  %32 = load i32, i32* %ly, align 4
  %33 = mul nsw i32 %32, %add2
  %arrayidx19 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %34, 1
  %arrayidx21 = getelementptr inbounds %struct.link, %struct.link* %arrayidx19, i32 %add20
  store %struct.link* %arrayidx21, %struct.link** %next18, align 4
  %35 = bitcast %struct.link* %arrayidx12 to i8*
  %36 = bitcast %struct.link* %.compoundliteral13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %35, i8* align 4 %36, i32 12, i1 false)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body10
  %37 = load i32, i32* %j, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %j, align 4
  br label %for.cond8

for.end24:                                        ; preds = %for.cond8
  %38 = load i32, i32* %ly, align 4
  %39 = mul nsw i32 %38, %add2
  %arrayidx25 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %39
  %40 = load i32, i32* %lx, align 4
  %arrayidx26 = getelementptr inbounds %struct.link, %struct.link* %arrayidx25, i32 %40
  %len28 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 0
  store i32 0, i32* %len28, align 4
  %letter29 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 1
  store i8 0, i8* %letter29, align 4
  %next30 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 2
  store %struct.link* null, %struct.link** %next30, align 4
  %41 = bitcast %struct.link* %arrayidx26 to i8*
  %42 = bitcast %struct.link* %.compoundliteral27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %41, i8* align 4 %42, i32 12, i1 false)
  %43 = load i32, i32* %ly, align 4
  store i32 %43, i32* %i31, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.end82, %for.end24
  %44 = load i32, i32* %i31, align 4
  %dec = add nsw i32 %44, -1
  store i32 %dec, i32* %i31, align 4
  %tobool = icmp ne i32 %44, 0
  br i1 %tobool, label %for.body33, label %for.end83

for.body33:                                       ; preds = %for.cond32
  %45 = load i32, i32* %lx, align 4
  store i32 %45, i32* %j34, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %if.end77, %for.body33
  %46 = load i32, i32* %j34, align 4
  %dec36 = add nsw i32 %46, -1
  store i32 %dec36, i32* %j34, align 4
  %tobool37 = icmp ne i32 %46, 0
  br i1 %tobool37, label %for.body38, label %for.end82

for.body38:                                       ; preds = %for.cond35
  %47 = load i32, i32* %i31, align 4
  %48 = mul nsw i32 %47, %add2
  %arrayidx39 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %48
  %49 = load i32, i32* %j34, align 4
  %arrayidx40 = getelementptr inbounds %struct.link, %struct.link* %arrayidx39, i32 %49
  store %struct.link* %arrayidx40, %struct.link** %lp, align 4
  %50 = load i8*, i8** %y.addr, align 4
  %51 = load i32, i32* %i31, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %50, i32 %51
  %52 = load i8, i8* %arrayidx41, align 1
  %conv = sext i8 %52 to i32
  %53 = load i8*, i8** %x.addr, align 4
  %54 = load i32, i32* %j34, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %55 to i32
  %cmp44 = icmp eq i32 %conv, %conv43
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %for.body38
  %56 = load i32, i32* %i31, align 4
  %add46 = add nsw i32 %56, 1
  %57 = mul nsw i32 %add46, %add2
  %arrayidx47 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %57
  %58 = load i32, i32* %j34, align 4
  %add48 = add nsw i32 %58, 1
  %arrayidx49 = getelementptr inbounds %struct.link, %struct.link* %arrayidx47, i32 %add48
  %59 = load %struct.link*, %struct.link** %lp, align 4
  %next50 = getelementptr inbounds %struct.link, %struct.link* %59, i32 0, i32 2
  store %struct.link* %arrayidx49, %struct.link** %next50, align 4
  %60 = load i8*, i8** %x.addr, align 4
  %61 = load i32, i32* %j34, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %60, i32 %61
  %62 = load i8, i8* %arrayidx51, align 1
  %63 = load %struct.link*, %struct.link** %lp, align 4
  %letter52 = getelementptr inbounds %struct.link, %struct.link* %63, i32 0, i32 1
  store i8 %62, i8* %letter52, align 4
  br label %if.end77

if.else:                                          ; preds = %for.body38
  %64 = load i32, i32* %i31, align 4
  %65 = mul nsw i32 %64, %add2
  %arrayidx53 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %65
  %66 = load i32, i32* %j34, align 4
  %add54 = add nsw i32 %66, 1
  %arrayidx55 = getelementptr inbounds %struct.link, %struct.link* %arrayidx53, i32 %add54
  %len56 = getelementptr inbounds %struct.link, %struct.link* %arrayidx55, i32 0, i32 0
  %67 = load i32, i32* %len56, align 4
  %68 = load i32, i32* %i31, align 4
  %add57 = add nsw i32 %68, 1
  %69 = mul nsw i32 %add57, %add2
  %arrayidx58 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %69
  %70 = load i32, i32* %j34, align 4
  %arrayidx59 = getelementptr inbounds %struct.link, %struct.link* %arrayidx58, i32 %70
  %len60 = getelementptr inbounds %struct.link, %struct.link* %arrayidx59, i32 0, i32 0
  %71 = load i32, i32* %len60, align 4
  %cmp61 = icmp slt i32 %67, %71
  br i1 %cmp61, label %if.then63, label %if.else70

if.then63:                                        ; preds = %if.else
  %72 = load i32, i32* %i31, align 4
  %73 = mul nsw i32 %72, %add2
  %arrayidx64 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %73
  %74 = load i32, i32* %j34, align 4
  %add65 = add nsw i32 %74, 1
  %arrayidx66 = getelementptr inbounds %struct.link, %struct.link* %arrayidx64, i32 %add65
  %75 = load %struct.link*, %struct.link** %lp, align 4
  %next67 = getelementptr inbounds %struct.link, %struct.link* %75, i32 0, i32 2
  store %struct.link* %arrayidx66, %struct.link** %next67, align 4
  %76 = load i8*, i8** %x.addr, align 4
  %77 = load i32, i32* %j34, align 4
  %arrayidx68 = getelementptr inbounds i8, i8* %76, i32 %77
  %78 = load i8, i8* %arrayidx68, align 1
  %79 = load %struct.link*, %struct.link** %lp, align 4
  %letter69 = getelementptr inbounds %struct.link, %struct.link* %79, i32 0, i32 1
  store i8 %78, i8* %letter69, align 4
  br label %if.end

if.else70:                                        ; preds = %if.else
  %80 = load i32, i32* %i31, align 4
  %add71 = add nsw i32 %80, 1
  %81 = mul nsw i32 %add71, %add2
  %arrayidx72 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %81
  %82 = load i32, i32* %j34, align 4
  %arrayidx73 = getelementptr inbounds %struct.link, %struct.link* %arrayidx72, i32 %82
  %83 = load %struct.link*, %struct.link** %lp, align 4
  %next74 = getelementptr inbounds %struct.link, %struct.link* %83, i32 0, i32 2
  store %struct.link* %arrayidx73, %struct.link** %next74, align 4
  %84 = load i8*, i8** %y.addr, align 4
  %85 = load i32, i32* %i31, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %84, i32 %85
  %86 = load i8, i8* %arrayidx75, align 1
  %87 = load %struct.link*, %struct.link** %lp, align 4
  %letter76 = getelementptr inbounds %struct.link, %struct.link* %87, i32 0, i32 1
  store i8 %86, i8* %letter76, align 4
  br label %if.end

if.end:                                           ; preds = %if.else70, %if.then63
  br label %if.end77

if.end77:                                         ; preds = %if.end, %if.then
  %88 = load %struct.link*, %struct.link** %lp, align 4
  %next78 = getelementptr inbounds %struct.link, %struct.link* %88, i32 0, i32 2
  %89 = load %struct.link*, %struct.link** %next78, align 4
  %len79 = getelementptr inbounds %struct.link, %struct.link* %89, i32 0, i32 0
  %90 = load i32, i32* %len79, align 4
  %add80 = add nsw i32 %90, 1
  %91 = load %struct.link*, %struct.link** %lp, align 4
  %len81 = getelementptr inbounds %struct.link, %struct.link* %91, i32 0, i32 0
  store i32 %add80, i32* %len81, align 4
  br label %for.cond35

for.end82:                                        ; preds = %for.cond35
  br label %for.cond32

for.end83:                                        ; preds = %for.cond32
  %arrayidx85 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 0
  %arrayidx86 = getelementptr inbounds %struct.link, %struct.link* %arrayidx85, i32 0
  store %struct.link* %arrayidx86, %struct.link** %lp84, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc91, %for.end83
  %92 = load %struct.link*, %struct.link** %lp84, align 4
  %tobool88 = icmp ne %struct.link* %92, null
  br i1 %tobool88, label %for.body89, label %for.end93

for.body89:                                       ; preds = %for.cond87
  %93 = load %struct.link*, %struct.link** %lp84, align 4
  %letter90 = getelementptr inbounds %struct.link, %struct.link* %93, i32 0, i32 1
  %94 = load i8, i8* %letter90, align 4
  %95 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %95, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %94, i8* %95, align 1
  br label %for.inc91

for.inc91:                                        ; preds = %for.body89
  %96 = load %struct.link*, %struct.link** %lp84, align 4
  %next92 = getelementptr inbounds %struct.link, %struct.link* %96, i32 0, i32 2
  %97 = load %struct.link*, %struct.link** %next92, align 4
  store %struct.link* %97, %struct.link** %lp84, align 4
  br label %for.cond87

for.end93:                                        ; preds = %for.cond87
  %98 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %98)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [8 x i8], align 1
  %y = alloca [7 x i8], align 1
  %res = alloca [128 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i8]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.x, i32 0, i32 0), i32 8, i1 false)
  %1 = bitcast [7 x i8]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.main.y, i32 0, i32 0), i32 7, i1 false)
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call = call i32 @scs(i8* %arraydecay, i8* %arraydecay1, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* %arraydecay3, i8* %arraydecay4, i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = mul nuw i32 %add, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2 (hasExternalUses)
%4:i32 = mulnuw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = mul nsw i32 %8, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = mul nsw i32 %add5, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = mul nsw i32 %24, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub nsw i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %arrayidx17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = mul nsw i32 %32, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add20 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = mul nsw i32 %38, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %ly, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %44, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %44, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %lx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec36 = add nsw i32 %46, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool37 = icmp ne i32 %46, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = mul nsw i32 %47, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i8, i8* %arrayidx41, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %52 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i8, i8* %arrayidx42, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv43 = sext i8 %55 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp44 = icmp eq i32 %conv, %conv43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add46 = add nsw i32 %56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %57 = mul nsw i32 %add46, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add48 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i8, i8* %arrayidx51, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = mul nsw i32 %64, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add54 = add nsw i32 %66, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %len56, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add57 = add nsw i32 %68, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %69 = mul nsw i32 %add57, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %len60, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp61 = icmp slt i32 %67, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = mul nsw i32 %72, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add65 = add nsw i32 %74, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i8, i8* %arrayidx68, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add71 = add nsw i32 %80, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = mul nsw i32 %add71, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %j34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %i31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %86 = load i8, i8* %arrayidx75, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %90 = load i32, i32* %len79, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add80 = add nsw i32 %90, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool88 = icmp ne %struct.link* %92, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %94 = load i8, i8* %letter90, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for scs()

; entering Souper's runOnFunction() for main()

; ModuleID = './Shortest_common_supersequence.c.bc'
source_filename = "./Shortest_common_supersequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.link = type { i32, i8, %struct.link* }

@__const.main.x = private unnamed_addr constant [8 x i8] c"abcbdab\00", align 1
@__const.main.y = private unnamed_addr constant [7 x i8] c"bdcaba\00", align 1
@.str = private unnamed_addr constant [19 x i8] c"SCS(%s, %s) -> %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @scs(i8* %x, i8* %y, i8* %out) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %y.addr = alloca i8*, align 4
  %out.addr = alloca i8*, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %.compoundliteral = alloca %struct.link, align 4
  %j = alloca i32, align 4
  %.compoundliteral13 = alloca %struct.link, align 4
  %.compoundliteral27 = alloca %struct.link, align 4
  %i31 = alloca i32, align 4
  %j34 = alloca i32, align 4
  %lp = alloca %struct.link*, align 4
  %lp84 = alloca %struct.link*, align 4
  store i8* %x, i8** %x.addr, align 4
  store i8* %y, i8** %y.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  store i32 %call, i32* %lx, align 4
  %1 = load i8*, i8** %y.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #5
  store i32 %call1, i32* %ly, align 4
  %2 = load i32, i32* %ly, align 4
  %add = add nsw i32 %2, 1
  %3 = load i32, i32* %lx, align 4
  %add2 = add nsw i32 %3, 1
  %4 = call i8* @llvm.stacksave()
  store i8* %4, i8** %saved_stack, align 4
  %5 = mul nuw i32 %add, %add2
  %vla = alloca %struct.link, i32 %5, align 16
  store i32 %add, i32* %__vla_expr0, align 4
  store i32 %add2, i32* %__vla_expr1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %ly, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %add2
  %arrayidx = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %9
  %10 = load i32, i32* %lx, align 4
  %arrayidx3 = getelementptr inbounds %struct.link, %struct.link* %arrayidx, i32 %10
  %len = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 0
  %11 = load i32, i32* %ly, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %len, align 4
  %letter = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 1
  %13 = load i8*, i8** %y.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx4, align 1
  store i8 %15, i8* %letter, align 4
  %next = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral, i32 0, i32 2
  %16 = load i32, i32* %i, align 4
  %add5 = add nsw i32 %16, 1
  %17 = mul nsw i32 %add5, %add2
  %arrayidx6 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %17
  %18 = load i32, i32* %lx, align 4
  %arrayidx7 = getelementptr inbounds %struct.link, %struct.link* %arrayidx6, i32 %18
  store %struct.link* %arrayidx7, %struct.link** %next, align 4
  %19 = bitcast %struct.link* %arrayidx3 to i8*
  %20 = bitcast %struct.link* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 12, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc22, %for.end
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %lx, align 4
  %cmp9 = icmp slt i32 %22, %23
  br i1 %cmp9, label %for.body10, label %for.end24

for.body10:                                       ; preds = %for.cond8
  %24 = load i32, i32* %ly, align 4
  %25 = mul nsw i32 %24, %add2
  %arrayidx11 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %25
  %26 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds %struct.link, %struct.link* %arrayidx11, i32 %26
  %len14 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 0
  %27 = load i32, i32* %lx, align 4
  %28 = load i32, i32* %j, align 4
  %sub15 = sub nsw i32 %27, %28
  store i32 %sub15, i32* %len14, align 4
  %letter16 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 1
  %29 = load i8*, i8** %x.addr, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %29, i32 %30
  %31 = load i8, i8* %arrayidx17, align 1
  store i8 %31, i8* %letter16, align 4
  %next18 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral13, i32 0, i32 2
  %32 = load i32, i32* %ly, align 4
  %33 = mul nsw i32 %32, %add2
  %arrayidx19 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %34, 1
  %arrayidx21 = getelementptr inbounds %struct.link, %struct.link* %arrayidx19, i32 %add20
  store %struct.link* %arrayidx21, %struct.link** %next18, align 4
  %35 = bitcast %struct.link* %arrayidx12 to i8*
  %36 = bitcast %struct.link* %.compoundliteral13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %35, i8* align 4 %36, i32 12, i1 false)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body10
  %37 = load i32, i32* %j, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %j, align 4
  br label %for.cond8

for.end24:                                        ; preds = %for.cond8
  %38 = load i32, i32* %ly, align 4
  %39 = mul nsw i32 %38, %add2
  %arrayidx25 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %39
  %40 = load i32, i32* %lx, align 4
  %arrayidx26 = getelementptr inbounds %struct.link, %struct.link* %arrayidx25, i32 %40
  %len28 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 0
  store i32 0, i32* %len28, align 4
  %letter29 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 1
  store i8 0, i8* %letter29, align 4
  %next30 = getelementptr inbounds %struct.link, %struct.link* %.compoundliteral27, i32 0, i32 2
  store %struct.link* null, %struct.link** %next30, align 4
  %41 = bitcast %struct.link* %arrayidx26 to i8*
  %42 = bitcast %struct.link* %.compoundliteral27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %41, i8* align 4 %42, i32 12, i1 false)
  %43 = load i32, i32* %ly, align 4
  store i32 %43, i32* %i31, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.end82, %for.end24
  %44 = load i32, i32* %i31, align 4
  %dec = add nsw i32 %44, -1
  store i32 %dec, i32* %i31, align 4
  %tobool = icmp ne i32 %44, 0
  br i1 %tobool, label %for.body33, label %for.end83

for.body33:                                       ; preds = %for.cond32
  %45 = load i32, i32* %lx, align 4
  store i32 %45, i32* %j34, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %if.end77, %for.body33
  %46 = load i32, i32* %j34, align 4
  %dec36 = add nsw i32 %46, -1
  store i32 %dec36, i32* %j34, align 4
  %tobool37 = icmp ne i32 %46, 0
  br i1 %tobool37, label %for.body38, label %for.end82

for.body38:                                       ; preds = %for.cond35
  %47 = load i32, i32* %i31, align 4
  %48 = mul nsw i32 %47, %add2
  %arrayidx39 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %48
  %49 = load i32, i32* %j34, align 4
  %arrayidx40 = getelementptr inbounds %struct.link, %struct.link* %arrayidx39, i32 %49
  store %struct.link* %arrayidx40, %struct.link** %lp, align 4
  %50 = load i8*, i8** %y.addr, align 4
  %51 = load i32, i32* %i31, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %50, i32 %51
  %52 = load i8, i8* %arrayidx41, align 1
  %conv = sext i8 %52 to i32
  %53 = load i8*, i8** %x.addr, align 4
  %54 = load i32, i32* %j34, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %55 to i32
  %cmp44 = icmp eq i32 %conv, %conv43
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %for.body38
  %56 = load i32, i32* %i31, align 4
  %add46 = add nsw i32 %56, 1
  %57 = mul nsw i32 %add46, %add2
  %arrayidx47 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %57
  %58 = load i32, i32* %j34, align 4
  %add48 = add nsw i32 %58, 1
  %arrayidx49 = getelementptr inbounds %struct.link, %struct.link* %arrayidx47, i32 %add48
  %59 = load %struct.link*, %struct.link** %lp, align 4
  %next50 = getelementptr inbounds %struct.link, %struct.link* %59, i32 0, i32 2
  store %struct.link* %arrayidx49, %struct.link** %next50, align 4
  %60 = load i8*, i8** %x.addr, align 4
  %61 = load i32, i32* %j34, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %60, i32 %61
  %62 = load i8, i8* %arrayidx51, align 1
  %63 = load %struct.link*, %struct.link** %lp, align 4
  %letter52 = getelementptr inbounds %struct.link, %struct.link* %63, i32 0, i32 1
  store i8 %62, i8* %letter52, align 4
  br label %if.end77

if.else:                                          ; preds = %for.body38
  %64 = load i32, i32* %i31, align 4
  %65 = mul nsw i32 %64, %add2
  %arrayidx53 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %65
  %66 = load i32, i32* %j34, align 4
  %add54 = add nsw i32 %66, 1
  %arrayidx55 = getelementptr inbounds %struct.link, %struct.link* %arrayidx53, i32 %add54
  %len56 = getelementptr inbounds %struct.link, %struct.link* %arrayidx55, i32 0, i32 0
  %67 = load i32, i32* %len56, align 4
  %68 = load i32, i32* %i31, align 4
  %add57 = add nsw i32 %68, 1
  %69 = mul nsw i32 %add57, %add2
  %arrayidx58 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %69
  %70 = load i32, i32* %j34, align 4
  %arrayidx59 = getelementptr inbounds %struct.link, %struct.link* %arrayidx58, i32 %70
  %len60 = getelementptr inbounds %struct.link, %struct.link* %arrayidx59, i32 0, i32 0
  %71 = load i32, i32* %len60, align 4
  %cmp61 = icmp slt i32 %67, %71
  br i1 %cmp61, label %if.then63, label %if.else70

if.then63:                                        ; preds = %if.else
  %72 = load i32, i32* %i31, align 4
  %73 = mul nsw i32 %72, %add2
  %arrayidx64 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %73
  %74 = load i32, i32* %j34, align 4
  %add65 = add nsw i32 %74, 1
  %arrayidx66 = getelementptr inbounds %struct.link, %struct.link* %arrayidx64, i32 %add65
  %75 = load %struct.link*, %struct.link** %lp, align 4
  %next67 = getelementptr inbounds %struct.link, %struct.link* %75, i32 0, i32 2
  store %struct.link* %arrayidx66, %struct.link** %next67, align 4
  %76 = load i8*, i8** %x.addr, align 4
  %77 = load i32, i32* %j34, align 4
  %arrayidx68 = getelementptr inbounds i8, i8* %76, i32 %77
  %78 = load i8, i8* %arrayidx68, align 1
  %79 = load %struct.link*, %struct.link** %lp, align 4
  %letter69 = getelementptr inbounds %struct.link, %struct.link* %79, i32 0, i32 1
  store i8 %78, i8* %letter69, align 4
  br label %if.end

if.else70:                                        ; preds = %if.else
  %80 = load i32, i32* %i31, align 4
  %add71 = add nsw i32 %80, 1
  %81 = mul nsw i32 %add71, %add2
  %arrayidx72 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 %81
  %82 = load i32, i32* %j34, align 4
  %arrayidx73 = getelementptr inbounds %struct.link, %struct.link* %arrayidx72, i32 %82
  %83 = load %struct.link*, %struct.link** %lp, align 4
  %next74 = getelementptr inbounds %struct.link, %struct.link* %83, i32 0, i32 2
  store %struct.link* %arrayidx73, %struct.link** %next74, align 4
  %84 = load i8*, i8** %y.addr, align 4
  %85 = load i32, i32* %i31, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %84, i32 %85
  %86 = load i8, i8* %arrayidx75, align 1
  %87 = load %struct.link*, %struct.link** %lp, align 4
  %letter76 = getelementptr inbounds %struct.link, %struct.link* %87, i32 0, i32 1
  store i8 %86, i8* %letter76, align 4
  br label %if.end

if.end:                                           ; preds = %if.else70, %if.then63
  br label %if.end77

if.end77:                                         ; preds = %if.end, %if.then
  %88 = load %struct.link*, %struct.link** %lp, align 4
  %next78 = getelementptr inbounds %struct.link, %struct.link* %88, i32 0, i32 2
  %89 = load %struct.link*, %struct.link** %next78, align 4
  %len79 = getelementptr inbounds %struct.link, %struct.link* %89, i32 0, i32 0
  %90 = load i32, i32* %len79, align 4
  %add80 = add nsw i32 %90, 1
  %91 = load %struct.link*, %struct.link** %lp, align 4
  %len81 = getelementptr inbounds %struct.link, %struct.link* %91, i32 0, i32 0
  store i32 %add80, i32* %len81, align 4
  br label %for.cond35

for.end82:                                        ; preds = %for.cond35
  br label %for.cond32

for.end83:                                        ; preds = %for.cond32
  %arrayidx85 = getelementptr inbounds %struct.link, %struct.link* %vla, i32 0
  %arrayidx86 = getelementptr inbounds %struct.link, %struct.link* %arrayidx85, i32 0
  store %struct.link* %arrayidx86, %struct.link** %lp84, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc91, %for.end83
  %92 = load %struct.link*, %struct.link** %lp84, align 4
  %tobool88 = icmp ne %struct.link* %92, null
  br i1 %tobool88, label %for.body89, label %for.end93

for.body89:                                       ; preds = %for.cond87
  %93 = load %struct.link*, %struct.link** %lp84, align 4
  %letter90 = getelementptr inbounds %struct.link, %struct.link* %93, i32 0, i32 1
  %94 = load i8, i8* %letter90, align 4
  %95 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %95, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %94, i8* %95, align 1
  br label %for.inc91

for.inc91:                                        ; preds = %for.body89
  %96 = load %struct.link*, %struct.link** %lp84, align 4
  %next92 = getelementptr inbounds %struct.link, %struct.link* %96, i32 0, i32 2
  %97 = load %struct.link*, %struct.link** %next92, align 4
  store %struct.link* %97, %struct.link** %lp84, align 4
  br label %for.cond87

for.end93:                                        ; preds = %for.cond87
  %98 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %98)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [8 x i8], align 1
  %y = alloca [7 x i8], align 1
  %res = alloca [128 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i8]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.x, i32 0, i32 0), i32 8, i1 false)
  %1 = bitcast [7 x i8]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.main.y, i32 0, i32 0), i32 7, i1 false)
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call = call i32 @scs(i8* %arraydecay, i8* %arraydecay1, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %x, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [7 x i8], [7 x i8]* %y, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %res, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* %arraydecay3, i8* %arraydecay4, i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
