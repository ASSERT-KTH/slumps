
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for initVector()

; ModuleID = './Vector.c.bc'
source_filename = "./Vector.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double }

@.str = private unnamed_addr constant [17 x i8] c"%lf %c %c %lf %c\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0AVector a : \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A\0AVector b : \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"\0A\0ASum of vectors a and b : \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"\0A\0ADifference of vectors a and b : \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A\0AMultiplying vector a by 3 : \00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"\0A\0ADividing vector b by 2.5 : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @initVector(%struct.vector* noalias sret align 8 %agg.result, double %r, double %theta) #0 {
entry:
  %r.addr = alloca double, align 8
  %theta.addr = alloca double, align 8
  store double %r, double* %r.addr, align 8
  store double %theta, double* %theta.addr, align 8
  %0 = load double, double* %r.addr, align 8
  %1 = load double, double* %theta.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %mul = fmul double %0, %2
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x, align 8
  %3 = load double, double* %r.addr, align 8
  %4 = load double, double* %theta.addr, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %mul1 = fmul double %3, %5
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul1, double* %y, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @addVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtractVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multiplyVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %mul = fmul double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x1, align 8
  %2 = load double, double* %b.addr, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %mul2 = fmul double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @divideVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %b.addr, align 8
  %div = fdiv double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %div, double* %x1, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %3 = load double, double* %b.addr, align 8
  %div2 = fdiv double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %div2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 43, i32 45
  %y1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y1, align 8
  %cmp2 = fcmp oge double %3, 0.000000e+00
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %4 = load double, double* %y3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %5 = load double, double* %y4, align 8
  %6 = call double @llvm.fabs.f64(double %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi double [ %4, %cond.true ], [ %6, %cond.false ]
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double %0, i32 140, i32 %cond, double %cond5, i32 150)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.vector, align 8
  %b = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp4 = alloca %struct.vector, align 8
  %agg.tmp6 = alloca %struct.vector, align 8
  %agg.tmp8 = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  call void @initVector(%struct.vector* sret align 8 %a, double 3.000000e+00, double 0x3FE0C152382D7365)
  call void @initVector(%struct.vector* sret align 8 %b, double 5.000000e+00, double 0x4000C152382D7365)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i32 0, i32 0))
  call void @addVector(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0))
  call void @subtractVector(%struct.vector* sret align 8 %agg.tmp4, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp4)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0))
  call void @multiplyVector(%struct.vector* sret align 8 %agg.tmp6, %struct.vector* byval(%struct.vector) align 8 %a, double 3.000000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i32 0, i32 0))
  call void @divideVector(%struct.vector* sret align 8 %agg.tmp8, %struct.vector* byval(%struct.vector) align 8 %b, double 2.500000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for initVector()

; entering Souper's runOnFunction() for addVector()

; ModuleID = './Vector.c.bc'
source_filename = "./Vector.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double }

@.str = private unnamed_addr constant [17 x i8] c"%lf %c %c %lf %c\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0AVector a : \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A\0AVector b : \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"\0A\0ASum of vectors a and b : \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"\0A\0ADifference of vectors a and b : \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A\0AMultiplying vector a by 3 : \00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"\0A\0ADividing vector b by 2.5 : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @initVector(%struct.vector* noalias sret align 8 %agg.result, double %r, double %theta) #0 {
entry:
  %r.addr = alloca double, align 8
  %theta.addr = alloca double, align 8
  store double %r, double* %r.addr, align 8
  store double %theta, double* %theta.addr, align 8
  %0 = load double, double* %r.addr, align 8
  %1 = load double, double* %theta.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %mul = fmul double %0, %2
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x, align 8
  %3 = load double, double* %r.addr, align 8
  %4 = load double, double* %theta.addr, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %mul1 = fmul double %3, %5
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul1, double* %y, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @addVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtractVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multiplyVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %mul = fmul double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x1, align 8
  %2 = load double, double* %b.addr, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %mul2 = fmul double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @divideVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %b.addr, align 8
  %div = fdiv double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %div, double* %x1, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %3 = load double, double* %b.addr, align 8
  %div2 = fdiv double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %div2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 43, i32 45
  %y1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y1, align 8
  %cmp2 = fcmp oge double %3, 0.000000e+00
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %4 = load double, double* %y3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %5 = load double, double* %y4, align 8
  %6 = call double @llvm.fabs.f64(double %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi double [ %4, %cond.true ], [ %6, %cond.false ]
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double %0, i32 140, i32 %cond, double %cond5, i32 150)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.vector, align 8
  %b = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp4 = alloca %struct.vector, align 8
  %agg.tmp6 = alloca %struct.vector, align 8
  %agg.tmp8 = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  call void @initVector(%struct.vector* sret align 8 %a, double 3.000000e+00, double 0x3FE0C152382D7365)
  call void @initVector(%struct.vector* sret align 8 %b, double 5.000000e+00, double 0x4000C152382D7365)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i32 0, i32 0))
  call void @addVector(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0))
  call void @subtractVector(%struct.vector* sret align 8 %agg.tmp4, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp4)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0))
  call void @multiplyVector(%struct.vector* sret align 8 %agg.tmp6, %struct.vector* byval(%struct.vector) align 8 %a, double 3.000000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i32 0, i32 0))
  call void @divideVector(%struct.vector* sret align 8 %agg.tmp8, %struct.vector* byval(%struct.vector) align 8 %b, double 2.500000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for addVector()

; entering Souper's runOnFunction() for subtractVector()

; ModuleID = './Vector.c.bc'
source_filename = "./Vector.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double }

@.str = private unnamed_addr constant [17 x i8] c"%lf %c %c %lf %c\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0AVector a : \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A\0AVector b : \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"\0A\0ASum of vectors a and b : \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"\0A\0ADifference of vectors a and b : \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A\0AMultiplying vector a by 3 : \00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"\0A\0ADividing vector b by 2.5 : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @initVector(%struct.vector* noalias sret align 8 %agg.result, double %r, double %theta) #0 {
entry:
  %r.addr = alloca double, align 8
  %theta.addr = alloca double, align 8
  store double %r, double* %r.addr, align 8
  store double %theta, double* %theta.addr, align 8
  %0 = load double, double* %r.addr, align 8
  %1 = load double, double* %theta.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %mul = fmul double %0, %2
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x, align 8
  %3 = load double, double* %r.addr, align 8
  %4 = load double, double* %theta.addr, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %mul1 = fmul double %3, %5
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul1, double* %y, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @addVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtractVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multiplyVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %mul = fmul double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x1, align 8
  %2 = load double, double* %b.addr, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %mul2 = fmul double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @divideVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %b.addr, align 8
  %div = fdiv double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %div, double* %x1, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %3 = load double, double* %b.addr, align 8
  %div2 = fdiv double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %div2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 43, i32 45
  %y1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y1, align 8
  %cmp2 = fcmp oge double %3, 0.000000e+00
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %4 = load double, double* %y3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %5 = load double, double* %y4, align 8
  %6 = call double @llvm.fabs.f64(double %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi double [ %4, %cond.true ], [ %6, %cond.false ]
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double %0, i32 140, i32 %cond, double %cond5, i32 150)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.vector, align 8
  %b = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp4 = alloca %struct.vector, align 8
  %agg.tmp6 = alloca %struct.vector, align 8
  %agg.tmp8 = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  call void @initVector(%struct.vector* sret align 8 %a, double 3.000000e+00, double 0x3FE0C152382D7365)
  call void @initVector(%struct.vector* sret align 8 %b, double 5.000000e+00, double 0x4000C152382D7365)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i32 0, i32 0))
  call void @addVector(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0))
  call void @subtractVector(%struct.vector* sret align 8 %agg.tmp4, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp4)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0))
  call void @multiplyVector(%struct.vector* sret align 8 %agg.tmp6, %struct.vector* byval(%struct.vector) align 8 %a, double 3.000000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i32 0, i32 0))
  call void @divideVector(%struct.vector* sret align 8 %agg.tmp8, %struct.vector* byval(%struct.vector) align 8 %b, double 2.500000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for subtractVector()

; entering Souper's runOnFunction() for multiplyVector()

; ModuleID = './Vector.c.bc'
source_filename = "./Vector.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double }

@.str = private unnamed_addr constant [17 x i8] c"%lf %c %c %lf %c\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0AVector a : \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A\0AVector b : \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"\0A\0ASum of vectors a and b : \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"\0A\0ADifference of vectors a and b : \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A\0AMultiplying vector a by 3 : \00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"\0A\0ADividing vector b by 2.5 : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @initVector(%struct.vector* noalias sret align 8 %agg.result, double %r, double %theta) #0 {
entry:
  %r.addr = alloca double, align 8
  %theta.addr = alloca double, align 8
  store double %r, double* %r.addr, align 8
  store double %theta, double* %theta.addr, align 8
  %0 = load double, double* %r.addr, align 8
  %1 = load double, double* %theta.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %mul = fmul double %0, %2
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x, align 8
  %3 = load double, double* %r.addr, align 8
  %4 = load double, double* %theta.addr, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %mul1 = fmul double %3, %5
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul1, double* %y, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @addVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtractVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multiplyVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %mul = fmul double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x1, align 8
  %2 = load double, double* %b.addr, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %mul2 = fmul double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @divideVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %b.addr, align 8
  %div = fdiv double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %div, double* %x1, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %3 = load double, double* %b.addr, align 8
  %div2 = fdiv double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %div2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 43, i32 45
  %y1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y1, align 8
  %cmp2 = fcmp oge double %3, 0.000000e+00
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %4 = load double, double* %y3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %5 = load double, double* %y4, align 8
  %6 = call double @llvm.fabs.f64(double %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi double [ %4, %cond.true ], [ %6, %cond.false ]
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double %0, i32 140, i32 %cond, double %cond5, i32 150)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.vector, align 8
  %b = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp4 = alloca %struct.vector, align 8
  %agg.tmp6 = alloca %struct.vector, align 8
  %agg.tmp8 = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  call void @initVector(%struct.vector* sret align 8 %a, double 3.000000e+00, double 0x3FE0C152382D7365)
  call void @initVector(%struct.vector* sret align 8 %b, double 5.000000e+00, double 0x4000C152382D7365)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i32 0, i32 0))
  call void @addVector(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0))
  call void @subtractVector(%struct.vector* sret align 8 %agg.tmp4, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp4)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0))
  call void @multiplyVector(%struct.vector* sret align 8 %agg.tmp6, %struct.vector* byval(%struct.vector) align 8 %a, double 3.000000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i32 0, i32 0))
  call void @divideVector(%struct.vector* sret align 8 %agg.tmp8, %struct.vector* byval(%struct.vector) align 8 %b, double 2.500000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for multiplyVector()

; entering Souper's runOnFunction() for divideVector()

; ModuleID = './Vector.c.bc'
source_filename = "./Vector.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double }

@.str = private unnamed_addr constant [17 x i8] c"%lf %c %c %lf %c\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0AVector a : \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A\0AVector b : \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"\0A\0ASum of vectors a and b : \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"\0A\0ADifference of vectors a and b : \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A\0AMultiplying vector a by 3 : \00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"\0A\0ADividing vector b by 2.5 : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @initVector(%struct.vector* noalias sret align 8 %agg.result, double %r, double %theta) #0 {
entry:
  %r.addr = alloca double, align 8
  %theta.addr = alloca double, align 8
  store double %r, double* %r.addr, align 8
  store double %theta, double* %theta.addr, align 8
  %0 = load double, double* %r.addr, align 8
  %1 = load double, double* %theta.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %mul = fmul double %0, %2
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x, align 8
  %3 = load double, double* %r.addr, align 8
  %4 = load double, double* %theta.addr, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %mul1 = fmul double %3, %5
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul1, double* %y, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @addVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtractVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multiplyVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %mul = fmul double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x1, align 8
  %2 = load double, double* %b.addr, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %mul2 = fmul double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @divideVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %b.addr, align 8
  %div = fdiv double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %div, double* %x1, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %3 = load double, double* %b.addr, align 8
  %div2 = fdiv double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %div2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 43, i32 45
  %y1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y1, align 8
  %cmp2 = fcmp oge double %3, 0.000000e+00
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %4 = load double, double* %y3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %5 = load double, double* %y4, align 8
  %6 = call double @llvm.fabs.f64(double %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi double [ %4, %cond.true ], [ %6, %cond.false ]
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double %0, i32 140, i32 %cond, double %cond5, i32 150)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.vector, align 8
  %b = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp4 = alloca %struct.vector, align 8
  %agg.tmp6 = alloca %struct.vector, align 8
  %agg.tmp8 = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  call void @initVector(%struct.vector* sret align 8 %a, double 3.000000e+00, double 0x3FE0C152382D7365)
  call void @initVector(%struct.vector* sret align 8 %b, double 5.000000e+00, double 0x4000C152382D7365)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i32 0, i32 0))
  call void @addVector(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0))
  call void @subtractVector(%struct.vector* sret align 8 %agg.tmp4, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp4)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0))
  call void @multiplyVector(%struct.vector* sret align 8 %agg.tmp6, %struct.vector* byval(%struct.vector) align 8 %a, double 3.000000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i32 0, i32 0))
  call void @divideVector(%struct.vector* sret align 8 %agg.tmp8, %struct.vector* byval(%struct.vector) align 8 %b, double 2.500000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for divideVector()

; entering Souper's runOnFunction() for printVector()

; ModuleID = './Vector.c.bc'
source_filename = "./Vector.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double }

@.str = private unnamed_addr constant [17 x i8] c"%lf %c %c %lf %c\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0AVector a : \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A\0AVector b : \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"\0A\0ASum of vectors a and b : \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"\0A\0ADifference of vectors a and b : \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A\0AMultiplying vector a by 3 : \00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"\0A\0ADividing vector b by 2.5 : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @initVector(%struct.vector* noalias sret align 8 %agg.result, double %r, double %theta) #0 {
entry:
  %r.addr = alloca double, align 8
  %theta.addr = alloca double, align 8
  store double %r, double* %r.addr, align 8
  store double %theta, double* %theta.addr, align 8
  %0 = load double, double* %r.addr, align 8
  %1 = load double, double* %theta.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %mul = fmul double %0, %2
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x, align 8
  %3 = load double, double* %r.addr, align 8
  %4 = load double, double* %theta.addr, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %mul1 = fmul double %3, %5
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul1, double* %y, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @addVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtractVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multiplyVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %mul = fmul double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x1, align 8
  %2 = load double, double* %b.addr, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %mul2 = fmul double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @divideVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %b.addr, align 8
  %div = fdiv double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %div, double* %x1, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %3 = load double, double* %b.addr, align 8
  %div2 = fdiv double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %div2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 43, i32 45
  %y1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y1, align 8
  %cmp2 = fcmp oge double %3, 0.000000e+00
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %4 = load double, double* %y3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %5 = load double, double* %y4, align 8
  %6 = call double @llvm.fabs.f64(double %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi double [ %4, %cond.true ], [ %6, %cond.false ]
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double %0, i32 140, i32 %cond, double %cond5, i32 150)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.vector, align 8
  %b = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp4 = alloca %struct.vector, align 8
  %agg.tmp6 = alloca %struct.vector, align 8
  %agg.tmp8 = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  call void @initVector(%struct.vector* sret align 8 %a, double 3.000000e+00, double 0x3FE0C152382D7365)
  call void @initVector(%struct.vector* sret align 8 %b, double 5.000000e+00, double 0x4000C152382D7365)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i32 0, i32 0))
  call void @addVector(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0))
  call void @subtractVector(%struct.vector* sret align 8 %agg.tmp4, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp4)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0))
  call void @multiplyVector(%struct.vector* sret align 8 %agg.tmp6, %struct.vector* byval(%struct.vector) align 8 %a, double 3.000000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i32 0, i32 0))
  call void @divideVector(%struct.vector* sret align 8 %agg.tmp8, %struct.vector* byval(%struct.vector) align 8 %b, double 2.500000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp oge double %1, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp, i32 43, i32 45
; Looking for a replacement for:
%0:i1 = var
%1:i32 = select %0, 43:i32, 45:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = fcmp oge double %3, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = select %0, 43:i32, 45:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 45
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 43
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printVector()

; entering Souper's runOnFunction() for main()

; ModuleID = './Vector.c.bc'
source_filename = "./Vector.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double }

@.str = private unnamed_addr constant [17 x i8] c"%lf %c %c %lf %c\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0AVector a : \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A\0AVector b : \00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"\0A\0ASum of vectors a and b : \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"\0A\0ADifference of vectors a and b : \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A\0AMultiplying vector a by 3 : \00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"\0A\0ADividing vector b by 2.5 : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @initVector(%struct.vector* noalias sret align 8 %agg.result, double %r, double %theta) #0 {
entry:
  %r.addr = alloca double, align 8
  %theta.addr = alloca double, align 8
  store double %r, double* %r.addr, align 8
  store double %theta, double* %theta.addr, align 8
  %0 = load double, double* %r.addr, align 8
  %1 = load double, double* %theta.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %mul = fmul double %0, %2
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x, align 8
  %3 = load double, double* %r.addr, align 8
  %4 = load double, double* %theta.addr, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %mul1 = fmul double %3, %5
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul1, double* %y, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @addVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subtractVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multiplyVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %mul = fmul double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %mul, double* %x1, align 8
  %2 = load double, double* %b.addr, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %mul2 = fmul double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %mul2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @divideVector(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, double %b) #0 {
entry:
  %b.addr = alloca double, align 8
  store double %b, double* %b.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %b.addr, align 8
  %div = fdiv double %0, %1
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  store double %div, double* %x1, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %3 = load double, double* %b.addr, align 8
  %div2 = fdiv double %2, %3
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  store double %div2, double* %y3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 43, i32 45
  %y1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y1, align 8
  %cmp2 = fcmp oge double %3, 0.000000e+00
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %4 = load double, double* %y3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %5 = load double, double* %y4, align 8
  %6 = call double @llvm.fabs.f64(double %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi double [ %4, %cond.true ], [ %6, %cond.false ]
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double %0, i32 140, i32 %cond, double %cond5, i32 150)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.vector, align 8
  %b = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp4 = alloca %struct.vector, align 8
  %agg.tmp6 = alloca %struct.vector, align 8
  %agg.tmp8 = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  call void @initVector(%struct.vector* sret align 8 %a, double 3.000000e+00, double 0x3FE0C152382D7365)
  call void @initVector(%struct.vector* sret align 8 %b, double 5.000000e+00, double 0x4000C152382D7365)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i32 0, i32 0))
  call void @addVector(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0))
  call void @subtractVector(%struct.vector* sret align 8 %agg.tmp4, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp4)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0))
  call void @multiplyVector(%struct.vector* sret align 8 %agg.tmp6, %struct.vector* byval(%struct.vector) align 8 %a, double 3.000000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i32 0, i32 0))
  call void @divideVector(%struct.vector* sret align 8 %agg.tmp8, %struct.vector* byval(%struct.vector) align 8 %b, double 2.500000e+00)
  call void @printVector(%struct.vector* byval(%struct.vector) align 8 %agg.tmp8)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
