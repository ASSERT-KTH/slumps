
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for r2cf()

; ModuleID = './Continued_fraction-Arithmetic-Construct_from_rational_number.c.bc'
source_filename = "./Continued_fraction-Arithmetic-Construct_from_rational_number.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.fraction = type { i32, i32 }

@examples = hidden global [6 x %struct.fraction] [%struct.fraction { i32 1, i32 2 }, %struct.fraction { i32 3, i32 1 }, %struct.fraction { i32 23, i32 8 }, %struct.fraction { i32 13, i32 11 }, %struct.fraction { i32 22, i32 7 }, %struct.fraction { i32 -151, i32 77 }], align 16
@sqrt2 = hidden global [4 x %struct.fraction] [%struct.fraction { i32 14142, i32 10000 }, %struct.fraction { i32 141421, i32 100000 }, %struct.fraction { i32 1414214, i32 1000000 }, %struct.fraction { i32 14142136, i32 10000000 }], align 16
@pi = hidden global [8 x %struct.fraction] [%struct.fraction { i32 31, i32 10 }, %struct.fraction { i32 314, i32 100 }, %struct.fraction { i32 3142, i32 1000 }, %struct.fraction { i32 31428, i32 10000 }, %struct.fraction { i32 314285, i32 100000 }, %struct.fraction { i32 3142857, i32 1000000 }, %struct.fraction { i32 31428571, i32 10000000 }, %struct.fraction { i32 314285714, i32 100000000 }], align 16
@.str = private unnamed_addr constant [23 x i8] c"Running the examples :\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"\0AFor N = %d, D = %d :\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"\0A\0ARunning for %c2 :\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"\0A\0ARunning for %c :\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @r2cf(i32* %numerator, i32* %denominator) #0 {
entry:
  %numerator.addr = alloca i32*, align 4
  %denominator.addr = alloca i32*, align 4
  %quotient = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32* %numerator, i32** %numerator.addr, align 4
  store i32* %denominator, i32** %denominator.addr, align 4
  store i32 0, i32* %quotient, align 4
  %0 = load i32*, i32** %denominator.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %numerator.addr, align 4
  %2 = load i32, i32* %1, align 4
  %3 = load i32*, i32** %denominator.addr, align 4
  %4 = load i32, i32* %3, align 4
  %div = sdiv i32 %2, %4
  store i32 %div, i32* %quotient, align 4
  %5 = load i32*, i32** %numerator.addr, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %temp, align 4
  %7 = load i32*, i32** %denominator.addr, align 4
  %8 = load i32, i32* %7, align 4
  %9 = load i32*, i32** %numerator.addr, align 4
  store i32 %8, i32* %9, align 4
  %10 = load i32, i32* %temp, align 4
  %11 = load i32*, i32** %denominator.addr, align 4
  %12 = load i32, i32* %11, align 4
  %rem = srem i32 %10, %12
  %13 = load i32*, i32** %denominator.addr, align 4
  store i32 %rem, i32* %13, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %quotient, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %1
  %num = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx, i32 0, i32 0
  %2 = load i32, i32* %num, align 8
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %3
  %den = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx1, i32 0, i32 1
  %4 = load i32, i32* %den, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %5
  %den4 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx3, i32 0, i32 1
  %6 = load i32, i32* %den4, align 4
  %cmp5 = icmp ne i32 %6, 0
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %7
  %num7 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx6, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %8
  %den9 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx8, i32 0, i32 1
  %call10 = call i32 @r2cf(i32* %num7, i32* %den9)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %call10)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 251)
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp14 = icmp ult i32 %10, 4
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %11 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %11
  %num17 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx16, i32 0, i32 0
  %12 = load i32, i32* %num17, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %13
  %den19 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx18, i32 0, i32 1
  %14 = load i32, i32* %den19, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %14)
  br label %while.cond21

while.cond21:                                     ; preds = %while.body25, %for.body15
  %15 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %15
  %den23 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx22, i32 0, i32 1
  %16 = load i32, i32* %den23, align 4
  %cmp24 = icmp ne i32 %16, 0
  br i1 %cmp24, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond21
  %17 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %17
  %num27 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx26, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %18
  %den29 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx28, i32 0, i32 1
  %call30 = call i32 @r2cf(i32* %num27, i32* %den29)
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %call30)
  br label %while.cond21

while.end32:                                      ; preds = %while.cond21
  br label %for.inc33

for.inc33:                                        ; preds = %while.end32
  %19 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %19, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 227)
  store i32 0, i32* %i, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc57, %for.end35
  %20 = load i32, i32* %i, align 4
  %cmp38 = icmp ult i32 %20, 8
  br i1 %cmp38, label %for.body39, label %for.end59

for.body39:                                       ; preds = %for.cond37
  %21 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %21
  %num41 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx40, i32 0, i32 0
  %22 = load i32, i32* %num41, align 8
  %23 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %23
  %den43 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx42, i32 0, i32 1
  %24 = load i32, i32* %den43, align 4
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i32 %22, i32 %24)
  br label %while.cond45

while.cond45:                                     ; preds = %while.body49, %for.body39
  %25 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %25
  %den47 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx46, i32 0, i32 1
  %26 = load i32, i32* %den47, align 4
  %cmp48 = icmp ne i32 %26, 0
  br i1 %cmp48, label %while.body49, label %while.end56

while.body49:                                     ; preds = %while.cond45
  %27 = load i32, i32* %i, align 4
  %arrayidx50 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %27
  %num51 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx50, i32 0, i32 0
  %28 = load i32, i32* %i, align 4
  %arrayidx52 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %28
  %den53 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx52, i32 0, i32 1
  %call54 = call i32 @r2cf(i32* %num51, i32* %den53)
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %call54)
  br label %while.cond45

while.end56:                                      ; preds = %while.cond45
  br label %for.inc57

for.inc57:                                        ; preds = %while.end56
  %29 = load i32, i32* %i, align 4
  %inc58 = add nsw i32 %29, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond37

for.end59:                                        ; preds = %for.cond37
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %temp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %10, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %quotient, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for r2cf()

; entering Souper's runOnFunction() for main()

; ModuleID = './Continued_fraction-Arithmetic-Construct_from_rational_number.c.bc'
source_filename = "./Continued_fraction-Arithmetic-Construct_from_rational_number.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.fraction = type { i32, i32 }

@examples = hidden global [6 x %struct.fraction] [%struct.fraction { i32 1, i32 2 }, %struct.fraction { i32 3, i32 1 }, %struct.fraction { i32 23, i32 8 }, %struct.fraction { i32 13, i32 11 }, %struct.fraction { i32 22, i32 7 }, %struct.fraction { i32 -151, i32 77 }], align 16
@sqrt2 = hidden global [4 x %struct.fraction] [%struct.fraction { i32 14142, i32 10000 }, %struct.fraction { i32 141421, i32 100000 }, %struct.fraction { i32 1414214, i32 1000000 }, %struct.fraction { i32 14142136, i32 10000000 }], align 16
@pi = hidden global [8 x %struct.fraction] [%struct.fraction { i32 31, i32 10 }, %struct.fraction { i32 314, i32 100 }, %struct.fraction { i32 3142, i32 1000 }, %struct.fraction { i32 31428, i32 10000 }, %struct.fraction { i32 314285, i32 100000 }, %struct.fraction { i32 3142857, i32 1000000 }, %struct.fraction { i32 31428571, i32 10000000 }, %struct.fraction { i32 314285714, i32 100000000 }], align 16
@.str = private unnamed_addr constant [23 x i8] c"Running the examples :\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"\0AFor N = %d, D = %d :\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"\0A\0ARunning for %c2 :\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"\0A\0ARunning for %c :\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @r2cf(i32* %numerator, i32* %denominator) #0 {
entry:
  %numerator.addr = alloca i32*, align 4
  %denominator.addr = alloca i32*, align 4
  %quotient = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32* %numerator, i32** %numerator.addr, align 4
  store i32* %denominator, i32** %denominator.addr, align 4
  store i32 0, i32* %quotient, align 4
  %0 = load i32*, i32** %denominator.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %numerator.addr, align 4
  %2 = load i32, i32* %1, align 4
  %3 = load i32*, i32** %denominator.addr, align 4
  %4 = load i32, i32* %3, align 4
  %div = sdiv i32 %2, %4
  store i32 %div, i32* %quotient, align 4
  %5 = load i32*, i32** %numerator.addr, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %temp, align 4
  %7 = load i32*, i32** %denominator.addr, align 4
  %8 = load i32, i32* %7, align 4
  %9 = load i32*, i32** %numerator.addr, align 4
  store i32 %8, i32* %9, align 4
  %10 = load i32, i32* %temp, align 4
  %11 = load i32*, i32** %denominator.addr, align 4
  %12 = load i32, i32* %11, align 4
  %rem = srem i32 %10, %12
  %13 = load i32*, i32** %denominator.addr, align 4
  store i32 %rem, i32* %13, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %quotient, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %1
  %num = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx, i32 0, i32 0
  %2 = load i32, i32* %num, align 8
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %3
  %den = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx1, i32 0, i32 1
  %4 = load i32, i32* %den, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %5
  %den4 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx3, i32 0, i32 1
  %6 = load i32, i32* %den4, align 4
  %cmp5 = icmp ne i32 %6, 0
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %7
  %num7 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx6, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [6 x %struct.fraction], [6 x %struct.fraction]* @examples, i32 0, i32 %8
  %den9 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx8, i32 0, i32 1
  %call10 = call i32 @r2cf(i32* %num7, i32* %den9)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %call10)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 251)
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp14 = icmp ult i32 %10, 4
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %11 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %11
  %num17 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx16, i32 0, i32 0
  %12 = load i32, i32* %num17, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %13
  %den19 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx18, i32 0, i32 1
  %14 = load i32, i32* %den19, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %14)
  br label %while.cond21

while.cond21:                                     ; preds = %while.body25, %for.body15
  %15 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %15
  %den23 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx22, i32 0, i32 1
  %16 = load i32, i32* %den23, align 4
  %cmp24 = icmp ne i32 %16, 0
  br i1 %cmp24, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond21
  %17 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %17
  %num27 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx26, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [4 x %struct.fraction], [4 x %struct.fraction]* @sqrt2, i32 0, i32 %18
  %den29 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx28, i32 0, i32 1
  %call30 = call i32 @r2cf(i32* %num27, i32* %den29)
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %call30)
  br label %while.cond21

while.end32:                                      ; preds = %while.cond21
  br label %for.inc33

for.inc33:                                        ; preds = %while.end32
  %19 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %19, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 227)
  store i32 0, i32* %i, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc57, %for.end35
  %20 = load i32, i32* %i, align 4
  %cmp38 = icmp ult i32 %20, 8
  br i1 %cmp38, label %for.body39, label %for.end59

for.body39:                                       ; preds = %for.cond37
  %21 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %21
  %num41 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx40, i32 0, i32 0
  %22 = load i32, i32* %num41, align 8
  %23 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %23
  %den43 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx42, i32 0, i32 1
  %24 = load i32, i32* %den43, align 4
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i32 %22, i32 %24)
  br label %while.cond45

while.cond45:                                     ; preds = %while.body49, %for.body39
  %25 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %25
  %den47 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx46, i32 0, i32 1
  %26 = load i32, i32* %den47, align 4
  %cmp48 = icmp ne i32 %26, 0
  br i1 %cmp48, label %while.body49, label %while.end56

while.body49:                                     ; preds = %while.cond45
  %27 = load i32, i32* %i, align 4
  %arrayidx50 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %27
  %num51 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx50, i32 0, i32 0
  %28 = load i32, i32* %i, align 4
  %arrayidx52 = getelementptr inbounds [8 x %struct.fraction], [8 x %struct.fraction]* @pi, i32 0, i32 %28
  %den53 = getelementptr inbounds %struct.fraction, %struct.fraction* %arrayidx52, i32 0, i32 1
  %call54 = call i32 @r2cf(i32* %num51, i32* %den53)
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %call54)
  br label %while.cond45

while.end56:                                      ; preds = %while.cond45
  br label %for.inc57

for.inc57:                                        ; preds = %while.end56
  %29 = load i32, i32* %i, align 4
  %inc58 = add nsw i32 %29, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond37

for.end59:                                        ; preds = %for.cond37
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %num, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %den, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %den4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call10 = call i32 @r2cf(i32* %num7, i32* %den9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp ult i32 %10, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %num17, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %den19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %den23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call30 = call i32 @r2cf(i32* %num27, i32* %den29)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc34 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp38 = icmp ult i32 %20, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %num41, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %den43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %den47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp48 = icmp ne i32 %26, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call54 = call i32 @r2cf(i32* %num51, i32* %den53)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc58 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
