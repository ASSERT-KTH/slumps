
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for sieve()

; ModuleID = './Sexy_primes.c.bc'
source_filename = "./Sexy_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"unsexy primes\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"sexy prime \00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"are\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Number of %s%s less than %'d = %'d\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"The last %d %s:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\08]\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"pairs\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"  [\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"\08] \00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"\08]\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"triplets\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"quadruplets\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"quintuplets\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"\08]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @sieve(i8* %c, i32 %limit) #0 {
entry:
  %c.addr = alloca i8*, align 4
  %limit.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  %p2 = alloca i32, align 4
  store i8* %c, i8** %c.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 3, i32* %p, align 4
  %0 = load i8*, i8** %c.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  store i8 1, i8* %arrayidx, align 1
  %1 = load i8*, i8** %c.addr, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 1, i8* %arrayidx1, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.end11, %entry
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %p2, align 4
  %4 = load i32, i32* %p2, align 4
  %5 = load i32, i32* %limit.addr, align 4
  %cmp = icmp sge i32 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end12

if.end:                                           ; preds = %for.cond
  %6 = load i32, i32* %p2, align 4
  store i32 %6, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %limit.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond2
  %9 = load i8*, i8** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 1, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %p, align 4
  %mul5 = mul nsw i32 2, %11
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, %mul5
  store i32 %add, i32* %i, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.cond6

for.cond6:                                        ; preds = %if.end10, %for.end
  %13 = load i32, i32* %p, align 4
  %add7 = add nsw i32 %13, 2
  store i32 %add7, i32* %p, align 4
  %14 = load i8*, i8** %c.addr, align 4
  %15 = load i32, i32* %p, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx8, align 1
  %tobool = icmp ne i8 %16, 0
  br i1 %tobool, label %if.end10, label %if.then9

if.then9:                                         ; preds = %for.cond6
  br label %for.end11

if.end10:                                         ; preds = %for.cond6
  br label %for.cond6

for.end11:                                        ; preds = %if.then9
  br label %for.cond

for.end12:                                        ; preds = %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printHelper(i8* %cat, i32 %len, i32 %lim, i32 %n) #0 {
entry:
  %cat.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %lim.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %sp = alloca i8*, align 4
  %verb = alloca i8*, align 4
  store i8* %cat, i8** %cat.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %lim, i32* %lim.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %cat.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)) #3
  %tobool = icmp ne i32 %call, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  store i8* %cond, i8** %sp, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, 1
  %3 = zext i1 %cmp to i64
  %cond1 = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)
  store i8* %cond1, i8** %verb, align 4
  %4 = load i8*, i8** %sp, align 4
  %5 = load i8*, i8** %cat.addr, align 4
  %6 = load i32, i32* %lim.addr, align 4
  %7 = load i32, i32* %len.addr, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0), i8* %4, i8* %5, i32 %6, i32 %7)
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i8*, i8** %verb, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i32 %8, i8* %9)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @printArray(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %ix = alloca i32, align 4
  %n = alloca i32, align 4
  %lim = alloca i32, align 4
  %pairs = alloca i32, align 4
  %trips = alloca i32, align 4
  %quads = alloca i32, align 4
  %quins = alloca i32, align 4
  %unsexy = alloca i32, align 4
  %pr = alloca i32, align 4
  %tr = alloca i32, align 4
  %qd = alloca i32, align 4
  %qn = alloca i32, align 4
  %un = alloca i32, align 4
  %lpr = alloca i32, align 4
  %ltr = alloca i32, align 4
  %lqd = alloca i32, align 4
  %lqn = alloca i32, align 4
  %lun = alloca i32, align 4
  %last_pr = alloca [5 x [2 x i32]], align 16
  %last_tr = alloca [5 x [3 x i32]], align 16
  %last_qd = alloca [5 x [4 x i32]], align 16
  %last_qn = alloca [5 x [5 x i32]], align 16
  %last_un = alloca [10 x i32], align 16
  %sv = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i32 1000035, i32* %lim, align 4
  store i32 0, i32* %pairs, align 4
  store i32 0, i32* %trips, align 4
  store i32 0, i32* %quads, align 4
  store i32 0, i32* %quins, align 4
  store i32 2, i32* %unsexy, align 4
  store i32 0, i32* %pr, align 4
  store i32 0, i32* %tr, align 4
  store i32 0, i32* %qd, align 4
  store i32 0, i32* %qn, align 4
  store i32 2, i32* %un, align 4
  store i32 5, i32* %lpr, align 4
  store i32 5, i32* %ltr, align 4
  store i32 5, i32* %lqd, align 4
  store i32 5, i32* %lqn, align 4
  store i32 10, i32* %lun, align 4
  %0 = load i32, i32* %lim, align 4
  %sub = sub nsw i32 %0, 1
  %call = call noalias i8* @calloc(i32 %sub, i32 1)
  store i8* %call, i8** %sv, align 4
  %call1 = call i8* @setlocale(i32 1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  %1 = load i8*, i8** %sv, align 4
  %2 = load i32, i32* %lim, align 4
  call void @sieve(i8* %1, i32 %2)
  store i32 3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %lim, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sgt i32 %5, 5
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %lim, align 4
  %sub3 = sub nsw i32 %7, 6
  %cmp4 = icmp slt i32 %6, %sub3
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %8 = load i8*, i8** %sv, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %10, 0
  br i1 %tobool, label %if.end, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %land.lhs.true5
  %11 = load i8*, i8** %sv, align 4
  %12 = load i32, i32* %i, align 4
  %sub7 = sub nsw i32 %12, 6
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %sub7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv = zext i8 %13 to i32
  %tobool9 = icmp ne i32 %conv, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %14 = load i8*, i8** %sv, align 4
  %15 = load i32, i32* %i, align 4
  %add = add nsw i32 %15, 6
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i32 %add
  %16 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %16 to i32
  %tobool13 = icmp ne i32 %conv12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true10
  %17 = load i32, i32* %unsexy, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %unsexy, align 4
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true10, %land.lhs.true6, %land.lhs.true5, %land.lhs.true, %for.body
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %lim, align 4
  %sub14 = sub nsw i32 %19, 6
  %cmp15 = icmp slt i32 %18, %sub14
  br i1 %cmp15, label %land.lhs.true17, label %if.else

land.lhs.true17:                                  ; preds = %if.end
  %20 = load i8*, i8** %sv, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx18, align 1
  %tobool19 = icmp ne i8 %22, 0
  br i1 %tobool19, label %if.else, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %23 = load i8*, i8** %sv, align 4
  %24 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %24, 6
  %arrayidx22 = getelementptr inbounds i8, i8* %23, i32 %add21
  %25 = load i8, i8* %arrayidx22, align 1
  %tobool23 = icmp ne i8 %25, 0
  br i1 %tobool23, label %if.else, label %if.then24

if.then24:                                        ; preds = %land.lhs.true20
  %26 = load i32, i32* %pairs, align 4
  %inc25 = add nsw i32 %26, 1
  store i32 %inc25, i32* %pairs, align 4
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true20, %land.lhs.true17, %if.end
  br label %for.inc

if.end26:                                         ; preds = %if.then24
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %lim, align 4
  %sub27 = sub nsw i32 %28, 12
  %cmp28 = icmp slt i32 %27, %sub27
  br i1 %cmp28, label %land.lhs.true30, label %if.else36

land.lhs.true30:                                  ; preds = %if.end26
  %29 = load i8*, i8** %sv, align 4
  %30 = load i32, i32* %i, align 4
  %add31 = add nsw i32 %30, 12
  %arrayidx32 = getelementptr inbounds i8, i8* %29, i32 %add31
  %31 = load i8, i8* %arrayidx32, align 1
  %tobool33 = icmp ne i8 %31, 0
  br i1 %tobool33, label %if.else36, label %if.then34

if.then34:                                        ; preds = %land.lhs.true30
  %32 = load i32, i32* %trips, align 4
  %inc35 = add nsw i32 %32, 1
  store i32 %inc35, i32* %trips, align 4
  br label %if.end37

if.else36:                                        ; preds = %land.lhs.true30, %if.end26
  br label %for.inc

if.end37:                                         ; preds = %if.then34
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %lim, align 4
  %sub38 = sub nsw i32 %34, 18
  %cmp39 = icmp slt i32 %33, %sub38
  br i1 %cmp39, label %land.lhs.true41, label %if.else47

land.lhs.true41:                                  ; preds = %if.end37
  %35 = load i8*, i8** %sv, align 4
  %36 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %36, 18
  %arrayidx43 = getelementptr inbounds i8, i8* %35, i32 %add42
  %37 = load i8, i8* %arrayidx43, align 1
  %tobool44 = icmp ne i8 %37, 0
  br i1 %tobool44, label %if.else47, label %if.then45

if.then45:                                        ; preds = %land.lhs.true41
  %38 = load i32, i32* %quads, align 4
  %inc46 = add nsw i32 %38, 1
  store i32 %inc46, i32* %quads, align 4
  br label %if.end48

if.else47:                                        ; preds = %land.lhs.true41, %if.end37
  br label %for.inc

if.end48:                                         ; preds = %if.then45
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %lim, align 4
  %sub49 = sub nsw i32 %40, 24
  %cmp50 = icmp slt i32 %39, %sub49
  br i1 %cmp50, label %land.lhs.true52, label %if.end58

land.lhs.true52:                                  ; preds = %if.end48
  %41 = load i8*, i8** %sv, align 4
  %42 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %42, 24
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %add53
  %43 = load i8, i8* %arrayidx54, align 1
  %tobool55 = icmp ne i8 %43, 0
  br i1 %tobool55, label %if.end58, label %if.then56

if.then56:                                        ; preds = %land.lhs.true52
  %44 = load i32, i32* %quins, align 4
  %inc57 = add nsw i32 %44, 1
  store i32 %inc57, i32* %quins, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %land.lhs.true52, %if.end48
  br label %for.inc

for.inc:                                          ; preds = %if.end58, %if.else47, %if.else36, %if.else, %if.then
  %45 = load i32, i32* %i, align 4
  %add59 = add nsw i32 %45, 2
  store i32 %add59, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %pairs, align 4
  %47 = load i32, i32* %lpr, align 4
  %cmp60 = icmp slt i32 %46, %47
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %for.end
  %48 = load i32, i32* %pairs, align 4
  store i32 %48, i32* %lpr, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %for.end
  %49 = load i32, i32* %trips, align 4
  %50 = load i32, i32* %ltr, align 4
  %cmp64 = icmp slt i32 %49, %50
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end63
  %51 = load i32, i32* %trips, align 4
  store i32 %51, i32* %ltr, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end63
  %52 = load i32, i32* %quads, align 4
  %53 = load i32, i32* %lqd, align 4
  %cmp68 = icmp slt i32 %52, %53
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end67
  %54 = load i32, i32* %quads, align 4
  store i32 %54, i32* %lqd, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end67
  %55 = load i32, i32* %quins, align 4
  %56 = load i32, i32* %lqn, align 4
  %cmp72 = icmp slt i32 %55, %56
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end71
  %57 = load i32, i32* %quins, align 4
  store i32 %57, i32* %lqn, align 4
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.end71
  %58 = load i32, i32* %unsexy, align 4
  %59 = load i32, i32* %lun, align 4
  %cmp76 = icmp slt i32 %58, %59
  br i1 %cmp76, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end75
  %60 = load i32, i32* %unsexy, align 4
  store i32 %60, i32* %lun, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %if.end75
  store i32 3, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc231, %if.end79
  %61 = load i32, i32* %i, align 4
  %62 = load i32, i32* %lim, align 4
  %cmp81 = icmp slt i32 %61, %62
  br i1 %cmp81, label %for.body83, label %for.end233

for.body83:                                       ; preds = %for.cond80
  %63 = load i32, i32* %i, align 4
  %cmp84 = icmp sgt i32 %63, 5
  br i1 %cmp84, label %land.lhs.true86, label %if.end114

land.lhs.true86:                                  ; preds = %for.body83
  %64 = load i32, i32* %i, align 4
  %65 = load i32, i32* %lim, align 4
  %sub87 = sub nsw i32 %65, 6
  %cmp88 = icmp slt i32 %64, %sub87
  br i1 %cmp88, label %land.lhs.true90, label %if.end114

land.lhs.true90:                                  ; preds = %land.lhs.true86
  %66 = load i8*, i8** %sv, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx91 = getelementptr inbounds i8, i8* %66, i32 %67
  %68 = load i8, i8* %arrayidx91, align 1
  %tobool92 = icmp ne i8 %68, 0
  br i1 %tobool92, label %if.end114, label %land.lhs.true93

land.lhs.true93:                                  ; preds = %land.lhs.true90
  %69 = load i8*, i8** %sv, align 4
  %70 = load i32, i32* %i, align 4
  %sub94 = sub nsw i32 %70, 6
  %arrayidx95 = getelementptr inbounds i8, i8* %69, i32 %sub94
  %71 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %71 to i32
  %tobool97 = icmp ne i32 %conv96, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.end114

land.lhs.true98:                                  ; preds = %land.lhs.true93
  %72 = load i8*, i8** %sv, align 4
  %73 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %73, 6
  %arrayidx100 = getelementptr inbounds i8, i8* %72, i32 %add99
  %74 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %74 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br i1 %tobool102, label %if.then103, label %if.end114

if.then103:                                       ; preds = %land.lhs.true98
  %75 = load i32, i32* %un, align 4
  %inc104 = add nsw i32 %75, 1
  store i32 %inc104, i32* %un, align 4
  %76 = load i32, i32* %un, align 4
  %77 = load i32, i32* %unsexy, align 4
  %78 = load i32, i32* %lun, align 4
  %sub105 = sub nsw i32 %77, %78
  %cmp106 = icmp sgt i32 %76, %sub105
  br i1 %cmp106, label %if.then108, label %if.end113

if.then108:                                       ; preds = %if.then103
  %79 = load i32, i32* %i, align 4
  %80 = load i32, i32* %un, align 4
  %81 = load i32, i32* %lun, align 4
  %add109 = add nsw i32 %80, %81
  %sub110 = sub nsw i32 %add109, 1
  %82 = load i32, i32* %unsexy, align 4
  %sub111 = sub nsw i32 %sub110, %82
  %arrayidx112 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 %sub111
  store i32 %79, i32* %arrayidx112, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.then108, %if.then103
  br label %for.inc231

if.end114:                                        ; preds = %land.lhs.true98, %land.lhs.true93, %land.lhs.true90, %land.lhs.true86, %for.body83
  %83 = load i32, i32* %i, align 4
  %84 = load i32, i32* %lim, align 4
  %sub115 = sub nsw i32 %84, 6
  %cmp116 = icmp slt i32 %83, %sub115
  br i1 %cmp116, label %land.lhs.true118, label %if.else140

land.lhs.true118:                                 ; preds = %if.end114
  %85 = load i8*, i8** %sv, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx119 = getelementptr inbounds i8, i8* %85, i32 %86
  %87 = load i8, i8* %arrayidx119, align 1
  %tobool120 = icmp ne i8 %87, 0
  br i1 %tobool120, label %if.else140, label %land.lhs.true121

land.lhs.true121:                                 ; preds = %land.lhs.true118
  %88 = load i8*, i8** %sv, align 4
  %89 = load i32, i32* %i, align 4
  %add122 = add nsw i32 %89, 6
  %arrayidx123 = getelementptr inbounds i8, i8* %88, i32 %add122
  %90 = load i8, i8* %arrayidx123, align 1
  %tobool124 = icmp ne i8 %90, 0
  br i1 %tobool124, label %if.else140, label %if.then125

if.then125:                                       ; preds = %land.lhs.true121
  %91 = load i32, i32* %pr, align 4
  %inc126 = add nsw i32 %91, 1
  store i32 %inc126, i32* %pr, align 4
  %92 = load i32, i32* %pr, align 4
  %93 = load i32, i32* %pairs, align 4
  %94 = load i32, i32* %lpr, align 4
  %sub127 = sub nsw i32 %93, %94
  %cmp128 = icmp sgt i32 %92, %sub127
  br i1 %cmp128, label %if.then130, label %if.end139

if.then130:                                       ; preds = %if.then125
  %95 = load i32, i32* %pr, align 4
  %96 = load i32, i32* %lpr, align 4
  %add131 = add nsw i32 %95, %96
  %sub132 = sub nsw i32 %add131, 1
  %97 = load i32, i32* %pairs, align 4
  %sub133 = sub nsw i32 %sub132, %97
  store i32 %sub133, i32* %ix, align 4
  %98 = load i32, i32* %i, align 4
  %99 = load i32, i32* %ix, align 4
  %arrayidx134 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %99
  %arrayidx135 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx134, i32 0, i32 0
  store i32 %98, i32* %arrayidx135, align 8
  %100 = load i32, i32* %i, align 4
  %add136 = add nsw i32 %100, 6
  %101 = load i32, i32* %ix, align 4
  %arrayidx137 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %101
  %arrayidx138 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx137, i32 0, i32 1
  store i32 %add136, i32* %arrayidx138, align 4
  br label %if.end139

if.end139:                                        ; preds = %if.then130, %if.then125
  br label %if.end141

if.else140:                                       ; preds = %land.lhs.true121, %land.lhs.true118, %if.end114
  br label %for.inc231

if.end141:                                        ; preds = %if.end139
  %102 = load i32, i32* %i, align 4
  %103 = load i32, i32* %lim, align 4
  %sub142 = sub nsw i32 %103, 12
  %cmp143 = icmp slt i32 %102, %sub142
  br i1 %cmp143, label %land.lhs.true145, label %if.else167

land.lhs.true145:                                 ; preds = %if.end141
  %104 = load i8*, i8** %sv, align 4
  %105 = load i32, i32* %i, align 4
  %add146 = add nsw i32 %105, 12
  %arrayidx147 = getelementptr inbounds i8, i8* %104, i32 %add146
  %106 = load i8, i8* %arrayidx147, align 1
  %tobool148 = icmp ne i8 %106, 0
  br i1 %tobool148, label %if.else167, label %if.then149

if.then149:                                       ; preds = %land.lhs.true145
  %107 = load i32, i32* %tr, align 4
  %inc150 = add nsw i32 %107, 1
  store i32 %inc150, i32* %tr, align 4
  %108 = load i32, i32* %tr, align 4
  %109 = load i32, i32* %trips, align 4
  %110 = load i32, i32* %ltr, align 4
  %sub151 = sub nsw i32 %109, %110
  %cmp152 = icmp sgt i32 %108, %sub151
  br i1 %cmp152, label %if.then154, label %if.end166

if.then154:                                       ; preds = %if.then149
  %111 = load i32, i32* %tr, align 4
  %112 = load i32, i32* %ltr, align 4
  %add155 = add nsw i32 %111, %112
  %sub156 = sub nsw i32 %add155, 1
  %113 = load i32, i32* %trips, align 4
  %sub157 = sub nsw i32 %sub156, %113
  store i32 %sub157, i32* %ix, align 4
  %114 = load i32, i32* %i, align 4
  %115 = load i32, i32* %ix, align 4
  %arrayidx158 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %115
  %arrayidx159 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx158, i32 0, i32 0
  store i32 %114, i32* %arrayidx159, align 4
  %116 = load i32, i32* %i, align 4
  %add160 = add nsw i32 %116, 6
  %117 = load i32, i32* %ix, align 4
  %arrayidx161 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %117
  %arrayidx162 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx161, i32 0, i32 1
  store i32 %add160, i32* %arrayidx162, align 4
  %118 = load i32, i32* %i, align 4
  %add163 = add nsw i32 %118, 12
  %119 = load i32, i32* %ix, align 4
  %arrayidx164 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %119
  %arrayidx165 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx164, i32 0, i32 2
  store i32 %add163, i32* %arrayidx165, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.then154, %if.then149
  br label %if.end168

if.else167:                                       ; preds = %land.lhs.true145, %if.end141
  br label %for.inc231

if.end168:                                        ; preds = %if.end166
  %120 = load i32, i32* %i, align 4
  %121 = load i32, i32* %lim, align 4
  %sub169 = sub nsw i32 %121, 18
  %cmp170 = icmp slt i32 %120, %sub169
  br i1 %cmp170, label %land.lhs.true172, label %if.else197

land.lhs.true172:                                 ; preds = %if.end168
  %122 = load i8*, i8** %sv, align 4
  %123 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %123, 18
  %arrayidx174 = getelementptr inbounds i8, i8* %122, i32 %add173
  %124 = load i8, i8* %arrayidx174, align 1
  %tobool175 = icmp ne i8 %124, 0
  br i1 %tobool175, label %if.else197, label %if.then176

if.then176:                                       ; preds = %land.lhs.true172
  %125 = load i32, i32* %qd, align 4
  %inc177 = add nsw i32 %125, 1
  store i32 %inc177, i32* %qd, align 4
  %126 = load i32, i32* %qd, align 4
  %127 = load i32, i32* %quads, align 4
  %128 = load i32, i32* %lqd, align 4
  %sub178 = sub nsw i32 %127, %128
  %cmp179 = icmp sgt i32 %126, %sub178
  br i1 %cmp179, label %if.then181, label %if.end196

if.then181:                                       ; preds = %if.then176
  %129 = load i32, i32* %qd, align 4
  %130 = load i32, i32* %lqd, align 4
  %add182 = add nsw i32 %129, %130
  %sub183 = sub nsw i32 %add182, 1
  %131 = load i32, i32* %quads, align 4
  %sub184 = sub nsw i32 %sub183, %131
  store i32 %sub184, i32* %ix, align 4
  %132 = load i32, i32* %i, align 4
  %133 = load i32, i32* %ix, align 4
  %arrayidx185 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %133
  %arrayidx186 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx185, i32 0, i32 0
  store i32 %132, i32* %arrayidx186, align 16
  %134 = load i32, i32* %i, align 4
  %add187 = add nsw i32 %134, 6
  %135 = load i32, i32* %ix, align 4
  %arrayidx188 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %135
  %arrayidx189 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx188, i32 0, i32 1
  store i32 %add187, i32* %arrayidx189, align 4
  %136 = load i32, i32* %i, align 4
  %add190 = add nsw i32 %136, 12
  %137 = load i32, i32* %ix, align 4
  %arrayidx191 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %137
  %arrayidx192 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx191, i32 0, i32 2
  store i32 %add190, i32* %arrayidx192, align 8
  %138 = load i32, i32* %i, align 4
  %add193 = add nsw i32 %138, 18
  %139 = load i32, i32* %ix, align 4
  %arrayidx194 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %139
  %arrayidx195 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx194, i32 0, i32 3
  store i32 %add193, i32* %arrayidx195, align 4
  br label %if.end196

if.end196:                                        ; preds = %if.then181, %if.then176
  br label %if.end198

if.else197:                                       ; preds = %land.lhs.true172, %if.end168
  br label %for.inc231

if.end198:                                        ; preds = %if.end196
  %140 = load i32, i32* %i, align 4
  %141 = load i32, i32* %lim, align 4
  %sub199 = sub nsw i32 %141, 24
  %cmp200 = icmp slt i32 %140, %sub199
  br i1 %cmp200, label %land.lhs.true202, label %if.end230

land.lhs.true202:                                 ; preds = %if.end198
  %142 = load i8*, i8** %sv, align 4
  %143 = load i32, i32* %i, align 4
  %add203 = add nsw i32 %143, 24
  %arrayidx204 = getelementptr inbounds i8, i8* %142, i32 %add203
  %144 = load i8, i8* %arrayidx204, align 1
  %tobool205 = icmp ne i8 %144, 0
  br i1 %tobool205, label %if.end230, label %if.then206

if.then206:                                       ; preds = %land.lhs.true202
  %145 = load i32, i32* %qn, align 4
  %inc207 = add nsw i32 %145, 1
  store i32 %inc207, i32* %qn, align 4
  %146 = load i32, i32* %qn, align 4
  %147 = load i32, i32* %quins, align 4
  %148 = load i32, i32* %lqn, align 4
  %sub208 = sub nsw i32 %147, %148
  %cmp209 = icmp sgt i32 %146, %sub208
  br i1 %cmp209, label %if.then211, label %if.end229

if.then211:                                       ; preds = %if.then206
  %149 = load i32, i32* %qn, align 4
  %150 = load i32, i32* %lqn, align 4
  %add212 = add nsw i32 %149, %150
  %sub213 = sub nsw i32 %add212, 1
  %151 = load i32, i32* %quins, align 4
  %sub214 = sub nsw i32 %sub213, %151
  store i32 %sub214, i32* %ix, align 4
  %152 = load i32, i32* %i, align 4
  %153 = load i32, i32* %ix, align 4
  %arrayidx215 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %153
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx215, i32 0, i32 0
  store i32 %152, i32* %arrayidx216, align 4
  %154 = load i32, i32* %i, align 4
  %add217 = add nsw i32 %154, 6
  %155 = load i32, i32* %ix, align 4
  %arrayidx218 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %155
  %arrayidx219 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx218, i32 0, i32 1
  store i32 %add217, i32* %arrayidx219, align 4
  %156 = load i32, i32* %i, align 4
  %add220 = add nsw i32 %156, 12
  %157 = load i32, i32* %ix, align 4
  %arrayidx221 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %157
  %arrayidx222 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx221, i32 0, i32 2
  store i32 %add220, i32* %arrayidx222, align 4
  %158 = load i32, i32* %i, align 4
  %add223 = add nsw i32 %158, 18
  %159 = load i32, i32* %ix, align 4
  %arrayidx224 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %159
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx224, i32 0, i32 3
  store i32 %add223, i32* %arrayidx225, align 4
  %160 = load i32, i32* %i, align 4
  %add226 = add nsw i32 %160, 24
  %161 = load i32, i32* %ix, align 4
  %arrayidx227 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %161
  %arrayidx228 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx227, i32 0, i32 4
  store i32 %add226, i32* %arrayidx228, align 4
  br label %if.end229

if.end229:                                        ; preds = %if.then211, %if.then206
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %land.lhs.true202, %if.end198
  br label %for.inc231

for.inc231:                                       ; preds = %if.end230, %if.else197, %if.else167, %if.else140, %if.end113
  %162 = load i32, i32* %i, align 4
  %add232 = add nsw i32 %162, 2
  store i32 %add232, i32* %i, align 4
  br label %for.cond80

for.end233:                                       ; preds = %for.cond80
  %163 = load i32, i32* %pairs, align 4
  %164 = load i32, i32* %lim, align 4
  %165 = load i32, i32* %lpr, align 4
  call void @printHelper(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 %163, i32 %164, i32 %165)
  %call234 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond235

for.cond235:                                      ; preds = %for.inc241, %for.end233
  %166 = load i32, i32* %i, align 4
  %167 = load i32, i32* %lpr, align 4
  %cmp236 = icmp slt i32 %166, %167
  br i1 %cmp236, label %for.body238, label %for.end243

for.body238:                                      ; preds = %for.cond235
  %168 = load i32, i32* %i, align 4
  %arrayidx239 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %168
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx239, i32 0, i32 0
  call void @printArray(i32* %arraydecay, i32 2)
  %call240 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc241

for.inc241:                                       ; preds = %for.body238
  %169 = load i32, i32* %i, align 4
  %inc242 = add nsw i32 %169, 1
  store i32 %inc242, i32* %i, align 4
  br label %for.cond235

for.end243:                                       ; preds = %for.cond235
  %call244 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %170 = load i32, i32* %trips, align 4
  %171 = load i32, i32* %lim, align 4
  %172 = load i32, i32* %ltr, align 4
  call void @printHelper(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 %170, i32 %171, i32 %172)
  %call245 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond246

for.cond246:                                      ; preds = %for.inc253, %for.end243
  %173 = load i32, i32* %i, align 4
  %174 = load i32, i32* %ltr, align 4
  %cmp247 = icmp slt i32 %173, %174
  br i1 %cmp247, label %for.body249, label %for.end255

for.body249:                                      ; preds = %for.cond246
  %175 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %175
  %arraydecay251 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx250, i32 0, i32 0
  call void @printArray(i32* %arraydecay251, i32 3)
  %call252 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc253

for.inc253:                                       ; preds = %for.body249
  %176 = load i32, i32* %i, align 4
  %inc254 = add nsw i32 %176, 1
  store i32 %inc254, i32* %i, align 4
  br label %for.cond246

for.end255:                                       ; preds = %for.cond246
  %call256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %177 = load i32, i32* %quads, align 4
  %178 = load i32, i32* %lim, align 4
  %179 = load i32, i32* %lqd, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 %177, i32 %178, i32 %179)
  %call257 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond258

for.cond258:                                      ; preds = %for.inc265, %for.end255
  %180 = load i32, i32* %i, align 4
  %181 = load i32, i32* %lqd, align 4
  %cmp259 = icmp slt i32 %180, %181
  br i1 %cmp259, label %for.body261, label %for.end267

for.body261:                                      ; preds = %for.cond258
  %182 = load i32, i32* %i, align 4
  %arrayidx262 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %182
  %arraydecay263 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx262, i32 0, i32 0
  call void @printArray(i32* %arraydecay263, i32 4)
  %call264 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc265

for.inc265:                                       ; preds = %for.body261
  %183 = load i32, i32* %i, align 4
  %inc266 = add nsw i32 %183, 1
  store i32 %inc266, i32* %i, align 4
  br label %for.cond258

for.end267:                                       ; preds = %for.cond258
  %call268 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %184 = load i32, i32* %quins, align 4
  %185 = load i32, i32* %lim, align 4
  %186 = load i32, i32* %lqn, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i32 %184, i32 %185, i32 %186)
  %call269 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond270

for.cond270:                                      ; preds = %for.inc277, %for.end267
  %187 = load i32, i32* %i, align 4
  %188 = load i32, i32* %lqn, align 4
  %cmp271 = icmp slt i32 %187, %188
  br i1 %cmp271, label %for.body273, label %for.end279

for.body273:                                      ; preds = %for.cond270
  %189 = load i32, i32* %i, align 4
  %arrayidx274 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %189
  %arraydecay275 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx274, i32 0, i32 0
  call void @printArray(i32* %arraydecay275, i32 5)
  %call276 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc277

for.inc277:                                       ; preds = %for.body273
  %190 = load i32, i32* %i, align 4
  %inc278 = add nsw i32 %190, 1
  store i32 %inc278, i32* %i, align 4
  br label %for.cond270

for.end279:                                       ; preds = %for.cond270
  %call280 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %191 = load i32, i32* %unsexy, align 4
  %192 = load i32, i32* %lim, align 4
  %193 = load i32, i32* %lun, align 4
  call void @printHelper(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32 %191, i32 %192, i32 %193)
  %call281 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  %arraydecay282 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 0
  %194 = load i32, i32* %lun, align 4
  call void @printArray(i32* %arraydecay282, i32 %194)
  %call283 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0))
  %195 = load i8*, i8** %sv, align 4
  call void @free(i8* %195)
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i8* @setlocale(i32 %0, i8* %1) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %limit.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %limit.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul5 = mul nsw i32 2, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %12, %mul5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %13, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %arrayidx8, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %16, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sieve()

; entering Souper's runOnFunction() for printHelper()

; ModuleID = './Sexy_primes.c.bc'
source_filename = "./Sexy_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"unsexy primes\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"sexy prime \00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"are\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Number of %s%s less than %'d = %'d\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"The last %d %s:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\08]\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"pairs\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"  [\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"\08] \00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"\08]\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"triplets\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"quadruplets\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"quintuplets\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"\08]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @sieve(i8* %c, i32 %limit) #0 {
entry:
  %c.addr = alloca i8*, align 4
  %limit.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  %p2 = alloca i32, align 4
  store i8* %c, i8** %c.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 3, i32* %p, align 4
  %0 = load i8*, i8** %c.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  store i8 1, i8* %arrayidx, align 1
  %1 = load i8*, i8** %c.addr, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 1, i8* %arrayidx1, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.end11, %entry
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %p2, align 4
  %4 = load i32, i32* %p2, align 4
  %5 = load i32, i32* %limit.addr, align 4
  %cmp = icmp sge i32 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end12

if.end:                                           ; preds = %for.cond
  %6 = load i32, i32* %p2, align 4
  store i32 %6, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %limit.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond2
  %9 = load i8*, i8** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 1, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %p, align 4
  %mul5 = mul nsw i32 2, %11
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, %mul5
  store i32 %add, i32* %i, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.cond6

for.cond6:                                        ; preds = %if.end10, %for.end
  %13 = load i32, i32* %p, align 4
  %add7 = add nsw i32 %13, 2
  store i32 %add7, i32* %p, align 4
  %14 = load i8*, i8** %c.addr, align 4
  %15 = load i32, i32* %p, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx8, align 1
  %tobool = icmp ne i8 %16, 0
  br i1 %tobool, label %if.end10, label %if.then9

if.then9:                                         ; preds = %for.cond6
  br label %for.end11

if.end10:                                         ; preds = %for.cond6
  br label %for.cond6

for.end11:                                        ; preds = %if.then9
  br label %for.cond

for.end12:                                        ; preds = %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printHelper(i8* %cat, i32 %len, i32 %lim, i32 %n) #0 {
entry:
  %cat.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %lim.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %sp = alloca i8*, align 4
  %verb = alloca i8*, align 4
  store i8* %cat, i8** %cat.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %lim, i32* %lim.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %cat.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)) #3
  %tobool = icmp ne i32 %call, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  store i8* %cond, i8** %sp, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, 1
  %3 = zext i1 %cmp to i64
  %cond1 = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)
  store i8* %cond1, i8** %verb, align 4
  %4 = load i8*, i8** %sp, align 4
  %5 = load i8*, i8** %cat.addr, align 4
  %6 = load i32, i32* %lim.addr, align 4
  %7 = load i32, i32* %len.addr, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0), i8* %4, i8* %5, i32 %6, i32 %7)
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i8*, i8** %verb, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i32 %8, i8* %9)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @printArray(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %ix = alloca i32, align 4
  %n = alloca i32, align 4
  %lim = alloca i32, align 4
  %pairs = alloca i32, align 4
  %trips = alloca i32, align 4
  %quads = alloca i32, align 4
  %quins = alloca i32, align 4
  %unsexy = alloca i32, align 4
  %pr = alloca i32, align 4
  %tr = alloca i32, align 4
  %qd = alloca i32, align 4
  %qn = alloca i32, align 4
  %un = alloca i32, align 4
  %lpr = alloca i32, align 4
  %ltr = alloca i32, align 4
  %lqd = alloca i32, align 4
  %lqn = alloca i32, align 4
  %lun = alloca i32, align 4
  %last_pr = alloca [5 x [2 x i32]], align 16
  %last_tr = alloca [5 x [3 x i32]], align 16
  %last_qd = alloca [5 x [4 x i32]], align 16
  %last_qn = alloca [5 x [5 x i32]], align 16
  %last_un = alloca [10 x i32], align 16
  %sv = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i32 1000035, i32* %lim, align 4
  store i32 0, i32* %pairs, align 4
  store i32 0, i32* %trips, align 4
  store i32 0, i32* %quads, align 4
  store i32 0, i32* %quins, align 4
  store i32 2, i32* %unsexy, align 4
  store i32 0, i32* %pr, align 4
  store i32 0, i32* %tr, align 4
  store i32 0, i32* %qd, align 4
  store i32 0, i32* %qn, align 4
  store i32 2, i32* %un, align 4
  store i32 5, i32* %lpr, align 4
  store i32 5, i32* %ltr, align 4
  store i32 5, i32* %lqd, align 4
  store i32 5, i32* %lqn, align 4
  store i32 10, i32* %lun, align 4
  %0 = load i32, i32* %lim, align 4
  %sub = sub nsw i32 %0, 1
  %call = call noalias i8* @calloc(i32 %sub, i32 1)
  store i8* %call, i8** %sv, align 4
  %call1 = call i8* @setlocale(i32 1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  %1 = load i8*, i8** %sv, align 4
  %2 = load i32, i32* %lim, align 4
  call void @sieve(i8* %1, i32 %2)
  store i32 3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %lim, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sgt i32 %5, 5
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %lim, align 4
  %sub3 = sub nsw i32 %7, 6
  %cmp4 = icmp slt i32 %6, %sub3
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %8 = load i8*, i8** %sv, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %10, 0
  br i1 %tobool, label %if.end, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %land.lhs.true5
  %11 = load i8*, i8** %sv, align 4
  %12 = load i32, i32* %i, align 4
  %sub7 = sub nsw i32 %12, 6
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %sub7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv = zext i8 %13 to i32
  %tobool9 = icmp ne i32 %conv, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %14 = load i8*, i8** %sv, align 4
  %15 = load i32, i32* %i, align 4
  %add = add nsw i32 %15, 6
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i32 %add
  %16 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %16 to i32
  %tobool13 = icmp ne i32 %conv12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true10
  %17 = load i32, i32* %unsexy, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %unsexy, align 4
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true10, %land.lhs.true6, %land.lhs.true5, %land.lhs.true, %for.body
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %lim, align 4
  %sub14 = sub nsw i32 %19, 6
  %cmp15 = icmp slt i32 %18, %sub14
  br i1 %cmp15, label %land.lhs.true17, label %if.else

land.lhs.true17:                                  ; preds = %if.end
  %20 = load i8*, i8** %sv, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx18, align 1
  %tobool19 = icmp ne i8 %22, 0
  br i1 %tobool19, label %if.else, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %23 = load i8*, i8** %sv, align 4
  %24 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %24, 6
  %arrayidx22 = getelementptr inbounds i8, i8* %23, i32 %add21
  %25 = load i8, i8* %arrayidx22, align 1
  %tobool23 = icmp ne i8 %25, 0
  br i1 %tobool23, label %if.else, label %if.then24

if.then24:                                        ; preds = %land.lhs.true20
  %26 = load i32, i32* %pairs, align 4
  %inc25 = add nsw i32 %26, 1
  store i32 %inc25, i32* %pairs, align 4
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true20, %land.lhs.true17, %if.end
  br label %for.inc

if.end26:                                         ; preds = %if.then24
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %lim, align 4
  %sub27 = sub nsw i32 %28, 12
  %cmp28 = icmp slt i32 %27, %sub27
  br i1 %cmp28, label %land.lhs.true30, label %if.else36

land.lhs.true30:                                  ; preds = %if.end26
  %29 = load i8*, i8** %sv, align 4
  %30 = load i32, i32* %i, align 4
  %add31 = add nsw i32 %30, 12
  %arrayidx32 = getelementptr inbounds i8, i8* %29, i32 %add31
  %31 = load i8, i8* %arrayidx32, align 1
  %tobool33 = icmp ne i8 %31, 0
  br i1 %tobool33, label %if.else36, label %if.then34

if.then34:                                        ; preds = %land.lhs.true30
  %32 = load i32, i32* %trips, align 4
  %inc35 = add nsw i32 %32, 1
  store i32 %inc35, i32* %trips, align 4
  br label %if.end37

if.else36:                                        ; preds = %land.lhs.true30, %if.end26
  br label %for.inc

if.end37:                                         ; preds = %if.then34
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %lim, align 4
  %sub38 = sub nsw i32 %34, 18
  %cmp39 = icmp slt i32 %33, %sub38
  br i1 %cmp39, label %land.lhs.true41, label %if.else47

land.lhs.true41:                                  ; preds = %if.end37
  %35 = load i8*, i8** %sv, align 4
  %36 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %36, 18
  %arrayidx43 = getelementptr inbounds i8, i8* %35, i32 %add42
  %37 = load i8, i8* %arrayidx43, align 1
  %tobool44 = icmp ne i8 %37, 0
  br i1 %tobool44, label %if.else47, label %if.then45

if.then45:                                        ; preds = %land.lhs.true41
  %38 = load i32, i32* %quads, align 4
  %inc46 = add nsw i32 %38, 1
  store i32 %inc46, i32* %quads, align 4
  br label %if.end48

if.else47:                                        ; preds = %land.lhs.true41, %if.end37
  br label %for.inc

if.end48:                                         ; preds = %if.then45
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %lim, align 4
  %sub49 = sub nsw i32 %40, 24
  %cmp50 = icmp slt i32 %39, %sub49
  br i1 %cmp50, label %land.lhs.true52, label %if.end58

land.lhs.true52:                                  ; preds = %if.end48
  %41 = load i8*, i8** %sv, align 4
  %42 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %42, 24
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %add53
  %43 = load i8, i8* %arrayidx54, align 1
  %tobool55 = icmp ne i8 %43, 0
  br i1 %tobool55, label %if.end58, label %if.then56

if.then56:                                        ; preds = %land.lhs.true52
  %44 = load i32, i32* %quins, align 4
  %inc57 = add nsw i32 %44, 1
  store i32 %inc57, i32* %quins, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %land.lhs.true52, %if.end48
  br label %for.inc

for.inc:                                          ; preds = %if.end58, %if.else47, %if.else36, %if.else, %if.then
  %45 = load i32, i32* %i, align 4
  %add59 = add nsw i32 %45, 2
  store i32 %add59, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %pairs, align 4
  %47 = load i32, i32* %lpr, align 4
  %cmp60 = icmp slt i32 %46, %47
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %for.end
  %48 = load i32, i32* %pairs, align 4
  store i32 %48, i32* %lpr, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %for.end
  %49 = load i32, i32* %trips, align 4
  %50 = load i32, i32* %ltr, align 4
  %cmp64 = icmp slt i32 %49, %50
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end63
  %51 = load i32, i32* %trips, align 4
  store i32 %51, i32* %ltr, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end63
  %52 = load i32, i32* %quads, align 4
  %53 = load i32, i32* %lqd, align 4
  %cmp68 = icmp slt i32 %52, %53
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end67
  %54 = load i32, i32* %quads, align 4
  store i32 %54, i32* %lqd, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end67
  %55 = load i32, i32* %quins, align 4
  %56 = load i32, i32* %lqn, align 4
  %cmp72 = icmp slt i32 %55, %56
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end71
  %57 = load i32, i32* %quins, align 4
  store i32 %57, i32* %lqn, align 4
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.end71
  %58 = load i32, i32* %unsexy, align 4
  %59 = load i32, i32* %lun, align 4
  %cmp76 = icmp slt i32 %58, %59
  br i1 %cmp76, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end75
  %60 = load i32, i32* %unsexy, align 4
  store i32 %60, i32* %lun, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %if.end75
  store i32 3, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc231, %if.end79
  %61 = load i32, i32* %i, align 4
  %62 = load i32, i32* %lim, align 4
  %cmp81 = icmp slt i32 %61, %62
  br i1 %cmp81, label %for.body83, label %for.end233

for.body83:                                       ; preds = %for.cond80
  %63 = load i32, i32* %i, align 4
  %cmp84 = icmp sgt i32 %63, 5
  br i1 %cmp84, label %land.lhs.true86, label %if.end114

land.lhs.true86:                                  ; preds = %for.body83
  %64 = load i32, i32* %i, align 4
  %65 = load i32, i32* %lim, align 4
  %sub87 = sub nsw i32 %65, 6
  %cmp88 = icmp slt i32 %64, %sub87
  br i1 %cmp88, label %land.lhs.true90, label %if.end114

land.lhs.true90:                                  ; preds = %land.lhs.true86
  %66 = load i8*, i8** %sv, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx91 = getelementptr inbounds i8, i8* %66, i32 %67
  %68 = load i8, i8* %arrayidx91, align 1
  %tobool92 = icmp ne i8 %68, 0
  br i1 %tobool92, label %if.end114, label %land.lhs.true93

land.lhs.true93:                                  ; preds = %land.lhs.true90
  %69 = load i8*, i8** %sv, align 4
  %70 = load i32, i32* %i, align 4
  %sub94 = sub nsw i32 %70, 6
  %arrayidx95 = getelementptr inbounds i8, i8* %69, i32 %sub94
  %71 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %71 to i32
  %tobool97 = icmp ne i32 %conv96, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.end114

land.lhs.true98:                                  ; preds = %land.lhs.true93
  %72 = load i8*, i8** %sv, align 4
  %73 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %73, 6
  %arrayidx100 = getelementptr inbounds i8, i8* %72, i32 %add99
  %74 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %74 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br i1 %tobool102, label %if.then103, label %if.end114

if.then103:                                       ; preds = %land.lhs.true98
  %75 = load i32, i32* %un, align 4
  %inc104 = add nsw i32 %75, 1
  store i32 %inc104, i32* %un, align 4
  %76 = load i32, i32* %un, align 4
  %77 = load i32, i32* %unsexy, align 4
  %78 = load i32, i32* %lun, align 4
  %sub105 = sub nsw i32 %77, %78
  %cmp106 = icmp sgt i32 %76, %sub105
  br i1 %cmp106, label %if.then108, label %if.end113

if.then108:                                       ; preds = %if.then103
  %79 = load i32, i32* %i, align 4
  %80 = load i32, i32* %un, align 4
  %81 = load i32, i32* %lun, align 4
  %add109 = add nsw i32 %80, %81
  %sub110 = sub nsw i32 %add109, 1
  %82 = load i32, i32* %unsexy, align 4
  %sub111 = sub nsw i32 %sub110, %82
  %arrayidx112 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 %sub111
  store i32 %79, i32* %arrayidx112, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.then108, %if.then103
  br label %for.inc231

if.end114:                                        ; preds = %land.lhs.true98, %land.lhs.true93, %land.lhs.true90, %land.lhs.true86, %for.body83
  %83 = load i32, i32* %i, align 4
  %84 = load i32, i32* %lim, align 4
  %sub115 = sub nsw i32 %84, 6
  %cmp116 = icmp slt i32 %83, %sub115
  br i1 %cmp116, label %land.lhs.true118, label %if.else140

land.lhs.true118:                                 ; preds = %if.end114
  %85 = load i8*, i8** %sv, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx119 = getelementptr inbounds i8, i8* %85, i32 %86
  %87 = load i8, i8* %arrayidx119, align 1
  %tobool120 = icmp ne i8 %87, 0
  br i1 %tobool120, label %if.else140, label %land.lhs.true121

land.lhs.true121:                                 ; preds = %land.lhs.true118
  %88 = load i8*, i8** %sv, align 4
  %89 = load i32, i32* %i, align 4
  %add122 = add nsw i32 %89, 6
  %arrayidx123 = getelementptr inbounds i8, i8* %88, i32 %add122
  %90 = load i8, i8* %arrayidx123, align 1
  %tobool124 = icmp ne i8 %90, 0
  br i1 %tobool124, label %if.else140, label %if.then125

if.then125:                                       ; preds = %land.lhs.true121
  %91 = load i32, i32* %pr, align 4
  %inc126 = add nsw i32 %91, 1
  store i32 %inc126, i32* %pr, align 4
  %92 = load i32, i32* %pr, align 4
  %93 = load i32, i32* %pairs, align 4
  %94 = load i32, i32* %lpr, align 4
  %sub127 = sub nsw i32 %93, %94
  %cmp128 = icmp sgt i32 %92, %sub127
  br i1 %cmp128, label %if.then130, label %if.end139

if.then130:                                       ; preds = %if.then125
  %95 = load i32, i32* %pr, align 4
  %96 = load i32, i32* %lpr, align 4
  %add131 = add nsw i32 %95, %96
  %sub132 = sub nsw i32 %add131, 1
  %97 = load i32, i32* %pairs, align 4
  %sub133 = sub nsw i32 %sub132, %97
  store i32 %sub133, i32* %ix, align 4
  %98 = load i32, i32* %i, align 4
  %99 = load i32, i32* %ix, align 4
  %arrayidx134 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %99
  %arrayidx135 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx134, i32 0, i32 0
  store i32 %98, i32* %arrayidx135, align 8
  %100 = load i32, i32* %i, align 4
  %add136 = add nsw i32 %100, 6
  %101 = load i32, i32* %ix, align 4
  %arrayidx137 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %101
  %arrayidx138 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx137, i32 0, i32 1
  store i32 %add136, i32* %arrayidx138, align 4
  br label %if.end139

if.end139:                                        ; preds = %if.then130, %if.then125
  br label %if.end141

if.else140:                                       ; preds = %land.lhs.true121, %land.lhs.true118, %if.end114
  br label %for.inc231

if.end141:                                        ; preds = %if.end139
  %102 = load i32, i32* %i, align 4
  %103 = load i32, i32* %lim, align 4
  %sub142 = sub nsw i32 %103, 12
  %cmp143 = icmp slt i32 %102, %sub142
  br i1 %cmp143, label %land.lhs.true145, label %if.else167

land.lhs.true145:                                 ; preds = %if.end141
  %104 = load i8*, i8** %sv, align 4
  %105 = load i32, i32* %i, align 4
  %add146 = add nsw i32 %105, 12
  %arrayidx147 = getelementptr inbounds i8, i8* %104, i32 %add146
  %106 = load i8, i8* %arrayidx147, align 1
  %tobool148 = icmp ne i8 %106, 0
  br i1 %tobool148, label %if.else167, label %if.then149

if.then149:                                       ; preds = %land.lhs.true145
  %107 = load i32, i32* %tr, align 4
  %inc150 = add nsw i32 %107, 1
  store i32 %inc150, i32* %tr, align 4
  %108 = load i32, i32* %tr, align 4
  %109 = load i32, i32* %trips, align 4
  %110 = load i32, i32* %ltr, align 4
  %sub151 = sub nsw i32 %109, %110
  %cmp152 = icmp sgt i32 %108, %sub151
  br i1 %cmp152, label %if.then154, label %if.end166

if.then154:                                       ; preds = %if.then149
  %111 = load i32, i32* %tr, align 4
  %112 = load i32, i32* %ltr, align 4
  %add155 = add nsw i32 %111, %112
  %sub156 = sub nsw i32 %add155, 1
  %113 = load i32, i32* %trips, align 4
  %sub157 = sub nsw i32 %sub156, %113
  store i32 %sub157, i32* %ix, align 4
  %114 = load i32, i32* %i, align 4
  %115 = load i32, i32* %ix, align 4
  %arrayidx158 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %115
  %arrayidx159 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx158, i32 0, i32 0
  store i32 %114, i32* %arrayidx159, align 4
  %116 = load i32, i32* %i, align 4
  %add160 = add nsw i32 %116, 6
  %117 = load i32, i32* %ix, align 4
  %arrayidx161 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %117
  %arrayidx162 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx161, i32 0, i32 1
  store i32 %add160, i32* %arrayidx162, align 4
  %118 = load i32, i32* %i, align 4
  %add163 = add nsw i32 %118, 12
  %119 = load i32, i32* %ix, align 4
  %arrayidx164 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %119
  %arrayidx165 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx164, i32 0, i32 2
  store i32 %add163, i32* %arrayidx165, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.then154, %if.then149
  br label %if.end168

if.else167:                                       ; preds = %land.lhs.true145, %if.end141
  br label %for.inc231

if.end168:                                        ; preds = %if.end166
  %120 = load i32, i32* %i, align 4
  %121 = load i32, i32* %lim, align 4
  %sub169 = sub nsw i32 %121, 18
  %cmp170 = icmp slt i32 %120, %sub169
  br i1 %cmp170, label %land.lhs.true172, label %if.else197

land.lhs.true172:                                 ; preds = %if.end168
  %122 = load i8*, i8** %sv, align 4
  %123 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %123, 18
  %arrayidx174 = getelementptr inbounds i8, i8* %122, i32 %add173
  %124 = load i8, i8* %arrayidx174, align 1
  %tobool175 = icmp ne i8 %124, 0
  br i1 %tobool175, label %if.else197, label %if.then176

if.then176:                                       ; preds = %land.lhs.true172
  %125 = load i32, i32* %qd, align 4
  %inc177 = add nsw i32 %125, 1
  store i32 %inc177, i32* %qd, align 4
  %126 = load i32, i32* %qd, align 4
  %127 = load i32, i32* %quads, align 4
  %128 = load i32, i32* %lqd, align 4
  %sub178 = sub nsw i32 %127, %128
  %cmp179 = icmp sgt i32 %126, %sub178
  br i1 %cmp179, label %if.then181, label %if.end196

if.then181:                                       ; preds = %if.then176
  %129 = load i32, i32* %qd, align 4
  %130 = load i32, i32* %lqd, align 4
  %add182 = add nsw i32 %129, %130
  %sub183 = sub nsw i32 %add182, 1
  %131 = load i32, i32* %quads, align 4
  %sub184 = sub nsw i32 %sub183, %131
  store i32 %sub184, i32* %ix, align 4
  %132 = load i32, i32* %i, align 4
  %133 = load i32, i32* %ix, align 4
  %arrayidx185 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %133
  %arrayidx186 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx185, i32 0, i32 0
  store i32 %132, i32* %arrayidx186, align 16
  %134 = load i32, i32* %i, align 4
  %add187 = add nsw i32 %134, 6
  %135 = load i32, i32* %ix, align 4
  %arrayidx188 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %135
  %arrayidx189 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx188, i32 0, i32 1
  store i32 %add187, i32* %arrayidx189, align 4
  %136 = load i32, i32* %i, align 4
  %add190 = add nsw i32 %136, 12
  %137 = load i32, i32* %ix, align 4
  %arrayidx191 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %137
  %arrayidx192 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx191, i32 0, i32 2
  store i32 %add190, i32* %arrayidx192, align 8
  %138 = load i32, i32* %i, align 4
  %add193 = add nsw i32 %138, 18
  %139 = load i32, i32* %ix, align 4
  %arrayidx194 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %139
  %arrayidx195 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx194, i32 0, i32 3
  store i32 %add193, i32* %arrayidx195, align 4
  br label %if.end196

if.end196:                                        ; preds = %if.then181, %if.then176
  br label %if.end198

if.else197:                                       ; preds = %land.lhs.true172, %if.end168
  br label %for.inc231

if.end198:                                        ; preds = %if.end196
  %140 = load i32, i32* %i, align 4
  %141 = load i32, i32* %lim, align 4
  %sub199 = sub nsw i32 %141, 24
  %cmp200 = icmp slt i32 %140, %sub199
  br i1 %cmp200, label %land.lhs.true202, label %if.end230

land.lhs.true202:                                 ; preds = %if.end198
  %142 = load i8*, i8** %sv, align 4
  %143 = load i32, i32* %i, align 4
  %add203 = add nsw i32 %143, 24
  %arrayidx204 = getelementptr inbounds i8, i8* %142, i32 %add203
  %144 = load i8, i8* %arrayidx204, align 1
  %tobool205 = icmp ne i8 %144, 0
  br i1 %tobool205, label %if.end230, label %if.then206

if.then206:                                       ; preds = %land.lhs.true202
  %145 = load i32, i32* %qn, align 4
  %inc207 = add nsw i32 %145, 1
  store i32 %inc207, i32* %qn, align 4
  %146 = load i32, i32* %qn, align 4
  %147 = load i32, i32* %quins, align 4
  %148 = load i32, i32* %lqn, align 4
  %sub208 = sub nsw i32 %147, %148
  %cmp209 = icmp sgt i32 %146, %sub208
  br i1 %cmp209, label %if.then211, label %if.end229

if.then211:                                       ; preds = %if.then206
  %149 = load i32, i32* %qn, align 4
  %150 = load i32, i32* %lqn, align 4
  %add212 = add nsw i32 %149, %150
  %sub213 = sub nsw i32 %add212, 1
  %151 = load i32, i32* %quins, align 4
  %sub214 = sub nsw i32 %sub213, %151
  store i32 %sub214, i32* %ix, align 4
  %152 = load i32, i32* %i, align 4
  %153 = load i32, i32* %ix, align 4
  %arrayidx215 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %153
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx215, i32 0, i32 0
  store i32 %152, i32* %arrayidx216, align 4
  %154 = load i32, i32* %i, align 4
  %add217 = add nsw i32 %154, 6
  %155 = load i32, i32* %ix, align 4
  %arrayidx218 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %155
  %arrayidx219 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx218, i32 0, i32 1
  store i32 %add217, i32* %arrayidx219, align 4
  %156 = load i32, i32* %i, align 4
  %add220 = add nsw i32 %156, 12
  %157 = load i32, i32* %ix, align 4
  %arrayidx221 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %157
  %arrayidx222 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx221, i32 0, i32 2
  store i32 %add220, i32* %arrayidx222, align 4
  %158 = load i32, i32* %i, align 4
  %add223 = add nsw i32 %158, 18
  %159 = load i32, i32* %ix, align 4
  %arrayidx224 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %159
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx224, i32 0, i32 3
  store i32 %add223, i32* %arrayidx225, align 4
  %160 = load i32, i32* %i, align 4
  %add226 = add nsw i32 %160, 24
  %161 = load i32, i32* %ix, align 4
  %arrayidx227 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %161
  %arrayidx228 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx227, i32 0, i32 4
  store i32 %add226, i32* %arrayidx228, align 4
  br label %if.end229

if.end229:                                        ; preds = %if.then211, %if.then206
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %land.lhs.true202, %if.end198
  br label %for.inc231

for.inc231:                                       ; preds = %if.end230, %if.else197, %if.else167, %if.else140, %if.end113
  %162 = load i32, i32* %i, align 4
  %add232 = add nsw i32 %162, 2
  store i32 %add232, i32* %i, align 4
  br label %for.cond80

for.end233:                                       ; preds = %for.cond80
  %163 = load i32, i32* %pairs, align 4
  %164 = load i32, i32* %lim, align 4
  %165 = load i32, i32* %lpr, align 4
  call void @printHelper(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 %163, i32 %164, i32 %165)
  %call234 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond235

for.cond235:                                      ; preds = %for.inc241, %for.end233
  %166 = load i32, i32* %i, align 4
  %167 = load i32, i32* %lpr, align 4
  %cmp236 = icmp slt i32 %166, %167
  br i1 %cmp236, label %for.body238, label %for.end243

for.body238:                                      ; preds = %for.cond235
  %168 = load i32, i32* %i, align 4
  %arrayidx239 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %168
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx239, i32 0, i32 0
  call void @printArray(i32* %arraydecay, i32 2)
  %call240 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc241

for.inc241:                                       ; preds = %for.body238
  %169 = load i32, i32* %i, align 4
  %inc242 = add nsw i32 %169, 1
  store i32 %inc242, i32* %i, align 4
  br label %for.cond235

for.end243:                                       ; preds = %for.cond235
  %call244 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %170 = load i32, i32* %trips, align 4
  %171 = load i32, i32* %lim, align 4
  %172 = load i32, i32* %ltr, align 4
  call void @printHelper(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 %170, i32 %171, i32 %172)
  %call245 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond246

for.cond246:                                      ; preds = %for.inc253, %for.end243
  %173 = load i32, i32* %i, align 4
  %174 = load i32, i32* %ltr, align 4
  %cmp247 = icmp slt i32 %173, %174
  br i1 %cmp247, label %for.body249, label %for.end255

for.body249:                                      ; preds = %for.cond246
  %175 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %175
  %arraydecay251 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx250, i32 0, i32 0
  call void @printArray(i32* %arraydecay251, i32 3)
  %call252 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc253

for.inc253:                                       ; preds = %for.body249
  %176 = load i32, i32* %i, align 4
  %inc254 = add nsw i32 %176, 1
  store i32 %inc254, i32* %i, align 4
  br label %for.cond246

for.end255:                                       ; preds = %for.cond246
  %call256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %177 = load i32, i32* %quads, align 4
  %178 = load i32, i32* %lim, align 4
  %179 = load i32, i32* %lqd, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 %177, i32 %178, i32 %179)
  %call257 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond258

for.cond258:                                      ; preds = %for.inc265, %for.end255
  %180 = load i32, i32* %i, align 4
  %181 = load i32, i32* %lqd, align 4
  %cmp259 = icmp slt i32 %180, %181
  br i1 %cmp259, label %for.body261, label %for.end267

for.body261:                                      ; preds = %for.cond258
  %182 = load i32, i32* %i, align 4
  %arrayidx262 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %182
  %arraydecay263 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx262, i32 0, i32 0
  call void @printArray(i32* %arraydecay263, i32 4)
  %call264 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc265

for.inc265:                                       ; preds = %for.body261
  %183 = load i32, i32* %i, align 4
  %inc266 = add nsw i32 %183, 1
  store i32 %inc266, i32* %i, align 4
  br label %for.cond258

for.end267:                                       ; preds = %for.cond258
  %call268 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %184 = load i32, i32* %quins, align 4
  %185 = load i32, i32* %lim, align 4
  %186 = load i32, i32* %lqn, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i32 %184, i32 %185, i32 %186)
  %call269 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond270

for.cond270:                                      ; preds = %for.inc277, %for.end267
  %187 = load i32, i32* %i, align 4
  %188 = load i32, i32* %lqn, align 4
  %cmp271 = icmp slt i32 %187, %188
  br i1 %cmp271, label %for.body273, label %for.end279

for.body273:                                      ; preds = %for.cond270
  %189 = load i32, i32* %i, align 4
  %arrayidx274 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %189
  %arraydecay275 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx274, i32 0, i32 0
  call void @printArray(i32* %arraydecay275, i32 5)
  %call276 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc277

for.inc277:                                       ; preds = %for.body273
  %190 = load i32, i32* %i, align 4
  %inc278 = add nsw i32 %190, 1
  store i32 %inc278, i32* %i, align 4
  br label %for.cond270

for.end279:                                       ; preds = %for.cond270
  %call280 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %191 = load i32, i32* %unsexy, align 4
  %192 = load i32, i32* %lim, align 4
  %193 = load i32, i32* %lun, align 4
  call void @printHelper(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32 %191, i32 %192, i32 %193)
  %call281 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  %arraydecay282 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 0
  %194 = load i32, i32* %lun, align 4
  call void @printArray(i32* %arraydecay282, i32 %194)
  %call283 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0))
  %195 = load i8*, i8** %sv, align 4
  call void @free(i8* %195)
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i8* @setlocale(i32 %0, i8* %1) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %lim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printHelper()

; entering Souper's runOnFunction() for printArray()

; ModuleID = './Sexy_primes.c.bc'
source_filename = "./Sexy_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"unsexy primes\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"sexy prime \00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"are\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Number of %s%s less than %'d = %'d\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"The last %d %s:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\08]\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"pairs\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"  [\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"\08] \00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"\08]\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"triplets\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"quadruplets\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"quintuplets\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"\08]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @sieve(i8* %c, i32 %limit) #0 {
entry:
  %c.addr = alloca i8*, align 4
  %limit.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  %p2 = alloca i32, align 4
  store i8* %c, i8** %c.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 3, i32* %p, align 4
  %0 = load i8*, i8** %c.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  store i8 1, i8* %arrayidx, align 1
  %1 = load i8*, i8** %c.addr, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 1, i8* %arrayidx1, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.end11, %entry
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %p2, align 4
  %4 = load i32, i32* %p2, align 4
  %5 = load i32, i32* %limit.addr, align 4
  %cmp = icmp sge i32 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end12

if.end:                                           ; preds = %for.cond
  %6 = load i32, i32* %p2, align 4
  store i32 %6, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %limit.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond2
  %9 = load i8*, i8** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 1, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %p, align 4
  %mul5 = mul nsw i32 2, %11
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, %mul5
  store i32 %add, i32* %i, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.cond6

for.cond6:                                        ; preds = %if.end10, %for.end
  %13 = load i32, i32* %p, align 4
  %add7 = add nsw i32 %13, 2
  store i32 %add7, i32* %p, align 4
  %14 = load i8*, i8** %c.addr, align 4
  %15 = load i32, i32* %p, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx8, align 1
  %tobool = icmp ne i8 %16, 0
  br i1 %tobool, label %if.end10, label %if.then9

if.then9:                                         ; preds = %for.cond6
  br label %for.end11

if.end10:                                         ; preds = %for.cond6
  br label %for.cond6

for.end11:                                        ; preds = %if.then9
  br label %for.cond

for.end12:                                        ; preds = %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printHelper(i8* %cat, i32 %len, i32 %lim, i32 %n) #0 {
entry:
  %cat.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %lim.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %sp = alloca i8*, align 4
  %verb = alloca i8*, align 4
  store i8* %cat, i8** %cat.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %lim, i32* %lim.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %cat.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)) #3
  %tobool = icmp ne i32 %call, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  store i8* %cond, i8** %sp, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, 1
  %3 = zext i1 %cmp to i64
  %cond1 = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)
  store i8* %cond1, i8** %verb, align 4
  %4 = load i8*, i8** %sp, align 4
  %5 = load i8*, i8** %cat.addr, align 4
  %6 = load i32, i32* %lim.addr, align 4
  %7 = load i32, i32* %len.addr, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0), i8* %4, i8* %5, i32 %6, i32 %7)
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i8*, i8** %verb, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i32 %8, i8* %9)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @printArray(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %ix = alloca i32, align 4
  %n = alloca i32, align 4
  %lim = alloca i32, align 4
  %pairs = alloca i32, align 4
  %trips = alloca i32, align 4
  %quads = alloca i32, align 4
  %quins = alloca i32, align 4
  %unsexy = alloca i32, align 4
  %pr = alloca i32, align 4
  %tr = alloca i32, align 4
  %qd = alloca i32, align 4
  %qn = alloca i32, align 4
  %un = alloca i32, align 4
  %lpr = alloca i32, align 4
  %ltr = alloca i32, align 4
  %lqd = alloca i32, align 4
  %lqn = alloca i32, align 4
  %lun = alloca i32, align 4
  %last_pr = alloca [5 x [2 x i32]], align 16
  %last_tr = alloca [5 x [3 x i32]], align 16
  %last_qd = alloca [5 x [4 x i32]], align 16
  %last_qn = alloca [5 x [5 x i32]], align 16
  %last_un = alloca [10 x i32], align 16
  %sv = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i32 1000035, i32* %lim, align 4
  store i32 0, i32* %pairs, align 4
  store i32 0, i32* %trips, align 4
  store i32 0, i32* %quads, align 4
  store i32 0, i32* %quins, align 4
  store i32 2, i32* %unsexy, align 4
  store i32 0, i32* %pr, align 4
  store i32 0, i32* %tr, align 4
  store i32 0, i32* %qd, align 4
  store i32 0, i32* %qn, align 4
  store i32 2, i32* %un, align 4
  store i32 5, i32* %lpr, align 4
  store i32 5, i32* %ltr, align 4
  store i32 5, i32* %lqd, align 4
  store i32 5, i32* %lqn, align 4
  store i32 10, i32* %lun, align 4
  %0 = load i32, i32* %lim, align 4
  %sub = sub nsw i32 %0, 1
  %call = call noalias i8* @calloc(i32 %sub, i32 1)
  store i8* %call, i8** %sv, align 4
  %call1 = call i8* @setlocale(i32 1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  %1 = load i8*, i8** %sv, align 4
  %2 = load i32, i32* %lim, align 4
  call void @sieve(i8* %1, i32 %2)
  store i32 3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %lim, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sgt i32 %5, 5
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %lim, align 4
  %sub3 = sub nsw i32 %7, 6
  %cmp4 = icmp slt i32 %6, %sub3
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %8 = load i8*, i8** %sv, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %10, 0
  br i1 %tobool, label %if.end, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %land.lhs.true5
  %11 = load i8*, i8** %sv, align 4
  %12 = load i32, i32* %i, align 4
  %sub7 = sub nsw i32 %12, 6
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %sub7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv = zext i8 %13 to i32
  %tobool9 = icmp ne i32 %conv, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %14 = load i8*, i8** %sv, align 4
  %15 = load i32, i32* %i, align 4
  %add = add nsw i32 %15, 6
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i32 %add
  %16 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %16 to i32
  %tobool13 = icmp ne i32 %conv12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true10
  %17 = load i32, i32* %unsexy, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %unsexy, align 4
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true10, %land.lhs.true6, %land.lhs.true5, %land.lhs.true, %for.body
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %lim, align 4
  %sub14 = sub nsw i32 %19, 6
  %cmp15 = icmp slt i32 %18, %sub14
  br i1 %cmp15, label %land.lhs.true17, label %if.else

land.lhs.true17:                                  ; preds = %if.end
  %20 = load i8*, i8** %sv, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx18, align 1
  %tobool19 = icmp ne i8 %22, 0
  br i1 %tobool19, label %if.else, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %23 = load i8*, i8** %sv, align 4
  %24 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %24, 6
  %arrayidx22 = getelementptr inbounds i8, i8* %23, i32 %add21
  %25 = load i8, i8* %arrayidx22, align 1
  %tobool23 = icmp ne i8 %25, 0
  br i1 %tobool23, label %if.else, label %if.then24

if.then24:                                        ; preds = %land.lhs.true20
  %26 = load i32, i32* %pairs, align 4
  %inc25 = add nsw i32 %26, 1
  store i32 %inc25, i32* %pairs, align 4
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true20, %land.lhs.true17, %if.end
  br label %for.inc

if.end26:                                         ; preds = %if.then24
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %lim, align 4
  %sub27 = sub nsw i32 %28, 12
  %cmp28 = icmp slt i32 %27, %sub27
  br i1 %cmp28, label %land.lhs.true30, label %if.else36

land.lhs.true30:                                  ; preds = %if.end26
  %29 = load i8*, i8** %sv, align 4
  %30 = load i32, i32* %i, align 4
  %add31 = add nsw i32 %30, 12
  %arrayidx32 = getelementptr inbounds i8, i8* %29, i32 %add31
  %31 = load i8, i8* %arrayidx32, align 1
  %tobool33 = icmp ne i8 %31, 0
  br i1 %tobool33, label %if.else36, label %if.then34

if.then34:                                        ; preds = %land.lhs.true30
  %32 = load i32, i32* %trips, align 4
  %inc35 = add nsw i32 %32, 1
  store i32 %inc35, i32* %trips, align 4
  br label %if.end37

if.else36:                                        ; preds = %land.lhs.true30, %if.end26
  br label %for.inc

if.end37:                                         ; preds = %if.then34
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %lim, align 4
  %sub38 = sub nsw i32 %34, 18
  %cmp39 = icmp slt i32 %33, %sub38
  br i1 %cmp39, label %land.lhs.true41, label %if.else47

land.lhs.true41:                                  ; preds = %if.end37
  %35 = load i8*, i8** %sv, align 4
  %36 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %36, 18
  %arrayidx43 = getelementptr inbounds i8, i8* %35, i32 %add42
  %37 = load i8, i8* %arrayidx43, align 1
  %tobool44 = icmp ne i8 %37, 0
  br i1 %tobool44, label %if.else47, label %if.then45

if.then45:                                        ; preds = %land.lhs.true41
  %38 = load i32, i32* %quads, align 4
  %inc46 = add nsw i32 %38, 1
  store i32 %inc46, i32* %quads, align 4
  br label %if.end48

if.else47:                                        ; preds = %land.lhs.true41, %if.end37
  br label %for.inc

if.end48:                                         ; preds = %if.then45
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %lim, align 4
  %sub49 = sub nsw i32 %40, 24
  %cmp50 = icmp slt i32 %39, %sub49
  br i1 %cmp50, label %land.lhs.true52, label %if.end58

land.lhs.true52:                                  ; preds = %if.end48
  %41 = load i8*, i8** %sv, align 4
  %42 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %42, 24
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %add53
  %43 = load i8, i8* %arrayidx54, align 1
  %tobool55 = icmp ne i8 %43, 0
  br i1 %tobool55, label %if.end58, label %if.then56

if.then56:                                        ; preds = %land.lhs.true52
  %44 = load i32, i32* %quins, align 4
  %inc57 = add nsw i32 %44, 1
  store i32 %inc57, i32* %quins, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %land.lhs.true52, %if.end48
  br label %for.inc

for.inc:                                          ; preds = %if.end58, %if.else47, %if.else36, %if.else, %if.then
  %45 = load i32, i32* %i, align 4
  %add59 = add nsw i32 %45, 2
  store i32 %add59, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %pairs, align 4
  %47 = load i32, i32* %lpr, align 4
  %cmp60 = icmp slt i32 %46, %47
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %for.end
  %48 = load i32, i32* %pairs, align 4
  store i32 %48, i32* %lpr, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %for.end
  %49 = load i32, i32* %trips, align 4
  %50 = load i32, i32* %ltr, align 4
  %cmp64 = icmp slt i32 %49, %50
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end63
  %51 = load i32, i32* %trips, align 4
  store i32 %51, i32* %ltr, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end63
  %52 = load i32, i32* %quads, align 4
  %53 = load i32, i32* %lqd, align 4
  %cmp68 = icmp slt i32 %52, %53
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end67
  %54 = load i32, i32* %quads, align 4
  store i32 %54, i32* %lqd, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end67
  %55 = load i32, i32* %quins, align 4
  %56 = load i32, i32* %lqn, align 4
  %cmp72 = icmp slt i32 %55, %56
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end71
  %57 = load i32, i32* %quins, align 4
  store i32 %57, i32* %lqn, align 4
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.end71
  %58 = load i32, i32* %unsexy, align 4
  %59 = load i32, i32* %lun, align 4
  %cmp76 = icmp slt i32 %58, %59
  br i1 %cmp76, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end75
  %60 = load i32, i32* %unsexy, align 4
  store i32 %60, i32* %lun, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %if.end75
  store i32 3, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc231, %if.end79
  %61 = load i32, i32* %i, align 4
  %62 = load i32, i32* %lim, align 4
  %cmp81 = icmp slt i32 %61, %62
  br i1 %cmp81, label %for.body83, label %for.end233

for.body83:                                       ; preds = %for.cond80
  %63 = load i32, i32* %i, align 4
  %cmp84 = icmp sgt i32 %63, 5
  br i1 %cmp84, label %land.lhs.true86, label %if.end114

land.lhs.true86:                                  ; preds = %for.body83
  %64 = load i32, i32* %i, align 4
  %65 = load i32, i32* %lim, align 4
  %sub87 = sub nsw i32 %65, 6
  %cmp88 = icmp slt i32 %64, %sub87
  br i1 %cmp88, label %land.lhs.true90, label %if.end114

land.lhs.true90:                                  ; preds = %land.lhs.true86
  %66 = load i8*, i8** %sv, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx91 = getelementptr inbounds i8, i8* %66, i32 %67
  %68 = load i8, i8* %arrayidx91, align 1
  %tobool92 = icmp ne i8 %68, 0
  br i1 %tobool92, label %if.end114, label %land.lhs.true93

land.lhs.true93:                                  ; preds = %land.lhs.true90
  %69 = load i8*, i8** %sv, align 4
  %70 = load i32, i32* %i, align 4
  %sub94 = sub nsw i32 %70, 6
  %arrayidx95 = getelementptr inbounds i8, i8* %69, i32 %sub94
  %71 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %71 to i32
  %tobool97 = icmp ne i32 %conv96, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.end114

land.lhs.true98:                                  ; preds = %land.lhs.true93
  %72 = load i8*, i8** %sv, align 4
  %73 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %73, 6
  %arrayidx100 = getelementptr inbounds i8, i8* %72, i32 %add99
  %74 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %74 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br i1 %tobool102, label %if.then103, label %if.end114

if.then103:                                       ; preds = %land.lhs.true98
  %75 = load i32, i32* %un, align 4
  %inc104 = add nsw i32 %75, 1
  store i32 %inc104, i32* %un, align 4
  %76 = load i32, i32* %un, align 4
  %77 = load i32, i32* %unsexy, align 4
  %78 = load i32, i32* %lun, align 4
  %sub105 = sub nsw i32 %77, %78
  %cmp106 = icmp sgt i32 %76, %sub105
  br i1 %cmp106, label %if.then108, label %if.end113

if.then108:                                       ; preds = %if.then103
  %79 = load i32, i32* %i, align 4
  %80 = load i32, i32* %un, align 4
  %81 = load i32, i32* %lun, align 4
  %add109 = add nsw i32 %80, %81
  %sub110 = sub nsw i32 %add109, 1
  %82 = load i32, i32* %unsexy, align 4
  %sub111 = sub nsw i32 %sub110, %82
  %arrayidx112 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 %sub111
  store i32 %79, i32* %arrayidx112, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.then108, %if.then103
  br label %for.inc231

if.end114:                                        ; preds = %land.lhs.true98, %land.lhs.true93, %land.lhs.true90, %land.lhs.true86, %for.body83
  %83 = load i32, i32* %i, align 4
  %84 = load i32, i32* %lim, align 4
  %sub115 = sub nsw i32 %84, 6
  %cmp116 = icmp slt i32 %83, %sub115
  br i1 %cmp116, label %land.lhs.true118, label %if.else140

land.lhs.true118:                                 ; preds = %if.end114
  %85 = load i8*, i8** %sv, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx119 = getelementptr inbounds i8, i8* %85, i32 %86
  %87 = load i8, i8* %arrayidx119, align 1
  %tobool120 = icmp ne i8 %87, 0
  br i1 %tobool120, label %if.else140, label %land.lhs.true121

land.lhs.true121:                                 ; preds = %land.lhs.true118
  %88 = load i8*, i8** %sv, align 4
  %89 = load i32, i32* %i, align 4
  %add122 = add nsw i32 %89, 6
  %arrayidx123 = getelementptr inbounds i8, i8* %88, i32 %add122
  %90 = load i8, i8* %arrayidx123, align 1
  %tobool124 = icmp ne i8 %90, 0
  br i1 %tobool124, label %if.else140, label %if.then125

if.then125:                                       ; preds = %land.lhs.true121
  %91 = load i32, i32* %pr, align 4
  %inc126 = add nsw i32 %91, 1
  store i32 %inc126, i32* %pr, align 4
  %92 = load i32, i32* %pr, align 4
  %93 = load i32, i32* %pairs, align 4
  %94 = load i32, i32* %lpr, align 4
  %sub127 = sub nsw i32 %93, %94
  %cmp128 = icmp sgt i32 %92, %sub127
  br i1 %cmp128, label %if.then130, label %if.end139

if.then130:                                       ; preds = %if.then125
  %95 = load i32, i32* %pr, align 4
  %96 = load i32, i32* %lpr, align 4
  %add131 = add nsw i32 %95, %96
  %sub132 = sub nsw i32 %add131, 1
  %97 = load i32, i32* %pairs, align 4
  %sub133 = sub nsw i32 %sub132, %97
  store i32 %sub133, i32* %ix, align 4
  %98 = load i32, i32* %i, align 4
  %99 = load i32, i32* %ix, align 4
  %arrayidx134 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %99
  %arrayidx135 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx134, i32 0, i32 0
  store i32 %98, i32* %arrayidx135, align 8
  %100 = load i32, i32* %i, align 4
  %add136 = add nsw i32 %100, 6
  %101 = load i32, i32* %ix, align 4
  %arrayidx137 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %101
  %arrayidx138 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx137, i32 0, i32 1
  store i32 %add136, i32* %arrayidx138, align 4
  br label %if.end139

if.end139:                                        ; preds = %if.then130, %if.then125
  br label %if.end141

if.else140:                                       ; preds = %land.lhs.true121, %land.lhs.true118, %if.end114
  br label %for.inc231

if.end141:                                        ; preds = %if.end139
  %102 = load i32, i32* %i, align 4
  %103 = load i32, i32* %lim, align 4
  %sub142 = sub nsw i32 %103, 12
  %cmp143 = icmp slt i32 %102, %sub142
  br i1 %cmp143, label %land.lhs.true145, label %if.else167

land.lhs.true145:                                 ; preds = %if.end141
  %104 = load i8*, i8** %sv, align 4
  %105 = load i32, i32* %i, align 4
  %add146 = add nsw i32 %105, 12
  %arrayidx147 = getelementptr inbounds i8, i8* %104, i32 %add146
  %106 = load i8, i8* %arrayidx147, align 1
  %tobool148 = icmp ne i8 %106, 0
  br i1 %tobool148, label %if.else167, label %if.then149

if.then149:                                       ; preds = %land.lhs.true145
  %107 = load i32, i32* %tr, align 4
  %inc150 = add nsw i32 %107, 1
  store i32 %inc150, i32* %tr, align 4
  %108 = load i32, i32* %tr, align 4
  %109 = load i32, i32* %trips, align 4
  %110 = load i32, i32* %ltr, align 4
  %sub151 = sub nsw i32 %109, %110
  %cmp152 = icmp sgt i32 %108, %sub151
  br i1 %cmp152, label %if.then154, label %if.end166

if.then154:                                       ; preds = %if.then149
  %111 = load i32, i32* %tr, align 4
  %112 = load i32, i32* %ltr, align 4
  %add155 = add nsw i32 %111, %112
  %sub156 = sub nsw i32 %add155, 1
  %113 = load i32, i32* %trips, align 4
  %sub157 = sub nsw i32 %sub156, %113
  store i32 %sub157, i32* %ix, align 4
  %114 = load i32, i32* %i, align 4
  %115 = load i32, i32* %ix, align 4
  %arrayidx158 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %115
  %arrayidx159 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx158, i32 0, i32 0
  store i32 %114, i32* %arrayidx159, align 4
  %116 = load i32, i32* %i, align 4
  %add160 = add nsw i32 %116, 6
  %117 = load i32, i32* %ix, align 4
  %arrayidx161 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %117
  %arrayidx162 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx161, i32 0, i32 1
  store i32 %add160, i32* %arrayidx162, align 4
  %118 = load i32, i32* %i, align 4
  %add163 = add nsw i32 %118, 12
  %119 = load i32, i32* %ix, align 4
  %arrayidx164 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %119
  %arrayidx165 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx164, i32 0, i32 2
  store i32 %add163, i32* %arrayidx165, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.then154, %if.then149
  br label %if.end168

if.else167:                                       ; preds = %land.lhs.true145, %if.end141
  br label %for.inc231

if.end168:                                        ; preds = %if.end166
  %120 = load i32, i32* %i, align 4
  %121 = load i32, i32* %lim, align 4
  %sub169 = sub nsw i32 %121, 18
  %cmp170 = icmp slt i32 %120, %sub169
  br i1 %cmp170, label %land.lhs.true172, label %if.else197

land.lhs.true172:                                 ; preds = %if.end168
  %122 = load i8*, i8** %sv, align 4
  %123 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %123, 18
  %arrayidx174 = getelementptr inbounds i8, i8* %122, i32 %add173
  %124 = load i8, i8* %arrayidx174, align 1
  %tobool175 = icmp ne i8 %124, 0
  br i1 %tobool175, label %if.else197, label %if.then176

if.then176:                                       ; preds = %land.lhs.true172
  %125 = load i32, i32* %qd, align 4
  %inc177 = add nsw i32 %125, 1
  store i32 %inc177, i32* %qd, align 4
  %126 = load i32, i32* %qd, align 4
  %127 = load i32, i32* %quads, align 4
  %128 = load i32, i32* %lqd, align 4
  %sub178 = sub nsw i32 %127, %128
  %cmp179 = icmp sgt i32 %126, %sub178
  br i1 %cmp179, label %if.then181, label %if.end196

if.then181:                                       ; preds = %if.then176
  %129 = load i32, i32* %qd, align 4
  %130 = load i32, i32* %lqd, align 4
  %add182 = add nsw i32 %129, %130
  %sub183 = sub nsw i32 %add182, 1
  %131 = load i32, i32* %quads, align 4
  %sub184 = sub nsw i32 %sub183, %131
  store i32 %sub184, i32* %ix, align 4
  %132 = load i32, i32* %i, align 4
  %133 = load i32, i32* %ix, align 4
  %arrayidx185 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %133
  %arrayidx186 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx185, i32 0, i32 0
  store i32 %132, i32* %arrayidx186, align 16
  %134 = load i32, i32* %i, align 4
  %add187 = add nsw i32 %134, 6
  %135 = load i32, i32* %ix, align 4
  %arrayidx188 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %135
  %arrayidx189 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx188, i32 0, i32 1
  store i32 %add187, i32* %arrayidx189, align 4
  %136 = load i32, i32* %i, align 4
  %add190 = add nsw i32 %136, 12
  %137 = load i32, i32* %ix, align 4
  %arrayidx191 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %137
  %arrayidx192 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx191, i32 0, i32 2
  store i32 %add190, i32* %arrayidx192, align 8
  %138 = load i32, i32* %i, align 4
  %add193 = add nsw i32 %138, 18
  %139 = load i32, i32* %ix, align 4
  %arrayidx194 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %139
  %arrayidx195 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx194, i32 0, i32 3
  store i32 %add193, i32* %arrayidx195, align 4
  br label %if.end196

if.end196:                                        ; preds = %if.then181, %if.then176
  br label %if.end198

if.else197:                                       ; preds = %land.lhs.true172, %if.end168
  br label %for.inc231

if.end198:                                        ; preds = %if.end196
  %140 = load i32, i32* %i, align 4
  %141 = load i32, i32* %lim, align 4
  %sub199 = sub nsw i32 %141, 24
  %cmp200 = icmp slt i32 %140, %sub199
  br i1 %cmp200, label %land.lhs.true202, label %if.end230

land.lhs.true202:                                 ; preds = %if.end198
  %142 = load i8*, i8** %sv, align 4
  %143 = load i32, i32* %i, align 4
  %add203 = add nsw i32 %143, 24
  %arrayidx204 = getelementptr inbounds i8, i8* %142, i32 %add203
  %144 = load i8, i8* %arrayidx204, align 1
  %tobool205 = icmp ne i8 %144, 0
  br i1 %tobool205, label %if.end230, label %if.then206

if.then206:                                       ; preds = %land.lhs.true202
  %145 = load i32, i32* %qn, align 4
  %inc207 = add nsw i32 %145, 1
  store i32 %inc207, i32* %qn, align 4
  %146 = load i32, i32* %qn, align 4
  %147 = load i32, i32* %quins, align 4
  %148 = load i32, i32* %lqn, align 4
  %sub208 = sub nsw i32 %147, %148
  %cmp209 = icmp sgt i32 %146, %sub208
  br i1 %cmp209, label %if.then211, label %if.end229

if.then211:                                       ; preds = %if.then206
  %149 = load i32, i32* %qn, align 4
  %150 = load i32, i32* %lqn, align 4
  %add212 = add nsw i32 %149, %150
  %sub213 = sub nsw i32 %add212, 1
  %151 = load i32, i32* %quins, align 4
  %sub214 = sub nsw i32 %sub213, %151
  store i32 %sub214, i32* %ix, align 4
  %152 = load i32, i32* %i, align 4
  %153 = load i32, i32* %ix, align 4
  %arrayidx215 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %153
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx215, i32 0, i32 0
  store i32 %152, i32* %arrayidx216, align 4
  %154 = load i32, i32* %i, align 4
  %add217 = add nsw i32 %154, 6
  %155 = load i32, i32* %ix, align 4
  %arrayidx218 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %155
  %arrayidx219 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx218, i32 0, i32 1
  store i32 %add217, i32* %arrayidx219, align 4
  %156 = load i32, i32* %i, align 4
  %add220 = add nsw i32 %156, 12
  %157 = load i32, i32* %ix, align 4
  %arrayidx221 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %157
  %arrayidx222 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx221, i32 0, i32 2
  store i32 %add220, i32* %arrayidx222, align 4
  %158 = load i32, i32* %i, align 4
  %add223 = add nsw i32 %158, 18
  %159 = load i32, i32* %ix, align 4
  %arrayidx224 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %159
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx224, i32 0, i32 3
  store i32 %add223, i32* %arrayidx225, align 4
  %160 = load i32, i32* %i, align 4
  %add226 = add nsw i32 %160, 24
  %161 = load i32, i32* %ix, align 4
  %arrayidx227 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %161
  %arrayidx228 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx227, i32 0, i32 4
  store i32 %add226, i32* %arrayidx228, align 4
  br label %if.end229

if.end229:                                        ; preds = %if.then211, %if.then206
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %land.lhs.true202, %if.end198
  br label %for.inc231

for.inc231:                                       ; preds = %if.end230, %if.else197, %if.else167, %if.else140, %if.end113
  %162 = load i32, i32* %i, align 4
  %add232 = add nsw i32 %162, 2
  store i32 %add232, i32* %i, align 4
  br label %for.cond80

for.end233:                                       ; preds = %for.cond80
  %163 = load i32, i32* %pairs, align 4
  %164 = load i32, i32* %lim, align 4
  %165 = load i32, i32* %lpr, align 4
  call void @printHelper(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 %163, i32 %164, i32 %165)
  %call234 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond235

for.cond235:                                      ; preds = %for.inc241, %for.end233
  %166 = load i32, i32* %i, align 4
  %167 = load i32, i32* %lpr, align 4
  %cmp236 = icmp slt i32 %166, %167
  br i1 %cmp236, label %for.body238, label %for.end243

for.body238:                                      ; preds = %for.cond235
  %168 = load i32, i32* %i, align 4
  %arrayidx239 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %168
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx239, i32 0, i32 0
  call void @printArray(i32* %arraydecay, i32 2)
  %call240 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc241

for.inc241:                                       ; preds = %for.body238
  %169 = load i32, i32* %i, align 4
  %inc242 = add nsw i32 %169, 1
  store i32 %inc242, i32* %i, align 4
  br label %for.cond235

for.end243:                                       ; preds = %for.cond235
  %call244 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %170 = load i32, i32* %trips, align 4
  %171 = load i32, i32* %lim, align 4
  %172 = load i32, i32* %ltr, align 4
  call void @printHelper(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 %170, i32 %171, i32 %172)
  %call245 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond246

for.cond246:                                      ; preds = %for.inc253, %for.end243
  %173 = load i32, i32* %i, align 4
  %174 = load i32, i32* %ltr, align 4
  %cmp247 = icmp slt i32 %173, %174
  br i1 %cmp247, label %for.body249, label %for.end255

for.body249:                                      ; preds = %for.cond246
  %175 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %175
  %arraydecay251 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx250, i32 0, i32 0
  call void @printArray(i32* %arraydecay251, i32 3)
  %call252 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc253

for.inc253:                                       ; preds = %for.body249
  %176 = load i32, i32* %i, align 4
  %inc254 = add nsw i32 %176, 1
  store i32 %inc254, i32* %i, align 4
  br label %for.cond246

for.end255:                                       ; preds = %for.cond246
  %call256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %177 = load i32, i32* %quads, align 4
  %178 = load i32, i32* %lim, align 4
  %179 = load i32, i32* %lqd, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 %177, i32 %178, i32 %179)
  %call257 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond258

for.cond258:                                      ; preds = %for.inc265, %for.end255
  %180 = load i32, i32* %i, align 4
  %181 = load i32, i32* %lqd, align 4
  %cmp259 = icmp slt i32 %180, %181
  br i1 %cmp259, label %for.body261, label %for.end267

for.body261:                                      ; preds = %for.cond258
  %182 = load i32, i32* %i, align 4
  %arrayidx262 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %182
  %arraydecay263 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx262, i32 0, i32 0
  call void @printArray(i32* %arraydecay263, i32 4)
  %call264 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc265

for.inc265:                                       ; preds = %for.body261
  %183 = load i32, i32* %i, align 4
  %inc266 = add nsw i32 %183, 1
  store i32 %inc266, i32* %i, align 4
  br label %for.cond258

for.end267:                                       ; preds = %for.cond258
  %call268 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %184 = load i32, i32* %quins, align 4
  %185 = load i32, i32* %lim, align 4
  %186 = load i32, i32* %lqn, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i32 %184, i32 %185, i32 %186)
  %call269 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond270

for.cond270:                                      ; preds = %for.inc277, %for.end267
  %187 = load i32, i32* %i, align 4
  %188 = load i32, i32* %lqn, align 4
  %cmp271 = icmp slt i32 %187, %188
  br i1 %cmp271, label %for.body273, label %for.end279

for.body273:                                      ; preds = %for.cond270
  %189 = load i32, i32* %i, align 4
  %arrayidx274 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %189
  %arraydecay275 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx274, i32 0, i32 0
  call void @printArray(i32* %arraydecay275, i32 5)
  %call276 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc277

for.inc277:                                       ; preds = %for.body273
  %190 = load i32, i32* %i, align 4
  %inc278 = add nsw i32 %190, 1
  store i32 %inc278, i32* %i, align 4
  br label %for.cond270

for.end279:                                       ; preds = %for.cond270
  %call280 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %191 = load i32, i32* %unsexy, align 4
  %192 = load i32, i32* %lim, align 4
  %193 = load i32, i32* %lun, align 4
  call void @printHelper(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32 %191, i32 %192, i32 %193)
  %call281 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  %arraydecay282 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 0
  %194 = load i32, i32* %lun, align 4
  call void @printArray(i32* %arraydecay282, i32 %194)
  %call283 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0))
  %195 = load i8*, i8** %sv, align 4
  call void @free(i8* %195)
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i8* @setlocale(i32 %0, i8* %1) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printArray()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sexy_primes.c.bc'
source_filename = "./Sexy_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"unsexy primes\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"sexy prime \00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"are\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Number of %s%s less than %'d = %'d\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"The last %d %s:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\08]\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"pairs\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"  [\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"\08] \00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"\08]\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"triplets\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"quadruplets\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"quintuplets\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"\08]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @sieve(i8* %c, i32 %limit) #0 {
entry:
  %c.addr = alloca i8*, align 4
  %limit.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i32, align 4
  %p2 = alloca i32, align 4
  store i8* %c, i8** %c.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 3, i32* %p, align 4
  %0 = load i8*, i8** %c.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  store i8 1, i8* %arrayidx, align 1
  %1 = load i8*, i8** %c.addr, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 1, i8* %arrayidx1, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.end11, %entry
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %p2, align 4
  %4 = load i32, i32* %p2, align 4
  %5 = load i32, i32* %limit.addr, align 4
  %cmp = icmp sge i32 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end12

if.end:                                           ; preds = %for.cond
  %6 = load i32, i32* %p2, align 4
  store i32 %6, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %limit.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond2
  %9 = load i8*, i8** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 1, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %p, align 4
  %mul5 = mul nsw i32 2, %11
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, %mul5
  store i32 %add, i32* %i, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.cond6

for.cond6:                                        ; preds = %if.end10, %for.end
  %13 = load i32, i32* %p, align 4
  %add7 = add nsw i32 %13, 2
  store i32 %add7, i32* %p, align 4
  %14 = load i8*, i8** %c.addr, align 4
  %15 = load i32, i32* %p, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx8, align 1
  %tobool = icmp ne i8 %16, 0
  br i1 %tobool, label %if.end10, label %if.then9

if.then9:                                         ; preds = %for.cond6
  br label %for.end11

if.end10:                                         ; preds = %for.cond6
  br label %for.cond6

for.end11:                                        ; preds = %if.then9
  br label %for.cond

for.end12:                                        ; preds = %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printHelper(i8* %cat, i32 %len, i32 %lim, i32 %n) #0 {
entry:
  %cat.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %lim.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %sp = alloca i8*, align 4
  %verb = alloca i8*, align 4
  store i8* %cat, i8** %cat.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %lim, i32* %lim.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %cat.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)) #3
  %tobool = icmp ne i32 %call, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  store i8* %cond, i8** %sp, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, 1
  %3 = zext i1 %cmp to i64
  %cond1 = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)
  store i8* %cond1, i8** %verb, align 4
  %4 = load i8*, i8** %sp, align 4
  %5 = load i8*, i8** %cat.addr, align 4
  %6 = load i32, i32* %lim.addr, align 4
  %7 = load i32, i32* %len.addr, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0), i8* %4, i8* %5, i32 %6, i32 %7)
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i8*, i8** %verb, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i32 %8, i8* %9)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @printArray(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %ix = alloca i32, align 4
  %n = alloca i32, align 4
  %lim = alloca i32, align 4
  %pairs = alloca i32, align 4
  %trips = alloca i32, align 4
  %quads = alloca i32, align 4
  %quins = alloca i32, align 4
  %unsexy = alloca i32, align 4
  %pr = alloca i32, align 4
  %tr = alloca i32, align 4
  %qd = alloca i32, align 4
  %qn = alloca i32, align 4
  %un = alloca i32, align 4
  %lpr = alloca i32, align 4
  %ltr = alloca i32, align 4
  %lqd = alloca i32, align 4
  %lqn = alloca i32, align 4
  %lun = alloca i32, align 4
  %last_pr = alloca [5 x [2 x i32]], align 16
  %last_tr = alloca [5 x [3 x i32]], align 16
  %last_qd = alloca [5 x [4 x i32]], align 16
  %last_qn = alloca [5 x [5 x i32]], align 16
  %last_un = alloca [10 x i32], align 16
  %sv = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i32 1000035, i32* %lim, align 4
  store i32 0, i32* %pairs, align 4
  store i32 0, i32* %trips, align 4
  store i32 0, i32* %quads, align 4
  store i32 0, i32* %quins, align 4
  store i32 2, i32* %unsexy, align 4
  store i32 0, i32* %pr, align 4
  store i32 0, i32* %tr, align 4
  store i32 0, i32* %qd, align 4
  store i32 0, i32* %qn, align 4
  store i32 2, i32* %un, align 4
  store i32 5, i32* %lpr, align 4
  store i32 5, i32* %ltr, align 4
  store i32 5, i32* %lqd, align 4
  store i32 5, i32* %lqn, align 4
  store i32 10, i32* %lun, align 4
  %0 = load i32, i32* %lim, align 4
  %sub = sub nsw i32 %0, 1
  %call = call noalias i8* @calloc(i32 %sub, i32 1)
  store i8* %call, i8** %sv, align 4
  %call1 = call i8* @setlocale(i32 1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  %1 = load i8*, i8** %sv, align 4
  %2 = load i32, i32* %lim, align 4
  call void @sieve(i8* %1, i32 %2)
  store i32 3, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %lim, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sgt i32 %5, 5
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %lim, align 4
  %sub3 = sub nsw i32 %7, 6
  %cmp4 = icmp slt i32 %6, %sub3
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %8 = load i8*, i8** %sv, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %10, 0
  br i1 %tobool, label %if.end, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %land.lhs.true5
  %11 = load i8*, i8** %sv, align 4
  %12 = load i32, i32* %i, align 4
  %sub7 = sub nsw i32 %12, 6
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %sub7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv = zext i8 %13 to i32
  %tobool9 = icmp ne i32 %conv, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %14 = load i8*, i8** %sv, align 4
  %15 = load i32, i32* %i, align 4
  %add = add nsw i32 %15, 6
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i32 %add
  %16 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %16 to i32
  %tobool13 = icmp ne i32 %conv12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true10
  %17 = load i32, i32* %unsexy, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %unsexy, align 4
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true10, %land.lhs.true6, %land.lhs.true5, %land.lhs.true, %for.body
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %lim, align 4
  %sub14 = sub nsw i32 %19, 6
  %cmp15 = icmp slt i32 %18, %sub14
  br i1 %cmp15, label %land.lhs.true17, label %if.else

land.lhs.true17:                                  ; preds = %if.end
  %20 = load i8*, i8** %sv, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx18, align 1
  %tobool19 = icmp ne i8 %22, 0
  br i1 %tobool19, label %if.else, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %23 = load i8*, i8** %sv, align 4
  %24 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %24, 6
  %arrayidx22 = getelementptr inbounds i8, i8* %23, i32 %add21
  %25 = load i8, i8* %arrayidx22, align 1
  %tobool23 = icmp ne i8 %25, 0
  br i1 %tobool23, label %if.else, label %if.then24

if.then24:                                        ; preds = %land.lhs.true20
  %26 = load i32, i32* %pairs, align 4
  %inc25 = add nsw i32 %26, 1
  store i32 %inc25, i32* %pairs, align 4
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true20, %land.lhs.true17, %if.end
  br label %for.inc

if.end26:                                         ; preds = %if.then24
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %lim, align 4
  %sub27 = sub nsw i32 %28, 12
  %cmp28 = icmp slt i32 %27, %sub27
  br i1 %cmp28, label %land.lhs.true30, label %if.else36

land.lhs.true30:                                  ; preds = %if.end26
  %29 = load i8*, i8** %sv, align 4
  %30 = load i32, i32* %i, align 4
  %add31 = add nsw i32 %30, 12
  %arrayidx32 = getelementptr inbounds i8, i8* %29, i32 %add31
  %31 = load i8, i8* %arrayidx32, align 1
  %tobool33 = icmp ne i8 %31, 0
  br i1 %tobool33, label %if.else36, label %if.then34

if.then34:                                        ; preds = %land.lhs.true30
  %32 = load i32, i32* %trips, align 4
  %inc35 = add nsw i32 %32, 1
  store i32 %inc35, i32* %trips, align 4
  br label %if.end37

if.else36:                                        ; preds = %land.lhs.true30, %if.end26
  br label %for.inc

if.end37:                                         ; preds = %if.then34
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %lim, align 4
  %sub38 = sub nsw i32 %34, 18
  %cmp39 = icmp slt i32 %33, %sub38
  br i1 %cmp39, label %land.lhs.true41, label %if.else47

land.lhs.true41:                                  ; preds = %if.end37
  %35 = load i8*, i8** %sv, align 4
  %36 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %36, 18
  %arrayidx43 = getelementptr inbounds i8, i8* %35, i32 %add42
  %37 = load i8, i8* %arrayidx43, align 1
  %tobool44 = icmp ne i8 %37, 0
  br i1 %tobool44, label %if.else47, label %if.then45

if.then45:                                        ; preds = %land.lhs.true41
  %38 = load i32, i32* %quads, align 4
  %inc46 = add nsw i32 %38, 1
  store i32 %inc46, i32* %quads, align 4
  br label %if.end48

if.else47:                                        ; preds = %land.lhs.true41, %if.end37
  br label %for.inc

if.end48:                                         ; preds = %if.then45
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %lim, align 4
  %sub49 = sub nsw i32 %40, 24
  %cmp50 = icmp slt i32 %39, %sub49
  br i1 %cmp50, label %land.lhs.true52, label %if.end58

land.lhs.true52:                                  ; preds = %if.end48
  %41 = load i8*, i8** %sv, align 4
  %42 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %42, 24
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %add53
  %43 = load i8, i8* %arrayidx54, align 1
  %tobool55 = icmp ne i8 %43, 0
  br i1 %tobool55, label %if.end58, label %if.then56

if.then56:                                        ; preds = %land.lhs.true52
  %44 = load i32, i32* %quins, align 4
  %inc57 = add nsw i32 %44, 1
  store i32 %inc57, i32* %quins, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %land.lhs.true52, %if.end48
  br label %for.inc

for.inc:                                          ; preds = %if.end58, %if.else47, %if.else36, %if.else, %if.then
  %45 = load i32, i32* %i, align 4
  %add59 = add nsw i32 %45, 2
  store i32 %add59, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %pairs, align 4
  %47 = load i32, i32* %lpr, align 4
  %cmp60 = icmp slt i32 %46, %47
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %for.end
  %48 = load i32, i32* %pairs, align 4
  store i32 %48, i32* %lpr, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %for.end
  %49 = load i32, i32* %trips, align 4
  %50 = load i32, i32* %ltr, align 4
  %cmp64 = icmp slt i32 %49, %50
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end63
  %51 = load i32, i32* %trips, align 4
  store i32 %51, i32* %ltr, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end63
  %52 = load i32, i32* %quads, align 4
  %53 = load i32, i32* %lqd, align 4
  %cmp68 = icmp slt i32 %52, %53
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end67
  %54 = load i32, i32* %quads, align 4
  store i32 %54, i32* %lqd, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end67
  %55 = load i32, i32* %quins, align 4
  %56 = load i32, i32* %lqn, align 4
  %cmp72 = icmp slt i32 %55, %56
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end71
  %57 = load i32, i32* %quins, align 4
  store i32 %57, i32* %lqn, align 4
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.end71
  %58 = load i32, i32* %unsexy, align 4
  %59 = load i32, i32* %lun, align 4
  %cmp76 = icmp slt i32 %58, %59
  br i1 %cmp76, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end75
  %60 = load i32, i32* %unsexy, align 4
  store i32 %60, i32* %lun, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %if.end75
  store i32 3, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc231, %if.end79
  %61 = load i32, i32* %i, align 4
  %62 = load i32, i32* %lim, align 4
  %cmp81 = icmp slt i32 %61, %62
  br i1 %cmp81, label %for.body83, label %for.end233

for.body83:                                       ; preds = %for.cond80
  %63 = load i32, i32* %i, align 4
  %cmp84 = icmp sgt i32 %63, 5
  br i1 %cmp84, label %land.lhs.true86, label %if.end114

land.lhs.true86:                                  ; preds = %for.body83
  %64 = load i32, i32* %i, align 4
  %65 = load i32, i32* %lim, align 4
  %sub87 = sub nsw i32 %65, 6
  %cmp88 = icmp slt i32 %64, %sub87
  br i1 %cmp88, label %land.lhs.true90, label %if.end114

land.lhs.true90:                                  ; preds = %land.lhs.true86
  %66 = load i8*, i8** %sv, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx91 = getelementptr inbounds i8, i8* %66, i32 %67
  %68 = load i8, i8* %arrayidx91, align 1
  %tobool92 = icmp ne i8 %68, 0
  br i1 %tobool92, label %if.end114, label %land.lhs.true93

land.lhs.true93:                                  ; preds = %land.lhs.true90
  %69 = load i8*, i8** %sv, align 4
  %70 = load i32, i32* %i, align 4
  %sub94 = sub nsw i32 %70, 6
  %arrayidx95 = getelementptr inbounds i8, i8* %69, i32 %sub94
  %71 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %71 to i32
  %tobool97 = icmp ne i32 %conv96, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.end114

land.lhs.true98:                                  ; preds = %land.lhs.true93
  %72 = load i8*, i8** %sv, align 4
  %73 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %73, 6
  %arrayidx100 = getelementptr inbounds i8, i8* %72, i32 %add99
  %74 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %74 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br i1 %tobool102, label %if.then103, label %if.end114

if.then103:                                       ; preds = %land.lhs.true98
  %75 = load i32, i32* %un, align 4
  %inc104 = add nsw i32 %75, 1
  store i32 %inc104, i32* %un, align 4
  %76 = load i32, i32* %un, align 4
  %77 = load i32, i32* %unsexy, align 4
  %78 = load i32, i32* %lun, align 4
  %sub105 = sub nsw i32 %77, %78
  %cmp106 = icmp sgt i32 %76, %sub105
  br i1 %cmp106, label %if.then108, label %if.end113

if.then108:                                       ; preds = %if.then103
  %79 = load i32, i32* %i, align 4
  %80 = load i32, i32* %un, align 4
  %81 = load i32, i32* %lun, align 4
  %add109 = add nsw i32 %80, %81
  %sub110 = sub nsw i32 %add109, 1
  %82 = load i32, i32* %unsexy, align 4
  %sub111 = sub nsw i32 %sub110, %82
  %arrayidx112 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 %sub111
  store i32 %79, i32* %arrayidx112, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.then108, %if.then103
  br label %for.inc231

if.end114:                                        ; preds = %land.lhs.true98, %land.lhs.true93, %land.lhs.true90, %land.lhs.true86, %for.body83
  %83 = load i32, i32* %i, align 4
  %84 = load i32, i32* %lim, align 4
  %sub115 = sub nsw i32 %84, 6
  %cmp116 = icmp slt i32 %83, %sub115
  br i1 %cmp116, label %land.lhs.true118, label %if.else140

land.lhs.true118:                                 ; preds = %if.end114
  %85 = load i8*, i8** %sv, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx119 = getelementptr inbounds i8, i8* %85, i32 %86
  %87 = load i8, i8* %arrayidx119, align 1
  %tobool120 = icmp ne i8 %87, 0
  br i1 %tobool120, label %if.else140, label %land.lhs.true121

land.lhs.true121:                                 ; preds = %land.lhs.true118
  %88 = load i8*, i8** %sv, align 4
  %89 = load i32, i32* %i, align 4
  %add122 = add nsw i32 %89, 6
  %arrayidx123 = getelementptr inbounds i8, i8* %88, i32 %add122
  %90 = load i8, i8* %arrayidx123, align 1
  %tobool124 = icmp ne i8 %90, 0
  br i1 %tobool124, label %if.else140, label %if.then125

if.then125:                                       ; preds = %land.lhs.true121
  %91 = load i32, i32* %pr, align 4
  %inc126 = add nsw i32 %91, 1
  store i32 %inc126, i32* %pr, align 4
  %92 = load i32, i32* %pr, align 4
  %93 = load i32, i32* %pairs, align 4
  %94 = load i32, i32* %lpr, align 4
  %sub127 = sub nsw i32 %93, %94
  %cmp128 = icmp sgt i32 %92, %sub127
  br i1 %cmp128, label %if.then130, label %if.end139

if.then130:                                       ; preds = %if.then125
  %95 = load i32, i32* %pr, align 4
  %96 = load i32, i32* %lpr, align 4
  %add131 = add nsw i32 %95, %96
  %sub132 = sub nsw i32 %add131, 1
  %97 = load i32, i32* %pairs, align 4
  %sub133 = sub nsw i32 %sub132, %97
  store i32 %sub133, i32* %ix, align 4
  %98 = load i32, i32* %i, align 4
  %99 = load i32, i32* %ix, align 4
  %arrayidx134 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %99
  %arrayidx135 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx134, i32 0, i32 0
  store i32 %98, i32* %arrayidx135, align 8
  %100 = load i32, i32* %i, align 4
  %add136 = add nsw i32 %100, 6
  %101 = load i32, i32* %ix, align 4
  %arrayidx137 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %101
  %arrayidx138 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx137, i32 0, i32 1
  store i32 %add136, i32* %arrayidx138, align 4
  br label %if.end139

if.end139:                                        ; preds = %if.then130, %if.then125
  br label %if.end141

if.else140:                                       ; preds = %land.lhs.true121, %land.lhs.true118, %if.end114
  br label %for.inc231

if.end141:                                        ; preds = %if.end139
  %102 = load i32, i32* %i, align 4
  %103 = load i32, i32* %lim, align 4
  %sub142 = sub nsw i32 %103, 12
  %cmp143 = icmp slt i32 %102, %sub142
  br i1 %cmp143, label %land.lhs.true145, label %if.else167

land.lhs.true145:                                 ; preds = %if.end141
  %104 = load i8*, i8** %sv, align 4
  %105 = load i32, i32* %i, align 4
  %add146 = add nsw i32 %105, 12
  %arrayidx147 = getelementptr inbounds i8, i8* %104, i32 %add146
  %106 = load i8, i8* %arrayidx147, align 1
  %tobool148 = icmp ne i8 %106, 0
  br i1 %tobool148, label %if.else167, label %if.then149

if.then149:                                       ; preds = %land.lhs.true145
  %107 = load i32, i32* %tr, align 4
  %inc150 = add nsw i32 %107, 1
  store i32 %inc150, i32* %tr, align 4
  %108 = load i32, i32* %tr, align 4
  %109 = load i32, i32* %trips, align 4
  %110 = load i32, i32* %ltr, align 4
  %sub151 = sub nsw i32 %109, %110
  %cmp152 = icmp sgt i32 %108, %sub151
  br i1 %cmp152, label %if.then154, label %if.end166

if.then154:                                       ; preds = %if.then149
  %111 = load i32, i32* %tr, align 4
  %112 = load i32, i32* %ltr, align 4
  %add155 = add nsw i32 %111, %112
  %sub156 = sub nsw i32 %add155, 1
  %113 = load i32, i32* %trips, align 4
  %sub157 = sub nsw i32 %sub156, %113
  store i32 %sub157, i32* %ix, align 4
  %114 = load i32, i32* %i, align 4
  %115 = load i32, i32* %ix, align 4
  %arrayidx158 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %115
  %arrayidx159 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx158, i32 0, i32 0
  store i32 %114, i32* %arrayidx159, align 4
  %116 = load i32, i32* %i, align 4
  %add160 = add nsw i32 %116, 6
  %117 = load i32, i32* %ix, align 4
  %arrayidx161 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %117
  %arrayidx162 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx161, i32 0, i32 1
  store i32 %add160, i32* %arrayidx162, align 4
  %118 = load i32, i32* %i, align 4
  %add163 = add nsw i32 %118, 12
  %119 = load i32, i32* %ix, align 4
  %arrayidx164 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %119
  %arrayidx165 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx164, i32 0, i32 2
  store i32 %add163, i32* %arrayidx165, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.then154, %if.then149
  br label %if.end168

if.else167:                                       ; preds = %land.lhs.true145, %if.end141
  br label %for.inc231

if.end168:                                        ; preds = %if.end166
  %120 = load i32, i32* %i, align 4
  %121 = load i32, i32* %lim, align 4
  %sub169 = sub nsw i32 %121, 18
  %cmp170 = icmp slt i32 %120, %sub169
  br i1 %cmp170, label %land.lhs.true172, label %if.else197

land.lhs.true172:                                 ; preds = %if.end168
  %122 = load i8*, i8** %sv, align 4
  %123 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %123, 18
  %arrayidx174 = getelementptr inbounds i8, i8* %122, i32 %add173
  %124 = load i8, i8* %arrayidx174, align 1
  %tobool175 = icmp ne i8 %124, 0
  br i1 %tobool175, label %if.else197, label %if.then176

if.then176:                                       ; preds = %land.lhs.true172
  %125 = load i32, i32* %qd, align 4
  %inc177 = add nsw i32 %125, 1
  store i32 %inc177, i32* %qd, align 4
  %126 = load i32, i32* %qd, align 4
  %127 = load i32, i32* %quads, align 4
  %128 = load i32, i32* %lqd, align 4
  %sub178 = sub nsw i32 %127, %128
  %cmp179 = icmp sgt i32 %126, %sub178
  br i1 %cmp179, label %if.then181, label %if.end196

if.then181:                                       ; preds = %if.then176
  %129 = load i32, i32* %qd, align 4
  %130 = load i32, i32* %lqd, align 4
  %add182 = add nsw i32 %129, %130
  %sub183 = sub nsw i32 %add182, 1
  %131 = load i32, i32* %quads, align 4
  %sub184 = sub nsw i32 %sub183, %131
  store i32 %sub184, i32* %ix, align 4
  %132 = load i32, i32* %i, align 4
  %133 = load i32, i32* %ix, align 4
  %arrayidx185 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %133
  %arrayidx186 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx185, i32 0, i32 0
  store i32 %132, i32* %arrayidx186, align 16
  %134 = load i32, i32* %i, align 4
  %add187 = add nsw i32 %134, 6
  %135 = load i32, i32* %ix, align 4
  %arrayidx188 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %135
  %arrayidx189 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx188, i32 0, i32 1
  store i32 %add187, i32* %arrayidx189, align 4
  %136 = load i32, i32* %i, align 4
  %add190 = add nsw i32 %136, 12
  %137 = load i32, i32* %ix, align 4
  %arrayidx191 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %137
  %arrayidx192 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx191, i32 0, i32 2
  store i32 %add190, i32* %arrayidx192, align 8
  %138 = load i32, i32* %i, align 4
  %add193 = add nsw i32 %138, 18
  %139 = load i32, i32* %ix, align 4
  %arrayidx194 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %139
  %arrayidx195 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx194, i32 0, i32 3
  store i32 %add193, i32* %arrayidx195, align 4
  br label %if.end196

if.end196:                                        ; preds = %if.then181, %if.then176
  br label %if.end198

if.else197:                                       ; preds = %land.lhs.true172, %if.end168
  br label %for.inc231

if.end198:                                        ; preds = %if.end196
  %140 = load i32, i32* %i, align 4
  %141 = load i32, i32* %lim, align 4
  %sub199 = sub nsw i32 %141, 24
  %cmp200 = icmp slt i32 %140, %sub199
  br i1 %cmp200, label %land.lhs.true202, label %if.end230

land.lhs.true202:                                 ; preds = %if.end198
  %142 = load i8*, i8** %sv, align 4
  %143 = load i32, i32* %i, align 4
  %add203 = add nsw i32 %143, 24
  %arrayidx204 = getelementptr inbounds i8, i8* %142, i32 %add203
  %144 = load i8, i8* %arrayidx204, align 1
  %tobool205 = icmp ne i8 %144, 0
  br i1 %tobool205, label %if.end230, label %if.then206

if.then206:                                       ; preds = %land.lhs.true202
  %145 = load i32, i32* %qn, align 4
  %inc207 = add nsw i32 %145, 1
  store i32 %inc207, i32* %qn, align 4
  %146 = load i32, i32* %qn, align 4
  %147 = load i32, i32* %quins, align 4
  %148 = load i32, i32* %lqn, align 4
  %sub208 = sub nsw i32 %147, %148
  %cmp209 = icmp sgt i32 %146, %sub208
  br i1 %cmp209, label %if.then211, label %if.end229

if.then211:                                       ; preds = %if.then206
  %149 = load i32, i32* %qn, align 4
  %150 = load i32, i32* %lqn, align 4
  %add212 = add nsw i32 %149, %150
  %sub213 = sub nsw i32 %add212, 1
  %151 = load i32, i32* %quins, align 4
  %sub214 = sub nsw i32 %sub213, %151
  store i32 %sub214, i32* %ix, align 4
  %152 = load i32, i32* %i, align 4
  %153 = load i32, i32* %ix, align 4
  %arrayidx215 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %153
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx215, i32 0, i32 0
  store i32 %152, i32* %arrayidx216, align 4
  %154 = load i32, i32* %i, align 4
  %add217 = add nsw i32 %154, 6
  %155 = load i32, i32* %ix, align 4
  %arrayidx218 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %155
  %arrayidx219 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx218, i32 0, i32 1
  store i32 %add217, i32* %arrayidx219, align 4
  %156 = load i32, i32* %i, align 4
  %add220 = add nsw i32 %156, 12
  %157 = load i32, i32* %ix, align 4
  %arrayidx221 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %157
  %arrayidx222 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx221, i32 0, i32 2
  store i32 %add220, i32* %arrayidx222, align 4
  %158 = load i32, i32* %i, align 4
  %add223 = add nsw i32 %158, 18
  %159 = load i32, i32* %ix, align 4
  %arrayidx224 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %159
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx224, i32 0, i32 3
  store i32 %add223, i32* %arrayidx225, align 4
  %160 = load i32, i32* %i, align 4
  %add226 = add nsw i32 %160, 24
  %161 = load i32, i32* %ix, align 4
  %arrayidx227 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %161
  %arrayidx228 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx227, i32 0, i32 4
  store i32 %add226, i32* %arrayidx228, align 4
  br label %if.end229

if.end229:                                        ; preds = %if.then211, %if.then206
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %land.lhs.true202, %if.end198
  br label %for.inc231

for.inc231:                                       ; preds = %if.end230, %if.else197, %if.else167, %if.else140, %if.end113
  %162 = load i32, i32* %i, align 4
  %add232 = add nsw i32 %162, 2
  store i32 %add232, i32* %i, align 4
  br label %for.cond80

for.end233:                                       ; preds = %for.cond80
  %163 = load i32, i32* %pairs, align 4
  %164 = load i32, i32* %lim, align 4
  %165 = load i32, i32* %lpr, align 4
  call void @printHelper(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 %163, i32 %164, i32 %165)
  %call234 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond235

for.cond235:                                      ; preds = %for.inc241, %for.end233
  %166 = load i32, i32* %i, align 4
  %167 = load i32, i32* %lpr, align 4
  %cmp236 = icmp slt i32 %166, %167
  br i1 %cmp236, label %for.body238, label %for.end243

for.body238:                                      ; preds = %for.cond235
  %168 = load i32, i32* %i, align 4
  %arrayidx239 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* %last_pr, i32 0, i32 %168
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx239, i32 0, i32 0
  call void @printArray(i32* %arraydecay, i32 2)
  %call240 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc241

for.inc241:                                       ; preds = %for.body238
  %169 = load i32, i32* %i, align 4
  %inc242 = add nsw i32 %169, 1
  store i32 %inc242, i32* %i, align 4
  br label %for.cond235

for.end243:                                       ; preds = %for.cond235
  %call244 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %170 = load i32, i32* %trips, align 4
  %171 = load i32, i32* %lim, align 4
  %172 = load i32, i32* %ltr, align 4
  call void @printHelper(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 %170, i32 %171, i32 %172)
  %call245 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond246

for.cond246:                                      ; preds = %for.inc253, %for.end243
  %173 = load i32, i32* %i, align 4
  %174 = load i32, i32* %ltr, align 4
  %cmp247 = icmp slt i32 %173, %174
  br i1 %cmp247, label %for.body249, label %for.end255

for.body249:                                      ; preds = %for.cond246
  %175 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* %last_tr, i32 0, i32 %175
  %arraydecay251 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx250, i32 0, i32 0
  call void @printArray(i32* %arraydecay251, i32 3)
  %call252 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc253

for.inc253:                                       ; preds = %for.body249
  %176 = load i32, i32* %i, align 4
  %inc254 = add nsw i32 %176, 1
  store i32 %inc254, i32* %i, align 4
  br label %for.cond246

for.end255:                                       ; preds = %for.cond246
  %call256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %177 = load i32, i32* %quads, align 4
  %178 = load i32, i32* %lim, align 4
  %179 = load i32, i32* %lqd, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 %177, i32 %178, i32 %179)
  %call257 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond258

for.cond258:                                      ; preds = %for.inc265, %for.end255
  %180 = load i32, i32* %i, align 4
  %181 = load i32, i32* %lqd, align 4
  %cmp259 = icmp slt i32 %180, %181
  br i1 %cmp259, label %for.body261, label %for.end267

for.body261:                                      ; preds = %for.cond258
  %182 = load i32, i32* %i, align 4
  %arrayidx262 = getelementptr inbounds [5 x [4 x i32]], [5 x [4 x i32]]* %last_qd, i32 0, i32 %182
  %arraydecay263 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx262, i32 0, i32 0
  call void @printArray(i32* %arraydecay263, i32 4)
  %call264 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc265

for.inc265:                                       ; preds = %for.body261
  %183 = load i32, i32* %i, align 4
  %inc266 = add nsw i32 %183, 1
  store i32 %inc266, i32* %i, align 4
  br label %for.cond258

for.end267:                                       ; preds = %for.cond258
  %call268 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %184 = load i32, i32* %quins, align 4
  %185 = load i32, i32* %lim, align 4
  %186 = load i32, i32* %lqn, align 4
  call void @printHelper(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i32 %184, i32 %185, i32 %186)
  %call269 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond270

for.cond270:                                      ; preds = %for.inc277, %for.end267
  %187 = load i32, i32* %i, align 4
  %188 = load i32, i32* %lqn, align 4
  %cmp271 = icmp slt i32 %187, %188
  br i1 %cmp271, label %for.body273, label %for.end279

for.body273:                                      ; preds = %for.cond270
  %189 = load i32, i32* %i, align 4
  %arrayidx274 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %last_qn, i32 0, i32 %189
  %arraydecay275 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx274, i32 0, i32 0
  call void @printArray(i32* %arraydecay275, i32 5)
  %call276 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  br label %for.inc277

for.inc277:                                       ; preds = %for.body273
  %190 = load i32, i32* %i, align 4
  %inc278 = add nsw i32 %190, 1
  store i32 %inc278, i32* %i, align 4
  br label %for.cond270

for.end279:                                       ; preds = %for.cond270
  %call280 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %191 = load i32, i32* %unsexy, align 4
  %192 = load i32, i32* %lim, align 4
  %193 = load i32, i32* %lun, align 4
  call void @printHelper(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32 %191, i32 %192, i32 %193)
  %call281 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0))
  %arraydecay282 = getelementptr inbounds [10 x i32], [10 x i32]* %last_un, i32 0, i32 0
  %194 = load i32, i32* %lun, align 4
  call void @printArray(i32* %arraydecay282, i32 %194)
  %call283 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0))
  %195 = load i8*, i8** %sv, align 4
  call void @free(i8* %195)
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i8* @setlocale(i32 %0, i8* %1) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %5, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub nsw i32 %7, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %6, %sub3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 6:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %10, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %12, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx8, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %15, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %arrayidx11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv12 = zext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool13 = icmp ne i32 %conv12, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %unsexy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %19, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp15 = icmp slt i32 %18, %sub14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 6:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %arrayidx18, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool19 = icmp ne i8 %22, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add21 = add nsw i32 %24, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i8, i8* %arrayidx22, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool23 = icmp ne i8 %25, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %pairs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub27 = sub nsw i32 %28, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 12:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp28 = icmp slt i32 %27, %sub27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 12:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %30, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %arrayidx32, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool33 = icmp ne i8 %31, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %trips, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc35 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub38 = sub nsw i32 %34, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 18:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp39 = icmp slt i32 %33, %sub38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 18:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add42 = add nsw i32 %36, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i8, i8* %arrayidx43, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool44 = icmp ne i8 %37, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %quads, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc46 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub49 = sub nsw i32 %40, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 24:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp50 = icmp slt i32 %39, %sub49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 24:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add53 = add nsw i32 %42, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %arrayidx54, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool55 = icmp ne i8 %43, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %quins, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc57 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add59 = add nsw i32 %45, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %pairs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %lpr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp60 = icmp slt i32 %46, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %pairs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %trips, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %ltr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp64 = icmp slt i32 %49, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %trips, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %quads, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %lqd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp68 = icmp slt i32 %52, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %quads, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %quins, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %lqn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp72 = icmp slt i32 %55, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %quins, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %unsexy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %lun, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp76 = icmp slt i32 %58, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %unsexy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp81 = icmp slt i32 %61, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp84 = icmp sgt i32 %63, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub87 = sub nsw i32 %65, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp88 = icmp slt i32 %64, %sub87
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 6:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i8, i8* %arrayidx91, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool92 = icmp ne i8 %68, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub94 = sub nsw i32 %70, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %71 = load i8, i8* %arrayidx95, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv96 = zext i8 %71 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool97 = icmp ne i32 %conv96, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add99 = add nsw i32 %73, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i8, i8* %arrayidx100, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv101 = zext i8 %74 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool102 = icmp ne i32 %conv101, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %un, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc104 = add nsw i32 %75, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %un, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %unsexy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %lun, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub105 = sub nsw i32 %77, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp106 = icmp sgt i32 %76, %sub105
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %un, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %lun, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add109 = add nsw i32 %80, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub110 = sub nsw i32 %add109, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %unsexy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub111 = sub nsw i32 %sub110, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
%4:i32 = var
%5:i32 = subnsw %3, %4
infer %5

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub115 = sub nsw i32 %84, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp116 = icmp slt i32 %83, %sub115
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 6:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %87 = load i8, i8* %arrayidx119, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool120 = icmp ne i8 %87, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %89 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add122 = add nsw i32 %89, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %90 = load i8, i8* %arrayidx123, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool124 = icmp ne i8 %90, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %91 = load i32, i32* %pr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc126 = add nsw i32 %91, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %92 = load i32, i32* %pr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %pairs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %94 = load i32, i32* %lpr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub127 = sub nsw i32 %93, %94
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp128 = icmp sgt i32 %92, %sub127
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4

; *****
; For LLVM instruction:
;  %95 = load i32, i32* %pr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %96 = load i32, i32* %lpr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add131 = add nsw i32 %95, %96
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub132 = sub nsw i32 %add131, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3

; *****
; For LLVM instruction:
;  %97 = load i32, i32* %pairs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub133 = sub nsw i32 %sub132, %97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
%4:i32 = var
%5:i32 = subnsw %3, %4
infer %5

; *****
; For LLVM instruction:
;  %98 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %99 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add136 = add nsw i32 %100, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %101 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %102 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %103 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub142 = sub nsw i32 %103, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 12:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp143 = icmp slt i32 %102, %sub142
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 12:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %105 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add146 = add nsw i32 %105, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %106 = load i8, i8* %arrayidx147, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool148 = icmp ne i8 %106, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %107 = load i32, i32* %tr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc150 = add nsw i32 %107, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %108 = load i32, i32* %tr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %109 = load i32, i32* %trips, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %110 = load i32, i32* %ltr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub151 = sub nsw i32 %109, %110
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp152 = icmp sgt i32 %108, %sub151
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4

; *****
; For LLVM instruction:
;  %111 = load i32, i32* %tr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %112 = load i32, i32* %ltr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add155 = add nsw i32 %111, %112
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub156 = sub nsw i32 %add155, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3

; *****
; For LLVM instruction:
;  %113 = load i32, i32* %trips, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub157 = sub nsw i32 %sub156, %113
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
%4:i32 = var
%5:i32 = subnsw %3, %4
infer %5

; *****
; For LLVM instruction:
;  %114 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %115 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %116 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add160 = add nsw i32 %116, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %117 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %118 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add163 = add nsw i32 %118, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %119 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %120 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %121 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub169 = sub nsw i32 %121, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 18:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp170 = icmp slt i32 %120, %sub169
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 18:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %123 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add173 = add nsw i32 %123, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %124 = load i8, i8* %arrayidx174, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool175 = icmp ne i8 %124, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %125 = load i32, i32* %qd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc177 = add nsw i32 %125, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %126 = load i32, i32* %qd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %127 = load i32, i32* %quads, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %128 = load i32, i32* %lqd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub178 = sub nsw i32 %127, %128
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp179 = icmp sgt i32 %126, %sub178
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4

; *****
; For LLVM instruction:
;  %129 = load i32, i32* %qd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %130 = load i32, i32* %lqd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add182 = add nsw i32 %129, %130
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub183 = sub nsw i32 %add182, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3

; *****
; For LLVM instruction:
;  %131 = load i32, i32* %quads, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub184 = sub nsw i32 %sub183, %131
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
%4:i32 = var
%5:i32 = subnsw %3, %4
infer %5

; *****
; For LLVM instruction:
;  %132 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %133 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %134 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add187 = add nsw i32 %134, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %135 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %136 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add190 = add nsw i32 %136, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %137 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %138 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add193 = add nsw i32 %138, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %139 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %140 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %141 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub199 = sub nsw i32 %141, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 24:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp200 = icmp slt i32 %140, %sub199
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 24:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %143 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add203 = add nsw i32 %143, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %144 = load i8, i8* %arrayidx204, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool205 = icmp ne i8 %144, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %145 = load i32, i32* %qn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc207 = add nsw i32 %145, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %146 = load i32, i32* %qn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %147 = load i32, i32* %quins, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %148 = load i32, i32* %lqn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub208 = sub nsw i32 %147, %148
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp209 = icmp sgt i32 %146, %sub208
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4

; *****
; For LLVM instruction:
;  %149 = load i32, i32* %qn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %150 = load i32, i32* %lqn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add212 = add nsw i32 %149, %150
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub213 = sub nsw i32 %add212, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3

; *****
; For LLVM instruction:
;  %151 = load i32, i32* %quins, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub214 = sub nsw i32 %sub213, %151
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
%4:i32 = var
%5:i32 = subnsw %3, %4
infer %5

; *****
; For LLVM instruction:
;  %152 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %153 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %154 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add217 = add nsw i32 %154, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %155 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %156 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add220 = add nsw i32 %156, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %157 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %158 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add223 = add nsw i32 %158, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %159 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %160 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add226 = add nsw i32 %160, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %161 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %162 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add232 = add nsw i32 %162, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %163 = load i32, i32* %pairs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %164 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %165 = load i32, i32* %lpr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %166 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %167 = load i32, i32* %lpr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp236 = icmp slt i32 %166, %167
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %168 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %169 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc242 = add nsw i32 %169, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %170 = load i32, i32* %trips, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %171 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %172 = load i32, i32* %ltr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %173 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %174 = load i32, i32* %ltr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp247 = icmp slt i32 %173, %174
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %175 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %176 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc254 = add nsw i32 %176, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %177 = load i32, i32* %quads, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %178 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %179 = load i32, i32* %lqd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %180 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %181 = load i32, i32* %lqd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp259 = icmp slt i32 %180, %181
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %182 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %183 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc266 = add nsw i32 %183, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %184 = load i32, i32* %quins, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %185 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %186 = load i32, i32* %lqn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %187 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %188 = load i32, i32* %lqn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp271 = icmp slt i32 %187, %188
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %189 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %190 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc278 = add nsw i32 %190, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %191 = load i32, i32* %unsexy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %192 = load i32, i32* %lim, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %193 = load i32, i32* %lun, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %194 = load i32, i32* %lun, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 5:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -6
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 6:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 12:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -12
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 12:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 12:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 12
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 13
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 18:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -18
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 6
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 18:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 18:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 18
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 22
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 24:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -24
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 24:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 24:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 24
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 26
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1094735187
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32
%4:i32 = var
%5:i32 = subnsw %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 589274382
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = subnsw %2, 1:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
