
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for tree()

; ModuleID = './Visualize_a_tree.c.bc'
source_filename = "./Visualize_a_tree.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.stem_t = type { i8*, %struct.stem_t* }

@tree.sdown = internal global i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), align 4
@.str = private unnamed_addr constant [4 x i8] c"  |\00", align 1
@tree.slast = internal global i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"  `\00", align 1
@tree.snone = internal global i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), align 4
@.str.2 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"--%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @tree(i32 %root, %struct.stem_t* %head) #0 {
entry:
  %root.addr = alloca i32, align 4
  %head.addr = alloca %struct.stem_t*, align 4
  %col = alloca %struct.stem_t, align 4
  %tail = alloca %struct.stem_t*, align 4
  %r = alloca i32, align 4
  store i32 %root, i32* %root.addr, align 4
  store %struct.stem_t* %head, %struct.stem_t** %head.addr, align 4
  %0 = bitcast %struct.stem_t* %col to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.stem_t*, %struct.stem_t** %head.addr, align 4
  store %struct.stem_t* %1, %struct.stem_t** %tail, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %tobool = icmp ne %struct.stem_t* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %str = getelementptr inbounds %struct.stem_t, %struct.stem_t* %3, i32 0, i32 0
  %4 = load i8*, i8** %str, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* %4)
  %5 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next = getelementptr inbounds %struct.stem_t, %struct.stem_t* %5, i32 0, i32 1
  %6 = load %struct.stem_t*, %struct.stem_t** %next, align 4
  %tobool1 = icmp ne %struct.stem_t* %6, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next2 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %7, i32 0, i32 1
  %8 = load %struct.stem_t*, %struct.stem_t** %next2, align 4
  store %struct.stem_t* %8, %struct.stem_t** %tail, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %9 = load i32, i32* %root.addr, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i32 %9)
  %10 = load i32, i32* %root.addr, align 4
  %cmp = icmp sle i32 %10, 1
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %for.end
  br label %return

if.end5:                                          ; preds = %for.end
  %11 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %tobool6 = icmp ne %struct.stem_t* %11, null
  br i1 %tobool6, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end5
  %12 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %str7 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %12, i32 0, i32 0
  %13 = load i8*, i8** %str7, align 4
  %14 = load i8*, i8** @tree.slast, align 4
  %cmp8 = icmp eq i8* %13, %14
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %land.lhs.true
  %15 = load i8*, i8** @tree.snone, align 4
  %16 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %str10 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %16, i32 0, i32 0
  store i8* %15, i8** %str10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %land.lhs.true, %if.end5
  %17 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %tobool12 = icmp ne %struct.stem_t* %17, null
  br i1 %tobool12, label %if.else, label %if.then13

if.then13:                                        ; preds = %if.end11
  store %struct.stem_t* %col, %struct.stem_t** %head.addr, align 4
  store %struct.stem_t* %col, %struct.stem_t** %tail, align 4
  br label %if.end15

if.else:                                          ; preds = %if.end11
  %18 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next14 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %18, i32 0, i32 1
  store %struct.stem_t* %col, %struct.stem_t** %next14, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then13
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %if.end15
  %19 = load i32, i32* %root.addr, align 4
  %tobool16 = icmp ne i32 %19, 0
  br i1 %tobool16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call17 = call i32 @rand()
  %20 = load i32, i32* %root.addr, align 4
  %rem = srem i32 %call17, %20
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %root.addr, align 4
  %sub = sub nsw i32 %22, %21
  store i32 %sub, i32* %root.addr, align 4
  %23 = load i32, i32* %root.addr, align 4
  %tobool18 = icmp ne i32 %23, 0
  br i1 %tobool18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %24 = load i8*, i8** @tree.sdown, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %25 = load i8*, i8** @tree.slast, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %24, %cond.true ], [ %25, %cond.false ]
  %str19 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %col, i32 0, i32 0
  store i8* %cond, i8** %str19, align 4
  %26 = load i32, i32* %r, align 4
  %27 = load %struct.stem_t*, %struct.stem_t** %head.addr, align 4
  call void @tree(i32 %26, %struct.stem_t* %27)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %28 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next20 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %28, i32 0, i32 1
  store %struct.stem_t* null, %struct.stem_t** %next20, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

declare i32 @rand() #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp slt i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 8, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  call void @tree(i32 %3, %struct.stem_t* null)
  ret i32 0
}

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.stem_t* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne %struct.stem_t* %6, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %root.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %root.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne %struct.stem_t* %11, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i8* %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool12 = icmp ne %struct.stem_t* %17, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %root.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool16 = icmp ne i32 %19, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call17 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %root.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %call17, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 1, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %root.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %22, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %root.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool18 = icmp ne i32 %23, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 6134
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for tree()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Visualize_a_tree.c.bc'
source_filename = "./Visualize_a_tree.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.stem_t = type { i8*, %struct.stem_t* }

@tree.sdown = internal global i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), align 4
@.str = private unnamed_addr constant [4 x i8] c"  |\00", align 1
@tree.slast = internal global i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"  `\00", align 1
@tree.snone = internal global i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), align 4
@.str.2 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"--%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @tree(i32 %root, %struct.stem_t* %head) #0 {
entry:
  %root.addr = alloca i32, align 4
  %head.addr = alloca %struct.stem_t*, align 4
  %col = alloca %struct.stem_t, align 4
  %tail = alloca %struct.stem_t*, align 4
  %r = alloca i32, align 4
  store i32 %root, i32* %root.addr, align 4
  store %struct.stem_t* %head, %struct.stem_t** %head.addr, align 4
  %0 = bitcast %struct.stem_t* %col to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load %struct.stem_t*, %struct.stem_t** %head.addr, align 4
  store %struct.stem_t* %1, %struct.stem_t** %tail, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %tobool = icmp ne %struct.stem_t* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %str = getelementptr inbounds %struct.stem_t, %struct.stem_t* %3, i32 0, i32 0
  %4 = load i8*, i8** %str, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* %4)
  %5 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next = getelementptr inbounds %struct.stem_t, %struct.stem_t* %5, i32 0, i32 1
  %6 = load %struct.stem_t*, %struct.stem_t** %next, align 4
  %tobool1 = icmp ne %struct.stem_t* %6, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next2 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %7, i32 0, i32 1
  %8 = load %struct.stem_t*, %struct.stem_t** %next2, align 4
  store %struct.stem_t* %8, %struct.stem_t** %tail, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %9 = load i32, i32* %root.addr, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i32 %9)
  %10 = load i32, i32* %root.addr, align 4
  %cmp = icmp sle i32 %10, 1
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %for.end
  br label %return

if.end5:                                          ; preds = %for.end
  %11 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %tobool6 = icmp ne %struct.stem_t* %11, null
  br i1 %tobool6, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end5
  %12 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %str7 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %12, i32 0, i32 0
  %13 = load i8*, i8** %str7, align 4
  %14 = load i8*, i8** @tree.slast, align 4
  %cmp8 = icmp eq i8* %13, %14
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %land.lhs.true
  %15 = load i8*, i8** @tree.snone, align 4
  %16 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %str10 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %16, i32 0, i32 0
  store i8* %15, i8** %str10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %land.lhs.true, %if.end5
  %17 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %tobool12 = icmp ne %struct.stem_t* %17, null
  br i1 %tobool12, label %if.else, label %if.then13

if.then13:                                        ; preds = %if.end11
  store %struct.stem_t* %col, %struct.stem_t** %head.addr, align 4
  store %struct.stem_t* %col, %struct.stem_t** %tail, align 4
  br label %if.end15

if.else:                                          ; preds = %if.end11
  %18 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next14 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %18, i32 0, i32 1
  store %struct.stem_t* %col, %struct.stem_t** %next14, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then13
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %if.end15
  %19 = load i32, i32* %root.addr, align 4
  %tobool16 = icmp ne i32 %19, 0
  br i1 %tobool16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call17 = call i32 @rand()
  %20 = load i32, i32* %root.addr, align 4
  %rem = srem i32 %call17, %20
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %root.addr, align 4
  %sub = sub nsw i32 %22, %21
  store i32 %sub, i32* %root.addr, align 4
  %23 = load i32, i32* %root.addr, align 4
  %tobool18 = icmp ne i32 %23, 0
  br i1 %tobool18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %24 = load i8*, i8** @tree.sdown, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %25 = load i8*, i8** @tree.slast, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %24, %cond.true ], [ %25, %cond.false ]
  %str19 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %col, i32 0, i32 0
  store i8* %cond, i8** %str19, align 4
  %26 = load i32, i32* %r, align 4
  %27 = load %struct.stem_t*, %struct.stem_t** %head.addr, align 4
  call void @tree(i32 %26, %struct.stem_t* %27)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %28 = load %struct.stem_t*, %struct.stem_t** %tail, align 4
  %next20 = getelementptr inbounds %struct.stem_t, %struct.stem_t* %28, i32 0, i32 1
  store %struct.stem_t* null, %struct.stem_t** %next20, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

declare i32 @rand() #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp slt i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 8, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  call void @tree(i32 %3, %struct.stem_t* null)
  ret i32 0
}

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
