
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for showCake()

; ModuleID = './Deepcopy.c.bc'
source_filename = "./Deepcopy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.layer3 = type { %struct.layer2, %struct.layer1, i32, i32 }
%struct.layer2 = type { %struct.layer1, float, float }
%struct.layer1 = type { i32 }

@.str = private unnamed_addr constant [13 x i8] c"\0Acake.d = %d\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0Acake.e = %d\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"\0Acake.l1.a = %d\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\0Acake.l2.b = %f\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"\0Acake.l2.l1.a = %d\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"Cake 1 is : \00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"\0ACake 2 is : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @showCake(%struct.layer3* byval(%struct.layer3) align 4 %cake) #0 {
entry:
  %d = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 2
  %0 = load i32, i32* %d, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32 %0)
  %e = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 3
  %1 = load i32, i32* %e, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 %1)
  %l1 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 1
  %a = getelementptr inbounds %struct.layer1, %struct.layer1* %l1, i32 0, i32 0
  %2 = load i32, i32* %a, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), i32 %2)
  %l2 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 0
  %b = getelementptr inbounds %struct.layer2, %struct.layer2* %l2, i32 0, i32 1
  %3 = load float, float* %b, align 4
  %conv = fpext float %3 to double
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), double %conv)
  %l24 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 0
  %l15 = getelementptr inbounds %struct.layer2, %struct.layer2* %l24, i32 0, i32 0
  %a6 = getelementptr inbounds %struct.layer1, %struct.layer1* %l15, i32 0, i32 0
  %4 = load i32, i32* %a6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 %4)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %cake1 = alloca %struct.layer3, align 4
  %cake2 = alloca %struct.layer3, align 4
  store i32 0, i32* %retval, align 4
  %d = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 2
  store i32 1, i32* %d, align 4
  %e = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 3
  store i32 2, i32* %e, align 4
  %l1 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 1
  %a = getelementptr inbounds %struct.layer1, %struct.layer1* %l1, i32 0, i32 0
  store i32 3, i32* %a, align 4
  %l2 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 0
  %b = getelementptr inbounds %struct.layer2, %struct.layer2* %l2, i32 0, i32 1
  store float 4.000000e+00, float* %b, align 4
  %l21 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 0
  %l12 = getelementptr inbounds %struct.layer2, %struct.layer2* %l21, i32 0, i32 0
  %a3 = getelementptr inbounds %struct.layer1, %struct.layer1* %l12, i32 0, i32 0
  store i32 5, i32* %a3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0))
  call void @showCake(%struct.layer3* byval(%struct.layer3) align 4 %cake1)
  %0 = bitcast %struct.layer3* %cake2 to i8*
  %1 = bitcast %struct.layer3* %cake1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 24, i1 false)
  %l24 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake2, i32 0, i32 0
  %l15 = getelementptr inbounds %struct.layer2, %struct.layer2* %l24, i32 0, i32 0
  %a6 = getelementptr inbounds %struct.layer1, %struct.layer1* %l15, i32 0, i32 0
  %2 = load i32, i32* %a6, align 4
  %conv = sitofp i32 %2 to float
  %l27 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake2, i32 0, i32 0
  %b8 = getelementptr inbounds %struct.layer2, %struct.layer2* %l27, i32 0, i32 1
  %3 = load float, float* %b8, align 4
  %add = fadd float %3, %conv
  store float %add, float* %b8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0))
  call void @showCake(%struct.layer3* byval(%struct.layer3) align 4 %cake2)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %a6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for showCake()

; entering Souper's runOnFunction() for main()

; ModuleID = './Deepcopy.c.bc'
source_filename = "./Deepcopy.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.layer3 = type { %struct.layer2, %struct.layer1, i32, i32 }
%struct.layer2 = type { %struct.layer1, float, float }
%struct.layer1 = type { i32 }

@.str = private unnamed_addr constant [13 x i8] c"\0Acake.d = %d\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\0Acake.e = %d\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"\0Acake.l1.a = %d\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\0Acake.l2.b = %f\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"\0Acake.l2.l1.a = %d\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"Cake 1 is : \00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"\0ACake 2 is : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @showCake(%struct.layer3* byval(%struct.layer3) align 4 %cake) #0 {
entry:
  %d = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 2
  %0 = load i32, i32* %d, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32 %0)
  %e = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 3
  %1 = load i32, i32* %e, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 %1)
  %l1 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 1
  %a = getelementptr inbounds %struct.layer1, %struct.layer1* %l1, i32 0, i32 0
  %2 = load i32, i32* %a, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), i32 %2)
  %l2 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 0
  %b = getelementptr inbounds %struct.layer2, %struct.layer2* %l2, i32 0, i32 1
  %3 = load float, float* %b, align 4
  %conv = fpext float %3 to double
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), double %conv)
  %l24 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake, i32 0, i32 0
  %l15 = getelementptr inbounds %struct.layer2, %struct.layer2* %l24, i32 0, i32 0
  %a6 = getelementptr inbounds %struct.layer1, %struct.layer1* %l15, i32 0, i32 0
  %4 = load i32, i32* %a6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 %4)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %cake1 = alloca %struct.layer3, align 4
  %cake2 = alloca %struct.layer3, align 4
  store i32 0, i32* %retval, align 4
  %d = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 2
  store i32 1, i32* %d, align 4
  %e = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 3
  store i32 2, i32* %e, align 4
  %l1 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 1
  %a = getelementptr inbounds %struct.layer1, %struct.layer1* %l1, i32 0, i32 0
  store i32 3, i32* %a, align 4
  %l2 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 0
  %b = getelementptr inbounds %struct.layer2, %struct.layer2* %l2, i32 0, i32 1
  store float 4.000000e+00, float* %b, align 4
  %l21 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake1, i32 0, i32 0
  %l12 = getelementptr inbounds %struct.layer2, %struct.layer2* %l21, i32 0, i32 0
  %a3 = getelementptr inbounds %struct.layer1, %struct.layer1* %l12, i32 0, i32 0
  store i32 5, i32* %a3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0))
  call void @showCake(%struct.layer3* byval(%struct.layer3) align 4 %cake1)
  %0 = bitcast %struct.layer3* %cake2 to i8*
  %1 = bitcast %struct.layer3* %cake1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 24, i1 false)
  %l24 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake2, i32 0, i32 0
  %l15 = getelementptr inbounds %struct.layer2, %struct.layer2* %l24, i32 0, i32 0
  %a6 = getelementptr inbounds %struct.layer1, %struct.layer1* %l15, i32 0, i32 0
  %2 = load i32, i32* %a6, align 4
  %conv = sitofp i32 %2 to float
  %l27 = getelementptr inbounds %struct.layer3, %struct.layer3* %cake2, i32 0, i32 0
  %b8 = getelementptr inbounds %struct.layer2, %struct.layer2* %l27, i32 0, i32 1
  %3 = load float, float* %b8, align 4
  %add = fadd float %3, %conv
  store float %add, float* %b8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0))
  call void @showCake(%struct.layer3* byval(%struct.layer3) align 4 %cake2)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
