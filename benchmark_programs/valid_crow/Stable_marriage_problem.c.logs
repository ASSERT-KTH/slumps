
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for engage()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @verbose, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for engage()

; entering Souper's runOnFunction() for dump()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @verbose, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for dump()

; entering Souper's runOnFunction() for rank()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %this.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %that.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for rank()

; entering Souper's runOnFunction() for propose()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @verbose, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %fiance, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %7, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @rank(i32 %10, i32 %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %fiance, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call5 = call i32 @rank(i32 %12, i32 %13)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %call4, %call5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %fiance, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %man.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %woman.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for propose()

; entering Souper's runOnFunction() for covet()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %wife2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @rank(i32 %0, i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @rank(i32 %2, i32 %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %call, %call1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %wife2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @rank(i32 %5, i32 %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %wife2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %wife2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @rank(i32 %7, i32 %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %call2, %call4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %wife2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %wife2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for covet()

; entering Souper's runOnFunction() for thy_neighbors_wife()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %man2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @covet(i32 %0, i32 %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %man2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %man1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @covet(i32 %3, i32 %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %call, %call2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for thy_neighbors_wife()

; entering Souper's runOnFunction() for unstable()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %2, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc5 = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %bad, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for unstable()

; entering Souper's runOnFunction() for main()

; ModuleID = './Stable_marriage_problem.c.bc'
source_filename = "./Stable_marriage_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"Abe\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Dan\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Ed\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fred\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Gav\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Hal\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Ian\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Jon\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Abi\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Bea\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Cath\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Dee\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Eve\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Fay\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Gay\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Hope\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Ivy\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@name = hidden global [20 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0)], align 16
@pref = hidden global [20 x [10 x i32]] [[10 x i32] [i32 10, i32 14, i32 12, i32 18, i32 19, i32 13, i32 15, i32 11, i32 17, i32 16], [10 x i32] [i32 12, i32 17, i32 10, i32 13, i32 14, i32 15, i32 11, i32 19, i32 18, i32 16], [10 x i32] [i32 17, i32 14, i32 10, i32 13, i32 11, i32 15, i32 18, i32 16, i32 12, i32 19], [10 x i32] [i32 18, i32 15, i32 13, i32 16, i32 17, i32 14, i32 19, i32 11, i32 12, i32 10], [10 x i32] [i32 19, i32 13, i32 11, i32 12, i32 15, i32 14, i32 10, i32 18, i32 17, i32 16], [10 x i32] [i32 11, i32 10, i32 13, i32 16, i32 14, i32 18, i32 12, i32 19, i32 17, i32 15], [10 x i32] [i32 16, i32 14, i32 18, i32 11, i32 12, i32 10, i32 13, i32 17, i32 19, i32 15], [10 x i32] [i32 10, i32 14, i32 17, i32 15, i32 18, i32 12, i32 19, i32 11, i32 16, i32 13], [10 x i32] [i32 17, i32 12, i32 13, i32 16, i32 11, i32 10, i32 15, i32 18, i32 19, i32 14], [10 x i32] [i32 10, i32 15, i32 19, i32 16, i32 14, i32 11, i32 13, i32 12, i32 18, i32 17], [10 x i32] [i32 1, i32 5, i32 9, i32 6, i32 8, i32 0, i32 3, i32 4, i32 2, i32 7], [10 x i32] [i32 1, i32 0, i32 2, i32 5, i32 6, i32 3, i32 8, i32 4, i32 9, i32 7], [10 x i32] [i32 5, i32 1, i32 4, i32 6, i32 7, i32 2, i32 8, i32 0, i32 3, i32 9], [10 x i32] [i32 5, i32 9, i32 2, i32 0, i32 8, i32 7, i32 6, i32 3, i32 1, i32 4], [10 x i32] [i32 9, i32 7, i32 5, i32 3, i32 0, i32 6, i32 2, i32 4, i32 8, i32 1], [10 x i32] [i32 1, i32 0, i32 4, i32 8, i32 9, i32 3, i32 5, i32 6, i32 2, i32 7], [10 x i32] [i32 9, i32 6, i32 7, i32 5, i32 1, i32 0, i32 2, i32 4, i32 3, i32 8], [10 x i32] [i32 6, i32 9, i32 1, i32 0, i32 8, i32 3, i32 7, i32 4, i32 2, i32 5], [10 x i32] [i32 8, i32 2, i32 7, i32 6, i32 5, i32 1, i32 0, i32 4, i32 9, i32 3], [10 x i32] [i32 4, i32 7, i32 6, i32 0, i32 1, i32 9, i32 2, i32 8, i32 5, i32 3]], align 16
@pairs = hidden global [20 x i32] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [23 x i8] c"%4s is engaged to %4s\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"%4s dumps %4s\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"%4s proposes to %4s\0A\00", align 1
@.str.23 = private unnamed_addr constant [75 x i8] c"    %4s (w/ %4s) and %4s (w/ %4s) prefer each other over current pairing.\0A\00", align 1
@proposed = hidden global [20 x i32] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [10 x i8] c"Pairing:\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  %4s - %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"clown\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Marriages not stable\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"Stable matchup\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"\0ABut if Bob and Fred were to swap:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @engage(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 %0, i32* %arrayidx, align 4
  %2 = load i32, i32* %man.addr, align 4
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  store i32 %2, i32* %arrayidx1, align 4
  %4 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %7 = load i32, i32* %woman.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0), i8* %6, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @dump(i32 %woman, i32 %man) #0 {
entry:
  %woman.addr = alloca i32, align 4
  %man.addr = alloca i32, align 4
  store i32 %woman, i32* %woman.addr, align 4
  store i32 %man, i32* %man.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  store i32 -1, i32* %arrayidx1, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx2, align 4
  %5 = load i32, i32* %man.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @rank(i32 %this, i32 %that) #0 {
entry:
  %this.addr = alloca i32, align 4
  %that.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %this, i32* %this.addr, align 4
  store i32 %that, i32* %that.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %this.addr, align 4
  %arrayidx = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx1, align 4
  %4 = load i32, i32* %that.addr, align 4
  %cmp2 = icmp ne i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i32, i32* %i, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @propose(i32 %man, i32 %woman) #0 {
entry:
  %man.addr = alloca i32, align 4
  %woman.addr = alloca i32, align 4
  %fiance = alloca i32, align 4
  store i32 %man, i32* %man.addr, align 4
  store i32 %woman, i32* %woman.addr, align 4
  %0 = load i32, i32* %woman.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %fiance, align 4
  %2 = load i32, i32* @verbose, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %man.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %woman.addr, align 4
  %arrayidx2 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i32 0, i32 0), i8* %4, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %fiance, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load i32, i32* %man.addr, align 4
  %9 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %8, i32 %9)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %woman.addr, align 4
  %11 = load i32, i32* %man.addr, align 4
  %call4 = call i32 @rank(i32 %10, i32 %11)
  %12 = load i32, i32* %woman.addr, align 4
  %13 = load i32, i32* %fiance, align 4
  %call5 = call i32 @rank(i32 %12, i32 %13)
  %cmp6 = icmp slt i32 %call4, %call5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %14 = load i32, i32* %woman.addr, align 4
  %15 = load i32, i32* %fiance, align 4
  call void @dump(i32 %14, i32 %15)
  %16 = load i32, i32* %man.addr, align 4
  %17 = load i32, i32* %woman.addr, align 4
  call void @engage(i32 %16, i32 %17)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @covet(i32 %man1, i32 %wife2) #0 {
entry:
  %retval = alloca i32, align 4
  %man1.addr = alloca i32, align 4
  %wife2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %wife2, i32* %wife2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %wife2.addr, align 4
  %call = call i32 @rank(i32 %0, i32 %1)
  %2 = load i32, i32* %man1.addr, align 4
  %3 = load i32, i32* %man1.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 @rank(i32 %2, i32 %4)
  %cmp = icmp slt i32 %call, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %wife2.addr, align 4
  %6 = load i32, i32* %man1.addr, align 4
  %call2 = call i32 @rank(i32 %5, i32 %6)
  %7 = load i32, i32* %wife2.addr, align 4
  %8 = load i32, i32* %wife2.addr, align 4
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @rank(i32 %7, i32 %9)
  %cmp5 = icmp slt i32 %call2, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %man1.addr, align 4
  %arrayidx6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx6, align 4
  %12 = load i32, i32* %man1.addr, align 4
  %arrayidx7 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx8, align 4
  %15 = load i32, i32* %wife2.addr, align 4
  %arrayidx9 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx9, align 4
  %17 = load i32, i32* %wife2.addr, align 4
  %arrayidx10 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.23, i32 0, i32 0), i8* %11, i8* %14, i8* %16, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @thy_neighbors_wife(i32 %man1, i32 %man2) #0 {
entry:
  %man1.addr = alloca i32, align 4
  %man2.addr = alloca i32, align 4
  store i32 %man1, i32* %man1.addr, align 4
  store i32 %man2, i32* %man2.addr, align 4
  %0 = load i32, i32* %man1.addr, align 4
  %1 = load i32, i32* %man2.addr, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %call = call i32 @covet(i32 %0, i32 %2)
  %3 = load i32, i32* %man2.addr, align 4
  %4 = load i32, i32* %man1.addr, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 @covet(i32 %3, i32 %5)
  %add = add nsw i32 %call, %call2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @unstable() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bad = alloca i32, align 4
  store i32 0, i32* %bad, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %j, align 4
  %call = call i32 @thy_neighbors_wife(i32 %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 1, i32* %bad, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %7 = load i32, i32* %bad, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %unengaged = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %1
  store i32 -1, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %2
  store i32 -1, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 0, i32* %unengaged, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc11, %do.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 9
  br i1 %cmp3, label %for.body4, label %for.end13

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %6, -1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  br label %for.inc11

if.end:                                           ; preds = %for.body4
  store i32 1, i32* %unengaged, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [20 x [10 x i32]], [20 x [10 x i32]]* @pref, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x i32], [20 x i32]* @proposed, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %arrayidx8, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx7, i32 0, i32 %inc9
  %11 = load i32, i32* %arrayidx10, align 4
  call void @propose(i32 %7, i32 %11)
  br label %for.inc11

for.inc11:                                        ; preds = %if.end, %if.then
  %12 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %12, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond2

for.end13:                                        ; preds = %for.cond2
  br label %do.cond

do.cond:                                          ; preds = %for.end13
  %13 = load i32, i32* %unengaged, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc23, %do.end
  %14 = load i32, i32* %i, align 4
  %cmp15 = icmp sle i32 %14, 9
  br i1 %cmp15, label %for.body16, label %for.end25

for.body16:                                       ; preds = %for.cond14
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx17, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp eq i32 %18, -1
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body16
  br label %cond.end

cond.false:                                       ; preds = %for.body16
  %19 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [20 x i32], [20 x i32]* @pairs, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [20 x i8*], [20 x i8*]* @name, i32 0, i32 %20
  %21 = load i8*, i8** %arrayidx21, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), %cond.true ], [ %21, %cond.false ]
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* %16, i8* %cond)
  br label %for.inc23

for.inc23:                                        ; preds = %cond.end
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond14

for.end25:                                        ; preds = %for.cond14
  %call26 = call i32 @unstable()
  %tobool27 = icmp ne i32 %call26, 0
  %23 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* %cond28)
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0))
  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
  call void @engage(i32 1, i32 %25)
  %26 = load i32, i32* %i, align 4
  call void @engage(i32 5, i32 %26)
  %call31 = call i32 @unstable()
  %tobool32 = icmp ne i32 %call31, 0
  %27 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0)
  %call34 = call i32 (i8*, ...) @printf(i8* %cond33)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 19
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 19:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sle i32 %4, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp ne i32 %6, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc9 = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %unengaged, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp sle i32 %14, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp eq i32 %18, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call26 = call i32 @unstable()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool27 = icmp ne i32 %call26, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 1), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @pairs, i32 0, i32 5), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call31 = call i32 @unstable()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool32 = icmp ne i32 %call31, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 19:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
