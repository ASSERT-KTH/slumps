
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for longmulti()

; ModuleID = './Long_multiplication.c.bc'
source_filename = "./Long_multiplication.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"-18446744073709551616\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @longmulti(i8* %a, i8* %b, i8* %c) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %carry = alloca i32, align 4
  %la = alloca i32, align 4
  %lb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %c, i8** %c.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %b.addr, align 4
  %call1 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)) #5
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i8*, i8** %c.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 0
  store i8 48, i8* %arrayidx, align 1
  %3 = load i8*, i8** %c.addr, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %3, i32 1
  store i8 0, i8* %arrayidx3, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %a.addr, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx4, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  store i32 1, i32* %i, align 4
  %6 = load i32, i32* %k, align 4
  %tobool7 = icmp ne i32 %6, 0
  %lnot = xor i1 %tobool7, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %k, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %7 = load i8*, i8** %b.addr, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %7, i32 0
  %8 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %8 to i32
  %cmp11 = icmp eq i32 %conv10, 45
  br i1 %cmp11, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.end8
  store i32 1, i32* %j, align 4
  %9 = load i32, i32* %k, align 4
  %tobool14 = icmp ne i32 %9, 0
  %lnot15 = xor i1 %tobool14, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  store i32 %lnot.ext16, i32* %k, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.end8
  %10 = load i32, i32* %i, align 4
  %tobool18 = icmp ne i32 %10, 0
  br i1 %tobool18, label %if.then21, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %if.end17
  %11 = load i32, i32* %j, align 4
  %tobool20 = icmp ne i32 %11, 0
  br i1 %tobool20, label %if.then21, label %if.end28

if.then21:                                        ; preds = %lor.lhs.false19, %if.end17
  %12 = load i32, i32* %k, align 4
  %tobool22 = icmp ne i32 %12, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.then21
  %13 = load i8*, i8** %c.addr, align 4
  %arrayidx24 = getelementptr inbounds i8, i8* %13, i32 0
  store i8 45, i8* %arrayidx24, align 1
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.then21
  %14 = load i8*, i8** %a.addr, align 4
  %15 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8*, i8** %b.addr, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr26 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8*, i8** %c.addr, align 4
  %19 = load i32, i32* %k, align 4
  %add.ptr27 = getelementptr inbounds i8, i8* %18, i32 %19
  call void @longmulti(i8* %add.ptr, i8* %add.ptr26, i8* %add.ptr27)
  br label %return

if.end28:                                         ; preds = %lor.lhs.false19
  %20 = load i8*, i8** %a.addr, align 4
  %call29 = call i32 @strlen(i8* %20) #5
  store i32 %call29, i32* %la, align 4
  %21 = load i8*, i8** %b.addr, align 4
  %call30 = call i32 @strlen(i8* %21) #5
  store i32 %call30, i32* %lb, align 4
  %22 = load i8*, i8** %c.addr, align 4
  %23 = load i32, i32* %la, align 4
  %24 = load i32, i32* %lb, align 4
  %add = add nsw i32 %23, %24
  call void @llvm.memset.p0i8.i32(i8* align 1 %22, i8 48, i32 %add, i1 false)
  %25 = load i8*, i8** %c.addr, align 4
  %26 = load i32, i32* %la, align 4
  %27 = load i32, i32* %lb, align 4
  %add31 = add nsw i32 %26, %27
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %add31
  store i8 0, i8* %arrayidx32, align 1
  %28 = load i32, i32* %la, align 4
  %sub = sub nsw i32 %28, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc61, %if.end28
  %29 = load i32, i32* %i, align 4
  %cmp33 = icmp sge i32 %29, 0
  br i1 %cmp33, label %for.body, label %for.end63

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %lb, align 4
  %sub35 = sub nsw i32 %30, 1
  store i32 %sub35, i32* %j, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %j, align 4
  %add36 = add nsw i32 %31, %32
  %add37 = add nsw i32 %add36, 1
  store i32 %add37, i32* %k, align 4
  store i32 0, i32* %carry, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc, %for.body
  %33 = load i32, i32* %j, align 4
  %cmp39 = icmp sge i32 %33, 0
  br i1 %cmp39, label %for.body41, label %for.end

for.body41:                                       ; preds = %for.cond38
  %34 = load i8*, i8** %a.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %36 to i32
  %sub44 = sub nsw i32 %conv43, 48
  %37 = load i8*, i8** %b.addr, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %39 to i32
  %sub47 = sub nsw i32 %conv46, 48
  %mul = mul nsw i32 %sub44, %sub47
  %40 = load i8*, i8** %c.addr, align 4
  %41 = load i32, i32* %k, align 4
  %arrayidx48 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %42 to i32
  %sub50 = sub nsw i32 %conv49, 48
  %add51 = add nsw i32 %mul, %sub50
  %43 = load i32, i32* %carry, align 4
  %add52 = add nsw i32 %add51, %43
  store i32 %add52, i32* %n, align 4
  %44 = load i32, i32* %n, align 4
  %div = sdiv i32 %44, 10
  store i32 %div, i32* %carry, align 4
  %45 = load i32, i32* %n, align 4
  %rem = srem i32 %45, 10
  %add53 = add nsw i32 %rem, 48
  %conv54 = trunc i32 %add53 to i8
  %46 = load i8*, i8** %c.addr, align 4
  %47 = load i32, i32* %k, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %conv54, i8* %arrayidx55, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body41
  %48 = load i32, i32* %j, align 4
  %dec = add nsw i32 %48, -1
  store i32 %dec, i32* %j, align 4
  %49 = load i32, i32* %k, align 4
  %dec56 = add nsw i32 %49, -1
  store i32 %dec56, i32* %k, align 4
  br label %for.cond38

for.end:                                          ; preds = %for.cond38
  %50 = load i32, i32* %carry, align 4
  %51 = load i8*, i8** %c.addr, align 4
  %52 = load i32, i32* %k, align 4
  %arrayidx57 = getelementptr inbounds i8, i8* %51, i32 %52
  %53 = load i8, i8* %arrayidx57, align 1
  %conv58 = sext i8 %53 to i32
  %add59 = add nsw i32 %conv58, %50
  %conv60 = trunc i32 %add59 to i8
  store i8 %conv60, i8* %arrayidx57, align 1
  br label %for.inc61

for.inc61:                                        ; preds = %for.end
  %54 = load i32, i32* %i, align 4
  %dec62 = add nsw i32 %54, -1
  store i32 %dec62, i32* %i, align 4
  br label %for.cond

for.end63:                                        ; preds = %for.cond
  %55 = load i8*, i8** %c.addr, align 4
  %arrayidx64 = getelementptr inbounds i8, i8* %55, i32 0
  %56 = load i8, i8* %arrayidx64, align 1
  %conv65 = sext i8 %56 to i32
  %cmp66 = icmp eq i32 %conv65, 48
  br i1 %cmp66, label %if.then68, label %if.end71

if.then68:                                        ; preds = %for.end63
  %57 = load i8*, i8** %c.addr, align 4
  %58 = load i8*, i8** %c.addr, align 4
  %add.ptr69 = getelementptr inbounds i8, i8* %58, i32 1
  %59 = load i32, i32* %la, align 4
  %60 = load i32, i32* %lb, align 4
  %add70 = add nsw i32 %59, %60
  call void @llvm.memmove.p0i8.p0i8.i32(i8* align 1 %57, i8* align 1 %add.ptr69, i32 %add70, i1 false)
  br label %if.end71

if.end71:                                         ; preds = %if.then68, %for.end63
  br label %return

return:                                           ; preds = %if.end71, %if.end25, %if.then
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [1024 x i8], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %c, i32 0, i32 0
  call void @longmulti(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %c, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay1)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %conv, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool7, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %lnot to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp11 = icmp eq i32 %conv10, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool14 = icmp ne i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot15 = xor i1 %tobool14, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot.ext16 = zext i1 %lnot15 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool18 = icmp ne i32 %10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool20 = icmp ne i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool22 = icmp ne i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call29 = call i32 @strlen(i8* %20) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call30 = call i32 @strlen(i8* %21) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %la, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %lb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %la, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %lb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %la, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp sge i32 %29, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %lb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub35 = sub nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add36 = add nsw i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add37 = add nsw i32 %add36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp sge i32 %33, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i8, i8* %arrayidx42, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv43 = sext i8 %36 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub44 = sub nsw i32 %conv43, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i8, i8* %arrayidx45, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv46 = sext i8 %39 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub47 = sub nsw i32 %conv46, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %sub44, %sub47
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = subnsw %4, 48:i32
%6:i32 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i8, i8* %arrayidx48, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv49 = sext i8 %42 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub50 = sub nsw i32 %conv49, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %add51 = add nsw i32 %mul, %sub50
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = subnsw %4, 48:i32
%6:i8 = var
%7:i32 = sext %6
%8:i32 = subnsw %7, 48:i32
%9:i32 = mulnsw %5, %8
%10:i32 = addnsw %2, %9
infer %10

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %carry, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add52 = add nsw i32 %add51, %43
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = subnsw %2, 48:i32
%4:i8 = var
%5:i32 = sext %4
%6:i32 = subnsw %5, 48:i32
%7:i8 = var
%8:i32 = sext %7
%9:i32 = subnsw %8, 48:i32
%10:i32 = mulnsw %6, %9
%11:i32 = addnsw %3, %10
%12:i32 = addnsw %0, %11
infer %12

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %44, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %45, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add53 = add nsw i32 %rem, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv54 = trunc i32 %add53 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %48, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec56 = add nsw i32 %49, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %carry, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i8, i8* %arrayidx57, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv58 = sext i8 %53 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add59 = add nsw i32 %conv58, %50
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv60 = trunc i32 %add59 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
%4:i8 = trunc %3
infer %4

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec62 = add nsw i32 %54, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i8, i8* %arrayidx64, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv65 = sext i8 %56 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp66 = icmp eq i32 %conv65, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %la, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %lb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add70 = add nsw i32 %59, %60
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = subnsw %4, 48:i32
%6:i32 = mulnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2304
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 30976
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = subnsw %4, 48:i32
%6:i8 = var
%7:i32 = sext %6
%8:i32 = subnsw %7, 48:i32
%9:i32 = mulnsw %5, %8
%10:i32 = addnsw %2, %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 10880
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = subnsw %4, 48:i32
%6:i32 = mulnsw %2, %5

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = subnsw %2, 48:i32
%4:i8 = var
%5:i32 = sext %4
%6:i32 = subnsw %5, 48:i32
%7:i8 = var
%8:i32 = sext %7
%9:i32 = subnsw %8, 48:i32
%10:i32 = mulnsw %6, %9
%11:i32 = addnsw %3, %10
%12:i32 = addnsw %0, %11
infer %12


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2256
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2028
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = subnsw %4, 48:i32
%6:i32 = mulnsw %2, %5

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = subnsw %4, 48:i32
%6:i8 = var
%7:i32 = sext %6
%8:i32 = subnsw %7, 48:i32
%9:i32 = mulnsw %5, %8
%10:i32 = addnsw %2, %9

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 50
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem %0, 10:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 52
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
%4:i8 = trunc %3
infer %4


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for longmulti()

; entering Souper's runOnFunction() for main()

; ModuleID = './Long_multiplication.c.bc'
source_filename = "./Long_multiplication.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"-18446744073709551616\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @longmulti(i8* %a, i8* %b, i8* %c) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %carry = alloca i32, align 4
  %la = alloca i32, align 4
  %lb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i8* %c, i8** %c.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %b.addr, align 4
  %call1 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)) #5
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i8*, i8** %c.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 0
  store i8 48, i8* %arrayidx, align 1
  %3 = load i8*, i8** %c.addr, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %3, i32 1
  store i8 0, i8* %arrayidx3, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %a.addr, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx4, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  store i32 1, i32* %i, align 4
  %6 = load i32, i32* %k, align 4
  %tobool7 = icmp ne i32 %6, 0
  %lnot = xor i1 %tobool7, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %k, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %7 = load i8*, i8** %b.addr, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %7, i32 0
  %8 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %8 to i32
  %cmp11 = icmp eq i32 %conv10, 45
  br i1 %cmp11, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.end8
  store i32 1, i32* %j, align 4
  %9 = load i32, i32* %k, align 4
  %tobool14 = icmp ne i32 %9, 0
  %lnot15 = xor i1 %tobool14, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  store i32 %lnot.ext16, i32* %k, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.end8
  %10 = load i32, i32* %i, align 4
  %tobool18 = icmp ne i32 %10, 0
  br i1 %tobool18, label %if.then21, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %if.end17
  %11 = load i32, i32* %j, align 4
  %tobool20 = icmp ne i32 %11, 0
  br i1 %tobool20, label %if.then21, label %if.end28

if.then21:                                        ; preds = %lor.lhs.false19, %if.end17
  %12 = load i32, i32* %k, align 4
  %tobool22 = icmp ne i32 %12, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.then21
  %13 = load i8*, i8** %c.addr, align 4
  %arrayidx24 = getelementptr inbounds i8, i8* %13, i32 0
  store i8 45, i8* %arrayidx24, align 1
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.then21
  %14 = load i8*, i8** %a.addr, align 4
  %15 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8*, i8** %b.addr, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr26 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8*, i8** %c.addr, align 4
  %19 = load i32, i32* %k, align 4
  %add.ptr27 = getelementptr inbounds i8, i8* %18, i32 %19
  call void @longmulti(i8* %add.ptr, i8* %add.ptr26, i8* %add.ptr27)
  br label %return

if.end28:                                         ; preds = %lor.lhs.false19
  %20 = load i8*, i8** %a.addr, align 4
  %call29 = call i32 @strlen(i8* %20) #5
  store i32 %call29, i32* %la, align 4
  %21 = load i8*, i8** %b.addr, align 4
  %call30 = call i32 @strlen(i8* %21) #5
  store i32 %call30, i32* %lb, align 4
  %22 = load i8*, i8** %c.addr, align 4
  %23 = load i32, i32* %la, align 4
  %24 = load i32, i32* %lb, align 4
  %add = add nsw i32 %23, %24
  call void @llvm.memset.p0i8.i32(i8* align 1 %22, i8 48, i32 %add, i1 false)
  %25 = load i8*, i8** %c.addr, align 4
  %26 = load i32, i32* %la, align 4
  %27 = load i32, i32* %lb, align 4
  %add31 = add nsw i32 %26, %27
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %add31
  store i8 0, i8* %arrayidx32, align 1
  %28 = load i32, i32* %la, align 4
  %sub = sub nsw i32 %28, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc61, %if.end28
  %29 = load i32, i32* %i, align 4
  %cmp33 = icmp sge i32 %29, 0
  br i1 %cmp33, label %for.body, label %for.end63

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %lb, align 4
  %sub35 = sub nsw i32 %30, 1
  store i32 %sub35, i32* %j, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %j, align 4
  %add36 = add nsw i32 %31, %32
  %add37 = add nsw i32 %add36, 1
  store i32 %add37, i32* %k, align 4
  store i32 0, i32* %carry, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc, %for.body
  %33 = load i32, i32* %j, align 4
  %cmp39 = icmp sge i32 %33, 0
  br i1 %cmp39, label %for.body41, label %for.end

for.body41:                                       ; preds = %for.cond38
  %34 = load i8*, i8** %a.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %36 to i32
  %sub44 = sub nsw i32 %conv43, 48
  %37 = load i8*, i8** %b.addr, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %39 to i32
  %sub47 = sub nsw i32 %conv46, 48
  %mul = mul nsw i32 %sub44, %sub47
  %40 = load i8*, i8** %c.addr, align 4
  %41 = load i32, i32* %k, align 4
  %arrayidx48 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %42 to i32
  %sub50 = sub nsw i32 %conv49, 48
  %add51 = add nsw i32 %mul, %sub50
  %43 = load i32, i32* %carry, align 4
  %add52 = add nsw i32 %add51, %43
  store i32 %add52, i32* %n, align 4
  %44 = load i32, i32* %n, align 4
  %div = sdiv i32 %44, 10
  store i32 %div, i32* %carry, align 4
  %45 = load i32, i32* %n, align 4
  %rem = srem i32 %45, 10
  %add53 = add nsw i32 %rem, 48
  %conv54 = trunc i32 %add53 to i8
  %46 = load i8*, i8** %c.addr, align 4
  %47 = load i32, i32* %k, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %conv54, i8* %arrayidx55, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body41
  %48 = load i32, i32* %j, align 4
  %dec = add nsw i32 %48, -1
  store i32 %dec, i32* %j, align 4
  %49 = load i32, i32* %k, align 4
  %dec56 = add nsw i32 %49, -1
  store i32 %dec56, i32* %k, align 4
  br label %for.cond38

for.end:                                          ; preds = %for.cond38
  %50 = load i32, i32* %carry, align 4
  %51 = load i8*, i8** %c.addr, align 4
  %52 = load i32, i32* %k, align 4
  %arrayidx57 = getelementptr inbounds i8, i8* %51, i32 %52
  %53 = load i8, i8* %arrayidx57, align 1
  %conv58 = sext i8 %53 to i32
  %add59 = add nsw i32 %conv58, %50
  %conv60 = trunc i32 %add59 to i8
  store i8 %conv60, i8* %arrayidx57, align 1
  br label %for.inc61

for.inc61:                                        ; preds = %for.end
  %54 = load i32, i32* %i, align 4
  %dec62 = add nsw i32 %54, -1
  store i32 %dec62, i32* %i, align 4
  br label %for.cond

for.end63:                                        ; preds = %for.cond
  %55 = load i8*, i8** %c.addr, align 4
  %arrayidx64 = getelementptr inbounds i8, i8* %55, i32 0
  %56 = load i8, i8* %arrayidx64, align 1
  %conv65 = sext i8 %56 to i32
  %cmp66 = icmp eq i32 %conv65, 48
  br i1 %cmp66, label %if.then68, label %if.end71

if.then68:                                        ; preds = %for.end63
  %57 = load i8*, i8** %c.addr, align 4
  %58 = load i8*, i8** %c.addr, align 4
  %add.ptr69 = getelementptr inbounds i8, i8* %58, i32 1
  %59 = load i32, i32* %la, align 4
  %60 = load i32, i32* %lb, align 4
  %add70 = add nsw i32 %59, %60
  call void @llvm.memmove.p0i8.p0i8.i32(i8* align 1 %57, i8* align 1 %add.ptr69, i32 %add70, i1 false)
  br label %if.end71

if.end71:                                         ; preds = %if.then68, %for.end63
  br label %return

return:                                           ; preds = %if.end71, %if.end25, %if.then
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [1024 x i8], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %c, i32 0, i32 0
  call void @longmulti(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %c, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay1)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
