
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for rand_idx()

; ModuleID = './Probabilistic_choice.c.bc'
source_filename = "./Probabilistic_choice.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"aleph\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"beth\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"gimel\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"daleth\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"he\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"waw\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"zayin\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"heth\00", align 1
@__const.main.names = private unnamed_addr constant [8 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0)], align 16
@__const.main.p = private unnamed_addr constant [8 x double] [double 2.000000e-01, double 0x3FC5555555555555, double 0x3FC2492492492492, double 1.250000e-01, double 0x3FBC71C71C71C71C, double 1.000000e-01, double 0x3FB745D1745D1746, double 1.000000e+300], align 16
@.str.8 = private unnamed_addr constant [33 x i8] c"  Name  Count    Ratio Expected\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"%6s%7d %7.4f%% %7.4f%%\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @rand_idx(double* %p, i32 %n) #0 {
entry:
  %p.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %s = alloca double, align 8
  %i = alloca i32, align 4
  store double* %p, double** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call i32 @rand()
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41E0000000000000
  store double %div, double* %s, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load double*, double** %p.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s, align 8
  %sub2 = fsub double %5, %4
  store double %sub2, double* %s, align 8
  %cmp3 = fcmp oge double %sub2, 0.000000e+00
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %8 = load i32, i32* %i, align 4
  ret i32 %8
}

declare i32 @rand() #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %names = alloca [8 x i8*], align 16
  %s = alloca double, align 8
  %p = alloca [8 x double], align 16
  %i = alloca i32, align 4
  %count = alloca [8 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i8*]* %names to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x i8*]* @__const.main.names to i8*), i32 32, i1 false)
  %1 = bitcast [8 x double]* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([8 x double]* @__const.main.p to i8*), i32 64, i1 false)
  %2 = bitcast [8 x i32]* %count to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 1000000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x double], [8 x double]* %p, i32 0, i32 0
  %call = call i32 @rand_idx(double* %arraydecay, i32 8)
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %count, i32 0, i32 %call
  %4 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %5, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  store double 1.000000e+00, double* %s, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc14, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 8
  br i1 %cmp4, label %for.body5, label %for.end17

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [8 x i8*], [8 x i8*]* %names, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx6, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [8 x i32], [8 x i32]* %count, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx7, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [8 x i32], [8 x i32]* %count, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %conv = sitofp i32 %12 to double
  %div = fdiv double %conv, 1.000000e+06
  %mul = fmul double %div, 1.000000e+02
  %13 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %13, 7
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body5
  %14 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds [8 x double], [8 x double]* %p, i32 0, i32 %14
  %15 = load double, double* %arrayidx11, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body5
  %16 = load double, double* %s, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %15, %cond.true ], [ %16, %cond.false ]
  %mul12 = fmul double %cond, 1.000000e+02
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i32 0, i32 0), i8* %8, i32 %10, double %mul, double %mul12)
  br label %for.inc14

for.inc14:                                        ; preds = %cond.end
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [8 x double], [8 x double]* %p, i32 0, i32 %17
  %18 = load double, double* %arrayidx16, align 8
  %19 = load double, double* %s, align 8
  %sub = fsub double %19, %18
  store double %sub, double* %s, align 8
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = fcmp oge double %sub2, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for rand_idx()

; entering Souper's runOnFunction() for main()

; ModuleID = './Probabilistic_choice.c.bc'
source_filename = "./Probabilistic_choice.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"aleph\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"beth\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"gimel\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"daleth\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"he\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"waw\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"zayin\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"heth\00", align 1
@__const.main.names = private unnamed_addr constant [8 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0)], align 16
@__const.main.p = private unnamed_addr constant [8 x double] [double 2.000000e-01, double 0x3FC5555555555555, double 0x3FC2492492492492, double 1.250000e-01, double 0x3FBC71C71C71C71C, double 1.000000e-01, double 0x3FB745D1745D1746, double 1.000000e+300], align 16
@.str.8 = private unnamed_addr constant [33 x i8] c"  Name  Count    Ratio Expected\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"%6s%7d %7.4f%% %7.4f%%\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @rand_idx(double* %p, i32 %n) #0 {
entry:
  %p.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %s = alloca double, align 8
  %i = alloca i32, align 4
  store double* %p, double** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call i32 @rand()
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41E0000000000000
  store double %div, double* %s, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load double*, double** %p.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s, align 8
  %sub2 = fsub double %5, %4
  store double %sub2, double* %s, align 8
  %cmp3 = fcmp oge double %sub2, 0.000000e+00
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %8 = load i32, i32* %i, align 4
  ret i32 %8
}

declare i32 @rand() #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %names = alloca [8 x i8*], align 16
  %s = alloca double, align 8
  %p = alloca [8 x double], align 16
  %i = alloca i32, align 4
  %count = alloca [8 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i8*]* %names to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x i8*]* @__const.main.names to i8*), i32 32, i1 false)
  %1 = bitcast [8 x double]* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([8 x double]* @__const.main.p to i8*), i32 64, i1 false)
  %2 = bitcast [8 x i32]* %count to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 1000000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x double], [8 x double]* %p, i32 0, i32 0
  %call = call i32 @rand_idx(double* %arraydecay, i32 8)
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %count, i32 0, i32 %call
  %4 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %5, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  store double 1.000000e+00, double* %s, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc14, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 8
  br i1 %cmp4, label %for.body5, label %for.end17

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [8 x i8*], [8 x i8*]* %names, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx6, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [8 x i32], [8 x i32]* %count, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx7, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [8 x i32], [8 x i32]* %count, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %conv = sitofp i32 %12 to double
  %div = fdiv double %conv, 1.000000e+06
  %mul = fmul double %div, 1.000000e+02
  %13 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %13, 7
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body5
  %14 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds [8 x double], [8 x double]* %p, i32 0, i32 %14
  %15 = load double, double* %arrayidx11, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body5
  %16 = load double, double* %s, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %15, %cond.true ], [ %16, %cond.false ]
  %mul12 = fmul double %cond, 1.000000e+02
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i32 0, i32 0), i8* %8, i32 %10, double %mul, double %mul12)
  br label %for.inc14

for.inc14:                                        ; preds = %cond.end
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [8 x double], [8 x double]* %p, i32 0, i32 %17
  %18 = load double, double* %arrayidx16, align 8
  %19 = load double, double* %s, align 8
  %sub = fsub double %19, %18
  store double %sub, double* %s, align 8
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, 1000000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 1000000:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @rand_idx(double* %arraydecay, i32 8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc1 = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %6, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %13, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 1000000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
