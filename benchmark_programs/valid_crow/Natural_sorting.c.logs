
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for w_new()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for w_new()

; entering Souper's runOnFunction() for w_append()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %alloc2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %6, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %alloc3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul i32 %11, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for w_append()

; entering Souper's runOnFunction() for w_make()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @wcslen(i32* %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for w_make()

; entering Souper's runOnFunction() for w_transform()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for w_transform()

; entering Souper's runOnFunction() for w_nocase()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @towlower(i32 %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for w_nocase()

; entering Souper's runOnFunction() for w_despace()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @iswspace(i32 %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %gotspace, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for w_despace()

; entering Souper's runOnFunction() for w_char_repl()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp ne i32 %10, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %19, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add16 = add nsw i32 %27, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool18 = icmp ne i32 %28, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx24, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for w_char_repl()

; entering Souper's runOnFunction() for w_noaccent()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for w_noaccent()

; entering Souper's runOnFunction() for w_noligature()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for w_noligature()

; entering Souper's runOnFunction() for w_noarticle()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %c0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @iswalnum(i32 %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %c0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @iswalnum(i32 %10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i32 %call4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sge i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call10 = call i32 @wcslen(i32* %13)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool14 = icmp ne i32 %call13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call18 = call i32 @iswalnum(i32 %24)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool19 = icmp ne i32 %call18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add22 = add nsw i32 %26, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %27, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp slt i32 %28, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for w_noarticle()

; entering Souper's runOnFunction() for w_numcmp()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @iswdigit(i32 %14)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %16, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %sub, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
%2:i1 = ult %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @iswdigit(i32 %18)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne i32 %call6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub i32 %20, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp10 = icmp ult i32 %sub9, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
%2:i1 = ult %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %23, 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 48:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp eq i32 %27, 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 48:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %ea, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub i32 %33, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp23 = icmp ult i32 %sub22, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
%2:i1 = ult %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %ea, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %eb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub i32 %37, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp ult i32 %sub29, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
%2:i1 = ult %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %eb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc32 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %eb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub34 = sub nsw i32 %39, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %ea, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub35 = sub nsw i32 %41, %42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp36 = icmp sgt i32 %sub34, %sub35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i1 = slt %2, %5
infer %6

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %eb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub38 = sub nsw i32 %43, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %ea, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub39 = sub nsw i32 %45, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp40 = icmp slt i32 %sub38, %sub39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i1 = slt %2, %5
infer %6

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %eb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp44 = icmp slt i32 %47, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %arrayidx46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %arrayidx47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp48 = icmp sgt i32 %51, %54
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %arrayidx51, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %arrayidx52, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp slt i32 %57, %60
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %sa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc56 = add nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %sb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc57 = add nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %ea, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %eb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %67, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call61 = call i32 @iswdigit(i32 %68)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool62 = icmp ne i32 %call61, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %69, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub64 = sub i32 %70, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp65 = icmp ult i32 %sub64, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
%2:i1 = ult %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %71, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call69 = call i32 @iswdigit(i32 %72)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool70 = icmp ne i32 %call69, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %73, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub72 = sub i32 %74, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp73 = icmp ult i32 %sub72, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 48:i32
%2:i1 = ult %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %75, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp76 = icmp sgt i32 %76, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %79, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %81, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp79 = icmp slt i32 %80, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %85, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool87 = icmp ne i32 %86, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %87, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool89 = icmp ne i32 %88, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %90 = load i32, i32* %89, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool92 = icmp ne i32 %90, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool92, i32 1, i32 -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 4294967295:i32
infer %2

; *****
; For LLVM instruction:
;  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 4294967295:i32
%4:i32 = phi %0, 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %92 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 48:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 48:i32
%2:i1 = ult %1, 10:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 48:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i1 = slt %2, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 4294967295:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 4294967295:i32
%4:i32 = phi %0, 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for w_numcmp()

; entering Souper's runOnFunction() for w_cmp()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @wcscmp(i32* %3, i32* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for w_cmp()

; entering Souper's runOnFunction() for natural_sort()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 8, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %14, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %flags.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and = and i32 %15, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %flags.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000100000)

; *****
; For LLVM instruction:
;  %and16 = and i32 %29, 32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 32:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool17 = icmp ne i32 %and16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 32:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp slt i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc30 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65536
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000100000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 32:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 32:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for natural_sort()

; entering Souper's runOnFunction() for test_sort()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %flags.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = ashr i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %flags.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ult i32 %11, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for test_sort()

; entering Souper's runOnFunction() for main()

; ModuleID = './Natural_sorting.c.bc'
source_filename = "./Natural_sorting.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.wstr = type { i32*, i32, i32 }
%struct.kw_t = type { i32*, %struct.wstr* }

@tbl_accent = internal constant [118 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.22, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.24, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.25, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.23, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.26, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.28, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.29, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.30, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.31, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.32, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.27, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.33, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.35, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.36, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.37, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.38, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.39, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.40, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.41, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.42, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.43, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.44, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.46, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.47, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.48, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.45, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.49, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.51, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.52, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.53, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.50, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.54, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.56, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.57, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.58, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.55, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.59, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.61, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.62, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.63, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.60, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.64, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.66, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.67, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.68, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.69, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.70, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.65, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.71, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.73, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.74, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.75, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.76, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.77, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.72, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.78, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.79, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.80, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.81, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.82, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.84, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.85, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.86, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.83, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.87, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.89, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.90, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.91, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.88, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.92, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.93, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.94, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.96, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.95, i32 0, i32 0)], align 16
@tbl_ligature = internal constant [22 x i32*] [i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.97, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.98, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.99, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.100, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.101, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.102, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.103, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.104, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.105, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.106, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.107, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.108, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.109, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.110, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.111, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.112, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.113, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.114, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.115, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.116, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.117, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.118, i32 0, i32 0)], align 16
@tbl_article = internal constant [6 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.119, i32 0, i32 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.str.34, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.120, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.121, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.122, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.123, i32 0, i32 0)], align 16
@trans_funcs = hidden constant [6 x void (%struct.wstr*, %struct.wstr*)*] [void (%struct.wstr*, %struct.wstr*)* @w_despace, void (%struct.wstr*, %struct.wstr*)* @w_nocase, void (%struct.wstr*, %struct.wstr*)* @w_noaccent, void (%struct.wstr*, %struct.wstr*)* @w_noligature, void (%struct.wstr*, %struct.wstr*)* @w_noarticle, void (%struct.wstr*, %struct.wstr*)* null], align 16
@.str = private unnamed_addr constant [16 x i8] c"collapse spaces\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"case insensitive\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"disregard accent\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"decompose ligatures\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"discard common words\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@flagnames = hidden constant [6 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [14 x i32] [i32 32, i32 48, i32 48, i32 48, i32 48, i32 48, i32 57, i32 56, i32 32, i32 110, i32 105, i32 110, i32 97, i32 0], align 4
@.str.7 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 110, i32 105, i32 241, i32 111, i32 0], align 4
@.str.8 = private unnamed_addr constant [9 x i32] [i32 57, i32 57, i32 32, i32 78, i32 105, i32 110, i32 106, i32 97, i32 0], align 4
@.str.9 = private unnamed_addr constant [9 x i32] [i32 49, i32 48, i32 48, i32 32, i32 78, i32 73, i32 78, i32 65, i32 0], align 4
@.str.10 = private unnamed_addr constant [56 x i32] [i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 116, i32 111, i32 32, i32 100, i32 111, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@.str.11 = private unnamed_addr constant [49 x i32] [i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 102, i32 102, i32 105, i32 99, i32 117, i32 108, i32 116, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 115, i32 111, i32 109, i32 101, i32 32, i32 49, i32 48, i32 48, i32 32, i32 97, i32 101, i32 111, i32 110, i32 115, i32 46, i32 0], align 4
@.str.12 = private unnamed_addr constant [51 x i32] [i32 32, i32 32, i32 84, i32 104, i32 101, i32 32, i32 119, i32 111, i32 114, i32 107, i32 32, i32 105, i32 115, i32 32, i32 115, i32 111, i32 32, i32 100, i32 105, i32 64259, i32 99, i32 117, i32 108, i32 116, i32 32, i32 32, i32 32, i32 105, i32 116, i32 32, i32 116, i32 111, i32 111, i32 107, i32 32, i32 383, i32 111, i32 109, i32 101, i32 32, i32 57, i32 57, i32 32, i32 230, i32 111, i32 110, i32 115, i32 46, i32 32, i32 32, i32 0], align 4
@test = hidden constant [7 x i32*] [i32* getelementptr inbounds ([14 x i32], [14 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([56 x i32], [56 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([49 x i32], [49 x i32]* @.str.11, i32 0, i32 0), i32* getelementptr inbounds ([51 x i32], [51 x i32]* @.str.12, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"Sort flags: (\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i32] [i32 222, i32 0], align 4
@.str.21 = private unnamed_addr constant [3 x i32] [i32 84, i32 72, i32 0], align 4
@.str.22 = private unnamed_addr constant [2 x i32] [i32 254, i32 0], align 4
@.str.23 = private unnamed_addr constant [3 x i32] [i32 116, i32 104, i32 0], align 4
@.str.24 = private unnamed_addr constant [2 x i32] [i32 208, i32 0], align 4
@.str.25 = private unnamed_addr constant [2 x i32] [i32 240, i32 0], align 4
@.str.26 = private unnamed_addr constant [2 x i32] [i32 192, i32 0], align 4
@.str.27 = private unnamed_addr constant [2 x i32] [i32 65, i32 0], align 4
@.str.28 = private unnamed_addr constant [2 x i32] [i32 193, i32 0], align 4
@.str.29 = private unnamed_addr constant [2 x i32] [i32 194, i32 0], align 4
@.str.30 = private unnamed_addr constant [2 x i32] [i32 195, i32 0], align 4
@.str.31 = private unnamed_addr constant [2 x i32] [i32 196, i32 0], align 4
@.str.32 = private unnamed_addr constant [2 x i32] [i32 197, i32 0], align 4
@.str.33 = private unnamed_addr constant [2 x i32] [i32 224, i32 0], align 4
@.str.34 = private unnamed_addr constant [2 x i32] [i32 97, i32 0], align 4
@.str.35 = private unnamed_addr constant [2 x i32] [i32 225, i32 0], align 4
@.str.36 = private unnamed_addr constant [2 x i32] [i32 226, i32 0], align 4
@.str.37 = private unnamed_addr constant [2 x i32] [i32 227, i32 0], align 4
@.str.38 = private unnamed_addr constant [2 x i32] [i32 228, i32 0], align 4
@.str.39 = private unnamed_addr constant [2 x i32] [i32 229, i32 0], align 4
@.str.40 = private unnamed_addr constant [2 x i32] [i32 199, i32 0], align 4
@.str.41 = private unnamed_addr constant [2 x i32] [i32 67, i32 0], align 4
@.str.42 = private unnamed_addr constant [2 x i32] [i32 231, i32 0], align 4
@.str.43 = private unnamed_addr constant [2 x i32] [i32 99, i32 0], align 4
@.str.44 = private unnamed_addr constant [2 x i32] [i32 200, i32 0], align 4
@.str.45 = private unnamed_addr constant [2 x i32] [i32 69, i32 0], align 4
@.str.46 = private unnamed_addr constant [2 x i32] [i32 201, i32 0], align 4
@.str.47 = private unnamed_addr constant [2 x i32] [i32 202, i32 0], align 4
@.str.48 = private unnamed_addr constant [2 x i32] [i32 203, i32 0], align 4
@.str.49 = private unnamed_addr constant [2 x i32] [i32 232, i32 0], align 4
@.str.50 = private unnamed_addr constant [2 x i32] [i32 101, i32 0], align 4
@.str.51 = private unnamed_addr constant [2 x i32] [i32 233, i32 0], align 4
@.str.52 = private unnamed_addr constant [2 x i32] [i32 234, i32 0], align 4
@.str.53 = private unnamed_addr constant [2 x i32] [i32 235, i32 0], align 4
@.str.54 = private unnamed_addr constant [2 x i32] [i32 204, i32 0], align 4
@.str.55 = private unnamed_addr constant [2 x i32] [i32 73, i32 0], align 4
@.str.56 = private unnamed_addr constant [2 x i32] [i32 205, i32 0], align 4
@.str.57 = private unnamed_addr constant [2 x i32] [i32 206, i32 0], align 4
@.str.58 = private unnamed_addr constant [2 x i32] [i32 207, i32 0], align 4
@.str.59 = private unnamed_addr constant [2 x i32] [i32 236, i32 0], align 4
@.str.60 = private unnamed_addr constant [2 x i32] [i32 105, i32 0], align 4
@.str.61 = private unnamed_addr constant [2 x i32] [i32 237, i32 0], align 4
@.str.62 = private unnamed_addr constant [2 x i32] [i32 238, i32 0], align 4
@.str.63 = private unnamed_addr constant [2 x i32] [i32 239, i32 0], align 4
@.str.64 = private unnamed_addr constant [2 x i32] [i32 210, i32 0], align 4
@.str.65 = private unnamed_addr constant [2 x i32] [i32 79, i32 0], align 4
@.str.66 = private unnamed_addr constant [2 x i32] [i32 211, i32 0], align 4
@.str.67 = private unnamed_addr constant [2 x i32] [i32 212, i32 0], align 4
@.str.68 = private unnamed_addr constant [2 x i32] [i32 213, i32 0], align 4
@.str.69 = private unnamed_addr constant [2 x i32] [i32 214, i32 0], align 4
@.str.70 = private unnamed_addr constant [2 x i32] [i32 216, i32 0], align 4
@.str.71 = private unnamed_addr constant [2 x i32] [i32 242, i32 0], align 4
@.str.72 = private unnamed_addr constant [2 x i32] [i32 111, i32 0], align 4
@.str.73 = private unnamed_addr constant [2 x i32] [i32 243, i32 0], align 4
@.str.74 = private unnamed_addr constant [2 x i32] [i32 244, i32 0], align 4
@.str.75 = private unnamed_addr constant [2 x i32] [i32 245, i32 0], align 4
@.str.76 = private unnamed_addr constant [2 x i32] [i32 246, i32 0], align 4
@.str.77 = private unnamed_addr constant [2 x i32] [i32 248, i32 0], align 4
@.str.78 = private unnamed_addr constant [2 x i32] [i32 209, i32 0], align 4
@.str.79 = private unnamed_addr constant [2 x i32] [i32 78, i32 0], align 4
@.str.80 = private unnamed_addr constant [2 x i32] [i32 241, i32 0], align 4
@.str.81 = private unnamed_addr constant [2 x i32] [i32 110, i32 0], align 4
@.str.82 = private unnamed_addr constant [2 x i32] [i32 217, i32 0], align 4
@.str.83 = private unnamed_addr constant [2 x i32] [i32 85, i32 0], align 4
@.str.84 = private unnamed_addr constant [2 x i32] [i32 218, i32 0], align 4
@.str.85 = private unnamed_addr constant [2 x i32] [i32 219, i32 0], align 4
@.str.86 = private unnamed_addr constant [2 x i32] [i32 220, i32 0], align 4
@.str.87 = private unnamed_addr constant [2 x i32] [i32 249, i32 0], align 4
@.str.88 = private unnamed_addr constant [2 x i32] [i32 117, i32 0], align 4
@.str.89 = private unnamed_addr constant [2 x i32] [i32 250, i32 0], align 4
@.str.90 = private unnamed_addr constant [2 x i32] [i32 251, i32 0], align 4
@.str.91 = private unnamed_addr constant [2 x i32] [i32 252, i32 0], align 4
@.str.92 = private unnamed_addr constant [2 x i32] [i32 221, i32 0], align 4
@.str.93 = private unnamed_addr constant [2 x i32] [i32 89, i32 0], align 4
@.str.94 = private unnamed_addr constant [2 x i32] [i32 255, i32 0], align 4
@.str.95 = private unnamed_addr constant [2 x i32] [i32 121, i32 0], align 4
@.str.96 = private unnamed_addr constant [2 x i32] [i32 253, i32 0], align 4
@.str.97 = private unnamed_addr constant [2 x i32] [i32 198, i32 0], align 4
@.str.98 = private unnamed_addr constant [3 x i32] [i32 65, i32 69, i32 0], align 4
@.str.99 = private unnamed_addr constant [2 x i32] [i32 230, i32 0], align 4
@.str.100 = private unnamed_addr constant [3 x i32] [i32 97, i32 101, i32 0], align 4
@.str.101 = private unnamed_addr constant [2 x i32] [i32 223, i32 0], align 4
@.str.102 = private unnamed_addr constant [3 x i32] [i32 115, i32 115, i32 0], align 4
@.str.103 = private unnamed_addr constant [2 x i32] [i32 64260, i32 0], align 4
@.str.104 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 108, i32 0], align 4
@.str.105 = private unnamed_addr constant [2 x i32] [i32 64259, i32 0], align 4
@.str.106 = private unnamed_addr constant [4 x i32] [i32 102, i32 102, i32 105, i32 0], align 4
@.str.107 = private unnamed_addr constant [2 x i32] [i32 64257, i32 0], align 4
@.str.108 = private unnamed_addr constant [3 x i32] [i32 102, i32 105, i32 0], align 4
@.str.109 = private unnamed_addr constant [2 x i32] [i32 64256, i32 0], align 4
@.str.110 = private unnamed_addr constant [3 x i32] [i32 102, i32 102, i32 0], align 4
@.str.111 = private unnamed_addr constant [2 x i32] [i32 64258, i32 0], align 4
@.str.112 = private unnamed_addr constant [3 x i32] [i32 102, i32 108, i32 0], align 4
@.str.113 = private unnamed_addr constant [2 x i32] [i32 383, i32 0], align 4
@.str.114 = private unnamed_addr constant [2 x i32] [i32 115, i32 0], align 4
@.str.115 = private unnamed_addr constant [2 x i32] [i32 658, i32 0], align 4
@.str.116 = private unnamed_addr constant [2 x i32] [i32 122, i32 0], align 4
@.str.117 = private unnamed_addr constant [2 x i32] [i32 64262, i32 0], align 4
@.str.118 = private unnamed_addr constant [3 x i32] [i32 115, i32 116, i32 0], align 4
@.str.119 = private unnamed_addr constant [4 x i32] [i32 116, i32 104, i32 101, i32 0], align 4
@.str.120 = private unnamed_addr constant [3 x i32] [i32 111, i32 102, i32 0], align 4
@.str.121 = private unnamed_addr constant [3 x i32] [i32 116, i32 111, i32 0], align 4
@.str.122 = private unnamed_addr constant [3 x i32] [i32 105, i32 115, i32 0], align 4
@.str.123 = private unnamed_addr constant [3 x i32] [i32 105, i32 116, i32 0], align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_new() #0 {
entry:
  %w = alloca %struct.wstr*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.wstr*
  store %struct.wstr* %0, %struct.wstr** %w, align 4
  %1 = load %struct.wstr*, %struct.wstr** %w, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %1, i32 0, i32 2
  store i32 1, i32* %alloc, align 4
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %call1 = call noalias i8* @malloc(i32 4)
  %3 = bitcast i8* %call1 to i32*
  %4 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 0
  store i32* %3, i32** %s, align 4
  %5 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 0
  %6 = load i32*, i32** %s2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 0
  store i32 0, i32* %arrayidx, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_append(%struct.wstr* %w, i32 %c) #0 {
entry:
  %w.addr = alloca %struct.wstr*, align 4
  %c.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.wstr* %w, %struct.wstr** %w.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 1
  %1 = load i32, i32* %n1, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc = getelementptr inbounds %struct.wstr, %struct.wstr* %3, i32 0, i32 2
  %4 = load i32, i32* %alloc, align 4
  %cmp = icmp sge i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc2 = getelementptr inbounds %struct.wstr, %struct.wstr* %5, i32 0, i32 2
  %6 = load i32, i32* %alloc2, align 4
  %mul = mul nsw i32 %6, 2
  store i32 %mul, i32* %alloc2, align 4
  %7 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %7, i32 0, i32 0
  %8 = load i32*, i32** %s, align 4
  %9 = bitcast i32* %8 to i8*
  %10 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %alloc3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 2
  %11 = load i32, i32* %alloc3, align 4
  %mul4 = mul i32 %11, 4
  %call = call i8* @realloc(i8* %9, i32 %mul4)
  %12 = bitcast i8* %call to i32*
  %13 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s5 = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  store i32* %12, i32** %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %c.addr, align 4
  %15 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s6 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s6, align 4
  %17 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n7 = getelementptr inbounds %struct.wstr, %struct.wstr* %17, i32 0, i32 1
  %18 = load i32, i32* %n7, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %n7, align 4
  %arrayidx = getelementptr inbounds i32, i32* %16, i32 %18
  store i32 %14, i32* %arrayidx, align 4
  %19 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %s8 = getelementptr inbounds %struct.wstr, %struct.wstr* %19, i32 0, i32 0
  %20 = load i32*, i32** %s8, align 4
  %21 = load %struct.wstr*, %struct.wstr** %w.addr, align 4
  %n9 = getelementptr inbounds %struct.wstr, %struct.wstr* %21, i32 0, i32 1
  %22 = load i32, i32* %n9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %22
  store i32 0, i32* %arrayidx10, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.wstr* @w_make(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %w = alloca %struct.wstr*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %call = call i32 @wcslen(i32* %0)
  store i32 %call, i32* %len, align 4
  %call1 = call %struct.wstr* @w_new()
  store %struct.wstr* %call1, %struct.wstr** %w, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wstr*, %struct.wstr** %w, align 4
  %4 = load i32*, i32** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  call void @w_append(%struct.wstr* %3, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.wstr*, %struct.wstr** %w, align 4
  ret %struct.wstr* %8
}

declare i32 @wcslen(i32* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_transform(%struct.wstr* %in, void (%struct.wstr*, %struct.wstr*)* %f) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %f.addr = alloca void (%struct.wstr*, %struct.wstr*)*, align 4
  %t = alloca %struct.wstr, align 4
  %out = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store void (%struct.wstr*, %struct.wstr*)* %f, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %call = call %struct.wstr* @w_new()
  store %struct.wstr* %call, %struct.wstr** %out, align 4
  %0 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %f.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %2 = load %struct.wstr*, %struct.wstr** %out, align 4
  call void %0(%struct.wstr* %1, %struct.wstr* %2)
  %3 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %4 = bitcast %struct.wstr* %t to i8*
  %5 = bitcast %struct.wstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 12, i1 false)
  %6 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %7 = load %struct.wstr*, %struct.wstr** %out, align 4
  %8 = bitcast %struct.wstr* %6 to i8*
  %9 = bitcast %struct.wstr* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 12, i1 false)
  %10 = load %struct.wstr*, %struct.wstr** %out, align 4
  %11 = bitcast %struct.wstr* %10 to i8*
  %12 = bitcast %struct.wstr* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %11, i8* align 4 %12, i32 12, i1 false)
  %13 = load %struct.wstr*, %struct.wstr** %out, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %13, i32 0, i32 0
  %14 = load i32*, i32** %s, align 4
  %15 = bitcast i32* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.wstr*, %struct.wstr** %out, align 4
  %17 = bitcast %struct.wstr* %16 to i8*
  call void @free(i8* %17)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_nocase(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %9 = load i32, i32* %c, align 4
  %call = call i32 @towlower(i32 %9)
  call void @w_append(%struct.wstr* %8, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s1 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 0
  %11 = load i32*, i32** %s1, align 4
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %inc
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @towlower(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_despace(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %gotspace = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %gotspace, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c, align 4
  %call = call i32 @iswspace(i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %gotspace, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %n3 = getelementptr inbounds %struct.wstr, %struct.wstr* %10, i32 0, i32 1
  %11 = load i32, i32* %n3, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  %12 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_append(%struct.wstr* %12, i32 32)
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %13 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %14 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %13, i32 %14)
  store i32 0, i32* %gotspace, align 4
  br label %if.end6

if.else:                                          ; preds = %for.body
  store i32 1, i32* %gotspace, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s7 = getelementptr inbounds %struct.wstr, %struct.wstr* %15, i32 0, i32 0
  %16 = load i32*, i32** %s7, align 4
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i32 %inc
  %18 = load i32, i32* %arrayidx8, align 4
  store i32 %18, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i32 @iswspace(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @w_char_repl(%struct.wstr* %in, %struct.wstr* %out, i32** %tbl, i32 %len) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %tbl.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32** %tbl, i32*** %tbl.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end25

for.body:                                         ; preds = %land.end
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %8, %9
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %10 = load i32, i32* %c, align 4
  %11 = load i32**, i32*** %tbl.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32*, i32** %11, i32 %12
  %13 = load i32*, i32** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 0
  %14 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %10, %14
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  br label %for.inc15

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %k, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %if.end
  %15 = load i32**, i32*** %tbl.addr, align 4
  %16 = load i32, i32* %j, align 4
  %add = add nsw i32 %16, 1
  %arrayidx8 = getelementptr inbounds i32*, i32** %15, i32 %add
  %17 = load i32*, i32** %arrayidx8, align 4
  %18 = load i32, i32* %k, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %20 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %21 = load i32**, i32*** %tbl.addr, align 4
  %22 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %22, 1
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i32 %add12
  %23 = load i32*, i32** %arrayidx13, align 4
  %24 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx14, align 4
  call void @w_append(%struct.wstr* %20, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.end17

for.inc15:                                        ; preds = %if.then
  %27 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %27, 2
  store i32 %add16, i32* %j, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.end, %for.cond1
  %28 = load i32, i32* %k, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.end17
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %for.end17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %31 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s22 = getelementptr inbounds %struct.wstr, %struct.wstr* %31, i32 0, i32 0
  %32 = load i32*, i32** %s22, align 4
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %32, i32 %inc23
  %34 = load i32, i32* %arrayidx24, align 4
  store i32 %34, i32* %c, align 4
  br label %for.cond

for.end25:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noaccent(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([118 x i32*], [118 x i32*]* @tbl_accent, i32 0, i32 0), i32 118)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noligature(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %1 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  call void @w_char_repl(%struct.wstr* %0, %struct.wstr* %1, i32** getelementptr inbounds ([22 x i32*], [22 x i32*]* @tbl_ligature, i32 0, i32 0), i32 22)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @w_noarticle(%struct.wstr* %in, %struct.wstr* %out) #0 {
entry:
  %in.addr = alloca %struct.wstr*, align 4
  %out.addr = alloca %struct.wstr*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %c0 = alloca i32, align 4
  store %struct.wstr* %in, %struct.wstr** %in.addr, align 4
  store %struct.wstr* %out, %struct.wstr** %out.addr, align 4
  store i32 0, i32* %c0, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %0, i32 0, i32 0
  %1 = load i32*, i32** %s, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 0
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %n1 = getelementptr inbounds %struct.wstr, %struct.wstr* %4, i32 0, i32 1
  %5 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %7, label %for.body, label %for.end30

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %c0, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %c, align 4
  %call = call i32 @iswalnum(i32 %9)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %c0, align 4
  %call4 = call i32 @iswalnum(i32 %10)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  store i32 5, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then
  %11 = load i32, i32* %j, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx9, align 4
  %call10 = call i32 @wcslen(i32* %13)
  store i32 %call10, i32* %n, align 4
  %14 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s11 = getelementptr inbounds %struct.wstr, %struct.wstr* %14, i32 0, i32 0
  %15 = load i32*, i32** %s11, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x i32*], [6 x i32*]* @tbl_article, i32 0, i32 %17
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %n, align 4
  %call13 = call i32 @wcsncasecmp(i32* %add.ptr, i32* %18, i32 %19)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body8
  br label %for.inc

if.end:                                           ; preds = %for.body8
  %20 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s16 = getelementptr inbounds %struct.wstr, %struct.wstr* %20, i32 0, i32 0
  %21 = load i32*, i32** %s16, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, %23
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i32 %add
  %24 = load i32, i32* %arrayidx17, align 4
  %call18 = call i32 @iswalnum(i32 %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  br label %for.inc

if.end21:                                         ; preds = %if.end
  %25 = load i32, i32* %n, align 4
  %26 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %26, %25
  store i32 %add22, i32* %i, align 4
  br label %for.end

for.inc:                                          ; preds = %if.then20, %if.then15
  %27 = load i32, i32* %j, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %if.end21, %for.cond6
  %28 = load i32, i32* %j, align 4
  %cmp23 = icmp slt i32 %28, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end
  %29 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %30 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %29, i32 %30)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %31 = load %struct.wstr*, %struct.wstr** %out.addr, align 4
  %32 = load i32, i32* %c, align 4
  call void @w_append(%struct.wstr* %31, i32 %32)
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.end25
  %33 = load i32, i32* %c, align 4
  store i32 %33, i32* %c0, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %34 = load %struct.wstr*, %struct.wstr** %in.addr, align 4
  %s28 = getelementptr inbounds %struct.wstr, %struct.wstr* %34, i32 0, i32 0
  %35 = load i32*, i32** %s28, align 4
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %35, i32 %inc
  %37 = load i32, i32* %arrayidx29, align 4
  store i32 %37, i32* %c, align 4
  br label %for.cond

for.end30:                                        ; preds = %land.end
  ret void
}

declare i32 @iswalnum(i32 %0) #1

declare i32 @wcsncasecmp(i32* %0, i32* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_numcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %pa = alloca i32*, align 4
  %pb = alloca i32*, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %ea = alloca i32, align 4
  %eb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  store i32* %3, i32** %pa, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  store i32* %7, i32** %pb, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %entry
  %8 = load i32*, i32** %pa, align 4
  %9 = load i32, i32* %8, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i32*, i32** %pb, align 4
  %11 = load i32, i32* %10, align 4
  %tobool3 = icmp ne i32 %11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %12, label %while.body, label %while.end86

while.body:                                       ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32*, i32** %pa, align 4
  %14 = load i32, i32* %13, align 4
  %call = call i32 @iswdigit(i32 %14)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %while.body
  %15 = load i32*, i32** %pa, align 4
  %16 = load i32, i32* %15, align 4
  %sub = sub i32 %16, 48
  %cmp = icmp ult i32 %sub, 10
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %land.lhs.true
  %17 = load i32*, i32** %pb, align 4
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @iswdigit(i32 %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.else

cond.false8:                                      ; preds = %land.lhs.true
  %19 = load i32*, i32** %pb, align 4
  %20 = load i32, i32* %19, align 4
  %sub9 = sub i32 %20, 48
  %cmp10 = icmp ult i32 %sub9, 10
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false8, %cond.true5
  store i32 0, i32* %sb, align 4
  store i32 0, i32* %sa, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %if.then
  %21 = load i32*, i32** %pa, align 4
  %22 = load i32, i32* %sa, align 4
  %arrayidx = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx, align 4
  %cmp12 = icmp eq i32 %23, 48
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %24 = load i32, i32* %sa, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %sa, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond14

while.cond14:                                     ; preds = %while.body17, %while.end
  %25 = load i32*, i32** %pb, align 4
  %26 = load i32, i32* %sb, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %27, 48
  br i1 %cmp16, label %while.body17, label %while.end19

while.body17:                                     ; preds = %while.cond14
  %28 = load i32, i32* %sb, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %sb, align 4
  br label %while.cond14

while.end19:                                      ; preds = %while.cond14
  %29 = load i32, i32* %sa, align 4
  store i32 %29, i32* %ea, align 4
  %30 = load i32, i32* %sb, align 4
  store i32 %30, i32* %eb, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.end19
  %31 = load i32*, i32** %pa, align 4
  %32 = load i32, i32* %ea, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub i32 %33, 48
  %cmp23 = icmp ult i32 %sub22, 10
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %34 = load i32, i32* %ea, align 4
  %inc25 = add nsw i32 %34, 1
  store i32 %inc25, i32* %ea, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %while.end26
  %35 = load i32*, i32** %pb, align 4
  %36 = load i32, i32* %eb, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub i32 %37, 48
  %cmp30 = icmp ult i32 %sub29, 10
  br i1 %cmp30, label %while.body31, label %while.end33

while.body31:                                     ; preds = %while.cond27
  %38 = load i32, i32* %eb, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %eb, align 4
  br label %while.cond27

while.end33:                                      ; preds = %while.cond27
  %39 = load i32, i32* %eb, align 4
  %40 = load i32, i32* %sb, align 4
  %sub34 = sub nsw i32 %39, %40
  %41 = load i32, i32* %ea, align 4
  %42 = load i32, i32* %sa, align 4
  %sub35 = sub nsw i32 %41, %42
  %cmp36 = icmp sgt i32 %sub34, %sub35
  br i1 %cmp36, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.end33
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end33
  %43 = load i32, i32* %eb, align 4
  %44 = load i32, i32* %sb, align 4
  %sub38 = sub nsw i32 %43, %44
  %45 = load i32, i32* %ea, align 4
  %46 = load i32, i32* %sa, align 4
  %sub39 = sub nsw i32 %45, %46
  %cmp40 = icmp slt i32 %sub38, %sub39
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end
  br label %while.cond43

while.cond43:                                     ; preds = %if.end55, %if.end42
  %47 = load i32, i32* %sb, align 4
  %48 = load i32, i32* %eb, align 4
  %cmp44 = icmp slt i32 %47, %48
  br i1 %cmp44, label %while.body45, label %while.end58

while.body45:                                     ; preds = %while.cond43
  %49 = load i32*, i32** %pa, align 4
  %50 = load i32, i32* %sa, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32*, i32** %pb, align 4
  %53 = load i32, i32* %sb, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %51, %54
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %while.body45
  store i32 1, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %while.body45
  %55 = load i32*, i32** %pa, align 4
  %56 = load i32, i32* %sa, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx51, align 4
  %58 = load i32*, i32** %pb, align 4
  %59 = load i32, i32* %sb, align 4
  %arrayidx52 = getelementptr inbounds i32, i32* %58, i32 %59
  %60 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp slt i32 %57, %60
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end50
  store i32 -1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end50
  %61 = load i32, i32* %sa, align 4
  %inc56 = add nsw i32 %61, 1
  store i32 %inc56, i32* %sa, align 4
  %62 = load i32, i32* %sb, align 4
  %inc57 = add nsw i32 %62, 1
  store i32 %inc57, i32* %sb, align 4
  br label %while.cond43

while.end58:                                      ; preds = %while.cond43
  %63 = load i32, i32* %ea, align 4
  %64 = load i32*, i32** %pa, align 4
  %add.ptr = getelementptr inbounds i32, i32* %64, i32 %63
  store i32* %add.ptr, i32** %pa, align 4
  %65 = load i32, i32* %eb, align 4
  %66 = load i32*, i32** %pb, align 4
  %add.ptr59 = getelementptr inbounds i32, i32* %66, i32 %65
  store i32* %add.ptr59, i32** %pb, align 4
  br label %if.end85

if.else:                                          ; preds = %cond.false8, %cond.true5, %cond.false, %cond.true
  br i1 false, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.else
  %67 = load i32*, i32** %pa, align 4
  %68 = load i32, i32* %67, align 4
  %call61 = call i32 @iswdigit(i32 %68)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then66, label %if.else67

cond.false63:                                     ; preds = %if.else
  %69 = load i32*, i32** %pa, align 4
  %70 = load i32, i32* %69, align 4
  %sub64 = sub i32 %70, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %cond.false63, %cond.true60
  store i32 1, i32* %retval, align 4
  br label %return

if.else67:                                        ; preds = %cond.false63, %cond.true60
  br i1 false, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %if.else67
  %71 = load i32*, i32** %pb, align 4
  %72 = load i32, i32* %71, align 4
  %call69 = call i32 @iswdigit(i32 %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.then74, label %if.else75

cond.false71:                                     ; preds = %if.else67
  %73 = load i32*, i32** %pb, align 4
  %74 = load i32, i32* %73, align 4
  %sub72 = sub i32 %74, 48
  %cmp73 = icmp ult i32 %sub72, 10
  br i1 %cmp73, label %if.then74, label %if.else75

if.then74:                                        ; preds = %cond.false71, %cond.true68
  store i32 -1, i32* %retval, align 4
  br label %return

if.else75:                                        ; preds = %cond.false71, %cond.true68
  %75 = load i32*, i32** %pa, align 4
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %pb, align 4
  %78 = load i32, i32* %77, align 4
  %cmp76 = icmp sgt i32 %76, %78
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.else75
  store i32 1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else75
  %79 = load i32*, i32** %pa, align 4
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %pb, align 4
  %82 = load i32, i32* %81, align 4
  %cmp79 = icmp slt i32 %80, %82
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.end78
  %83 = load i32*, i32** %pa, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %83, i32 1
  store i32* %incdec.ptr, i32** %pa, align 4
  %84 = load i32*, i32** %pb, align 4
  %incdec.ptr82 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr82, i32** %pb, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end81
  br label %if.end84

if.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %while.end58
  br label %while.cond

while.end86:                                      ; preds = %land.end
  %85 = load i32*, i32** %pa, align 4
  %86 = load i32, i32* %85, align 4
  %tobool87 = icmp ne i32 %86, 0
  br i1 %tobool87, label %cond.false91, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %while.end86
  %87 = load i32*, i32** %pb, align 4
  %88 = load i32, i32* %87, align 4
  %tobool89 = icmp ne i32 %88, 0
  br i1 %tobool89, label %cond.false91, label %cond.true90

cond.true90:                                      ; preds = %land.lhs.true88
  br label %cond.end

cond.false91:                                     ; preds = %land.lhs.true88, %while.end86
  %89 = load i32*, i32** %pa, align 4
  %90 = load i32, i32* %89, align 4
  %tobool92 = icmp ne i32 %90, 0
  %91 = zext i1 %tobool92 to i64
  %cond = select i1 %tobool92, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ %cond, %cond.false91 ]
  store i32 %cond93, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then80, %if.then77, %if.then74, %if.then66, %if.then54, %if.then49, %if.then41, %if.then37
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

declare i32 @iswdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @w_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.kw_t*
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %1, i32 0, i32 1
  %2 = load %struct.wstr*, %struct.wstr** %w, align 4
  %s = getelementptr inbounds %struct.wstr, %struct.wstr* %2, i32 0, i32 0
  %3 = load i32*, i32** %s, align 4
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.kw_t*
  %w1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %5, i32 0, i32 1
  %6 = load %struct.wstr*, %struct.wstr** %w1, align 4
  %s2 = getelementptr inbounds %struct.wstr, %struct.wstr* %6, i32 0, i32 0
  %7 = load i32*, i32** %s2, align 4
  %call = call i32 @wcscmp(i32* %3, i32* %7)
  ret i32 %call
}

declare i32 @wcscmp(i32* %0, i32* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @natural_sort(i32** %strings, i32 %len, i32 %flags) #0 {
entry:
  %strings.addr = alloca i32**, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %kws = alloca %struct.kw_t*, align 4
  store i32** %strings, i32*** %strings.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %mul = mul i32 8, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.kw_t*
  store %struct.kw_t* %1, %struct.kw_t** %kws, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %4 = load i32**, i32*** %strings.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %7, i32 %8
  %s = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx1, i32 0, i32 0
  store i32* %6, i32** %s, align 4
  %9 = load i32**, i32*** %strings.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx2, align 4
  %call3 = call %struct.wstr* @w_make(i32* %11)
  %12 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %12, i32 %13
  %w = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx4, i32 0, i32 1
  store %struct.wstr* %call3, %struct.wstr** %w, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load i32, i32* %flags.addr, align 4
  %16 = load i32, i32* %j, align 4
  %shl = shl i32 1, %16
  %and = and i32 %15, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %17
  %18 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx8, align 4
  %tobool9 = icmp ne void (%struct.wstr*, %struct.wstr*)* %18, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %19, i32 %20
  %w11 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx10, i32 0, i32 1
  %21 = load %struct.wstr*, %struct.wstr** %w11, align 4
  %22 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [6 x void (%struct.wstr*, %struct.wstr*)*], [6 x void (%struct.wstr*, %struct.wstr*)*]* @trans_funcs, i32 0, i32 %22
  %23 = load void (%struct.wstr*, %struct.wstr*)*, void (%struct.wstr*, %struct.wstr*)** %arrayidx12, align 4
  call void @w_transform(%struct.wstr* %21, void (%struct.wstr*, %struct.wstr*)* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %26 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %27 = bitcast %struct.kw_t* %26 to i8*
  %28 = load i32, i32* %len.addr, align 4
  %29 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %29, 32
  %tobool17 = icmp ne i32 %and16, 0
  %30 = zext i1 %tobool17 to i64
  %cond = select i1 %tobool17, i32 (i8*, i8*)* @w_numcmp, i32 (i8*, i8*)* @w_cmp
  call void @qsort(i8* %27, i32 %28, i32 8, i32 (i8*, i8*)* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end15
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %33 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %33, i32 %34
  %w22 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx21, i32 0, i32 1
  %35 = load %struct.wstr*, %struct.wstr** %w22, align 4
  %s23 = getelementptr inbounds %struct.wstr, %struct.wstr* %35, i32 0, i32 0
  %36 = load i32*, i32** %s23, align 4
  %37 = bitcast i32* %36 to i8*
  call void @free(i8* %37)
  %38 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %38, i32 %39
  %w25 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx24, i32 0, i32 1
  %40 = load %struct.wstr*, %struct.wstr** %w25, align 4
  %41 = bitcast %struct.wstr* %40 to i8*
  call void @free(i8* %41)
  %42 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %42, i32 %43
  %s27 = getelementptr inbounds %struct.kw_t, %struct.kw_t* %arrayidx26, i32 0, i32 0
  %44 = load i32*, i32** %s27, align 4
  %45 = load i32**, i32*** %strings.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32*, i32** %45, i32 %46
  store i32* %44, i32** %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body20
  %47 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %47, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  %48 = load %struct.kw_t*, %struct.kw_t** %kws, align 4
  %49 = bitcast %struct.kw_t* %48 to i8*
  call void @free(i8* %49)
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test_sort(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str = alloca [7 x i32*], align 16
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %0 = bitcast i32** %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32*]* @test to i8*), i32 28, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  %1 = load i32, i32* %flags.addr, align 4
  store i32 %1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @flagnames, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  %6 = load i32, i32* %j, align 4
  %cmp = icmp sgt i32 %6, 1
  %7 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* %5, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  %9 = load i32, i32* %j, align 4
  %shr = ashr i32 %9, 1
  store i32 %shr, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 0
  %10 = load i32, i32* %flags.addr, align 4
  call void @natural_sort(i32** %arraydecay3, i32 7, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %11, 7
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32*], [7 x i32*]* %str, i32 0, i32 %12
  %13 = load i32*, i32** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i32* %13)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0))
  call void @test_sort(i32 1)
  call void @test_sort(i32 2)
  call void @test_sort(i32 32)
  call void @test_sort(i32 17)
  call void @test_sort(i32 7)
  call void @test_sort(i32 63)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
