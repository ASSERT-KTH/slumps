
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for alloc2()

; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 16, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul i32 %mul1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul 16:i32, %1
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %add = add i32 %mul, %mul2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = mul 16:i32, %3
%5:i32 = mul %2, %4
%6:i32 = add %1, %5
infer %6

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul 16:i32, %1
%3:i32 = mul %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mul 16:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = mul 16:i32, %3
%5:i32 = mul %2, %4
%6:i32 = add %1, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mul 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mul 16:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = mul 16:i32, %1
%3:i32 = mul %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for alloc2()

; entering Souper's runOnFunction() for set_boundary()

; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for set_boundary()

; entering Souper's runOnFunction() for calc_diff()

; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add15 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %add15, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add18 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add25 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp slt i32 %add25, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add29 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %fixed, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool44 = icmp ne i32 %53, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc48 = add nsw i32 %57, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc50 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for calc_diff()

; entering Souper's runOnFunction() for iter()

; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %34, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot22 = xor i1 %lnot, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %lnot22 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool23 = icmp ne i32 %35, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot24 = xor i1 %tobool23, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot26 = xor i1 %lnot24, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %lnot.ext27 = zext i1 %lnot26 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add = add nsw i32 %lnot.ext, %lnot.ext27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = var
%6:i1 = ne 0:i32, %5
%7:i1 = xor 1:i1, %6
%8:i1 = xor 1:i1, %7
%9:i32 = zext %8
%10:i32 = addnsw %4, %9
infer %10

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub28 = sub nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp29 = icmp slt i32 %36, %sub28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp29 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add30 = add nsw i32 %add, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = var
%6:i1 = ne 0:i32, %5
%7:i1 = xor 1:i1, %6
%8:i1 = xor 1:i1, %7
%9:i32 = zext %8
%10:i32 = addnsw %4, %9
%11:i32 = var
%12:i32 = var
%13:i32 = subnsw %12, 1:i32
%14:i1 = slt %11, %13
%15:i32 = zext %14
%16:i32 = addnsw %10, %15
infer %16

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub31 = sub nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp32 = icmp slt i32 %38, %sub31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %conv33 = zext i1 %cmp32 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add34 = add nsw i32 %add30, %conv33
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = var
%6:i1 = ne 0:i32, %5
%7:i1 = xor 1:i1, %6
%8:i1 = xor 1:i1, %7
%9:i32 = zext %8
%10:i32 = addnsw %4, %9
%11:i32 = var
%12:i32 = var
%13:i32 = subnsw %12, 1:i32
%14:i1 = slt %11, %13
%15:i32 = zext %14
%16:i32 = addnsw %10, %15
%17:i32 = var
%18:i32 = var
%19:i32 = subnsw %18, 1:i32
%20:i1 = slt %17, %19
%21:i32 = zext %20
%22:i32 = addnsw %16, %21
infer %22

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %fixed, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add38 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc42 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is UNSAT

--------------------------------
guess 2

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %lnot22 = xor i1 %lnot, true"
; from ""
; with "  %tobool = icmp ne i32 %34, 0" in:
"%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
cand %3 %1
"
; with "  %tobool = icmp ne i32 %34, 0"

Module after replacement:
; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot.ext = zext i1 %tobool to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for iter()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for iter()

; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot.ext = zext i1 %tobool to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %34, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %tobool to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool23 = icmp ne i32 %35, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot24 = xor i1 %tobool23, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot26 = xor i1 %lnot24, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %lnot.ext27 = zext i1 %lnot26 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add = add nsw i32 %lnot.ext, %lnot.ext27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = var
%6:i1 = ne 0:i32, %5
%7:i32 = zext %6
%8:i32 = addnsw %4, %7
infer %8

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub28 = sub nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp29 = icmp slt i32 %36, %sub28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp29 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add30 = add nsw i32 %add, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = var
%6:i1 = ne 0:i32, %5
%7:i32 = zext %6
%8:i32 = addnsw %4, %7
%9:i32 = var
%10:i32 = var
%11:i32 = subnsw %10, 1:i32
%12:i1 = slt %9, %11
%13:i32 = zext %12
%14:i32 = addnsw %8, %13
infer %14

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub31 = sub nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp32 = icmp slt i32 %38, %sub31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %conv33 = zext i1 %cmp32 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add34 = add nsw i32 %add30, %conv33
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = var
%6:i1 = ne 0:i32, %5
%7:i32 = zext %6
%8:i32 = addnsw %4, %7
%9:i32 = var
%10:i32 = var
%11:i32 = subnsw %10, 1:i32
%12:i1 = slt %9, %11
%13:i32 = zext %12
%14:i32 = addnsw %8, %13
%15:i32 = var
%16:i32 = var
%17:i32 = subnsw %16, 1:i32
%18:i1 = slt %15, %17
%19:i32 = zext %18
%20:i32 = addnsw %14, %19
infer %20

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %fixed, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add38 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc42 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot.ext = zext i1 %tobool to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %lnot26 = xor i1 %lnot24, true"
; from ""
; with "  %tobool23 = icmp ne i32 %35, 0" in:
"%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i1 = xor 1:i1, %2
cand %3 %1
"
; with "  %tobool23 = icmp ne i32 %35, 0"

Module after replacement:
; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot.ext = zext i1 %tobool to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot.ext27 = zext i1 %tobool23 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for iter()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for iter()

; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot.ext = zext i1 %tobool to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot.ext27 = zext i1 %tobool23 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %34, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %tobool to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool23 = icmp ne i32 %35, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot.ext27 = zext i1 %tobool23 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %lnot.ext, %lnot.ext27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub28 = sub nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp29 = icmp slt i32 %36, %sub28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp29 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add30 = add nsw i32 %add, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %8, 1:i32
%10:i1 = slt %7, %9
%11:i32 = zext %10
%12:i32 = addnsw %6, %11
infer %12

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub31 = sub nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp32 = icmp slt i32 %38, %sub31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %conv33 = zext i1 %cmp32 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %add34 = add nsw i32 %add30, %conv33
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %8, 1:i32
%10:i1 = slt %7, %9
%11:i32 = zext %10
%12:i32 = addnsw %6, %11
%13:i32 = var
%14:i32 = var
%15:i32 = subnsw %14, 1:i32
%16:i1 = slt %13, %15
%17:i32 = zext %16
%18:i32 = addnsw %12, %17
infer %18

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %fixed, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add38 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc42 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %8, 1:i32
%10:i1 = slt %7, %9
%11:i32 = zext %10
%12:i32 = addnsw %6, %11
infer %12


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %8, 1:i32
%10:i1 = slt %7, %9
%11:i32 = zext %10
%12:i32 = addnsw %6, %11
%13:i32 = var
%14:i32 = var
%15:i32 = subnsw %14, 1:i32
%16:i1 = slt %13, %15
%17:i32 = zext %16
%18:i32 = addnsw %12, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
%4:i32 = zext %3

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
%3:i32 = var
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %2, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %8, 1:i32
%10:i1 = slt %7, %9
%11:i32 = zext %10
%12:i32 = addnsw %6, %11

Cost = 9
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for iter()

; entering Souper's runOnFunction() for main()

; ModuleID = './Resistor_mesh.c.bc'
source_filename = "./Resistor_mesh.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { double, i32 }

@.str = private unnamed_addr constant [8 x i8] c"R = %g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node** @alloc2(i32 %w, i32 %h) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.node**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %mul = mul i32 4, %0
  %1 = load i32, i32* %w.addr, align 4
  %mul1 = mul i32 16, %1
  %2 = load i32, i32* %h.addr, align 4
  %mul2 = mul i32 %mul1, %2
  %add = add i32 %mul, %mul2
  %call = call noalias i8* @calloc(i32 1, i32 %add)
  %3 = bitcast i8* %call to %struct.node**
  store %struct.node** %3, %struct.node*** %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct.node**, %struct.node*** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %7, i32 %sub
  %9 = load %struct.node*, %struct.node** %arrayidx, align 4
  %10 = load i32, i32* %w.addr, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %9, i32 %10
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.node**, %struct.node*** %a, align 4
  %12 = load i32, i32* %h.addr, align 4
  %add.ptr3 = getelementptr inbounds %struct.node*, %struct.node** %11, i32 %12
  %13 = bitcast %struct.node** %add.ptr3 to %struct.node*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node* [ %add.ptr, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.node**, %struct.node*** %a, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %14, i32 %15
  store %struct.node* %cond, %struct.node** %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.node**, %struct.node*** %a, align 4
  ret %struct.node** %17
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @set_boundary(%struct.node** %m) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  %0 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %0, i32 1
  %1 = load %struct.node*, %struct.node** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %1, i32 1
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 1
  store i32 1, i32* %fixed, align 8
  %2 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.node*, %struct.node** %2, i32 1
  %3 = load %struct.node*, %struct.node** %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds %struct.node, %struct.node* %3, i32 1
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx3, i32 0, i32 0
  store double 1.000000e+00, double* %v, align 8
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.node*, %struct.node** %4, i32 6
  %5 = load %struct.node*, %struct.node** %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds %struct.node, %struct.node* %5, i32 7
  %fixed6 = getelementptr inbounds %struct.node, %struct.node* %arrayidx5, i32 0, i32 1
  store i32 -1, i32* %fixed6, align 8
  %6 = load %struct.node**, %struct.node*** %m.addr, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %6, i32 6
  %7 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %7, i32 7
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  store double -1.000000e+00, double* %v9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @calc_diff(%struct.node** %m, %struct.node** %d, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %d.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %v = alloca double, align 8
  %total = alloca double, align 8
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store %struct.node** %d, %struct.node*** %d.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end51

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %w.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %v, align 8
  store i32 0, i32* %n, align 4
  %4 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %5, i32 %sub
  %7 = load %struct.node*, %struct.node** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %v5 = getelementptr inbounds %struct.node, %struct.node* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %v5, align 8
  %10 = load double, double* %v, align 8
  %add = fadd double %10, %9
  store double %add, double* %v, align 8
  %11 = load i32, i32* %n, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %12 = load i32, i32* %j, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %13 = load %struct.node**, %struct.node*** %m.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx8, align 4
  %16 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %16, 1
  %arrayidx10 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %sub9
  %v11 = getelementptr inbounds %struct.node, %struct.node* %arrayidx10, i32 0, i32 0
  %17 = load double, double* %v11, align 8
  %18 = load double, double* %v, align 8
  %add12 = fadd double %18, %17
  store double %add12, double* %v, align 8
  %19 = load i32, i32* %n, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %n, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then7, %if.end
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 1
  %21 = load i32, i32* %h.addr, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %22 = load %struct.node**, %struct.node*** %m.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %23, 1
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %22, i32 %add18
  %24 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %26 = load double, double* %v21, align 8
  %27 = load double, double* %v, align 8
  %add22 = fadd double %27, %26
  store double %add22, double* %v, align 8
  %28 = load i32, i32* %n, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then17, %if.end14
  %29 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %29, 1
  %30 = load i32, i32* %w.addr, align 4
  %cmp26 = icmp slt i32 %add25, %30
  br i1 %cmp26, label %if.then27, label %if.end34

if.then27:                                        ; preds = %if.end24
  %31 = load %struct.node**, %struct.node*** %m.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.node*, %struct.node** %31, i32 %32
  %33 = load %struct.node*, %struct.node** %arrayidx28, align 4
  %34 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %34, 1
  %arrayidx30 = getelementptr inbounds %struct.node, %struct.node* %33, i32 %add29
  %v31 = getelementptr inbounds %struct.node, %struct.node* %arrayidx30, i32 0, i32 0
  %35 = load double, double* %v31, align 8
  %36 = load double, double* %v, align 8
  %add32 = fadd double %36, %35
  store double %add32, double* %v, align 8
  %37 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %n, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.node**, %struct.node*** %m.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.node*, %struct.node** %38, i32 %39
  %40 = load %struct.node*, %struct.node** %arrayidx35, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds %struct.node, %struct.node* %40, i32 %41
  %v37 = getelementptr inbounds %struct.node, %struct.node* %arrayidx36, i32 0, i32 0
  %42 = load double, double* %v37, align 8
  %43 = load double, double* %v, align 8
  %44 = load i32, i32* %n, align 4
  %conv = sitofp i32 %44 to double
  %div = fdiv double %43, %conv
  %sub38 = fsub double %42, %div
  store double %sub38, double* %v, align 8
  %45 = load %struct.node**, %struct.node*** %d.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.node*, %struct.node** %45, i32 %46
  %47 = load %struct.node*, %struct.node** %arrayidx39, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds %struct.node, %struct.node* %47, i32 %48
  %v41 = getelementptr inbounds %struct.node, %struct.node* %arrayidx40, i32 0, i32 0
  store double %sub38, double* %v41, align 8
  %49 = load %struct.node**, %struct.node*** %m.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds %struct.node*, %struct.node** %49, i32 %50
  %51 = load %struct.node*, %struct.node** %arrayidx42, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds %struct.node, %struct.node* %51, i32 %52
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx43, i32 0, i32 1
  %53 = load i32, i32* %fixed, align 8
  %tobool44 = icmp ne i32 %53, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.end34
  %54 = load double, double* %v, align 8
  %55 = load double, double* %v, align 8
  %mul = fmul double %54, %55
  %56 = load double, double* %total, align 8
  %add46 = fadd double %56, %mul
  store double %add46, double* %total, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %57 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %57, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc49

for.inc49:                                        ; preds = %for.end
  %58 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end51:                                        ; preds = %for.cond
  %59 = load double, double* %total, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone
define hidden double @iter(%struct.node** %m, i32 %w, i32 %h) #0 {
entry:
  %m.addr = alloca %struct.node**, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %d = alloca %struct.node**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %diff = alloca double, align 8
  %cur = alloca [3 x double], align 16
  store %struct.node** %m, %struct.node*** %m.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %1 = load i32, i32* %h.addr, align 4
  %call = call %struct.node** @alloc2(i32 %0, i32 %1)
  store %struct.node** %call, %struct.node*** %d, align 4
  store double 1.000000e+10, double* %diff, align 8
  %2 = bitcast [3 x double]* %cur to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end12, %entry
  %3 = load double, double* %diff, align 8
  %cmp = fcmp ogt double %3, 0x3AF357C299A88EA7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.node**, %struct.node*** %m.addr, align 4
  call void @set_boundary(%struct.node** %4)
  %5 = load %struct.node**, %struct.node*** %m.addr, align 4
  %6 = load %struct.node**, %struct.node*** %d, align 4
  %7 = load i32, i32* %w.addr, align 4
  %8 = load i32, i32* %h.addr, align 4
  %call1 = call double @calc_diff(%struct.node** %5, %struct.node** %6, i32 %7, i32 %8)
  store double %call1, double* %diff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %while.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %h.addr, align 4
  %cmp2 = icmp slt i32 %9, %10
  br i1 %cmp2, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.node**, %struct.node*** %d, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %13, i32 %14
  %15 = load %struct.node*, %struct.node** %arrayidx, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %v = getelementptr inbounds %struct.node, %struct.node* %arrayidx6, i32 0, i32 0
  %17 = load double, double* %v, align 8
  %18 = load %struct.node**, %struct.node*** %m.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds %struct.node*, %struct.node** %18, i32 %19
  %20 = load %struct.node*, %struct.node** %arrayidx7, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds %struct.node, %struct.node* %20, i32 %21
  %v9 = getelementptr inbounds %struct.node, %struct.node* %arrayidx8, i32 0, i32 0
  %22 = load double, double* %v9, align 8
  %sub = fsub double %22, %17
  store double %sub, double* %v9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %24, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc44, %while.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %h.addr, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body15, label %for.end46

for.body15:                                       ; preds = %for.cond13
  store i32 0, i32* %j, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc41, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %w.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body18, label %for.end43

for.body18:                                       ; preds = %for.cond16
  %29 = load %struct.node**, %struct.node*** %d, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.node*, %struct.node** %29, i32 %30
  %31 = load %struct.node*, %struct.node** %arrayidx19, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.node, %struct.node* %31, i32 %32
  %v21 = getelementptr inbounds %struct.node, %struct.node* %arrayidx20, i32 0, i32 0
  %33 = load double, double* %v21, align 8
  %34 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot.ext = zext i1 %tobool to i32
  %35 = load i32, i32* %j, align 4
  %tobool23 = icmp ne i32 %35, 0
  %lnot.ext27 = zext i1 %tobool23 to i32
  %add = add nsw i32 %lnot.ext, %lnot.ext27
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %h.addr, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %conv = zext i1 %cmp29 to i32
  %add30 = add nsw i32 %add, %conv
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %w.addr, align 4
  %sub31 = sub nsw i32 %39, 1
  %cmp32 = icmp slt i32 %38, %sub31
  %conv33 = zext i1 %cmp32 to i32
  %add34 = add nsw i32 %add30, %conv33
  %conv35 = sitofp i32 %add34 to double
  %mul = fmul double %33, %conv35
  %40 = load %struct.node**, %struct.node*** %m.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds %struct.node*, %struct.node** %40, i32 %41
  %42 = load %struct.node*, %struct.node** %arrayidx36, align 4
  %43 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  %fixed = getelementptr inbounds %struct.node, %struct.node* %arrayidx37, i32 0, i32 1
  %44 = load i32, i32* %fixed, align 8
  %add38 = add nsw i32 %44, 1
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 %add38
  %45 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %45, %mul
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body18
  %46 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %46, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond16

for.end43:                                        ; preds = %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end43
  %47 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %47, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond13

for.end46:                                        ; preds = %for.cond13
  %48 = load %struct.node**, %struct.node*** %d, align 4
  %49 = bitcast %struct.node** %48 to i8*
  call void @free(i8* %49)
  %arrayidx47 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 2
  %50 = load double, double* %arrayidx47, align 16
  %arrayidx48 = getelementptr inbounds [3 x double], [3 x double]* %cur, i32 0, i32 0
  %51 = load double, double* %arrayidx48, align 16
  %sub49 = fsub double %50, %51
  %div = fdiv double %sub49, 2.000000e+00
  ret double %div
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %mesh = alloca %struct.node**, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.node** @alloc2(i32 10, i32 10)
  store %struct.node** %call, %struct.node*** %mesh, align 4
  %0 = load %struct.node**, %struct.node*** %mesh, align 4
  %call1 = call double @iter(%struct.node** %0, i32 10, i32 10)
  %div = fdiv double 2.000000e+00, %call1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %div)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 2 replacements done on this module
Total of 2 replacements candidates on this module
