
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Spiral_matrix.c.bc'
source_filename = "./Spiral_matrix.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"%*d\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %s = alloca i32**, align 4
  %dx = alloca i32, align 4
  %dy = alloca i32, align 4
  %val = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 0, i32* %m, align 4
  store i32 0, i32* %n, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp sge i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp sge i32 %3, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %4 = load i8**, i8*** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 @atoi(i8* %5)
  store i32 %call4, i32* %n, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %6 = load i32, i32* %m, align 4
  %cmp6 = icmp sle i32 %6, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end5
  store i32 5, i32* %m, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end5
  %7 = load i32, i32* %n, align 4
  %cmp9 = icmp sle i32 %7, 0
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end8
  %8 = load i32, i32* %m, align 4
  store i32 %8, i32* %n, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end8
  %9 = load i32, i32* %m, align 4
  %mul = mul i32 4, %9
  %10 = load i32, i32* %m, align 4
  %mul12 = mul i32 4, %10
  %11 = load i32, i32* %n, align 4
  %mul13 = mul i32 %mul12, %11
  %add = add i32 %mul, %mul13
  %call14 = call noalias i8* @calloc(i32 1, i32 %add)
  %12 = bitcast i8* %call14 to i32**
  store i32** %12, i32*** %s, align 4
  %13 = load i32**, i32*** %s, align 4
  %14 = load i32, i32* %m, align 4
  %add.ptr = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = bitcast i32** %add.ptr to i32*
  %16 = load i32**, i32*** %s, align 4
  %arrayidx15 = getelementptr inbounds i32*, i32** %16, i32 0
  store i32* %15, i32** %arrayidx15, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %m, align 4
  %cmp16 = icmp slt i32 %17, %18
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i32**, i32*** %s, align 4
  %20 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %20, 1
  %arrayidx17 = getelementptr inbounds i32*, i32** %19, i32 %sub
  %21 = load i32*, i32** %arrayidx17, align 4
  %22 = load i32, i32* %n, align 4
  %add.ptr18 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32**, i32*** %s, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32*, i32** %23, i32 %24
  store i32* %add.ptr18, i32** %arrayidx19, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %dx, align 4
  store i32 0, i32* %dy, align 4
  store i32 0, i32* %val, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc55, %for.end
  %26 = load i32, i32* %i, align 4
  %cmp21 = icmp sle i32 0, %26
  br i1 %cmp21, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond20
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %m, align 4
  %cmp22 = icmp slt i32 %27, %28
  br i1 %cmp22, label %land.lhs.true23, label %land.end

land.lhs.true23:                                  ; preds = %land.lhs.true
  %29 = load i32, i32* %j, align 4
  %cmp24 = icmp sle i32 0, %29
  br i1 %cmp24, label %land.lhs.true25, label %land.end

land.lhs.true25:                                  ; preds = %land.lhs.true23
  %30 = load i32, i32* %j, align 4
  %31 = load i32, i32* %n, align 4
  %cmp26 = icmp slt i32 %30, %31
  br i1 %cmp26, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true25
  %32 = load i32**, i32*** %s, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i32*, i32** %32, i32 %33
  %34 = load i32*, i32** %arrayidx27, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %34, i32 %35
  %36 = load i32, i32* %arrayidx28, align 4
  %tobool = icmp ne i32 %36, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true25, %land.lhs.true23, %land.lhs.true, %for.cond20
  %37 = phi i1 [ false, %land.lhs.true25 ], [ false, %land.lhs.true23 ], [ false, %land.lhs.true ], [ false, %for.cond20 ], [ %lnot, %land.rhs ]
  br i1 %37, label %for.body29, label %for.end58

for.body29:                                       ; preds = %land.end
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc48, %for.body29
  %38 = load i32, i32* %i, align 4
  %cmp31 = icmp sle i32 0, %38
  br i1 %cmp31, label %land.lhs.true32, label %land.end43

land.lhs.true32:                                  ; preds = %for.cond30
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %m, align 4
  %cmp33 = icmp slt i32 %39, %40
  br i1 %cmp33, label %land.lhs.true34, label %land.end43

land.lhs.true34:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %j, align 4
  %cmp35 = icmp sle i32 0, %41
  br i1 %cmp35, label %land.lhs.true36, label %land.end43

land.lhs.true36:                                  ; preds = %land.lhs.true34
  %42 = load i32, i32* %j, align 4
  %43 = load i32, i32* %n, align 4
  %cmp37 = icmp slt i32 %42, %43
  br i1 %cmp37, label %land.rhs38, label %land.end43

land.rhs38:                                       ; preds = %land.lhs.true36
  %44 = load i32**, i32*** %s, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds i32*, i32** %44, i32 %45
  %46 = load i32*, i32** %arrayidx39, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx40 = getelementptr inbounds i32, i32* %46, i32 %47
  %48 = load i32, i32* %arrayidx40, align 4
  %tobool41 = icmp ne i32 %48, 0
  %lnot42 = xor i1 %tobool41, true
  br label %land.end43

land.end43:                                       ; preds = %land.rhs38, %land.lhs.true36, %land.lhs.true34, %land.lhs.true32, %for.cond30
  %49 = phi i1 [ false, %land.lhs.true36 ], [ false, %land.lhs.true34 ], [ false, %land.lhs.true32 ], [ false, %for.cond30 ], [ %lnot42, %land.rhs38 ]
  br i1 %49, label %for.body44, label %for.end51

for.body44:                                       ; preds = %land.end43
  %50 = load i32, i32* %val, align 4
  %inc45 = add nsw i32 %50, 1
  store i32 %inc45, i32* %val, align 4
  %51 = load i32**, i32*** %s, align 4
  %52 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds i32*, i32** %51, i32 %52
  %53 = load i32*, i32** %arrayidx46, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx47 = getelementptr inbounds i32, i32* %53, i32 %54
  store i32 %inc45, i32* %arrayidx47, align 4
  br label %for.inc48

for.inc48:                                        ; preds = %for.body44
  %55 = load i32, i32* %dx, align 4
  %56 = load i32, i32* %j, align 4
  %add49 = add nsw i32 %56, %55
  store i32 %add49, i32* %j, align 4
  %57 = load i32, i32* %dy, align 4
  %58 = load i32, i32* %i, align 4
  %add50 = add nsw i32 %58, %57
  store i32 %add50, i32* %i, align 4
  br label %for.cond30

for.end51:                                        ; preds = %land.end43
  %59 = load i32, i32* %dx, align 4
  %60 = load i32, i32* %j, align 4
  %sub52 = sub nsw i32 %60, %59
  store i32 %sub52, i32* %j, align 4
  %61 = load i32, i32* %dy, align 4
  %62 = load i32, i32* %i, align 4
  %sub53 = sub nsw i32 %62, %61
  store i32 %sub53, i32* %i, align 4
  %63 = load i32, i32* %dy, align 4
  store i32 %63, i32* %t, align 4
  %64 = load i32, i32* %dx, align 4
  store i32 %64, i32* %dy, align 4
  %65 = load i32, i32* %t, align 4
  %sub54 = sub nsw i32 0, %65
  store i32 %sub54, i32* %dx, align 4
  br label %for.inc55

for.inc55:                                        ; preds = %for.end51
  %66 = load i32, i32* %dy, align 4
  %67 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %67, %66
  store i32 %add56, i32* %i, align 4
  %68 = load i32, i32* %dx, align 4
  %69 = load i32, i32* %j, align 4
  %add57 = add nsw i32 %69, %68
  store i32 %add57, i32* %j, align 4
  br label %for.cond20

for.end58:                                        ; preds = %land.end
  store i32 2, i32* %t, align 4
  br label %for.cond59

for.cond59:                                       ; preds = %for.inc62, %for.end58
  %70 = load i32, i32* %val, align 4
  %div = sdiv i32 %70, 10
  store i32 %div, i32* %val, align 4
  %tobool60 = icmp ne i32 %div, 0
  br i1 %tobool60, label %for.body61, label %for.end64

for.body61:                                       ; preds = %for.cond59
  br label %for.inc62

for.inc62:                                        ; preds = %for.body61
  %71 = load i32, i32* %t, align 4
  %inc63 = add nsw i32 %71, 1
  store i32 %inc63, i32* %t, align 4
  br label %for.cond59

for.end64:                                        ; preds = %for.cond59
  store i32 0, i32* %i, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc80, %for.end64
  %72 = load i32, i32* %i, align 4
  %73 = load i32, i32* %m, align 4
  %cmp66 = icmp slt i32 %72, %73
  br i1 %cmp66, label %for.body67, label %for.end82

for.body67:                                       ; preds = %for.cond65
  store i32 0, i32* %j, align 4
  br label %for.cond68

for.cond68:                                       ; preds = %for.inc77, %for.body67
  %74 = load i32, i32* %j, align 4
  %75 = load i32, i32* %n, align 4
  %cmp69 = icmp slt i32 %74, %75
  br i1 %cmp69, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond68
  %call70 = call i32 @putchar(i32 10)
  %tobool71 = icmp ne i32 %call70, 0
  %lnot72 = xor i1 %tobool71, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond68
  %76 = phi i1 [ true, %for.cond68 ], [ %lnot72, %lor.rhs ]
  br i1 %76, label %for.body73, label %for.end79

for.body73:                                       ; preds = %lor.end
  %77 = load i32, i32* %t, align 4
  %78 = load i32**, i32*** %s, align 4
  %79 = load i32, i32* %i, align 4
  %arrayidx74 = getelementptr inbounds i32*, i32** %78, i32 %79
  %80 = load i32*, i32** %arrayidx74, align 4
  %81 = load i32, i32* %j, align 4
  %arrayidx75 = getelementptr inbounds i32, i32* %80, i32 %81
  %82 = load i32, i32* %arrayidx75, align 4
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %77, i32 %82)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body73
  %83 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %83, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond68

for.end79:                                        ; preds = %lor.end
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %84 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %84, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond65

for.end82:                                        ; preds = %for.cond65
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sge i32 %3, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call4 = call i32 @atoi(i8* %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sle i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sle i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul12 = mul i32 4, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul13 = mul i32 %mul12, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul 4:i32, %1
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %add = add i32 %mul, %mul13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = mul 4:i32, %3
%5:i32 = mul %2, %4
%6:i32 = add %1, %5
infer %6

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp sle i32 0, %26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp sle i32 0, %29
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp slt i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %36, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = phi i1 [ false, %land.lhs.true25 ], [ false, %land.lhs.true23 ], [ false, %land.lhs.true ], [ false, %for.cond20 ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp31 = icmp sle i32 0, %38
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp slt i32 %39, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp35 = icmp sle i32 0, %41
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp37 = icmp slt i32 %42, %43
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %arrayidx40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool41 = icmp ne i32 %48, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot42 = xor i1 %tobool41, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %49 = phi i1 [ false, %land.lhs.true36 ], [ false, %land.lhs.true34 ], [ false, %land.lhs.true32 ], [ false, %for.cond30 ], [ %lnot42, %land.rhs38 ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %val, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %50, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %dx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add49 = add nsw i32 %56, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %dy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add50 = add nsw i32 %58, %57
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %dx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub52 = sub nsw i32 %60, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %dy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub53 = sub nsw i32 %62, %61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %dy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %dx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub54 = sub nsw i32 0, %65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %dy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add56 = add nsw i32 %67, %66
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %dx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add57 = add nsw i32 %69, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %val, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %70, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool60 = icmp ne i32 %div, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc63 = add nsw i32 %71, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp66 = icmp slt i32 %72, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp69 = icmp slt i32 %74, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call70 = call i32 @putchar(i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool71 = icmp ne i32 %call70, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot72 = xor i1 %tobool71, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %76 = phi i1 [ true, %for.cond68 ], [ %lnot72, %lor.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %arrayidx75, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc78 = add nsw i32 %83, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc81 = add nsw i32 %84, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul 4:i32, %1
%3:i32 = mul %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mul 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = mul 4:i32, %3
%5:i32 = mul %2, %4
%6:i32 = add %1, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mul 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mul 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = mul 4:i32, %1
%3:i32 = mul %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
