
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for die()

; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %mul57 = mul nsw i32 0, %call56
  %tobool58 = icmp ne i32 %mul57, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for die()

; entering Souper's runOnFunction() for push()

; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %mul57 = mul nsw i32 0, %call56
  %tobool58 = icmp ne i32 %mul57, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %0, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 256:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 256:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for push()

; entering Souper's runOnFunction() for pop()

; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %mul57 = mul nsw i32 0, %call56
  %tobool58 = icmp ne i32 %mul57, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %1, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pop()

; entering Souper's runOnFunction() for rpn()

; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %mul57 = mul nsw i32 0, %call56
  %tobool58 = icmp ne i32 %mul57, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i8* %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %conv, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %conv11, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %19, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv20 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp21 = icmp eq i32 %conv20, 42
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 42:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %25, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv29 = sext i8 %26 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp eq i32 %conv29, 47
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 47:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i8, i8* %27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv33 = sext i8 %28 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i8, i8* %31, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv38 = sext i8 %32 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp39 = icmp eq i32 %conv38, 94
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 94:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i8, i8* %33, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv42 = sext i8 %34 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i8, i8* %39, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv47 = sext i8 %40 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %42, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool55 = icmp ne i32 %42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call56 = call i32 @putchar(i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul57 = mul nsw i32 0, %call56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool58 = icmp ne i32 %mul57, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 0:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp ne i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 42:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 47:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 94:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %mul57 = mul nsw i32 0, %call56
  %tobool58 = icmp ne i32 %mul57, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %mul57 = mul nsw i32 0, %call56"
; from ""
; with "i32 0" in:
"%0:i32 = var
%1:i32 = mulnsw 0:i32, %0
cand %1 0:i32
"
; with "i32 0"

Module after replacement:
; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %tobool58 = icmp ne i32 0, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for rpn()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for rpn()

; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %tobool58 = icmp ne i32 0, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i8* %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %conv, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %conv11, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %19, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv20 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp21 = icmp eq i32 %conv20, 42
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 42:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %25, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv29 = sext i8 %26 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp eq i32 %conv29, 47
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 47:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i8, i8* %27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv33 = sext i8 %28 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i8, i8* %31, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv38 = sext i8 %32 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp39 = icmp eq i32 %conv38, 94
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 94:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i8, i8* %33, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv42 = sext i8 %34 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i8, i8* %39, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv47 = sext i8 %40 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %42, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool55 = icmp ne i32 %42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool58 = icmp ne i32 0, 0
; Looking for a replacement for:
%0:i1 = ne 0:i32, 0:i32
infer %0

; *****
; For LLVM instruction:
;  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp ne i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = ne 0:i32, 0:i32
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  %tobool58 = icmp ne i32 0, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ %tobool58, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %tobool58 = icmp ne i32 0, 0"
; from ""
; with "i1 false" in:
"%0:i1 = ne 0:i32, 0:i32
cand %0 0:i1
"
; with "i1 false"

Module after replacement:
; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ false, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for rpn()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for rpn()

; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ false, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i8* %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %conv, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %conv11, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %19, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv20 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp21 = icmp eq i32 %conv20, 42
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 42:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %25, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv29 = sext i8 %26 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp eq i32 %conv29, 47
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 47:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i8, i8* %27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv33 = sext i8 %28 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i8, i8* %31, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv38 = sext i8 %32 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp39 = icmp eq i32 %conv38, 94
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 94:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i8, i8* %33, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv42 = sext i8 %34 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i8, i8* %39, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv47 = sext i8 %40 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %42, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool55 = icmp ne i32 %42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = phi i1 [ true, %for.cond54 ], [ false, %lor.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* @depth, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp ne i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for rpn()

; entering Souper's runOnFunction() for main()

; ModuleID = './Parsing-RPN_calculator_algorithm.c.bc'
source_filename = "./Parsing-RPN_calculator_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@depth = hidden global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"stack overflow\0A\00", align 1
@stack = hidden global [256 x double] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [17 x i8] c"stack underflow\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" :\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"'%c': \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"unknown oeprator\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"stack leftover\0A\00", align 1
@__const.main.s = private unnamed_addr constant [28 x i8] c" 3 4 2 * 1 5 - 2 3 ^ ^ / + \00", align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @die(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %msg.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %1)
  call void @abort() #5
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i32, i32* @depth, align 4
  %cmp = icmp sge i32 %0, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double, double* %v.addr, align 8
  %2 = load i32, i32* @depth, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %2
  store double %1, double* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @pop() #0 {
entry:
  %0 = load i32, i32* @depth, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* @depth, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %dec
  %2 = load double, double* %arrayidx, align 8
  ret double %2
}

; Function Attrs: noinline nounwind optnone
define hidden double @rpn(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %i = alloca i32, align 4
  %e = alloca i8*, align 4
  %w = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8** %w, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** %w, align 4
  %call = call i8* @strtok(i8* %0, i8* %1)
  store i8* %call, i8** %s.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end62

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call double @strtod(i8* %3, i8** %e)
  store double %call1, double* %a, align 8
  %4 = load i8*, i8** %e, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  %6 = load double, double* %a, align 8
  call void @push(double %6)
  br label %if.end53

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 43
  br i1 %cmp3, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv6)
  %call8 = call double @pop()
  store double %call8, double* %b, align 8
  %call9 = call double @pop()
  store double %call9, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %b, align 8
  %add = fadd double %11, %12
  call void @push(double %add)
  br label %if.end52

if.else10:                                        ; preds = %if.else
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i8, i8* %13, align 1
  %conv11 = sext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else19

if.then14:                                        ; preds = %if.else10
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv15)
  %call17 = call double @pop()
  store double %call17, double* %b, align 8
  %call18 = call double @pop()
  store double %call18, double* %a, align 8
  %17 = load double, double* %a, align 8
  %18 = load double, double* %b, align 8
  %sub = fsub double %17, %18
  call void @push(double %sub)
  br label %if.end51

if.else19:                                        ; preds = %if.else10
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 42
  br i1 %cmp21, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.else19
  %21 = load i8*, i8** %s.addr, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv24)
  %call26 = call double @pop()
  store double %call26, double* %b, align 8
  %call27 = call double @pop()
  store double %call27, double* %a, align 8
  %23 = load double, double* %a, align 8
  %24 = load double, double* %b, align 8
  %mul = fmul double %23, %24
  call void @push(double %mul)
  br label %if.end50

if.else28:                                        ; preds = %if.else19
  %25 = load i8*, i8** %s.addr, align 4
  %26 = load i8, i8* %25, align 1
  %conv29 = sext i8 %26 to i32
  %cmp30 = icmp eq i32 %conv29, 47
  br i1 %cmp30, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else28
  %27 = load i8*, i8** %s.addr, align 4
  %28 = load i8, i8* %27, align 1
  %conv33 = sext i8 %28 to i32
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv33)
  %call35 = call double @pop()
  store double %call35, double* %b, align 8
  %call36 = call double @pop()
  store double %call36, double* %a, align 8
  %29 = load double, double* %a, align 8
  %30 = load double, double* %b, align 8
  %div = fdiv double %29, %30
  call void @push(double %div)
  br label %if.end49

if.else37:                                        ; preds = %if.else28
  %31 = load i8*, i8** %s.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv38 = sext i8 %32 to i32
  %cmp39 = icmp eq i32 %conv38, 94
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %if.else37
  %33 = load i8*, i8** %s.addr, align 4
  %34 = load i8, i8* %33, align 1
  %conv42 = sext i8 %34 to i32
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv42)
  %call44 = call double @pop()
  store double %call44, double* %b, align 8
  %call45 = call double @pop()
  store double %call45, double* %a, align 8
  %35 = load double, double* %a, align 8
  %36 = load double, double* %b, align 8
  %37 = call double @llvm.pow.f64(double %35, double %36)
  call void @push(double %37)
  br label %if.end

if.else46:                                        ; preds = %if.else37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %39 = load i8*, i8** %s.addr, align 4
  %40 = load i8, i8* %39, align 1
  %conv47 = sext i8 %40 to i32
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %conv47)
  call void @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else46, %if.then41
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then32
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then23
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then14
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then5
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then
  %41 = load i32, i32* @depth, align 4
  store i32 %41, i32* %i, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.body59, %if.end53
  %42 = load i32, i32* %i, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4
  %tobool55 = icmp ne i32 %42, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond54
  %call56 = call i32 @putchar(i32 10)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond54
  %43 = phi i1 [ true, %for.cond54 ], [ false, %lor.rhs ]
  br i1 %43, label %for.body59, label %for.end

for.body59:                                       ; preds = %lor.end
  %44 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x double], [256 x double]* @stack, i32 0, i32 %44
  %45 = load double, double* %arrayidx, align 8
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), double %45)
  br label %for.cond54

for.end:                                          ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %46 = load i8*, i8** %w, align 4
  %call61 = call i8* @strtok(i8* null, i8* %46)
  store i8* %call61, i8** %s.addr, align 4
  br label %for.cond

for.end62:                                        ; preds = %for.cond
  %47 = load i32, i32* @depth, align 4
  %cmp63 = icmp ne i32 %47, 1
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.end62
  call void @die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %for.end62
  %call67 = call double @pop()
  ret double %call67
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #3

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [28 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [28 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([28 x i8], [28 x i8]* @__const.main.s, i32 0, i32 0), i32 28, i1 false)
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %s, i32 0, i32 0
  %call = call double @rpn(i8* %arraydecay)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 2 replacements done on this module
Total of 2 replacements candidates on this module
