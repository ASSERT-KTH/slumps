
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ivp_euler()

; ModuleID = './Euler_method.c.bc'
source_filename = "./Euler_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [12 x i8] c" Step %2d: \00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c" %7.3f\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"    Time: \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c" %7g\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"\0AAnalytic: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ivp_euler(double (double, double)* %f, double %y, i32 %step, i32 %end_t) #0 {
entry:
  %f.addr = alloca double (double, double)*, align 4
  %y.addr = alloca double, align 8
  %step.addr = alloca i32, align 4
  %end_t.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store double (double, double)* %f, double (double, double)** %f.addr, align 4
  store double %y, double* %y.addr, align 8
  store i32 %step, i32* %step.addr, align 4
  store i32 %end_t, i32* %end_t.addr, align 4
  store i32 0, i32* %t, align 4
  %0 = load i32, i32* %step.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %0)
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load i32, i32* %t, align 4
  %rem = srem i32 %1, 10
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load double, double* %y.addr, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %3 = load i32, i32* %step.addr, align 4
  %conv = sitofp i32 %3 to double
  %4 = load double (double, double)*, double (double, double)** %f.addr, align 4
  %5 = load i32, i32* %t, align 4
  %conv2 = sitofp i32 %5 to double
  %6 = load double, double* %y.addr, align 8
  %call3 = call double %4(double %conv2, double %6)
  %mul = fmul double %conv, %call3
  %7 = load double, double* %y.addr, align 8
  %add = fadd double %7, %mul
  store double %add, double* %y.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %8 = load i32, i32* %step.addr, align 4
  %9 = load i32, i32* %t, align 4
  %add4 = add nsw i32 %9, %8
  store i32 %add4, i32* %t, align 4
  %10 = load i32, i32* %end_t.addr, align 4
  %cmp5 = icmp sle i32 %add4, %10
  br i1 %cmp5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @analytic() #0 {
entry:
  %t = alloca double, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load double, double* %t, align 8
  %cmp = fcmp ole double %0, 1.000000e+02
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load double, double* %t, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), double %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load double, double* %t, align 8
  %add = fadd double %2, 1.000000e+01
  store double %add, double* %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %3 = load double, double* %t, align 8
  %cmp4 = fcmp ole double %3, 1.000000e+02
  br i1 %cmp4, label %for.body5, label %for.end11

for.body5:                                        ; preds = %for.cond3
  %4 = load double, double* %t, align 8
  %mul = fmul double -7.000000e-02, %4
  %5 = call double @llvm.exp.f64(double %mul)
  %mul6 = fmul double 8.000000e+01, %5
  %add7 = fadd double 2.000000e+01, %mul6
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %add7)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body5
  %6 = load double, double* %t, align 8
  %add10 = fadd double %6, 1.000000e+01
  store double %add10, double* %t, align 8
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cooling(double %t, double %temp) #0 {
entry:
  %t.addr = alloca double, align 8
  %temp.addr = alloca double, align 8
  store double %t, double* %t.addr, align 8
  store double %temp, double* %temp.addr, align 8
  %0 = load double, double* %temp.addr, align 8
  %sub = fsub double %0, 2.000000e+01
  %mul = fmul double -7.000000e-02, %sub
  ret double %mul
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @analytic()
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 2, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 5, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 10, i32 100)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %9, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %end_t.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %add4, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1 (hasExternalUses)
%3:i32 = var
%4:i1 = sle %2, %3
infer %4
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1 (hasExternalUses)
%3:i32 = var
%4:i1 = sle %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ivp_euler()

; entering Souper's runOnFunction() for analytic()

; ModuleID = './Euler_method.c.bc'
source_filename = "./Euler_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [12 x i8] c" Step %2d: \00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c" %7.3f\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"    Time: \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c" %7g\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"\0AAnalytic: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ivp_euler(double (double, double)* %f, double %y, i32 %step, i32 %end_t) #0 {
entry:
  %f.addr = alloca double (double, double)*, align 4
  %y.addr = alloca double, align 8
  %step.addr = alloca i32, align 4
  %end_t.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store double (double, double)* %f, double (double, double)** %f.addr, align 4
  store double %y, double* %y.addr, align 8
  store i32 %step, i32* %step.addr, align 4
  store i32 %end_t, i32* %end_t.addr, align 4
  store i32 0, i32* %t, align 4
  %0 = load i32, i32* %step.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %0)
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load i32, i32* %t, align 4
  %rem = srem i32 %1, 10
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load double, double* %y.addr, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %3 = load i32, i32* %step.addr, align 4
  %conv = sitofp i32 %3 to double
  %4 = load double (double, double)*, double (double, double)** %f.addr, align 4
  %5 = load i32, i32* %t, align 4
  %conv2 = sitofp i32 %5 to double
  %6 = load double, double* %y.addr, align 8
  %call3 = call double %4(double %conv2, double %6)
  %mul = fmul double %conv, %call3
  %7 = load double, double* %y.addr, align 8
  %add = fadd double %7, %mul
  store double %add, double* %y.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %8 = load i32, i32* %step.addr, align 4
  %9 = load i32, i32* %t, align 4
  %add4 = add nsw i32 %9, %8
  store i32 %add4, i32* %t, align 4
  %10 = load i32, i32* %end_t.addr, align 4
  %cmp5 = icmp sle i32 %add4, %10
  br i1 %cmp5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @analytic() #0 {
entry:
  %t = alloca double, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load double, double* %t, align 8
  %cmp = fcmp ole double %0, 1.000000e+02
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load double, double* %t, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), double %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load double, double* %t, align 8
  %add = fadd double %2, 1.000000e+01
  store double %add, double* %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %3 = load double, double* %t, align 8
  %cmp4 = fcmp ole double %3, 1.000000e+02
  br i1 %cmp4, label %for.body5, label %for.end11

for.body5:                                        ; preds = %for.cond3
  %4 = load double, double* %t, align 8
  %mul = fmul double -7.000000e-02, %4
  %5 = call double @llvm.exp.f64(double %mul)
  %mul6 = fmul double 8.000000e+01, %5
  %add7 = fadd double 2.000000e+01, %mul6
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %add7)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body5
  %6 = load double, double* %t, align 8
  %add10 = fadd double %6, 1.000000e+01
  store double %add10, double* %t, align 8
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cooling(double %t, double %temp) #0 {
entry:
  %t.addr = alloca double, align 8
  %temp.addr = alloca double, align 8
  store double %t, double* %t.addr, align 8
  store double %temp, double* %temp.addr, align 8
  %0 = load double, double* %temp.addr, align 8
  %sub = fsub double %0, 2.000000e+01
  %mul = fmul double -7.000000e-02, %sub
  ret double %mul
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @analytic()
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 2, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 5, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 10, i32 100)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp ole double %0, 1.000000e+02
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = fcmp ole double %3, 1.000000e+02
; Looking for a replacement for:
%0:i1 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for analytic()

; entering Souper's runOnFunction() for cooling()

; ModuleID = './Euler_method.c.bc'
source_filename = "./Euler_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [12 x i8] c" Step %2d: \00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c" %7.3f\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"    Time: \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c" %7g\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"\0AAnalytic: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ivp_euler(double (double, double)* %f, double %y, i32 %step, i32 %end_t) #0 {
entry:
  %f.addr = alloca double (double, double)*, align 4
  %y.addr = alloca double, align 8
  %step.addr = alloca i32, align 4
  %end_t.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store double (double, double)* %f, double (double, double)** %f.addr, align 4
  store double %y, double* %y.addr, align 8
  store i32 %step, i32* %step.addr, align 4
  store i32 %end_t, i32* %end_t.addr, align 4
  store i32 0, i32* %t, align 4
  %0 = load i32, i32* %step.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %0)
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load i32, i32* %t, align 4
  %rem = srem i32 %1, 10
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load double, double* %y.addr, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %3 = load i32, i32* %step.addr, align 4
  %conv = sitofp i32 %3 to double
  %4 = load double (double, double)*, double (double, double)** %f.addr, align 4
  %5 = load i32, i32* %t, align 4
  %conv2 = sitofp i32 %5 to double
  %6 = load double, double* %y.addr, align 8
  %call3 = call double %4(double %conv2, double %6)
  %mul = fmul double %conv, %call3
  %7 = load double, double* %y.addr, align 8
  %add = fadd double %7, %mul
  store double %add, double* %y.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %8 = load i32, i32* %step.addr, align 4
  %9 = load i32, i32* %t, align 4
  %add4 = add nsw i32 %9, %8
  store i32 %add4, i32* %t, align 4
  %10 = load i32, i32* %end_t.addr, align 4
  %cmp5 = icmp sle i32 %add4, %10
  br i1 %cmp5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @analytic() #0 {
entry:
  %t = alloca double, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load double, double* %t, align 8
  %cmp = fcmp ole double %0, 1.000000e+02
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load double, double* %t, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), double %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load double, double* %t, align 8
  %add = fadd double %2, 1.000000e+01
  store double %add, double* %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %3 = load double, double* %t, align 8
  %cmp4 = fcmp ole double %3, 1.000000e+02
  br i1 %cmp4, label %for.body5, label %for.end11

for.body5:                                        ; preds = %for.cond3
  %4 = load double, double* %t, align 8
  %mul = fmul double -7.000000e-02, %4
  %5 = call double @llvm.exp.f64(double %mul)
  %mul6 = fmul double 8.000000e+01, %5
  %add7 = fadd double 2.000000e+01, %mul6
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %add7)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body5
  %6 = load double, double* %t, align 8
  %add10 = fadd double %6, 1.000000e+01
  store double %add10, double* %t, align 8
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cooling(double %t, double %temp) #0 {
entry:
  %t.addr = alloca double, align 8
  %temp.addr = alloca double, align 8
  store double %t, double* %t.addr, align 8
  store double %temp, double* %temp.addr, align 8
  %0 = load double, double* %temp.addr, align 8
  %sub = fsub double %0, 2.000000e+01
  %mul = fmul double -7.000000e-02, %sub
  ret double %mul
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @analytic()
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 2, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 5, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 10, i32 100)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for cooling()

; entering Souper's runOnFunction() for main()

; ModuleID = './Euler_method.c.bc'
source_filename = "./Euler_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [12 x i8] c" Step %2d: \00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c" %7.3f\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"    Time: \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c" %7g\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"\0AAnalytic: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ivp_euler(double (double, double)* %f, double %y, i32 %step, i32 %end_t) #0 {
entry:
  %f.addr = alloca double (double, double)*, align 4
  %y.addr = alloca double, align 8
  %step.addr = alloca i32, align 4
  %end_t.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store double (double, double)* %f, double (double, double)** %f.addr, align 4
  store double %y, double* %y.addr, align 8
  store i32 %step, i32* %step.addr, align 4
  store i32 %end_t, i32* %end_t.addr, align 4
  store i32 0, i32* %t, align 4
  %0 = load i32, i32* %step.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %0)
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load i32, i32* %t, align 4
  %rem = srem i32 %1, 10
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load double, double* %y.addr, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %3 = load i32, i32* %step.addr, align 4
  %conv = sitofp i32 %3 to double
  %4 = load double (double, double)*, double (double, double)** %f.addr, align 4
  %5 = load i32, i32* %t, align 4
  %conv2 = sitofp i32 %5 to double
  %6 = load double, double* %y.addr, align 8
  %call3 = call double %4(double %conv2, double %6)
  %mul = fmul double %conv, %call3
  %7 = load double, double* %y.addr, align 8
  %add = fadd double %7, %mul
  store double %add, double* %y.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %8 = load i32, i32* %step.addr, align 4
  %9 = load i32, i32* %t, align 4
  %add4 = add nsw i32 %9, %8
  store i32 %add4, i32* %t, align 4
  %10 = load i32, i32* %end_t.addr, align 4
  %cmp5 = icmp sle i32 %add4, %10
  br i1 %cmp5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @analytic() #0 {
entry:
  %t = alloca double, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load double, double* %t, align 8
  %cmp = fcmp ole double %0, 1.000000e+02
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load double, double* %t, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), double %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load double, double* %t, align 8
  %add = fadd double %2, 1.000000e+01
  store double %add, double* %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0))
  store double 0.000000e+00, double* %t, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %3 = load double, double* %t, align 8
  %cmp4 = fcmp ole double %3, 1.000000e+02
  br i1 %cmp4, label %for.body5, label %for.end11

for.body5:                                        ; preds = %for.cond3
  %4 = load double, double* %t, align 8
  %mul = fmul double -7.000000e-02, %4
  %5 = call double @llvm.exp.f64(double %mul)
  %mul6 = fmul double 8.000000e+01, %5
  %add7 = fadd double 2.000000e+01, %mul6
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %add7)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body5
  %6 = load double, double* %t, align 8
  %add10 = fadd double %6, 1.000000e+01
  store double %add10, double* %t, align 8
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cooling(double %t, double %temp) #0 {
entry:
  %t.addr = alloca double, align 8
  %temp.addr = alloca double, align 8
  store double %t, double* %t.addr, align 8
  store double %temp, double* %temp.addr, align 8
  %0 = load double, double* %temp.addr, align 8
  %sub = fsub double %0, 2.000000e+01
  %mul = fmul double -7.000000e-02, %sub
  ret double %mul
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @analytic()
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 2, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 5, i32 100)
  call void @ivp_euler(double (double, double)* @cooling, double 1.000000e+02, i32 10, i32 100)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
