
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for _fft()

; ModuleID = './Fast_Fourier_transform.c.bc'
source_filename = "./Fast_Fourier_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"(%g, %g) \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Data: \00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"\0AFFT : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, { double, double }* %buf) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %buf.addr = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load { double, double }*, { double, double }** %buf.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %2, i32 %3
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %tobool = fcmp une double %arrayidx.imag, 0.000000e+00
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.real = load double, double* %arrayidx1.realp, align 8
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  %arrayidx1.imag = load double, double* %arrayidx1.imagp, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %arrayidx1.real)
  br label %if.end

if.else:                                          ; preds = %for.body
  %6 = load { double, double }*, { double, double }** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.real = load double, double* %arrayidx3.realp, align 8
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  %arrayidx3.imag = load double, double* %arrayidx3.imagp, align 8
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %arrayidx4.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 0
  %arrayidx4.real = load double, double* %arrayidx4.realp, align 8
  %arrayidx4.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 1
  %arrayidx4.imag = load double, double* %arrayidx4.imagp, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), double %arrayidx3.real, double %arrayidx4.imag)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [8 x { double, double }], align 16
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [8 x { double, double }]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 128, i1 false)
  %1 = bitcast i8* %0 to [8 x { double, double }]*
  %2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %2, i32 0, i32 0
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 1
  %5 = getelementptr inbounds { double, double }, { double, double }* %4, i32 0, i32 0
  store double 1.000000e+00, double* %5, align 16
  %6 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 2
  %7 = getelementptr inbounds { double, double }, { double, double }* %6, i32 0, i32 0
  store double 1.000000e+00, double* %7, align 16
  %8 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 3
  %9 = getelementptr inbounds { double, double }, { double, double }* %8, i32 0, i32 0
  store double 1.000000e+00, double* %9, align 16
  %arraydecay = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), { double, double }* %arraydecay)
  %arraydecay1 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @fft({ double, double }* %arraydecay1, i32 8)
  %arraydecay2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), { double, double }* %arraydecay2)
  ret i32 0
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 %11, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp = fcmp uno double %mul_r, %mul_r
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %23, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %div32 = sdiv i32 %add31, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = sdiv %2, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %step.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul34 = mul nsw i32 2, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add35 = add nsw i32 %30, %mul34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = sdiv %2, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for _fft()

; entering Souper's runOnFunction() for fft()

; ModuleID = './Fast_Fourier_transform.c.bc'
source_filename = "./Fast_Fourier_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"(%g, %g) \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Data: \00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"\0AFFT : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, { double, double }* %buf) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %buf.addr = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load { double, double }*, { double, double }** %buf.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %2, i32 %3
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %tobool = fcmp une double %arrayidx.imag, 0.000000e+00
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.real = load double, double* %arrayidx1.realp, align 8
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  %arrayidx1.imag = load double, double* %arrayidx1.imagp, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %arrayidx1.real)
  br label %if.end

if.else:                                          ; preds = %for.body
  %6 = load { double, double }*, { double, double }** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.real = load double, double* %arrayidx3.realp, align 8
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  %arrayidx3.imag = load double, double* %arrayidx3.imagp, align 8
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %arrayidx4.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 0
  %arrayidx4.real = load double, double* %arrayidx4.realp, align 8
  %arrayidx4.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 1
  %arrayidx4.imag = load double, double* %arrayidx4.imagp, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), double %arrayidx3.real, double %arrayidx4.imag)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [8 x { double, double }], align 16
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [8 x { double, double }]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 128, i1 false)
  %1 = bitcast i8* %0 to [8 x { double, double }]*
  %2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %2, i32 0, i32 0
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 1
  %5 = getelementptr inbounds { double, double }, { double, double }* %4, i32 0, i32 0
  store double 1.000000e+00, double* %5, align 16
  %6 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 2
  %7 = getelementptr inbounds { double, double }, { double, double }* %6, i32 0, i32 0
  store double 1.000000e+00, double* %7, align 16
  %8 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 3
  %9 = getelementptr inbounds { double, double }, { double, double }* %8, i32 0, i32 0
  store double 1.000000e+00, double* %9, align 16
  %arraydecay = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), { double, double }* %arraydecay)
  %arraydecay1 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @fft({ double, double }* %arraydecay1, i32 8)
  %arraydecay2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), { double, double }* %arraydecay2)
  ret i32 0
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for fft()

; entering Souper's runOnFunction() for show()

; ModuleID = './Fast_Fourier_transform.c.bc'
source_filename = "./Fast_Fourier_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"(%g, %g) \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Data: \00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"\0AFFT : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, { double, double }* %buf) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %buf.addr = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load { double, double }*, { double, double }** %buf.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %2, i32 %3
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %tobool = fcmp une double %arrayidx.imag, 0.000000e+00
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.real = load double, double* %arrayidx1.realp, align 8
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  %arrayidx1.imag = load double, double* %arrayidx1.imagp, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %arrayidx1.real)
  br label %if.end

if.else:                                          ; preds = %for.body
  %6 = load { double, double }*, { double, double }** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.real = load double, double* %arrayidx3.realp, align 8
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  %arrayidx3.imag = load double, double* %arrayidx3.imagp, align 8
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %arrayidx4.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 0
  %arrayidx4.real = load double, double* %arrayidx4.realp, align 8
  %arrayidx4.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 1
  %arrayidx4.imag = load double, double* %arrayidx4.imagp, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), double %arrayidx3.real, double %arrayidx4.imag)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [8 x { double, double }], align 16
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [8 x { double, double }]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 128, i1 false)
  %1 = bitcast i8* %0 to [8 x { double, double }]*
  %2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %2, i32 0, i32 0
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 1
  %5 = getelementptr inbounds { double, double }, { double, double }* %4, i32 0, i32 0
  store double 1.000000e+00, double* %5, align 16
  %6 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 2
  %7 = getelementptr inbounds { double, double }, { double, double }* %6, i32 0, i32 0
  store double 1.000000e+00, double* %7, align 16
  %8 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 3
  %9 = getelementptr inbounds { double, double }, { double, double }* %8, i32 0, i32 0
  store double 1.000000e+00, double* %9, align 16
  %arraydecay = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), { double, double }* %arraydecay)
  %arraydecay1 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @fft({ double, double }* %arraydecay1, i32 8)
  %arraydecay2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), { double, double }* %arraydecay2)
  ret i32 0
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = fcmp une double %arrayidx.imag, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for show()

; entering Souper's runOnFunction() for main()

; ModuleID = './Fast_Fourier_transform.c.bc'
source_filename = "./Fast_Fourier_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@PI = hidden global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%g \00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"(%g, %g) \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Data: \00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"\0AFFT : \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_fft({ double, double }* %buf, { double, double }* %out, i32 %n, i32 %step) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %out.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %tmp7 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp18 = alloca { double, double }, align 8
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store { double, double }* %out, { double, double }** %out.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %step.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load { double, double }*, { double, double }** %out.addr, align 4
  %3 = load { double, double }*, { double, double }** %buf.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %5, 2
  call void @_fft({ double, double }* %2, { double, double }* %3, i32 %4, i32 %mul)
  %6 = load { double, double }*, { double, double }** %out.addr, align 4
  %7 = load i32, i32* %step.addr, align 4
  %add.ptr = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %step.addr, align 4
  %add.ptr1 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %step.addr, align 4
  %mul2 = mul nsw i32 %11, 2
  call void @_fft({ double, double }* %add.ptr, { double, double }* %add.ptr1, i32 %10, i32 %mul2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %12, %13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load double, double* @PI, align 8
  %mul.rl = fmul double -0.000000e+00, %14
  %mul.il = fmul double -1.000000e+00, %14
  %15 = load i32, i32* %i, align 4
  %conv = sitofp i32 %15 to double
  %mul_ac = fmul double %mul.rl, %conv
  %mul_bd = fmul double %mul.il, 0.000000e+00
  %mul_ad = fmul double %mul.rl, 0.000000e+00
  %mul_bc = fmul double %mul.il, %conv
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !2

complex_mul_imag_nan:                             ; preds = %for.body
  %isnan_cmp4 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp4, label %complex_mul_libcall, label %complex_mul_cont, !prof !2

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %mul.rl, double %mul.il, double %conv, double 0.000000e+00) #2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %for.body
  %real_mul_phi = phi double [ %mul_r, %for.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %for.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %16 = load i32, i32* %n.addr, align 4
  %conv5 = sitofp i32 %16 to double
  call void @__divdc3({ double, double }* sret align 8 %tmp6, double %real_mul_phi, double %imag_mul_phi, double %conv5, double 0.000000e+00) #2
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %tmp6.real, double* %indirect-arg-temp.realp, align 8
  store double %tmp6.imag, double* %indirect-arg-temp.imagp, align 8
  call void @cexp({ double, double }* sret align 8 %tmp7, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp) #2
  %tmp7.realp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 0
  %tmp7.real = load double, double* %tmp7.realp, align 8
  %tmp7.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp7, i32 0, i32 1
  %tmp7.imag = load double, double* %tmp7.imagp, align 8
  %17 = load { double, double }*, { double, double }** %out.addr, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %18, %19
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %17, i32 %add
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %mul_ac8 = fmul double %tmp7.real, %arrayidx.real
  %mul_bd9 = fmul double %tmp7.imag, %arrayidx.imag
  %mul_ad10 = fmul double %tmp7.real, %arrayidx.imag
  %mul_bc11 = fmul double %tmp7.imag, %arrayidx.real
  %mul_r12 = fsub double %mul_ac8, %mul_bd9
  %mul_i13 = fadd double %mul_ad10, %mul_bc11
  %isnan_cmp14 = fcmp uno double %mul_r12, %mul_r12
  br i1 %isnan_cmp14, label %complex_mul_imag_nan15, label %complex_mul_cont19, !prof !2

complex_mul_imag_nan15:                           ; preds = %complex_mul_cont
  %isnan_cmp16 = fcmp uno double %mul_i13, %mul_i13
  br i1 %isnan_cmp16, label %complex_mul_libcall17, label %complex_mul_cont19, !prof !2

complex_mul_libcall17:                            ; preds = %complex_mul_imag_nan15
  call void @__muldc3({ double, double }* sret align 8 %tmp18, double %tmp7.real, double %tmp7.imag, double %arrayidx.real, double %arrayidx.imag) #2
  %tmp18.realp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 0
  %tmp18.real = load double, double* %tmp18.realp, align 8
  %tmp18.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp18, i32 0, i32 1
  %tmp18.imag = load double, double* %tmp18.imagp, align 8
  br label %complex_mul_cont19

complex_mul_cont19:                               ; preds = %complex_mul_libcall17, %complex_mul_imag_nan15, %complex_mul_cont
  %real_mul_phi20 = phi double [ %mul_r12, %complex_mul_cont ], [ %mul_r12, %complex_mul_imag_nan15 ], [ %tmp18.real, %complex_mul_libcall17 ]
  %imag_mul_phi21 = phi double [ %mul_i13, %complex_mul_cont ], [ %mul_i13, %complex_mul_imag_nan15 ], [ %tmp18.imag, %complex_mul_libcall17 ]
  %t.realp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.imagp = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  store double %real_mul_phi20, double* %t.realp, align 8
  store double %imag_mul_phi21, double* %t.imagp, align 8
  %20 = load { double, double }*, { double, double }** %out.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds { double, double }, { double, double }* %20, i32 %21
  %arrayidx22.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 0
  %arrayidx22.real = load double, double* %arrayidx22.realp, align 8
  %arrayidx22.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx22, i32 0, i32 1
  %arrayidx22.imag = load double, double* %arrayidx22.imagp, align 8
  %t.realp23 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real = load double, double* %t.realp23, align 8
  %t.imagp24 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag = load double, double* %t.imagp24, align 8
  %add.r = fadd double %arrayidx22.real, %t.real
  %add.i = fadd double %arrayidx22.imag, %t.imag
  %22 = load { double, double }*, { double, double }** %buf.addr, align 4
  %23 = load i32, i32* %i, align 4
  %div = sdiv i32 %23, 2
  %arrayidx25 = getelementptr inbounds { double, double }, { double, double }* %22, i32 %div
  %arrayidx25.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 0
  %arrayidx25.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx25, i32 0, i32 1
  store double %add.r, double* %arrayidx25.realp, align 8
  store double %add.i, double* %arrayidx25.imagp, align 8
  %24 = load { double, double }*, { double, double }** %out.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds { double, double }, { double, double }* %24, i32 %25
  %arrayidx26.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 0
  %arrayidx26.real = load double, double* %arrayidx26.realp, align 8
  %arrayidx26.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx26, i32 0, i32 1
  %arrayidx26.imag = load double, double* %arrayidx26.imagp, align 8
  %t.realp27 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 0
  %t.real28 = load double, double* %t.realp27, align 8
  %t.imagp29 = getelementptr inbounds { double, double }, { double, double }* %t, i32 0, i32 1
  %t.imag30 = load double, double* %t.imagp29, align 8
  %sub.r = fsub double %arrayidx26.real, %t.real28
  %sub.i = fsub double %arrayidx26.imag, %t.imag30
  %26 = load { double, double }*, { double, double }** %buf.addr, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n.addr, align 4
  %add31 = add nsw i32 %27, %28
  %div32 = sdiv i32 %add31, 2
  %arrayidx33 = getelementptr inbounds { double, double }, { double, double }* %26, i32 %div32
  %arrayidx33.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 0
  %arrayidx33.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx33, i32 0, i32 1
  store double %sub.r, double* %arrayidx33.realp, align 8
  store double %sub.i, double* %arrayidx33.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %complex_mul_cont19
  %29 = load i32, i32* %step.addr, align 4
  %mul34 = mul nsw i32 2, %29
  %30 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %30, %mul34
  store i32 %add35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare void @cexp({ double, double }* sret align 8 %0, { double, double }* byval({ double, double }) align 8 %1) #1

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

declare void @__divdc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden void @fft({ double, double }* %buf, i32 %n) #0 {
entry:
  %buf.addr = alloca { double, double }*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca { double, double }, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %vla, i32 %6
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  store double %arrayidx.real, double* %arrayidx1.realp, align 16
  store double %arrayidx.imag, double* %arrayidx1.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  call void @_fft({ double, double }* %8, { double, double }* %vla, i32 %9, i32 1)
  %10 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %10)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %s, { double, double }* %buf) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %buf.addr = alloca { double, double }*, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store { double, double }* %buf, { double, double }** %buf.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load { double, double }*, { double, double }** %buf.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds { double, double }, { double, double }* %2, i32 %3
  %arrayidx.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 0
  %arrayidx.real = load double, double* %arrayidx.realp, align 8
  %arrayidx.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx, i32 0, i32 1
  %arrayidx.imag = load double, double* %arrayidx.imagp, align 8
  %tobool = fcmp une double %arrayidx.imag, 0.000000e+00
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load { double, double }*, { double, double }** %buf.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds { double, double }, { double, double }* %4, i32 %5
  %arrayidx1.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 0
  %arrayidx1.real = load double, double* %arrayidx1.realp, align 8
  %arrayidx1.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx1, i32 0, i32 1
  %arrayidx1.imag = load double, double* %arrayidx1.imagp, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double %arrayidx1.real)
  br label %if.end

if.else:                                          ; preds = %for.body
  %6 = load { double, double }*, { double, double }** %buf.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds { double, double }, { double, double }* %6, i32 %7
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.real = load double, double* %arrayidx3.realp, align 8
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  %arrayidx3.imag = load double, double* %arrayidx3.imagp, align 8
  %8 = load { double, double }*, { double, double }** %buf.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds { double, double }, { double, double }* %8, i32 %9
  %arrayidx4.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 0
  %arrayidx4.real = load double, double* %arrayidx4.realp, align 8
  %arrayidx4.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx4, i32 0, i32 1
  %arrayidx4.imag = load double, double* %arrayidx4.imagp, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), double %arrayidx3.real, double %arrayidx4.imag)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [8 x { double, double }], align 16
  store i32 0, i32* %retval, align 4
  %call = call double @atan2(double 1.000000e+00, double 1.000000e+00) #6
  %mul = fmul double %call, 4.000000e+00
  store double %mul, double* @PI, align 8
  %0 = bitcast [8 x { double, double }]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 128, i1 false)
  %1 = bitcast i8* %0 to [8 x { double, double }]*
  %2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %2, i32 0, i32 0
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 1
  %5 = getelementptr inbounds { double, double }, { double, double }* %4, i32 0, i32 0
  store double 1.000000e+00, double* %5, align 16
  %6 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 2
  %7 = getelementptr inbounds { double, double }, { double, double }* %6, i32 0, i32 0
  store double 1.000000e+00, double* %7, align 16
  %8 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %1, i32 0, i32 3
  %9 = getelementptr inbounds { double, double }, { double, double }* %8, i32 0, i32 0
  store double 1.000000e+00, double* %9, align 16
  %arraydecay = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), { double, double }* %arraydecay)
  %arraydecay1 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @fft({ double, double }* %arraydecay1, i32 8)
  %arraydecay2 = getelementptr inbounds [8 x { double, double }], [8 x { double, double }]* %buf, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), { double, double }* %arraydecay2)
  ret i32 0
}

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #4

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn writeonly }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
