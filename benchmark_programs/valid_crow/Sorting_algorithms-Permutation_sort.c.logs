
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for perm_sort()

; ModuleID = './Sorting_algorithms-Permutation_sort.c.bc'
source_filename = "./Sorting_algorithms-Permutation_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"spqr\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"abc\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"giant squid\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"stuff\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"def\00", align 1
@__const.main.strs = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @perm_sort(i8* %a, i32 %n, i32 %msize, i32 (i8*, i8*)* %_cmp) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %msize.addr = alloca i32, align 4
  %_cmp.addr = alloca i32 (i8*, i8*)*, align 4
  %p = alloca i8*, align 4
  %q = alloca i8*, align 4
  %tmp = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %msize, i32* %msize.addr, align 4
  store i32 (i8*, i8*)* %_cmp, i32 (i8*, i8*)** %_cmp.addr, align 4
  %0 = load i32, i32* %msize.addr, align 4
  %call = call noalias i8* @malloc(i32 %0)
  store i8* %call, i8** %tmp, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %for.end32
  %1 = load i8*, i8** %a.addr, align 4
  %2 = load i32, i32* %msize.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul i32 %2, %sub
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %mul
  store i8* %add.ptr, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i8*, i8** %p, align 4
  %5 = load i8*, i8** %a.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %_cmp.addr, align 4
  %7 = load i8*, i8** %p, align 4
  %8 = load i32, i32* %msize.addr, align 4
  %idx.neg = sub i32 0, %8
  %add.ptr1 = getelementptr inbounds i8, i8* %7, i32 %idx.neg
  store i8* %add.ptr1, i8** %q, align 4
  %9 = load i8*, i8** %p, align 4
  %call2 = call i32 %6(i8* %add.ptr1, i8* %9)
  %cmp3 = icmp sgt i32 %call2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i8*, i8** %q, align 4
  store i8* %10, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i8*, i8** %p, align 4
  %12 = load i8*, i8** %a.addr, align 4
  %cmp4 = icmp ule i8* %11, %12
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.end
  br label %while.end

if.end6:                                          ; preds = %for.end
  %13 = load i8*, i8** %a.addr, align 4
  %14 = load i32, i32* %msize.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 %15, 1
  %mul8 = mul i32 %14, %sub7
  %add.ptr9 = getelementptr inbounds i8, i8* %13, i32 %mul8
  store i8* %add.ptr9, i8** %p, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.end6
  %16 = load i8*, i8** %p, align 4
  %17 = load i8*, i8** %q, align 4
  %cmp11 = icmp ugt i8* %16, %17
  br i1 %cmp11, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond10
  %18 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %_cmp.addr, align 4
  %19 = load i8*, i8** %q, align 4
  %20 = load i8*, i8** %p, align 4
  %call13 = call i32 %18(i8* %19, i8* %20)
  %cmp14 = icmp sgt i32 %call13, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.body12
  br label %for.end20

if.end16:                                         ; preds = %for.body12
  br label %for.inc17

for.inc17:                                        ; preds = %if.end16
  %21 = load i32, i32* %msize.addr, align 4
  %22 = load i8*, i8** %p, align 4
  %idx.neg18 = sub i32 0, %21
  %add.ptr19 = getelementptr inbounds i8, i8* %22, i32 %idx.neg18
  store i8* %add.ptr19, i8** %p, align 4
  br label %for.cond10

for.end20:                                        ; preds = %if.then15, %for.cond10
  %23 = load i8*, i8** %tmp, align 4
  %24 = load i8*, i8** %p, align 4
  %25 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %23, i8* align 1 %24, i32 %25, i1 false)
  %26 = load i8*, i8** %p, align 4
  %27 = load i8*, i8** %q, align 4
  %28 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %26, i8* align 1 %27, i32 %28, i1 false)
  %29 = load i8*, i8** %q, align 4
  %30 = load i8*, i8** %tmp, align 4
  %31 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %29, i8* align 1 %30, i32 %31, i1 false)
  %32 = load i32, i32* %msize.addr, align 4
  %33 = load i8*, i8** %q, align 4
  %add.ptr21 = getelementptr inbounds i8, i8* %33, i32 %32
  store i8* %add.ptr21, i8** %q, align 4
  %34 = load i8*, i8** %a.addr, align 4
  %35 = load i32, i32* %msize.addr, align 4
  %36 = load i32, i32* %n.addr, align 4
  %sub22 = sub nsw i32 %36, 1
  %mul23 = mul i32 %35, %sub22
  %add.ptr24 = getelementptr inbounds i8, i8* %34, i32 %mul23
  store i8* %add.ptr24, i8** %p, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc28, %for.end20
  %37 = load i8*, i8** %q, align 4
  %38 = load i8*, i8** %p, align 4
  %cmp26 = icmp ult i8* %37, %38
  br i1 %cmp26, label %for.body27, label %for.end32

for.body27:                                       ; preds = %for.cond25
  %39 = load i8*, i8** %tmp, align 4
  %40 = load i8*, i8** %p, align 4
  %41 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %39, i8* align 1 %40, i32 %41, i1 false)
  %42 = load i8*, i8** %p, align 4
  %43 = load i8*, i8** %q, align 4
  %44 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %42, i8* align 1 %43, i32 %44, i1 false)
  %45 = load i8*, i8** %q, align 4
  %46 = load i8*, i8** %tmp, align 4
  %47 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %45, i8* align 1 %46, i32 %47, i1 false)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body27
  %48 = load i32, i32* %msize.addr, align 4
  %49 = load i8*, i8** %q, align 4
  %add.ptr29 = getelementptr inbounds i8, i8* %49, i32 %48
  store i8* %add.ptr29, i8** %q, align 4
  %50 = load i32, i32* %msize.addr, align 4
  %51 = load i8*, i8** %p, align 4
  %idx.neg30 = sub i32 0, %50
  %add.ptr31 = getelementptr inbounds i8, i8* %51, i32 %idx.neg30
  store i8* %add.ptr31, i8** %p, align 4
  br label %for.cond25

for.end32:                                        ; preds = %for.cond25
  br label %while.body

while.end:                                        ; preds = %if.then5
  %52 = load i8*, i8** %tmp, align 4
  call void @free(i8* %52)
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %strs = alloca [5 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i8*]* %strs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i8*]* @__const.main.strs to i8*), i32 20, i1 false)
  %arraydecay = getelementptr inbounds [5 x i8*], [5 x i8*]* %strs, i32 0, i32 0
  %1 = bitcast i8** %arraydecay to i8*
  call void @perm_sort(i8* %1, i32 5, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* %strs, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %2, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i8* %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %idx.neg = sub i32 0, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 %6(i8* %add.ptr1, i8* %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %call2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp ule i8* %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul8 = mul i32 %14, %sub7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp11 = icmp ugt i8* %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call13 = call i32 %18(i8* %19, i8* %20)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp sgt i32 %call13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %idx.neg18 = sub i32 0, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul23 = mul i32 %35, %sub22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp26 = icmp ult i8* %37, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %msize.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %idx.neg30 = sub i32 0, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mul %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for perm_sort()

; entering Souper's runOnFunction() for scmp()

; ModuleID = './Sorting_algorithms-Permutation_sort.c.bc'
source_filename = "./Sorting_algorithms-Permutation_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"spqr\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"abc\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"giant squid\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"stuff\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"def\00", align 1
@__const.main.strs = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @perm_sort(i8* %a, i32 %n, i32 %msize, i32 (i8*, i8*)* %_cmp) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %msize.addr = alloca i32, align 4
  %_cmp.addr = alloca i32 (i8*, i8*)*, align 4
  %p = alloca i8*, align 4
  %q = alloca i8*, align 4
  %tmp = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %msize, i32* %msize.addr, align 4
  store i32 (i8*, i8*)* %_cmp, i32 (i8*, i8*)** %_cmp.addr, align 4
  %0 = load i32, i32* %msize.addr, align 4
  %call = call noalias i8* @malloc(i32 %0)
  store i8* %call, i8** %tmp, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %for.end32
  %1 = load i8*, i8** %a.addr, align 4
  %2 = load i32, i32* %msize.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul i32 %2, %sub
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %mul
  store i8* %add.ptr, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i8*, i8** %p, align 4
  %5 = load i8*, i8** %a.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %_cmp.addr, align 4
  %7 = load i8*, i8** %p, align 4
  %8 = load i32, i32* %msize.addr, align 4
  %idx.neg = sub i32 0, %8
  %add.ptr1 = getelementptr inbounds i8, i8* %7, i32 %idx.neg
  store i8* %add.ptr1, i8** %q, align 4
  %9 = load i8*, i8** %p, align 4
  %call2 = call i32 %6(i8* %add.ptr1, i8* %9)
  %cmp3 = icmp sgt i32 %call2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i8*, i8** %q, align 4
  store i8* %10, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i8*, i8** %p, align 4
  %12 = load i8*, i8** %a.addr, align 4
  %cmp4 = icmp ule i8* %11, %12
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.end
  br label %while.end

if.end6:                                          ; preds = %for.end
  %13 = load i8*, i8** %a.addr, align 4
  %14 = load i32, i32* %msize.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 %15, 1
  %mul8 = mul i32 %14, %sub7
  %add.ptr9 = getelementptr inbounds i8, i8* %13, i32 %mul8
  store i8* %add.ptr9, i8** %p, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.end6
  %16 = load i8*, i8** %p, align 4
  %17 = load i8*, i8** %q, align 4
  %cmp11 = icmp ugt i8* %16, %17
  br i1 %cmp11, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond10
  %18 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %_cmp.addr, align 4
  %19 = load i8*, i8** %q, align 4
  %20 = load i8*, i8** %p, align 4
  %call13 = call i32 %18(i8* %19, i8* %20)
  %cmp14 = icmp sgt i32 %call13, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.body12
  br label %for.end20

if.end16:                                         ; preds = %for.body12
  br label %for.inc17

for.inc17:                                        ; preds = %if.end16
  %21 = load i32, i32* %msize.addr, align 4
  %22 = load i8*, i8** %p, align 4
  %idx.neg18 = sub i32 0, %21
  %add.ptr19 = getelementptr inbounds i8, i8* %22, i32 %idx.neg18
  store i8* %add.ptr19, i8** %p, align 4
  br label %for.cond10

for.end20:                                        ; preds = %if.then15, %for.cond10
  %23 = load i8*, i8** %tmp, align 4
  %24 = load i8*, i8** %p, align 4
  %25 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %23, i8* align 1 %24, i32 %25, i1 false)
  %26 = load i8*, i8** %p, align 4
  %27 = load i8*, i8** %q, align 4
  %28 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %26, i8* align 1 %27, i32 %28, i1 false)
  %29 = load i8*, i8** %q, align 4
  %30 = load i8*, i8** %tmp, align 4
  %31 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %29, i8* align 1 %30, i32 %31, i1 false)
  %32 = load i32, i32* %msize.addr, align 4
  %33 = load i8*, i8** %q, align 4
  %add.ptr21 = getelementptr inbounds i8, i8* %33, i32 %32
  store i8* %add.ptr21, i8** %q, align 4
  %34 = load i8*, i8** %a.addr, align 4
  %35 = load i32, i32* %msize.addr, align 4
  %36 = load i32, i32* %n.addr, align 4
  %sub22 = sub nsw i32 %36, 1
  %mul23 = mul i32 %35, %sub22
  %add.ptr24 = getelementptr inbounds i8, i8* %34, i32 %mul23
  store i8* %add.ptr24, i8** %p, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc28, %for.end20
  %37 = load i8*, i8** %q, align 4
  %38 = load i8*, i8** %p, align 4
  %cmp26 = icmp ult i8* %37, %38
  br i1 %cmp26, label %for.body27, label %for.end32

for.body27:                                       ; preds = %for.cond25
  %39 = load i8*, i8** %tmp, align 4
  %40 = load i8*, i8** %p, align 4
  %41 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %39, i8* align 1 %40, i32 %41, i1 false)
  %42 = load i8*, i8** %p, align 4
  %43 = load i8*, i8** %q, align 4
  %44 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %42, i8* align 1 %43, i32 %44, i1 false)
  %45 = load i8*, i8** %q, align 4
  %46 = load i8*, i8** %tmp, align 4
  %47 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %45, i8* align 1 %46, i32 %47, i1 false)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body27
  %48 = load i32, i32* %msize.addr, align 4
  %49 = load i8*, i8** %q, align 4
  %add.ptr29 = getelementptr inbounds i8, i8* %49, i32 %48
  store i8* %add.ptr29, i8** %q, align 4
  %50 = load i32, i32* %msize.addr, align 4
  %51 = load i8*, i8** %p, align 4
  %idx.neg30 = sub i32 0, %50
  %add.ptr31 = getelementptr inbounds i8, i8* %51, i32 %idx.neg30
  store i8* %add.ptr31, i8** %p, align 4
  br label %for.cond25

for.end32:                                        ; preds = %for.cond25
  br label %while.body

while.end:                                        ; preds = %if.then5
  %52 = load i8*, i8** %tmp, align 4
  call void @free(i8* %52)
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %strs = alloca [5 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i8*]* %strs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i8*]* @__const.main.strs to i8*), i32 20, i1 false)
  %arraydecay = getelementptr inbounds [5 x i8*], [5 x i8*]* %strs, i32 0, i32 0
  %1 = bitcast i8** %arraydecay to i8*
  call void @perm_sort(i8* %1, i32 5, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* %strs, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %2, i8* %5) #4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for scmp()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sorting_algorithms-Permutation_sort.c.bc'
source_filename = "./Sorting_algorithms-Permutation_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"spqr\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"abc\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"giant squid\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"stuff\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"def\00", align 1
@__const.main.strs = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @perm_sort(i8* %a, i32 %n, i32 %msize, i32 (i8*, i8*)* %_cmp) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %msize.addr = alloca i32, align 4
  %_cmp.addr = alloca i32 (i8*, i8*)*, align 4
  %p = alloca i8*, align 4
  %q = alloca i8*, align 4
  %tmp = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %msize, i32* %msize.addr, align 4
  store i32 (i8*, i8*)* %_cmp, i32 (i8*, i8*)** %_cmp.addr, align 4
  %0 = load i32, i32* %msize.addr, align 4
  %call = call noalias i8* @malloc(i32 %0)
  store i8* %call, i8** %tmp, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %for.end32
  %1 = load i8*, i8** %a.addr, align 4
  %2 = load i32, i32* %msize.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul i32 %2, %sub
  %add.ptr = getelementptr inbounds i8, i8* %1, i32 %mul
  store i8* %add.ptr, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i8*, i8** %p, align 4
  %5 = load i8*, i8** %a.addr, align 4
  %cmp = icmp ugt i8* %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %_cmp.addr, align 4
  %7 = load i8*, i8** %p, align 4
  %8 = load i32, i32* %msize.addr, align 4
  %idx.neg = sub i32 0, %8
  %add.ptr1 = getelementptr inbounds i8, i8* %7, i32 %idx.neg
  store i8* %add.ptr1, i8** %q, align 4
  %9 = load i8*, i8** %p, align 4
  %call2 = call i32 %6(i8* %add.ptr1, i8* %9)
  %cmp3 = icmp sgt i32 %call2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i8*, i8** %q, align 4
  store i8* %10, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i8*, i8** %p, align 4
  %12 = load i8*, i8** %a.addr, align 4
  %cmp4 = icmp ule i8* %11, %12
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.end
  br label %while.end

if.end6:                                          ; preds = %for.end
  %13 = load i8*, i8** %a.addr, align 4
  %14 = load i32, i32* %msize.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 %15, 1
  %mul8 = mul i32 %14, %sub7
  %add.ptr9 = getelementptr inbounds i8, i8* %13, i32 %mul8
  store i8* %add.ptr9, i8** %p, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.end6
  %16 = load i8*, i8** %p, align 4
  %17 = load i8*, i8** %q, align 4
  %cmp11 = icmp ugt i8* %16, %17
  br i1 %cmp11, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond10
  %18 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %_cmp.addr, align 4
  %19 = load i8*, i8** %q, align 4
  %20 = load i8*, i8** %p, align 4
  %call13 = call i32 %18(i8* %19, i8* %20)
  %cmp14 = icmp sgt i32 %call13, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.body12
  br label %for.end20

if.end16:                                         ; preds = %for.body12
  br label %for.inc17

for.inc17:                                        ; preds = %if.end16
  %21 = load i32, i32* %msize.addr, align 4
  %22 = load i8*, i8** %p, align 4
  %idx.neg18 = sub i32 0, %21
  %add.ptr19 = getelementptr inbounds i8, i8* %22, i32 %idx.neg18
  store i8* %add.ptr19, i8** %p, align 4
  br label %for.cond10

for.end20:                                        ; preds = %if.then15, %for.cond10
  %23 = load i8*, i8** %tmp, align 4
  %24 = load i8*, i8** %p, align 4
  %25 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %23, i8* align 1 %24, i32 %25, i1 false)
  %26 = load i8*, i8** %p, align 4
  %27 = load i8*, i8** %q, align 4
  %28 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %26, i8* align 1 %27, i32 %28, i1 false)
  %29 = load i8*, i8** %q, align 4
  %30 = load i8*, i8** %tmp, align 4
  %31 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %29, i8* align 1 %30, i32 %31, i1 false)
  %32 = load i32, i32* %msize.addr, align 4
  %33 = load i8*, i8** %q, align 4
  %add.ptr21 = getelementptr inbounds i8, i8* %33, i32 %32
  store i8* %add.ptr21, i8** %q, align 4
  %34 = load i8*, i8** %a.addr, align 4
  %35 = load i32, i32* %msize.addr, align 4
  %36 = load i32, i32* %n.addr, align 4
  %sub22 = sub nsw i32 %36, 1
  %mul23 = mul i32 %35, %sub22
  %add.ptr24 = getelementptr inbounds i8, i8* %34, i32 %mul23
  store i8* %add.ptr24, i8** %p, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc28, %for.end20
  %37 = load i8*, i8** %q, align 4
  %38 = load i8*, i8** %p, align 4
  %cmp26 = icmp ult i8* %37, %38
  br i1 %cmp26, label %for.body27, label %for.end32

for.body27:                                       ; preds = %for.cond25
  %39 = load i8*, i8** %tmp, align 4
  %40 = load i8*, i8** %p, align 4
  %41 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %39, i8* align 1 %40, i32 %41, i1 false)
  %42 = load i8*, i8** %p, align 4
  %43 = load i8*, i8** %q, align 4
  %44 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %42, i8* align 1 %43, i32 %44, i1 false)
  %45 = load i8*, i8** %q, align 4
  %46 = load i8*, i8** %tmp, align 4
  %47 = load i32, i32* %msize.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %45, i8* align 1 %46, i32 %47, i1 false)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body27
  %48 = load i32, i32* %msize.addr, align 4
  %49 = load i8*, i8** %q, align 4
  %add.ptr29 = getelementptr inbounds i8, i8* %49, i32 %48
  store i8* %add.ptr29, i8** %q, align 4
  %50 = load i32, i32* %msize.addr, align 4
  %51 = load i8*, i8** %p, align 4
  %idx.neg30 = sub i32 0, %50
  %add.ptr31 = getelementptr inbounds i8, i8* %51, i32 %idx.neg30
  store i8* %add.ptr31, i8** %p, align 4
  br label %for.cond25

for.end32:                                        ; preds = %for.cond25
  br label %while.body

while.end:                                        ; preds = %if.then5
  %52 = load i8*, i8** %tmp, align 4
  call void @free(i8* %52)
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %strs = alloca [5 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i8*]* %strs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i8*]* @__const.main.strs to i8*), i32 20, i1 false)
  %arraydecay = getelementptr inbounds [5 x i8*], [5 x i8*]* %strs, i32 0, i32 0
  %1 = bitcast i8** %arraydecay to i8*
  call void @perm_sort(i8* %1, i32 5, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* %strs, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
