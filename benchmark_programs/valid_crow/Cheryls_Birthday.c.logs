
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for printRemaining()

; ModuleID = './Cheryls_Birthday.c.bc'
source_filename = "./Cheryls_Birthday.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Date = type { i32, i32, i8 }

@.str = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@months = hidden global [13 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0)], align 16
@dates = hidden global [10 x %struct.Date] [%struct.Date { i32 5, i32 15, i8 1 }, %struct.Date { i32 5, i32 16, i8 1 }, %struct.Date { i32 5, i32 19, i8 1 }, %struct.Date { i32 6, i32 17, i8 1 }, %struct.Date { i32 6, i32 18, i8 1 }, %struct.Date { i32 7, i32 14, i8 1 }, %struct.Date { i32 7, i32 16, i8 1 }, %struct.Date { i32 8, i32 14, i8 1 }, %struct.Date { i32 8, i32 15, i8 1 }, %struct.Date { i32 8, i32 17, i8 1 }], align 16
@.str.13 = private unnamed_addr constant [15 x i8] c"%d remaining.\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"%s, %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printRemaining() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %c, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %c, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i32 %5)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printAnswer() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %3
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx1, i32 0, i32 0
  %4 = load i32, i32* %month, align 4
  %arrayidx2 = getelementptr inbounds [13 x i8*], [13 x i8*]* @months, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx3, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* %5, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @firstPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc28, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %1, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %2
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 1
  %3 = load i32, i32* %day, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %day5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 1
  %5 = load i32, i32* %day5, align 4
  %cmp6 = icmp eq i32 %3, %5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %6 = load i32, i32* %c, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %j, align 4
  %inc7 = add nsw i32 %7, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %8 = load i32, i32* %c, align 4
  %cmp8 = icmp eq i32 %8, 1
  br i1 %cmp8, label %if.then9, label %if.end27

if.then9:                                         ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc24, %if.then9
  %9 = load i32, i32* %j, align 4
  %cmp11 = icmp ult i32 %9, 10
  br i1 %cmp11, label %for.body12, label %for.end26

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %10
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx13, i32 0, i32 2
  %11 = load i8, i8* %active, align 4
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %for.body12
  br label %for.inc24

if.end15:                                         ; preds = %for.body12
  %12 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %12
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx16, i32 0, i32 0
  %13 = load i32, i32* %month, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %month18 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx17, i32 0, i32 0
  %15 = load i32, i32* %month18, align 4
  %cmp19 = icmp eq i32 %13, %15
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end15
  %16 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  store i8 0, i8* %active22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end15
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23, %if.then14
  %17 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %17, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond10

for.end26:                                        ; preds = %for.cond10
  br label %if.end27

if.end27:                                         ; preds = %for.end26, %for.end
  br label %for.inc28

for.inc28:                                        ; preds = %if.end27
  %18 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %18, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end30:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @secondPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %day11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 1
  %9 = load i32, i32* %day11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %day27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 1
  %17 = load i32, i32* %day27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %day29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 1
  %19 = load i32, i32* %day29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @thirdPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 0
  %7 = load i32, i32* %month, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %month11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 0
  %9 = load i32, i32* %month11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %month27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 0
  %17 = load i32, i32* %month27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %month29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 0
  %19 = load i32, i32* %month29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @printRemaining()
  call void @firstPass()
  call void @printRemaining()
  call void @secondPass()
  call void @printRemaining()
  call void @thirdPass()
  call void @printAnswer()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %active, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %2 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc1 = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00000001)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printRemaining()

; entering Souper's runOnFunction() for printAnswer()

; ModuleID = './Cheryls_Birthday.c.bc'
source_filename = "./Cheryls_Birthday.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Date = type { i32, i32, i8 }

@.str = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@months = hidden global [13 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0)], align 16
@dates = hidden global [10 x %struct.Date] [%struct.Date { i32 5, i32 15, i8 1 }, %struct.Date { i32 5, i32 16, i8 1 }, %struct.Date { i32 5, i32 19, i8 1 }, %struct.Date { i32 6, i32 17, i8 1 }, %struct.Date { i32 6, i32 18, i8 1 }, %struct.Date { i32 7, i32 14, i8 1 }, %struct.Date { i32 7, i32 16, i8 1 }, %struct.Date { i32 8, i32 14, i8 1 }, %struct.Date { i32 8, i32 15, i8 1 }, %struct.Date { i32 8, i32 17, i8 1 }], align 16
@.str.13 = private unnamed_addr constant [15 x i8] c"%d remaining.\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"%s, %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printRemaining() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %c, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %c, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i32 %5)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printAnswer() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %3
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx1, i32 0, i32 0
  %4 = load i32, i32* %month, align 4
  %arrayidx2 = getelementptr inbounds [13 x i8*], [13 x i8*]* @months, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx3, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* %5, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @firstPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc28, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %1, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %2
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 1
  %3 = load i32, i32* %day, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %day5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 1
  %5 = load i32, i32* %day5, align 4
  %cmp6 = icmp eq i32 %3, %5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %6 = load i32, i32* %c, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %j, align 4
  %inc7 = add nsw i32 %7, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %8 = load i32, i32* %c, align 4
  %cmp8 = icmp eq i32 %8, 1
  br i1 %cmp8, label %if.then9, label %if.end27

if.then9:                                         ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc24, %if.then9
  %9 = load i32, i32* %j, align 4
  %cmp11 = icmp ult i32 %9, 10
  br i1 %cmp11, label %for.body12, label %for.end26

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %10
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx13, i32 0, i32 2
  %11 = load i8, i8* %active, align 4
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %for.body12
  br label %for.inc24

if.end15:                                         ; preds = %for.body12
  %12 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %12
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx16, i32 0, i32 0
  %13 = load i32, i32* %month, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %month18 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx17, i32 0, i32 0
  %15 = load i32, i32* %month18, align 4
  %cmp19 = icmp eq i32 %13, %15
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end15
  %16 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  store i8 0, i8* %active22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end15
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23, %if.then14
  %17 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %17, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond10

for.end26:                                        ; preds = %for.cond10
  br label %if.end27

if.end27:                                         ; preds = %for.end26, %for.end
  br label %for.inc28

for.inc28:                                        ; preds = %if.end27
  %18 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %18, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end30:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @secondPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %day11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 1
  %9 = load i32, i32* %day11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %day27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 1
  %17 = load i32, i32* %day27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %day29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 1
  %19 = load i32, i32* %day29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @thirdPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 0
  %7 = load i32, i32* %month, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %month11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 0
  %9 = load i32, i32* %month11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %month27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 0
  %17 = load i32, i32* %month27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %month29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 0
  %19 = load i32, i32* %month29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @printRemaining()
  call void @firstPass()
  call void @printRemaining()
  call void @secondPass()
  call void @printRemaining()
  call void @thirdPass()
  call void @printAnswer()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %active, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %2 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %month, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %day, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for printAnswer()

; entering Souper's runOnFunction() for firstPass()

; ModuleID = './Cheryls_Birthday.c.bc'
source_filename = "./Cheryls_Birthday.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Date = type { i32, i32, i8 }

@.str = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@months = hidden global [13 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0)], align 16
@dates = hidden global [10 x %struct.Date] [%struct.Date { i32 5, i32 15, i8 1 }, %struct.Date { i32 5, i32 16, i8 1 }, %struct.Date { i32 5, i32 19, i8 1 }, %struct.Date { i32 6, i32 17, i8 1 }, %struct.Date { i32 6, i32 18, i8 1 }, %struct.Date { i32 7, i32 14, i8 1 }, %struct.Date { i32 7, i32 16, i8 1 }, %struct.Date { i32 8, i32 14, i8 1 }, %struct.Date { i32 8, i32 15, i8 1 }, %struct.Date { i32 8, i32 17, i8 1 }], align 16
@.str.13 = private unnamed_addr constant [15 x i8] c"%d remaining.\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"%s, %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printRemaining() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %c, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %c, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i32 %5)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printAnswer() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %3
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx1, i32 0, i32 0
  %4 = load i32, i32* %month, align 4
  %arrayidx2 = getelementptr inbounds [13 x i8*], [13 x i8*]* @months, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx3, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* %5, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @firstPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc28, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %1, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %2
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 1
  %3 = load i32, i32* %day, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %day5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 1
  %5 = load i32, i32* %day5, align 4
  %cmp6 = icmp eq i32 %3, %5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %6 = load i32, i32* %c, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %j, align 4
  %inc7 = add nsw i32 %7, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %8 = load i32, i32* %c, align 4
  %cmp8 = icmp eq i32 %8, 1
  br i1 %cmp8, label %if.then9, label %if.end27

if.then9:                                         ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc24, %if.then9
  %9 = load i32, i32* %j, align 4
  %cmp11 = icmp ult i32 %9, 10
  br i1 %cmp11, label %for.body12, label %for.end26

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %10
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx13, i32 0, i32 2
  %11 = load i8, i8* %active, align 4
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %for.body12
  br label %for.inc24

if.end15:                                         ; preds = %for.body12
  %12 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %12
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx16, i32 0, i32 0
  %13 = load i32, i32* %month, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %month18 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx17, i32 0, i32 0
  %15 = load i32, i32* %month18, align 4
  %cmp19 = icmp eq i32 %13, %15
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end15
  %16 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  store i8 0, i8* %active22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end15
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23, %if.then14
  %17 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %17, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond10

for.end26:                                        ; preds = %for.cond10
  br label %if.end27

if.end27:                                         ; preds = %for.end26, %for.end
  br label %for.inc28

for.inc28:                                        ; preds = %if.end27
  %18 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %18, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end30:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @secondPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %day11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 1
  %9 = load i32, i32* %day11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %day27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 1
  %17 = load i32, i32* %day27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %day29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 1
  %19 = load i32, i32* %day29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @thirdPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 0
  %7 = load i32, i32* %month, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %month11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 0
  %9 = load i32, i32* %month11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %month27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 0
  %17 = load i32, i32* %month27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %month29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 0
  %19 = load i32, i32* %month29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @printRemaining()
  call void @firstPass()
  call void @printRemaining()
  call void @secondPass()
  call void @printRemaining()
  call void @thirdPass()
  call void @printAnswer()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %day, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %day5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc7 = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp ult i32 %9, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %active, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %11 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %month, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %month18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp eq i32 %13, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for firstPass()

; entering Souper's runOnFunction() for secondPass()

; ModuleID = './Cheryls_Birthday.c.bc'
source_filename = "./Cheryls_Birthday.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Date = type { i32, i32, i8 }

@.str = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@months = hidden global [13 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0)], align 16
@dates = hidden global [10 x %struct.Date] [%struct.Date { i32 5, i32 15, i8 1 }, %struct.Date { i32 5, i32 16, i8 1 }, %struct.Date { i32 5, i32 19, i8 1 }, %struct.Date { i32 6, i32 17, i8 1 }, %struct.Date { i32 6, i32 18, i8 1 }, %struct.Date { i32 7, i32 14, i8 1 }, %struct.Date { i32 7, i32 16, i8 1 }, %struct.Date { i32 8, i32 14, i8 1 }, %struct.Date { i32 8, i32 15, i8 1 }, %struct.Date { i32 8, i32 17, i8 1 }], align 16
@.str.13 = private unnamed_addr constant [15 x i8] c"%d remaining.\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"%s, %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printRemaining() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %c, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %c, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i32 %5)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printAnswer() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %3
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx1, i32 0, i32 0
  %4 = load i32, i32* %month, align 4
  %arrayidx2 = getelementptr inbounds [13 x i8*], [13 x i8*]* @months, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx3, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* %5, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @firstPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc28, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %1, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %2
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 1
  %3 = load i32, i32* %day, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %day5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 1
  %5 = load i32, i32* %day5, align 4
  %cmp6 = icmp eq i32 %3, %5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %6 = load i32, i32* %c, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %j, align 4
  %inc7 = add nsw i32 %7, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %8 = load i32, i32* %c, align 4
  %cmp8 = icmp eq i32 %8, 1
  br i1 %cmp8, label %if.then9, label %if.end27

if.then9:                                         ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc24, %if.then9
  %9 = load i32, i32* %j, align 4
  %cmp11 = icmp ult i32 %9, 10
  br i1 %cmp11, label %for.body12, label %for.end26

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %10
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx13, i32 0, i32 2
  %11 = load i8, i8* %active, align 4
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %for.body12
  br label %for.inc24

if.end15:                                         ; preds = %for.body12
  %12 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %12
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx16, i32 0, i32 0
  %13 = load i32, i32* %month, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %month18 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx17, i32 0, i32 0
  %15 = load i32, i32* %month18, align 4
  %cmp19 = icmp eq i32 %13, %15
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end15
  %16 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  store i8 0, i8* %active22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end15
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23, %if.then14
  %17 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %17, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond10

for.end26:                                        ; preds = %for.cond10
  br label %if.end27

if.end27:                                         ; preds = %for.end26, %for.end
  br label %for.inc28

for.inc28:                                        ; preds = %if.end27
  %18 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %18, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end30:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @secondPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %day11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 1
  %9 = load i32, i32* %day11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %day27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 1
  %17 = load i32, i32* %day27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %day29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 1
  %19 = load i32, i32* %day29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @thirdPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 0
  %7 = load i32, i32* %month, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %month11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 0
  %9 = load i32, i32* %month11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %month27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 0
  %17 = load i32, i32* %month27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %month29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 0
  %19 = load i32, i32* %month29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @printRemaining()
  call void @firstPass()
  call void @printRemaining()
  call void @secondPass()
  call void @printRemaining()
  call void @thirdPass()
  call void @printAnswer()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %active, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %2 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %3, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %active5, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool6 = trunc i8 %5 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %day, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %day11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %7, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp sgt i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp ult i32 %13, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %active22, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool23 = trunc i8 %15 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %day27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %day29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp eq i32 %17, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for secondPass()

; entering Souper's runOnFunction() for thirdPass()

; ModuleID = './Cheryls_Birthday.c.bc'
source_filename = "./Cheryls_Birthday.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Date = type { i32, i32, i8 }

@.str = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@months = hidden global [13 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0)], align 16
@dates = hidden global [10 x %struct.Date] [%struct.Date { i32 5, i32 15, i8 1 }, %struct.Date { i32 5, i32 16, i8 1 }, %struct.Date { i32 5, i32 19, i8 1 }, %struct.Date { i32 6, i32 17, i8 1 }, %struct.Date { i32 6, i32 18, i8 1 }, %struct.Date { i32 7, i32 14, i8 1 }, %struct.Date { i32 7, i32 16, i8 1 }, %struct.Date { i32 8, i32 14, i8 1 }, %struct.Date { i32 8, i32 15, i8 1 }, %struct.Date { i32 8, i32 17, i8 1 }], align 16
@.str.13 = private unnamed_addr constant [15 x i8] c"%d remaining.\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"%s, %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printRemaining() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %c, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %c, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i32 %5)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printAnswer() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %3
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx1, i32 0, i32 0
  %4 = load i32, i32* %month, align 4
  %arrayidx2 = getelementptr inbounds [13 x i8*], [13 x i8*]* @months, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx3, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* %5, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @firstPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc28, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %1, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %2
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 1
  %3 = load i32, i32* %day, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %day5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 1
  %5 = load i32, i32* %day5, align 4
  %cmp6 = icmp eq i32 %3, %5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %6 = load i32, i32* %c, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %j, align 4
  %inc7 = add nsw i32 %7, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %8 = load i32, i32* %c, align 4
  %cmp8 = icmp eq i32 %8, 1
  br i1 %cmp8, label %if.then9, label %if.end27

if.then9:                                         ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc24, %if.then9
  %9 = load i32, i32* %j, align 4
  %cmp11 = icmp ult i32 %9, 10
  br i1 %cmp11, label %for.body12, label %for.end26

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %10
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx13, i32 0, i32 2
  %11 = load i8, i8* %active, align 4
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %for.body12
  br label %for.inc24

if.end15:                                         ; preds = %for.body12
  %12 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %12
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx16, i32 0, i32 0
  %13 = load i32, i32* %month, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %month18 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx17, i32 0, i32 0
  %15 = load i32, i32* %month18, align 4
  %cmp19 = icmp eq i32 %13, %15
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end15
  %16 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  store i8 0, i8* %active22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end15
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23, %if.then14
  %17 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %17, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond10

for.end26:                                        ; preds = %for.cond10
  br label %if.end27

if.end27:                                         ; preds = %for.end26, %for.end
  br label %for.inc28

for.inc28:                                        ; preds = %if.end27
  %18 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %18, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end30:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @secondPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %day11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 1
  %9 = load i32, i32* %day11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %day27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 1
  %17 = load i32, i32* %day27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %day29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 1
  %19 = load i32, i32* %day29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @thirdPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 0
  %7 = load i32, i32* %month, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %month11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 0
  %9 = load i32, i32* %month11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %month27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 0
  %17 = load i32, i32* %month27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %month29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 0
  %19 = load i32, i32* %month29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @printRemaining()
  call void @firstPass()
  call void @printRemaining()
  call void @secondPass()
  call void @printRemaining()
  call void @thirdPass()
  call void @printAnswer()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %active, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %2 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %3, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %active5, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool6 = trunc i8 %5 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %month, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %month11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %7, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp sgt i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp ult i32 %13, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %active22, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool23 = trunc i8 %15 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %month27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %month29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp eq i32 %17, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for thirdPass()

; entering Souper's runOnFunction() for main()

; ModuleID = './Cheryls_Birthday.c.bc'
source_filename = "./Cheryls_Birthday.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Date = type { i32, i32, i8 }

@.str = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@months = hidden global [13 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0)], align 16
@dates = hidden global [10 x %struct.Date] [%struct.Date { i32 5, i32 15, i8 1 }, %struct.Date { i32 5, i32 16, i8 1 }, %struct.Date { i32 5, i32 19, i8 1 }, %struct.Date { i32 6, i32 17, i8 1 }, %struct.Date { i32 6, i32 18, i8 1 }, %struct.Date { i32 7, i32 14, i8 1 }, %struct.Date { i32 7, i32 16, i8 1 }, %struct.Date { i32 8, i32 14, i8 1 }, %struct.Date { i32 8, i32 15, i8 1 }, %struct.Date { i32 8, i32 17, i8 1 }], align 16
@.str.13 = private unnamed_addr constant [15 x i8] c"%d remaining.\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"%s, %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printRemaining() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %c, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %4, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %c, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i32 %5)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printAnswer() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %3
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx1, i32 0, i32 0
  %4 = load i32, i32* %month, align 4
  %arrayidx2 = getelementptr inbounds [13 x i8*], [13 x i8*]* @months, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx3, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* %5, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @firstPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc28, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %1, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %2
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 1
  %3 = load i32, i32* %day, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %day5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 1
  %5 = load i32, i32* %day5, align 4
  %cmp6 = icmp eq i32 %3, %5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %6 = load i32, i32* %c, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %j, align 4
  %inc7 = add nsw i32 %7, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %8 = load i32, i32* %c, align 4
  %cmp8 = icmp eq i32 %8, 1
  br i1 %cmp8, label %if.then9, label %if.end27

if.then9:                                         ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc24, %if.then9
  %9 = load i32, i32* %j, align 4
  %cmp11 = icmp ult i32 %9, 10
  br i1 %cmp11, label %for.body12, label %for.end26

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %10
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx13, i32 0, i32 2
  %11 = load i8, i8* %active, align 4
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %for.body12
  br label %for.inc24

if.end15:                                         ; preds = %for.body12
  %12 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %12
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx16, i32 0, i32 0
  %13 = load i32, i32* %month, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %month18 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx17, i32 0, i32 0
  %15 = load i32, i32* %month18, align 4
  %cmp19 = icmp eq i32 %13, %15
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end15
  %16 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  store i8 0, i8* %active22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end15
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23, %if.then14
  %17 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %17, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond10

for.end26:                                        ; preds = %for.cond10
  br label %if.end27

if.end27:                                         ; preds = %for.end26, %for.end
  br label %for.inc28

for.inc28:                                        ; preds = %if.end27
  %18 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %18, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end30:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @secondPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %day = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %day, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %day11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 1
  %9 = load i32, i32* %day11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %day27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 1
  %17 = load i32, i32* %day27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %day29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 1
  %19 = load i32, i32* %day29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @thirdPass() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %1
  %active = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx, i32 0, i32 2
  %2 = load i8, i8* %active, align 4
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc39

if.end:                                           ; preds = %for.body
  store i32 0, i32* %c, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp ult i32 %3, 10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %4
  %active5 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx4, i32 0, i32 2
  %5 = load i8, i8* %active5, align 4
  %tobool6 = trunc i8 %5 to i1
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %for.body3
  br label %for.inc

if.end8:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %6
  %month = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx9, i32 0, i32 0
  %7 = load i32, i32* %month, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %8
  %month11 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx10, i32 0, i32 0
  %9 = load i32, i32* %month11, align 4
  %cmp12 = icmp eq i32 %7, %9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %10 = load i32, i32* %c, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %12, 1
  br i1 %cmp16, label %if.then17, label %if.end38

if.then17:                                        ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc35, %if.then17
  %13 = load i32, i32* %j, align 4
  %cmp19 = icmp ult i32 %13, 10
  br i1 %cmp19, label %for.body20, label %for.end37

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %14
  %active22 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx21, i32 0, i32 2
  %15 = load i8, i8* %active22, align 4
  %tobool23 = trunc i8 %15 to i1
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %for.body20
  br label %for.inc35

if.end25:                                         ; preds = %for.body20
  %16 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %16
  %month27 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx26, i32 0, i32 0
  %17 = load i32, i32* %month27, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %18
  %month29 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx28, i32 0, i32 0
  %19 = load i32, i32* %month29, align 4
  %cmp30 = icmp eq i32 %17, %19
  br i1 %cmp30, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end25
  %20 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [10 x %struct.Date], [10 x %struct.Date]* @dates, i32 0, i32 %20
  %active33 = getelementptr inbounds %struct.Date, %struct.Date* %arrayidx32, i32 0, i32 2
  store i8 0, i8* %active33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end25
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34, %if.then24
  %21 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %21, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond18

for.end37:                                        ; preds = %for.cond18
  br label %if.end38

if.end38:                                         ; preds = %for.end37, %for.end
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38, %if.then
  %22 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %22, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @printRemaining()
  call void @firstPass()
  call void @printRemaining()
  call void @secondPass()
  call void @printRemaining()
  call void @thirdPass()
  call void @printAnswer()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
