
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for incr()

; ModuleID = './Increment_a_numerical_string.c.bc'
source_filename = "./Increment_a_numerical_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"text: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"  ->: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"+0\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"-41\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"+41\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"999\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"+999\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"109999999999999999999999999999999999999999\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"-100000000000000000000000000000000000000000000\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @incr(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %begin = alloca i32, align 4
  %tail = alloca i32, align 4
  %len = alloca i32, align 4
  %neg = alloca i32, align 4
  %tgt = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 45
  %conv1 = zext i1 %cmp to i32
  store i32 %conv1, i32* %neg, align 4
  %2 = load i32, i32* %neg, align 4
  %tobool = icmp ne i32 %2, 0
  %3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 48, i32 57
  %conv2 = trunc i32 %cond to i8
  store i8 %conv2, i8* %tgt, align 1
  %4 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)) #3
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %s.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 0
  store i8 48, i8* %arrayidx, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8 0, i8* %arrayidx4, align 1
  %7 = load i8*, i8** %s.addr, align 4
  store i8* %7, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %s.addr, align 4
  %call5 = call i32 @strlen(i8* %8) #3
  store i32 %call5, i32* %len, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 45
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 43
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %13 = phi i1 [ true, %if.end ], [ %cmp10, %lor.rhs ]
  %14 = zext i1 %13 to i64
  %cond12 = select i1 %13, i32 1, i32 0
  store i32 %cond12, i32* %begin, align 4
  %15 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %15, 1
  store i32 %sub, i32* %tail, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %lor.end
  %16 = load i32, i32* %tail, align 4
  %17 = load i32, i32* %begin, align 4
  %cmp13 = icmp sge i32 %16, %17
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  %19 = load i32, i32* %tail, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %20 to i32
  %21 = load i8, i8* %tgt, align 1
  %conv17 = sext i8 %21 to i32
  %cmp18 = icmp eq i32 %conv16, %conv17
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %22 = phi i1 [ false, %for.cond ], [ %cmp18, %land.rhs ]
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %tail, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %tail, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %24 = load i32, i32* %tail, align 4
  %25 = load i32, i32* %begin, align 4
  %cmp20 = icmp slt i32 %24, %25
  br i1 %cmp20, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.end
  %26 = load i32, i32* %neg, align 4
  %tobool22 = icmp ne i32 %26, 0
  br i1 %tobool22, label %if.else, label %if.then23

if.then23:                                        ; preds = %land.lhs.true
  %27 = load i32, i32* %begin, align 4
  %tobool24 = icmp ne i32 %27, 0
  br i1 %tobool24, label %if.end27, label %if.then25

if.then25:                                        ; preds = %if.then23
  %28 = load i8*, i8** %s.addr, align 4
  %29 = load i32, i32* %len, align 4
  %add = add nsw i32 %29, 2
  %call26 = call i8* @realloc(i8* %28, i32 %add)
  store i8* %call26, i8** %s.addr, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.then23
  %30 = load i8*, i8** %s.addr, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %30, i32 0
  store i8 49, i8* %arrayidx28, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc35, %if.end27
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %33 = load i32, i32* %begin, align 4
  %sub30 = sub nsw i32 %32, %33
  %cmp31 = icmp sle i32 %31, %sub30
  br i1 %cmp31, label %for.body33, label %for.end36

for.body33:                                       ; preds = %for.cond29
  %34 = load i8*, i8** %s.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %34, i32 %35
  store i8 48, i8* %arrayidx34, align 1
  br label %for.inc35

for.inc35:                                        ; preds = %for.body33
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond29

for.end36:                                        ; preds = %for.cond29
  %37 = load i8*, i8** %s.addr, align 4
  %38 = load i32, i32* %len, align 4
  %add37 = add nsw i32 %38, 1
  %arrayidx38 = getelementptr inbounds i8, i8* %37, i32 %add37
  store i8 0, i8* %arrayidx38, align 1
  br label %if.end80

if.else:                                          ; preds = %land.lhs.true, %for.end
  %39 = load i32, i32* %tail, align 4
  %40 = load i32, i32* %begin, align 4
  %cmp39 = icmp eq i32 %39, %40
  br i1 %cmp39, label %land.lhs.true41, label %if.else60

land.lhs.true41:                                  ; preds = %if.else
  %41 = load i32, i32* %neg, align 4
  %tobool42 = icmp ne i32 %41, 0
  br i1 %tobool42, label %land.lhs.true43, label %if.else60

land.lhs.true43:                                  ; preds = %land.lhs.true41
  %42 = load i8*, i8** %s.addr, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %42, i32 1
  %43 = load i8, i8* %arrayidx44, align 1
  %conv45 = sext i8 %43 to i32
  %cmp46 = icmp eq i32 %conv45, 49
  br i1 %cmp46, label %if.then48, label %if.else60

if.then48:                                        ; preds = %land.lhs.true43
  store i32 1, i32* %i, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc55, %if.then48
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %46 = load i32, i32* %begin, align 4
  %sub50 = sub nsw i32 %45, %46
  %cmp51 = icmp slt i32 %44, %sub50
  br i1 %cmp51, label %for.body53, label %for.end57

for.body53:                                       ; preds = %for.cond49
  %47 = load i8*, i8** %s.addr, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %47, i32 %48
  store i8 57, i8* %arrayidx54, align 1
  br label %for.inc55

for.inc55:                                        ; preds = %for.body53
  %49 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %49, 1
  store i32 %inc56, i32* %i, align 4
  br label %for.cond49

for.end57:                                        ; preds = %for.cond49
  %50 = load i8*, i8** %s.addr, align 4
  %51 = load i32, i32* %len, align 4
  %sub58 = sub nsw i32 %51, 1
  %arrayidx59 = getelementptr inbounds i8, i8* %50, i32 %sub58
  store i8 0, i8* %arrayidx59, align 1
  br label %if.end79

if.else60:                                        ; preds = %land.lhs.true43, %land.lhs.true41, %if.else
  %52 = load i32, i32* %len, align 4
  %sub61 = sub nsw i32 %52, 1
  store i32 %sub61, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc70, %if.else60
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %tail, align 4
  %cmp63 = icmp sgt i32 %53, %54
  br i1 %cmp63, label %for.body65, label %for.end72

for.body65:                                       ; preds = %for.cond62
  %55 = load i32, i32* %neg, align 4
  %tobool66 = icmp ne i32 %55, 0
  %56 = zext i1 %tobool66 to i64
  %cond67 = select i1 %tobool66, i32 57, i32 48
  %conv68 = trunc i32 %cond67 to i8
  %57 = load i8*, i8** %s.addr, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %57, i32 %58
  store i8 %conv68, i8* %arrayidx69, align 1
  br label %for.inc70

for.inc70:                                        ; preds = %for.body65
  %59 = load i32, i32* %i, align 4
  %dec71 = add nsw i32 %59, -1
  store i32 %dec71, i32* %i, align 4
  br label %for.cond62

for.end72:                                        ; preds = %for.cond62
  %60 = load i32, i32* %neg, align 4
  %tobool73 = icmp ne i32 %60, 0
  %61 = zext i1 %tobool73 to i64
  %cond74 = select i1 %tobool73, i32 -1, i32 1
  %62 = load i8*, i8** %s.addr, align 4
  %63 = load i32, i32* %tail, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %62, i32 %63
  %64 = load i8, i8* %arrayidx75, align 1
  %conv76 = sext i8 %64 to i32
  %add77 = add nsw i32 %conv76, %cond74
  %conv78 = trunc i32 %add77 to i8
  store i8 %conv78, i8* %arrayidx75, align 1
  br label %if.end79

if.end79:                                         ; preds = %for.end72, %for.end57
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %for.end36
  %65 = load i8*, i8** %s.addr, align 4
  store i8* %65, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end80, %if.then
  %66 = load i8*, i8** %retval, align 4
  ret i8* %66
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @realloc(i8* %0, i32 %1) #2

; Function Attrs: noinline nounwind optnone
define hidden void @string_test(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %ret = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  %call1 = call noalias i8* @malloc(i32 %call)
  store i8* %call1, i8** %ret, align 4
  %1 = load i8*, i8** %ret, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %ret, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %ret, align 4
  %call4 = call i8* @incr(i8* %4)
  store i8* %call4, i8** %ret, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8* %call4)
  %5 = load i8*, i8** %ret, align 4
  call void @free(i8* %5)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @string_test(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %conv, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %conv1 = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool, i32 48, i32 57
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 48:i32, 57:i32
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv2 = trunc i32 %cond to i8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 48:i32, 57:i32
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call5 = call i32 @strlen(i8* %8) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %conv6, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv9 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp10 = icmp eq i32 %conv9, 43
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = phi i1 [ true, %if.end ], [ %cmp10, %lor.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i8 = var
%2:i32 = sext %1
%3:i1 = eq 43:i32, %2
%4:i1 = phi %0, 1:i1, %3
infer %4

; *****
; For LLVM instruction:
;  %cond12 = select i1 %13, i32 1, i32 0
; Looking for a replacement for:
%0 = block 2
%1:i8 = var
%2:i32 = sext %1
%3:i1 = eq 43:i32, %2
%4:i1 = phi %0, 1:i1, %3
%5:i32 = select %4, 1:i32, 0:i32
infer %5

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %tail, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %begin, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp sge i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %tail, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %arrayidx15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv16 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %tgt, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp18 = icmp eq i32 %conv16, %conv17
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %22 = phi i1 [ false, %for.cond ], [ %cmp18, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %tail, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %23, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %tail, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %begin, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp slt i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool22 = icmp ne i32 %26, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %begin, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool24 = icmp ne i32 %27, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %29, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %begin, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub30 = sub nsw i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp31 = icmp sle i32 %31, %sub30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = sle %0, %3
infer %4

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add37 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %tail, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %begin, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp eq i32 %39, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool42 = icmp ne i32 %41, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %arrayidx44, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv45 = sext i8 %43 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp46 = icmp eq i32 %conv45, 49
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 49:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %begin, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub50 = sub nsw i32 %45, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp51 = icmp slt i32 %44, %sub50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc56 = add nsw i32 %49, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub58 = sub nsw i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub61 = sub nsw i32 %52, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %tail, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp sgt i32 %53, %54
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool66 = icmp ne i32 %55, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond67 = select i1 %tobool66, i32 57, i32 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 57:i32, 48:i32
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv68 = trunc i32 %cond67 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 57:i32, 48:i32
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec71 = add nsw i32 %59, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool73 = icmp ne i32 %60, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond74 = select i1 %tobool73, i32 -1, i32 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 4294967295:i32, 1:i32
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %tail, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i8, i8* %arrayidx75, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv76 = sext i8 %64 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add77 = add nsw i32 %conv76, %cond74
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 4294967295:i32, 1:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = addnsw %2, %4
infer %5 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv78 = trunc i32 %add77 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 4294967295:i32, 1:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = addnsw %2, %4
%6:i8 = trunc %5
infer %6
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 45:i32, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 48:i32, 57:i32
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 57
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 48:i32, 57:i32
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 57
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 48
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i8 = var
%2:i32 = sext %1
%3:i1 = eq 43:i32, %2
%4:i1 = phi %0, 1:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 43:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i8 = var
%2:i32 = sext %1
%3:i1 = eq 43:i32, %2
%4:i1 = phi %0, 1:i1, %3
%5:i32 = select %4, 1:i32, 0:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = sle %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 49:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = slt %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 57:i32, 48:i32
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 57
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 48
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 57:i32, 48:i32
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 57
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 4294967295:i32, 1:i32
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 255
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 4294967295:i32, 1:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = addnsw %2, %4
infer %5 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 4294967295:i32, 1:i32

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 4294967295:i32, 1:i32
%3:i8 = var
%4:i32 = sext %3
%5:i32 = addnsw %2, %4
%6:i8 = trunc %5
infer %6


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for incr()

; entering Souper's runOnFunction() for string_test()

; ModuleID = './Increment_a_numerical_string.c.bc'
source_filename = "./Increment_a_numerical_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"text: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"  ->: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"+0\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"-41\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"+41\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"999\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"+999\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"109999999999999999999999999999999999999999\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"-100000000000000000000000000000000000000000000\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @incr(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %begin = alloca i32, align 4
  %tail = alloca i32, align 4
  %len = alloca i32, align 4
  %neg = alloca i32, align 4
  %tgt = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 45
  %conv1 = zext i1 %cmp to i32
  store i32 %conv1, i32* %neg, align 4
  %2 = load i32, i32* %neg, align 4
  %tobool = icmp ne i32 %2, 0
  %3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 48, i32 57
  %conv2 = trunc i32 %cond to i8
  store i8 %conv2, i8* %tgt, align 1
  %4 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)) #3
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %s.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 0
  store i8 48, i8* %arrayidx, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8 0, i8* %arrayidx4, align 1
  %7 = load i8*, i8** %s.addr, align 4
  store i8* %7, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %s.addr, align 4
  %call5 = call i32 @strlen(i8* %8) #3
  store i32 %call5, i32* %len, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 45
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 43
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %13 = phi i1 [ true, %if.end ], [ %cmp10, %lor.rhs ]
  %14 = zext i1 %13 to i64
  %cond12 = select i1 %13, i32 1, i32 0
  store i32 %cond12, i32* %begin, align 4
  %15 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %15, 1
  store i32 %sub, i32* %tail, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %lor.end
  %16 = load i32, i32* %tail, align 4
  %17 = load i32, i32* %begin, align 4
  %cmp13 = icmp sge i32 %16, %17
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  %19 = load i32, i32* %tail, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %20 to i32
  %21 = load i8, i8* %tgt, align 1
  %conv17 = sext i8 %21 to i32
  %cmp18 = icmp eq i32 %conv16, %conv17
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %22 = phi i1 [ false, %for.cond ], [ %cmp18, %land.rhs ]
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %tail, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %tail, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %24 = load i32, i32* %tail, align 4
  %25 = load i32, i32* %begin, align 4
  %cmp20 = icmp slt i32 %24, %25
  br i1 %cmp20, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.end
  %26 = load i32, i32* %neg, align 4
  %tobool22 = icmp ne i32 %26, 0
  br i1 %tobool22, label %if.else, label %if.then23

if.then23:                                        ; preds = %land.lhs.true
  %27 = load i32, i32* %begin, align 4
  %tobool24 = icmp ne i32 %27, 0
  br i1 %tobool24, label %if.end27, label %if.then25

if.then25:                                        ; preds = %if.then23
  %28 = load i8*, i8** %s.addr, align 4
  %29 = load i32, i32* %len, align 4
  %add = add nsw i32 %29, 2
  %call26 = call i8* @realloc(i8* %28, i32 %add)
  store i8* %call26, i8** %s.addr, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.then23
  %30 = load i8*, i8** %s.addr, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %30, i32 0
  store i8 49, i8* %arrayidx28, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc35, %if.end27
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %33 = load i32, i32* %begin, align 4
  %sub30 = sub nsw i32 %32, %33
  %cmp31 = icmp sle i32 %31, %sub30
  br i1 %cmp31, label %for.body33, label %for.end36

for.body33:                                       ; preds = %for.cond29
  %34 = load i8*, i8** %s.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %34, i32 %35
  store i8 48, i8* %arrayidx34, align 1
  br label %for.inc35

for.inc35:                                        ; preds = %for.body33
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond29

for.end36:                                        ; preds = %for.cond29
  %37 = load i8*, i8** %s.addr, align 4
  %38 = load i32, i32* %len, align 4
  %add37 = add nsw i32 %38, 1
  %arrayidx38 = getelementptr inbounds i8, i8* %37, i32 %add37
  store i8 0, i8* %arrayidx38, align 1
  br label %if.end80

if.else:                                          ; preds = %land.lhs.true, %for.end
  %39 = load i32, i32* %tail, align 4
  %40 = load i32, i32* %begin, align 4
  %cmp39 = icmp eq i32 %39, %40
  br i1 %cmp39, label %land.lhs.true41, label %if.else60

land.lhs.true41:                                  ; preds = %if.else
  %41 = load i32, i32* %neg, align 4
  %tobool42 = icmp ne i32 %41, 0
  br i1 %tobool42, label %land.lhs.true43, label %if.else60

land.lhs.true43:                                  ; preds = %land.lhs.true41
  %42 = load i8*, i8** %s.addr, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %42, i32 1
  %43 = load i8, i8* %arrayidx44, align 1
  %conv45 = sext i8 %43 to i32
  %cmp46 = icmp eq i32 %conv45, 49
  br i1 %cmp46, label %if.then48, label %if.else60

if.then48:                                        ; preds = %land.lhs.true43
  store i32 1, i32* %i, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc55, %if.then48
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %46 = load i32, i32* %begin, align 4
  %sub50 = sub nsw i32 %45, %46
  %cmp51 = icmp slt i32 %44, %sub50
  br i1 %cmp51, label %for.body53, label %for.end57

for.body53:                                       ; preds = %for.cond49
  %47 = load i8*, i8** %s.addr, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %47, i32 %48
  store i8 57, i8* %arrayidx54, align 1
  br label %for.inc55

for.inc55:                                        ; preds = %for.body53
  %49 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %49, 1
  store i32 %inc56, i32* %i, align 4
  br label %for.cond49

for.end57:                                        ; preds = %for.cond49
  %50 = load i8*, i8** %s.addr, align 4
  %51 = load i32, i32* %len, align 4
  %sub58 = sub nsw i32 %51, 1
  %arrayidx59 = getelementptr inbounds i8, i8* %50, i32 %sub58
  store i8 0, i8* %arrayidx59, align 1
  br label %if.end79

if.else60:                                        ; preds = %land.lhs.true43, %land.lhs.true41, %if.else
  %52 = load i32, i32* %len, align 4
  %sub61 = sub nsw i32 %52, 1
  store i32 %sub61, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc70, %if.else60
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %tail, align 4
  %cmp63 = icmp sgt i32 %53, %54
  br i1 %cmp63, label %for.body65, label %for.end72

for.body65:                                       ; preds = %for.cond62
  %55 = load i32, i32* %neg, align 4
  %tobool66 = icmp ne i32 %55, 0
  %56 = zext i1 %tobool66 to i64
  %cond67 = select i1 %tobool66, i32 57, i32 48
  %conv68 = trunc i32 %cond67 to i8
  %57 = load i8*, i8** %s.addr, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %57, i32 %58
  store i8 %conv68, i8* %arrayidx69, align 1
  br label %for.inc70

for.inc70:                                        ; preds = %for.body65
  %59 = load i32, i32* %i, align 4
  %dec71 = add nsw i32 %59, -1
  store i32 %dec71, i32* %i, align 4
  br label %for.cond62

for.end72:                                        ; preds = %for.cond62
  %60 = load i32, i32* %neg, align 4
  %tobool73 = icmp ne i32 %60, 0
  %61 = zext i1 %tobool73 to i64
  %cond74 = select i1 %tobool73, i32 -1, i32 1
  %62 = load i8*, i8** %s.addr, align 4
  %63 = load i32, i32* %tail, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %62, i32 %63
  %64 = load i8, i8* %arrayidx75, align 1
  %conv76 = sext i8 %64 to i32
  %add77 = add nsw i32 %conv76, %cond74
  %conv78 = trunc i32 %add77 to i8
  store i8 %conv78, i8* %arrayidx75, align 1
  br label %if.end79

if.end79:                                         ; preds = %for.end72, %for.end57
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %for.end36
  %65 = load i8*, i8** %s.addr, align 4
  store i8* %65, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end80, %if.then
  %66 = load i8*, i8** %retval, align 4
  ret i8* %66
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @realloc(i8* %0, i32 %1) #2

; Function Attrs: noinline nounwind optnone
define hidden void @string_test(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %ret = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  %call1 = call noalias i8* @malloc(i32 %call)
  store i8* %call1, i8** %ret, align 4
  %1 = load i8*, i8** %ret, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %ret, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %ret, align 4
  %call4 = call i8* @incr(i8* %4)
  store i8* %call4, i8** %ret, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8* %call4)
  %5 = load i8*, i8** %ret, align 4
  call void @free(i8* %5)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @string_test(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for string_test()

; entering Souper's runOnFunction() for main()

; ModuleID = './Increment_a_numerical_string.c.bc'
source_filename = "./Increment_a_numerical_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"text: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"  ->: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"+0\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"-41\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"+41\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"999\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"+999\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"109999999999999999999999999999999999999999\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"-100000000000000000000000000000000000000000000\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @incr(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %begin = alloca i32, align 4
  %tail = alloca i32, align 4
  %len = alloca i32, align 4
  %neg = alloca i32, align 4
  %tgt = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 45
  %conv1 = zext i1 %cmp to i32
  store i32 %conv1, i32* %neg, align 4
  %2 = load i32, i32* %neg, align 4
  %tobool = icmp ne i32 %2, 0
  %3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 48, i32 57
  %conv2 = trunc i32 %cond to i8
  store i8 %conv2, i8* %tgt, align 1
  %4 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)) #3
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %s.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 0
  store i8 48, i8* %arrayidx, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8 0, i8* %arrayidx4, align 1
  %7 = load i8*, i8** %s.addr, align 4
  store i8* %7, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %s.addr, align 4
  %call5 = call i32 @strlen(i8* %8) #3
  store i32 %call5, i32* %len, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 45
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 43
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %13 = phi i1 [ true, %if.end ], [ %cmp10, %lor.rhs ]
  %14 = zext i1 %13 to i64
  %cond12 = select i1 %13, i32 1, i32 0
  store i32 %cond12, i32* %begin, align 4
  %15 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %15, 1
  store i32 %sub, i32* %tail, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %lor.end
  %16 = load i32, i32* %tail, align 4
  %17 = load i32, i32* %begin, align 4
  %cmp13 = icmp sge i32 %16, %17
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  %19 = load i32, i32* %tail, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %20 to i32
  %21 = load i8, i8* %tgt, align 1
  %conv17 = sext i8 %21 to i32
  %cmp18 = icmp eq i32 %conv16, %conv17
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %22 = phi i1 [ false, %for.cond ], [ %cmp18, %land.rhs ]
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %tail, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %tail, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %24 = load i32, i32* %tail, align 4
  %25 = load i32, i32* %begin, align 4
  %cmp20 = icmp slt i32 %24, %25
  br i1 %cmp20, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.end
  %26 = load i32, i32* %neg, align 4
  %tobool22 = icmp ne i32 %26, 0
  br i1 %tobool22, label %if.else, label %if.then23

if.then23:                                        ; preds = %land.lhs.true
  %27 = load i32, i32* %begin, align 4
  %tobool24 = icmp ne i32 %27, 0
  br i1 %tobool24, label %if.end27, label %if.then25

if.then25:                                        ; preds = %if.then23
  %28 = load i8*, i8** %s.addr, align 4
  %29 = load i32, i32* %len, align 4
  %add = add nsw i32 %29, 2
  %call26 = call i8* @realloc(i8* %28, i32 %add)
  store i8* %call26, i8** %s.addr, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.then23
  %30 = load i8*, i8** %s.addr, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %30, i32 0
  store i8 49, i8* %arrayidx28, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc35, %if.end27
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %33 = load i32, i32* %begin, align 4
  %sub30 = sub nsw i32 %32, %33
  %cmp31 = icmp sle i32 %31, %sub30
  br i1 %cmp31, label %for.body33, label %for.end36

for.body33:                                       ; preds = %for.cond29
  %34 = load i8*, i8** %s.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %34, i32 %35
  store i8 48, i8* %arrayidx34, align 1
  br label %for.inc35

for.inc35:                                        ; preds = %for.body33
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond29

for.end36:                                        ; preds = %for.cond29
  %37 = load i8*, i8** %s.addr, align 4
  %38 = load i32, i32* %len, align 4
  %add37 = add nsw i32 %38, 1
  %arrayidx38 = getelementptr inbounds i8, i8* %37, i32 %add37
  store i8 0, i8* %arrayidx38, align 1
  br label %if.end80

if.else:                                          ; preds = %land.lhs.true, %for.end
  %39 = load i32, i32* %tail, align 4
  %40 = load i32, i32* %begin, align 4
  %cmp39 = icmp eq i32 %39, %40
  br i1 %cmp39, label %land.lhs.true41, label %if.else60

land.lhs.true41:                                  ; preds = %if.else
  %41 = load i32, i32* %neg, align 4
  %tobool42 = icmp ne i32 %41, 0
  br i1 %tobool42, label %land.lhs.true43, label %if.else60

land.lhs.true43:                                  ; preds = %land.lhs.true41
  %42 = load i8*, i8** %s.addr, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %42, i32 1
  %43 = load i8, i8* %arrayidx44, align 1
  %conv45 = sext i8 %43 to i32
  %cmp46 = icmp eq i32 %conv45, 49
  br i1 %cmp46, label %if.then48, label %if.else60

if.then48:                                        ; preds = %land.lhs.true43
  store i32 1, i32* %i, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc55, %if.then48
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %46 = load i32, i32* %begin, align 4
  %sub50 = sub nsw i32 %45, %46
  %cmp51 = icmp slt i32 %44, %sub50
  br i1 %cmp51, label %for.body53, label %for.end57

for.body53:                                       ; preds = %for.cond49
  %47 = load i8*, i8** %s.addr, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %47, i32 %48
  store i8 57, i8* %arrayidx54, align 1
  br label %for.inc55

for.inc55:                                        ; preds = %for.body53
  %49 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %49, 1
  store i32 %inc56, i32* %i, align 4
  br label %for.cond49

for.end57:                                        ; preds = %for.cond49
  %50 = load i8*, i8** %s.addr, align 4
  %51 = load i32, i32* %len, align 4
  %sub58 = sub nsw i32 %51, 1
  %arrayidx59 = getelementptr inbounds i8, i8* %50, i32 %sub58
  store i8 0, i8* %arrayidx59, align 1
  br label %if.end79

if.else60:                                        ; preds = %land.lhs.true43, %land.lhs.true41, %if.else
  %52 = load i32, i32* %len, align 4
  %sub61 = sub nsw i32 %52, 1
  store i32 %sub61, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc70, %if.else60
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %tail, align 4
  %cmp63 = icmp sgt i32 %53, %54
  br i1 %cmp63, label %for.body65, label %for.end72

for.body65:                                       ; preds = %for.cond62
  %55 = load i32, i32* %neg, align 4
  %tobool66 = icmp ne i32 %55, 0
  %56 = zext i1 %tobool66 to i64
  %cond67 = select i1 %tobool66, i32 57, i32 48
  %conv68 = trunc i32 %cond67 to i8
  %57 = load i8*, i8** %s.addr, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %57, i32 %58
  store i8 %conv68, i8* %arrayidx69, align 1
  br label %for.inc70

for.inc70:                                        ; preds = %for.body65
  %59 = load i32, i32* %i, align 4
  %dec71 = add nsw i32 %59, -1
  store i32 %dec71, i32* %i, align 4
  br label %for.cond62

for.end72:                                        ; preds = %for.cond62
  %60 = load i32, i32* %neg, align 4
  %tobool73 = icmp ne i32 %60, 0
  %61 = zext i1 %tobool73 to i64
  %cond74 = select i1 %tobool73, i32 -1, i32 1
  %62 = load i8*, i8** %s.addr, align 4
  %63 = load i32, i32* %tail, align 4
  %arrayidx75 = getelementptr inbounds i8, i8* %62, i32 %63
  %64 = load i8, i8* %arrayidx75, align 1
  %conv76 = sext i8 %64 to i32
  %add77 = add nsw i32 %conv76, %cond74
  %conv78 = trunc i32 %add77 to i8
  store i8 %conv78, i8* %arrayidx75, align 1
  br label %if.end79

if.end79:                                         ; preds = %for.end72, %for.end57
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %for.end36
  %65 = load i8*, i8** %s.addr, align 4
  store i8* %65, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end80, %if.then
  %66 = load i8*, i8** %retval, align 4
  ret i8* %66
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @realloc(i8* %0, i32 %1) #2

; Function Attrs: noinline nounwind optnone
define hidden void @string_test(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %ret = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  %call1 = call noalias i8* @malloc(i32 %call)
  store i8* %call1, i8** %ret, align 4
  %1 = load i8*, i8** %ret, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strcpy(i8* %1, i8* %2)
  %3 = load i8*, i8** %ret, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %ret, align 4
  %call4 = call i8* @incr(i8* %4)
  store i8* %call4, i8** %ret, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8* %call4)
  %5 = load i8*, i8** %ret, align 4
  call void @free(i8* %5)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @string_test(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i32 0, i32 0))
  call void @string_test(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
