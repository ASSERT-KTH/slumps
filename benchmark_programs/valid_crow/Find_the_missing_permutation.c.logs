
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './Find_the_missing_permutation.c.bc'
source_filename = "./Find_the_missing_permutation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"ABCD\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"CABD\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"ACDB\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"DACB\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"BCDA\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"ACBD\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"ADCB\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"CDAB\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"DABC\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"BCAD\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"CADB\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"CDBA\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"CBAD\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"ABDC\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"ADBC\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"BDCA\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"DCBA\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"BACD\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"BADC\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"BDAC\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"CBDA\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"DBCA\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"DCAB\00", align 1
@perms = hidden global [23 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0)], align 16
@.str.23 = private unnamed_addr constant [15 x i8] c"Missing: %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %cnt = alloca [4 x i32], align 16
  %miss = alloca [4 x i8], align 1
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %2, %1
  store i32 %mul, i32* %n, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc32, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %4, 4
  br i1 %cmp2, label %for.body3, label %for.end34

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc7, %for.body3
  %5 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %5, 4
  br i1 %cmp5, label %for.body6, label %for.end9

for.body6:                                        ; preds = %for.cond4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %cnt, i32 0, i32 %6
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc7

for.inc7:                                         ; preds = %for.body6
  %7 = load i32, i32* %j, align 4
  %inc8 = add nsw i32 %7, 1
  store i32 %inc8, i32* %j, align 4
  br label %for.cond4

for.end9:                                         ; preds = %for.cond4
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %for.end9
  %8 = load i32, i32* %j, align 4
  %cmp11 = icmp ult i32 %8, 23
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %9 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds [23 x i8*], [23 x i8*]* @perms, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx13, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %10, i32 %11
  %12 = load i8, i8* %arrayidx14, align 1
  %conv = sext i8 %12 to i32
  %sub = sub nsw i32 %conv, 65
  %arrayidx15 = getelementptr inbounds [4 x i32], [4 x i32]* %cnt, i32 0, i32 %sub
  %13 = load i32, i32* %arrayidx15, align 4
  %inc16 = add nsw i32 %13, 1
  store i32 %inc16, i32* %arrayidx15, align 4
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %14 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %14, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  store i32 0, i32* %j, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc27, %for.end19
  %15 = load i32, i32* %j, align 4
  %cmp21 = icmp slt i32 %15, 4
  br i1 %cmp21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond20
  %16 = load i32, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %cnt, i32 0, i32 %16
  %17 = load i32, i32* %arrayidx23, align 4
  %18 = load i32, i32* %n, align 4
  %cmp24 = icmp eq i32 %17, %18
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond20
  %19 = phi i1 [ false, %for.cond20 ], [ %cmp24, %land.rhs ]
  br i1 %19, label %for.body26, label %for.end29

for.body26:                                       ; preds = %land.end
  br label %for.inc27

for.inc27:                                        ; preds = %for.body26
  %20 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %20, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond20

for.end29:                                        ; preds = %land.end
  %21 = load i32, i32* %j, align 4
  %add = add nsw i32 %21, 65
  %conv30 = trunc i32 %add to i8
  %22 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds [4 x i8], [4 x i8]* %miss, i32 0, i32 %22
  store i8 %conv30, i8* %arrayidx31, align 1
  br label %for.inc32

for.inc32:                                        ; preds = %for.end29
  %23 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %23, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond1

for.end34:                                        ; preds = %for.cond1
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %miss, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i32 0, i32 0), i32 4, i8* %arraydecay)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %4, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %5, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp ult i32 %8, 23
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 23:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %arrayidx14, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %conv, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 65:i32
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %15, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = phi i1 [ false, %for.cond20 ], [ %cmp24, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc28 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 %21, 65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 65:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv30 = trunc i32 %add to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 65:i32, %0
%2:i8 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 23:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 65:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -65
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 65:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 65:i32, %0
%2:i8 = trunc %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 65
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 81
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
