
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for show()

; ModuleID = './Sudoku.c.bc'
source_filename = "./Sudoku.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"no solution\00", align 1
@.str.3 = private unnamed_addr constant [82 x i8] c"5x..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %x) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %rem = srem i32 %1, 3
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %call = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %j, align 4
  %rem4 = srem i32 %3, 3
  %tobool5 = icmp ne i32 %rem4, 0
  %4 = zext i1 %tobool5 to i64
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0)
  %5 = load i32*, i32** %x.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %5, i32 1
  store i32* %incdec.ptr, i32** %x.addr, align 4
  %6 = load i32, i32* %5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* %cond, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call7 = call i32 @putchar(i32 10)
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %8, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trycell(i32* %x, i32 %pos) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32*, align 4
  %pos.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %used = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %0, 9
  store i32 %div, i32* %row, align 4
  %1 = load i32, i32* %pos.addr, align 4
  %rem = srem i32 %1, 9
  store i32 %rem, i32* %col, align 4
  store i32 0, i32* %used, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %2, 81
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %6 = load i32*, i32** %x.addr, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %7, 1
  %call = call i32 @trycell(i32* %6, i32 %add)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end2:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end2
  %8 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %8, 9
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %10, 9
  %11 = load i32, i32* %col, align 4
  %add4 = add nsw i32 %mul, %11
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %add4
  %12 = load i32, i32* %arrayidx5, align 4
  %sub = sub nsw i32 %12, 1
  %shl = shl i32 1, %sub
  %13 = load i32, i32* %used, align 4
  %or = or i32 %13, %shl
  store i32 %or, i32* %used, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc15, %for.end
  %15 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %15, 9
  br i1 %cmp7, label %for.body8, label %for.end17

for.body8:                                        ; preds = %for.cond6
  %16 = load i32*, i32** %x.addr, align 4
  %17 = load i32, i32* %row, align 4
  %mul9 = mul nsw i32 %17, 9
  %18 = load i32, i32* %j, align 4
  %add10 = add nsw i32 %mul9, %18
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i32 %add10
  %19 = load i32, i32* %arrayidx11, align 4
  %sub12 = sub nsw i32 %19, 1
  %shl13 = shl i32 1, %sub12
  %20 = load i32, i32* %used, align 4
  %or14 = or i32 %20, %shl13
  store i32 %or14, i32* %used, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body8
  %21 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond6

for.end17:                                        ; preds = %for.cond6
  %22 = load i32, i32* %row, align 4
  %div18 = sdiv i32 %22, 3
  %mul19 = mul nsw i32 %div18, 3
  store i32 %mul19, i32* %row, align 4
  %23 = load i32, i32* %col, align 4
  %div20 = sdiv i32 %23, 3
  %mul21 = mul nsw i32 %div20, 3
  store i32 %mul21, i32* %col, align 4
  %24 = load i32, i32* %row, align 4
  store i32 %24, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc39, %for.end17
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %row, align 4
  %add23 = add nsw i32 %26, 3
  %cmp24 = icmp slt i32 %25, %add23
  br i1 %cmp24, label %for.body25, label %for.end41

for.body25:                                       ; preds = %for.cond22
  %27 = load i32, i32* %col, align 4
  store i32 %27, i32* %j, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc36, %for.body25
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %col, align 4
  %add27 = add nsw i32 %29, 3
  %cmp28 = icmp slt i32 %28, %add27
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %30 = load i32*, i32** %x.addr, align 4
  %31 = load i32, i32* %i, align 4
  %mul30 = mul nsw i32 %31, 9
  %32 = load i32, i32* %j, align 4
  %add31 = add nsw i32 %mul30, %32
  %arrayidx32 = getelementptr inbounds i32, i32* %30, i32 %add31
  %33 = load i32, i32* %arrayidx32, align 4
  %sub33 = sub nsw i32 %33, 1
  %shl34 = shl i32 1, %sub33
  %34 = load i32, i32* %used, align 4
  %or35 = or i32 %34, %shl34
  store i32 %or35, i32* %used, align 4
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %35 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %35, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  br label %for.inc39

for.inc39:                                        ; preds = %for.end38
  %36 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %36, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond22

for.end41:                                        ; preds = %for.cond22
  %37 = load i32*, i32** %x.addr, align 4
  %38 = load i32, i32* %pos.addr, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 1, i32* %arrayidx42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end41
  %39 = load i32*, i32** %x.addr, align 4
  %40 = load i32, i32* %pos.addr, align 4
  %arrayidx44 = getelementptr inbounds i32, i32* %39, i32 %40
  %41 = load i32, i32* %arrayidx44, align 4
  %cmp45 = icmp sle i32 %41, 9
  br i1 %cmp45, label %for.body46, label %for.end56

for.body46:                                       ; preds = %for.cond43
  %42 = load i32, i32* %used, align 4
  %and = and i32 %42, 1
  %tobool47 = icmp ne i32 %and, 0
  br i1 %tobool47, label %if.end52, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body46
  %43 = load i32*, i32** %x.addr, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %add48 = add nsw i32 %44, 1
  %call49 = call i32 @trycell(i32* %43, i32 %add48)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end52:                                         ; preds = %land.lhs.true, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %45 = load i32*, i32** %x.addr, align 4
  %46 = load i32, i32* %pos.addr, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx54, align 4
  %inc55 = add nsw i32 %47, 1
  store i32 %inc55, i32* %arrayidx54, align 4
  %48 = load i32, i32* %used, align 4
  %shr = ashr i32 %48, 1
  store i32 %shr, i32* %used, align 4
  br label %for.cond43

for.end56:                                        ; preds = %for.cond43
  %49 = load i32*, i32** %x.addr, align 4
  %50 = load i32, i32* %pos.addr, align 4
  %arrayidx57 = getelementptr inbounds i32, i32* %49, i32 %50
  store i32 0, i32* %arrayidx57, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end56, %if.then51, %if.then1, %if.then
  %51 = load i32, i32* %retval, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind optnone
define hidden void @solve(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %x = alloca [81 x i32], align 16
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 81
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp sge i32 %conv, 49
  br i1 %cmp1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %6 to i32
  %cmp5 = icmp sle i32 %conv4, 57
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %9 to i32
  %sub = sub nsw i32 %conv8, 48
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 %10
  store i32 %cond, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  %call = call i32 @trycell(i32* %arraydecay, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %arraydecay10 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  call void @show(i32* %arraydecay10)
  br label %if.end

if.else:                                          ; preds = %for.end
  %call11 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @solve(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem4 = srem i32 %3, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i32 %rem4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc9 = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for show()

; entering Souper's runOnFunction() for trycell()

; ModuleID = './Sudoku.c.bc'
source_filename = "./Sudoku.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"no solution\00", align 1
@.str.3 = private unnamed_addr constant [82 x i8] c"5x..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %x) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %rem = srem i32 %1, 3
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %call = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %j, align 4
  %rem4 = srem i32 %3, 3
  %tobool5 = icmp ne i32 %rem4, 0
  %4 = zext i1 %tobool5 to i64
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0)
  %5 = load i32*, i32** %x.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %5, i32 1
  store i32* %incdec.ptr, i32** %x.addr, align 4
  %6 = load i32, i32* %5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* %cond, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call7 = call i32 @putchar(i32 10)
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %8, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trycell(i32* %x, i32 %pos) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32*, align 4
  %pos.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %used = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %0, 9
  store i32 %div, i32* %row, align 4
  %1 = load i32, i32* %pos.addr, align 4
  %rem = srem i32 %1, 9
  store i32 %rem, i32* %col, align 4
  store i32 0, i32* %used, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %2, 81
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %6 = load i32*, i32** %x.addr, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %7, 1
  %call = call i32 @trycell(i32* %6, i32 %add)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end2:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end2
  %8 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %8, 9
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %10, 9
  %11 = load i32, i32* %col, align 4
  %add4 = add nsw i32 %mul, %11
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %add4
  %12 = load i32, i32* %arrayidx5, align 4
  %sub = sub nsw i32 %12, 1
  %shl = shl i32 1, %sub
  %13 = load i32, i32* %used, align 4
  %or = or i32 %13, %shl
  store i32 %or, i32* %used, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc15, %for.end
  %15 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %15, 9
  br i1 %cmp7, label %for.body8, label %for.end17

for.body8:                                        ; preds = %for.cond6
  %16 = load i32*, i32** %x.addr, align 4
  %17 = load i32, i32* %row, align 4
  %mul9 = mul nsw i32 %17, 9
  %18 = load i32, i32* %j, align 4
  %add10 = add nsw i32 %mul9, %18
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i32 %add10
  %19 = load i32, i32* %arrayidx11, align 4
  %sub12 = sub nsw i32 %19, 1
  %shl13 = shl i32 1, %sub12
  %20 = load i32, i32* %used, align 4
  %or14 = or i32 %20, %shl13
  store i32 %or14, i32* %used, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body8
  %21 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond6

for.end17:                                        ; preds = %for.cond6
  %22 = load i32, i32* %row, align 4
  %div18 = sdiv i32 %22, 3
  %mul19 = mul nsw i32 %div18, 3
  store i32 %mul19, i32* %row, align 4
  %23 = load i32, i32* %col, align 4
  %div20 = sdiv i32 %23, 3
  %mul21 = mul nsw i32 %div20, 3
  store i32 %mul21, i32* %col, align 4
  %24 = load i32, i32* %row, align 4
  store i32 %24, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc39, %for.end17
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %row, align 4
  %add23 = add nsw i32 %26, 3
  %cmp24 = icmp slt i32 %25, %add23
  br i1 %cmp24, label %for.body25, label %for.end41

for.body25:                                       ; preds = %for.cond22
  %27 = load i32, i32* %col, align 4
  store i32 %27, i32* %j, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc36, %for.body25
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %col, align 4
  %add27 = add nsw i32 %29, 3
  %cmp28 = icmp slt i32 %28, %add27
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %30 = load i32*, i32** %x.addr, align 4
  %31 = load i32, i32* %i, align 4
  %mul30 = mul nsw i32 %31, 9
  %32 = load i32, i32* %j, align 4
  %add31 = add nsw i32 %mul30, %32
  %arrayidx32 = getelementptr inbounds i32, i32* %30, i32 %add31
  %33 = load i32, i32* %arrayidx32, align 4
  %sub33 = sub nsw i32 %33, 1
  %shl34 = shl i32 1, %sub33
  %34 = load i32, i32* %used, align 4
  %or35 = or i32 %34, %shl34
  store i32 %or35, i32* %used, align 4
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %35 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %35, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  br label %for.inc39

for.inc39:                                        ; preds = %for.end38
  %36 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %36, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond22

for.end41:                                        ; preds = %for.cond22
  %37 = load i32*, i32** %x.addr, align 4
  %38 = load i32, i32* %pos.addr, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 1, i32* %arrayidx42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end41
  %39 = load i32*, i32** %x.addr, align 4
  %40 = load i32, i32* %pos.addr, align 4
  %arrayidx44 = getelementptr inbounds i32, i32* %39, i32 %40
  %41 = load i32, i32* %arrayidx44, align 4
  %cmp45 = icmp sle i32 %41, 9
  br i1 %cmp45, label %for.body46, label %for.end56

for.body46:                                       ; preds = %for.cond43
  %42 = load i32, i32* %used, align 4
  %and = and i32 %42, 1
  %tobool47 = icmp ne i32 %and, 0
  br i1 %tobool47, label %if.end52, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body46
  %43 = load i32*, i32** %x.addr, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %add48 = add nsw i32 %44, 1
  %call49 = call i32 @trycell(i32* %43, i32 %add48)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end52:                                         ; preds = %land.lhs.true, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %45 = load i32*, i32** %x.addr, align 4
  %46 = load i32, i32* %pos.addr, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx54, align 4
  %inc55 = add nsw i32 %47, 1
  store i32 %inc55, i32* %arrayidx54, align 4
  %48 = load i32, i32* %used, align 4
  %shr = ashr i32 %48, 1
  store i32 %shr, i32* %used, align 4
  br label %for.cond43

for.end56:                                        ; preds = %for.cond43
  %49 = load i32*, i32** %x.addr, align 4
  %50 = load i32, i32* %pos.addr, align 4
  %arrayidx57 = getelementptr inbounds i32, i32* %49, i32 %50
  store i32 0, i32* %arrayidx57, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end56, %if.then51, %if.then1, %if.then
  %51 = load i32, i32* %retval, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind optnone
define hidden void @solve(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %x = alloca [81 x i32], align 16
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 81
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp sge i32 %conv, 49
  br i1 %cmp1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %6 to i32
  %cmp5 = icmp sle i32 %conv4, 57
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %9 to i32
  %sub = sub nsw i32 %conv8, 48
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 %10
  store i32 %cond, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  %call = call i32 @trycell(i32* %arraydecay, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %arraydecay10 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  call void @show(i32* %arraydecay10)
  br label %if.end

if.else:                                          ; preds = %for.end
  %call11 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @solve(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %0, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %2, 81
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 81:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @trycell(i32* %6, i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %8, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %10, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 9:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %mul, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 9:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = shl 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %used, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i32 %13, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = shl 1:i32, %2
%4:i32 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %15, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul9 = mul nsw i32 %17, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 9:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add10 = add nsw i32 %mul9, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 9:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %shl13 = shl i32 1, %sub12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = shl 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %used, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or14 = or i32 %20, %shl13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = shl 1:i32, %2
%4:i32 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div18 = sdiv i32 %22, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %mul19 = mul nsw i32 %div18, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
%2:i32 = mulnsw 3:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div20 = sdiv i32 %23, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %mul21 = mul nsw i32 %div20, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
%2:i32 = mulnsw 3:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add23 = add nsw i32 %26, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp24 = icmp slt i32 %25, %add23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 3:i32, %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add27 = add nsw i32 %29, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp28 = icmp slt i32 %28, %add27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 3:i32, %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul30 = mul nsw i32 %31, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 9:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %mul30, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 9:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub33 = sub nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %shl34 = shl i32 1, %sub33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = shl 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %used, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or35 = or i32 %34, %shl34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = shl 1:i32, %2
%4:i32 = or %0, %3
infer %4

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %arrayidx44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp45 = icmp sle i32 %41, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %used, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool47 = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add48 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call49 = call i32 @trycell(i32* %43, i32 %add48)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool50 = icmp ne i32 %call49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %arrayidx54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc55 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %used, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = ashr i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 81:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 9:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -589743
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 9:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483531
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 9:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = shl 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = shl 1:i32, %2
%4:i32 = or %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = shl 1:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 432013312
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
%2:i32 = mulnsw 3:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 833880033
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sdiv %0, 3:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 3:i32, %1
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for trycell()

; entering Souper's runOnFunction() for solve()

; ModuleID = './Sudoku.c.bc'
source_filename = "./Sudoku.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"no solution\00", align 1
@.str.3 = private unnamed_addr constant [82 x i8] c"5x..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %x) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %rem = srem i32 %1, 3
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %call = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %j, align 4
  %rem4 = srem i32 %3, 3
  %tobool5 = icmp ne i32 %rem4, 0
  %4 = zext i1 %tobool5 to i64
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0)
  %5 = load i32*, i32** %x.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %5, i32 1
  store i32* %incdec.ptr, i32** %x.addr, align 4
  %6 = load i32, i32* %5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* %cond, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call7 = call i32 @putchar(i32 10)
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %8, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trycell(i32* %x, i32 %pos) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32*, align 4
  %pos.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %used = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %0, 9
  store i32 %div, i32* %row, align 4
  %1 = load i32, i32* %pos.addr, align 4
  %rem = srem i32 %1, 9
  store i32 %rem, i32* %col, align 4
  store i32 0, i32* %used, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %2, 81
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %6 = load i32*, i32** %x.addr, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %7, 1
  %call = call i32 @trycell(i32* %6, i32 %add)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end2:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end2
  %8 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %8, 9
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %10, 9
  %11 = load i32, i32* %col, align 4
  %add4 = add nsw i32 %mul, %11
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %add4
  %12 = load i32, i32* %arrayidx5, align 4
  %sub = sub nsw i32 %12, 1
  %shl = shl i32 1, %sub
  %13 = load i32, i32* %used, align 4
  %or = or i32 %13, %shl
  store i32 %or, i32* %used, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc15, %for.end
  %15 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %15, 9
  br i1 %cmp7, label %for.body8, label %for.end17

for.body8:                                        ; preds = %for.cond6
  %16 = load i32*, i32** %x.addr, align 4
  %17 = load i32, i32* %row, align 4
  %mul9 = mul nsw i32 %17, 9
  %18 = load i32, i32* %j, align 4
  %add10 = add nsw i32 %mul9, %18
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i32 %add10
  %19 = load i32, i32* %arrayidx11, align 4
  %sub12 = sub nsw i32 %19, 1
  %shl13 = shl i32 1, %sub12
  %20 = load i32, i32* %used, align 4
  %or14 = or i32 %20, %shl13
  store i32 %or14, i32* %used, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body8
  %21 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond6

for.end17:                                        ; preds = %for.cond6
  %22 = load i32, i32* %row, align 4
  %div18 = sdiv i32 %22, 3
  %mul19 = mul nsw i32 %div18, 3
  store i32 %mul19, i32* %row, align 4
  %23 = load i32, i32* %col, align 4
  %div20 = sdiv i32 %23, 3
  %mul21 = mul nsw i32 %div20, 3
  store i32 %mul21, i32* %col, align 4
  %24 = load i32, i32* %row, align 4
  store i32 %24, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc39, %for.end17
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %row, align 4
  %add23 = add nsw i32 %26, 3
  %cmp24 = icmp slt i32 %25, %add23
  br i1 %cmp24, label %for.body25, label %for.end41

for.body25:                                       ; preds = %for.cond22
  %27 = load i32, i32* %col, align 4
  store i32 %27, i32* %j, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc36, %for.body25
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %col, align 4
  %add27 = add nsw i32 %29, 3
  %cmp28 = icmp slt i32 %28, %add27
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %30 = load i32*, i32** %x.addr, align 4
  %31 = load i32, i32* %i, align 4
  %mul30 = mul nsw i32 %31, 9
  %32 = load i32, i32* %j, align 4
  %add31 = add nsw i32 %mul30, %32
  %arrayidx32 = getelementptr inbounds i32, i32* %30, i32 %add31
  %33 = load i32, i32* %arrayidx32, align 4
  %sub33 = sub nsw i32 %33, 1
  %shl34 = shl i32 1, %sub33
  %34 = load i32, i32* %used, align 4
  %or35 = or i32 %34, %shl34
  store i32 %or35, i32* %used, align 4
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %35 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %35, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  br label %for.inc39

for.inc39:                                        ; preds = %for.end38
  %36 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %36, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond22

for.end41:                                        ; preds = %for.cond22
  %37 = load i32*, i32** %x.addr, align 4
  %38 = load i32, i32* %pos.addr, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 1, i32* %arrayidx42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end41
  %39 = load i32*, i32** %x.addr, align 4
  %40 = load i32, i32* %pos.addr, align 4
  %arrayidx44 = getelementptr inbounds i32, i32* %39, i32 %40
  %41 = load i32, i32* %arrayidx44, align 4
  %cmp45 = icmp sle i32 %41, 9
  br i1 %cmp45, label %for.body46, label %for.end56

for.body46:                                       ; preds = %for.cond43
  %42 = load i32, i32* %used, align 4
  %and = and i32 %42, 1
  %tobool47 = icmp ne i32 %and, 0
  br i1 %tobool47, label %if.end52, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body46
  %43 = load i32*, i32** %x.addr, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %add48 = add nsw i32 %44, 1
  %call49 = call i32 @trycell(i32* %43, i32 %add48)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end52:                                         ; preds = %land.lhs.true, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %45 = load i32*, i32** %x.addr, align 4
  %46 = load i32, i32* %pos.addr, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx54, align 4
  %inc55 = add nsw i32 %47, 1
  store i32 %inc55, i32* %arrayidx54, align 4
  %48 = load i32, i32* %used, align 4
  %shr = ashr i32 %48, 1
  store i32 %shr, i32* %used, align 4
  br label %for.cond43

for.end56:                                        ; preds = %for.cond43
  %49 = load i32*, i32** %x.addr, align 4
  %50 = load i32, i32* %pos.addr, align 4
  %arrayidx57 = getelementptr inbounds i32, i32* %49, i32 %50
  store i32 0, i32* %arrayidx57, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end56, %if.then51, %if.then1, %if.then
  %51 = load i32, i32* %retval, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind optnone
define hidden void @solve(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %x = alloca [81 x i32], align 16
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 81
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp sge i32 %conv, 49
  br i1 %cmp1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %6 to i32
  %cmp5 = icmp sle i32 %conv4, 57
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %9 to i32
  %sub = sub nsw i32 %conv8, 48
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 %10
  store i32 %cond, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  %call = call i32 @trycell(i32* %arraydecay, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %arraydecay10 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  call void @show(i32* %arraydecay10)
  br label %if.end

if.else:                                          ; preds = %for.end
  %call11 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @solve(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 81
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 81:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp sge i32 %conv, 49
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle 49:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %conv4, 57
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 57:i32
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %conv8, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
; Looking for a replacement for:
%0:i32 = var (signBits=24) (range=[-176,80))
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @trycell(i32* %arraydecay, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 81:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle 49:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 57:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (signBits=24) (range=[-176,80))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for solve()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sudoku.c.bc'
source_filename = "./Sudoku.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"no solution\00", align 1
@.str.3 = private unnamed_addr constant [82 x i8] c"5x..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show(i32* %x) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %rem = srem i32 %1, 3
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %call = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %if.end
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %j, align 4
  %rem4 = srem i32 %3, 3
  %tobool5 = icmp ne i32 %rem4, 0
  %4 = zext i1 %tobool5 to i64
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0)
  %5 = load i32*, i32** %x.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %5, i32 1
  store i32* %incdec.ptr, i32** %x.addr, align 4
  %6 = load i32, i32* %5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* %cond, i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call7 = call i32 @putchar(i32 10)
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %8, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trycell(i32* %x, i32 %pos) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32*, align 4
  %pos.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %used = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %0, 9
  store i32 %div, i32* %row, align 4
  %1 = load i32, i32* %pos.addr, align 4
  %rem = srem i32 %1, 9
  store i32 %rem, i32* %col, align 4
  store i32 0, i32* %used, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %2, 81
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %6 = load i32*, i32** %x.addr, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %7, 1
  %call = call i32 @trycell(i32* %6, i32 %add)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end2:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end2
  %8 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %8, 9
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %10, 9
  %11 = load i32, i32* %col, align 4
  %add4 = add nsw i32 %mul, %11
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %add4
  %12 = load i32, i32* %arrayidx5, align 4
  %sub = sub nsw i32 %12, 1
  %shl = shl i32 1, %sub
  %13 = load i32, i32* %used, align 4
  %or = or i32 %13, %shl
  store i32 %or, i32* %used, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc15, %for.end
  %15 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %15, 9
  br i1 %cmp7, label %for.body8, label %for.end17

for.body8:                                        ; preds = %for.cond6
  %16 = load i32*, i32** %x.addr, align 4
  %17 = load i32, i32* %row, align 4
  %mul9 = mul nsw i32 %17, 9
  %18 = load i32, i32* %j, align 4
  %add10 = add nsw i32 %mul9, %18
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i32 %add10
  %19 = load i32, i32* %arrayidx11, align 4
  %sub12 = sub nsw i32 %19, 1
  %shl13 = shl i32 1, %sub12
  %20 = load i32, i32* %used, align 4
  %or14 = or i32 %20, %shl13
  store i32 %or14, i32* %used, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body8
  %21 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond6

for.end17:                                        ; preds = %for.cond6
  %22 = load i32, i32* %row, align 4
  %div18 = sdiv i32 %22, 3
  %mul19 = mul nsw i32 %div18, 3
  store i32 %mul19, i32* %row, align 4
  %23 = load i32, i32* %col, align 4
  %div20 = sdiv i32 %23, 3
  %mul21 = mul nsw i32 %div20, 3
  store i32 %mul21, i32* %col, align 4
  %24 = load i32, i32* %row, align 4
  store i32 %24, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc39, %for.end17
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %row, align 4
  %add23 = add nsw i32 %26, 3
  %cmp24 = icmp slt i32 %25, %add23
  br i1 %cmp24, label %for.body25, label %for.end41

for.body25:                                       ; preds = %for.cond22
  %27 = load i32, i32* %col, align 4
  store i32 %27, i32* %j, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc36, %for.body25
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %col, align 4
  %add27 = add nsw i32 %29, 3
  %cmp28 = icmp slt i32 %28, %add27
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %30 = load i32*, i32** %x.addr, align 4
  %31 = load i32, i32* %i, align 4
  %mul30 = mul nsw i32 %31, 9
  %32 = load i32, i32* %j, align 4
  %add31 = add nsw i32 %mul30, %32
  %arrayidx32 = getelementptr inbounds i32, i32* %30, i32 %add31
  %33 = load i32, i32* %arrayidx32, align 4
  %sub33 = sub nsw i32 %33, 1
  %shl34 = shl i32 1, %sub33
  %34 = load i32, i32* %used, align 4
  %or35 = or i32 %34, %shl34
  store i32 %or35, i32* %used, align 4
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %35 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %35, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  br label %for.inc39

for.inc39:                                        ; preds = %for.end38
  %36 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %36, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond22

for.end41:                                        ; preds = %for.cond22
  %37 = load i32*, i32** %x.addr, align 4
  %38 = load i32, i32* %pos.addr, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 1, i32* %arrayidx42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end41
  %39 = load i32*, i32** %x.addr, align 4
  %40 = load i32, i32* %pos.addr, align 4
  %arrayidx44 = getelementptr inbounds i32, i32* %39, i32 %40
  %41 = load i32, i32* %arrayidx44, align 4
  %cmp45 = icmp sle i32 %41, 9
  br i1 %cmp45, label %for.body46, label %for.end56

for.body46:                                       ; preds = %for.cond43
  %42 = load i32, i32* %used, align 4
  %and = and i32 %42, 1
  %tobool47 = icmp ne i32 %and, 0
  br i1 %tobool47, label %if.end52, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body46
  %43 = load i32*, i32** %x.addr, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %add48 = add nsw i32 %44, 1
  %call49 = call i32 @trycell(i32* %43, i32 %add48)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end52:                                         ; preds = %land.lhs.true, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %45 = load i32*, i32** %x.addr, align 4
  %46 = load i32, i32* %pos.addr, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx54, align 4
  %inc55 = add nsw i32 %47, 1
  store i32 %inc55, i32* %arrayidx54, align 4
  %48 = load i32, i32* %used, align 4
  %shr = ashr i32 %48, 1
  store i32 %shr, i32* %used, align 4
  br label %for.cond43

for.end56:                                        ; preds = %for.cond43
  %49 = load i32*, i32** %x.addr, align 4
  %50 = load i32, i32* %pos.addr, align 4
  %arrayidx57 = getelementptr inbounds i32, i32* %49, i32 %50
  store i32 0, i32* %arrayidx57, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end56, %if.then51, %if.then1, %if.then
  %51 = load i32, i32* %retval, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind optnone
define hidden void @solve(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %x = alloca [81 x i32], align 16
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 81
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp sge i32 %conv, 49
  br i1 %cmp1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %6 to i32
  %cmp5 = icmp sle i32 %conv4, 57
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %9 to i32
  %sub = sub nsw i32 %conv8, 48
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 %10
  store i32 %cond, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  %call = call i32 @trycell(i32* %arraydecay, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %arraydecay10 = getelementptr inbounds [81 x i32], [81 x i32]* %x, i32 0, i32 0
  call void @show(i32* %arraydecay10)
  br label %if.end

if.else:                                          ; preds = %for.end
  %call11 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @solve(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
