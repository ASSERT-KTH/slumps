
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for addAndOrderList()

; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %call11, %cond.false ]
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.elem* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp ne %struct.elem* %14, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = fcmp olt double %16, %17
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = fcmp oeq double %19, %20
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %perimeter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %perimeter13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp19 = fcmp oeq double %25, %26
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %perimeter22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %perimeter23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %a27, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %a28, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp29 = icmp sle i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp32 = icmp eq %struct.elem* %34, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp38 = fcmp olt double %35, %38
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %perimeter40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %perimeter43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp44 = icmp slt i32 %39, %42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %a46, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %a49, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp50 = icmp slt i32 %43, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %flag, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp57 = icmp ne i32 %57, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for addAndOrderList()

; entering Souper's runOnFunction() for gcd()

; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %call11, %cond.false ]
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @gcd(i32 %1, i32 %rem)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for gcd()

; entering Souper's runOnFunction() for calculateArea()

; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %call11, %cond.false ]
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %a, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %c, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %add, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %perimeter2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %perimeter3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %a6, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %perimeter9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %b12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %perimeter16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %c19, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for calculateArea()

; entering Souper's runOnFunction() for generateTriangleList()

; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %call11, %cond.false ]
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %maxSide.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sgt i32 %add, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @gcd(i32 %10, i32 %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @gcd(i32 %call, i32 %12)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %call8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = fptosi double %19 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = fcmp oeq double %div, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i1 = slt %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for generateTriangleList()

; entering Souper's runOnFunction() for printList()

; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %call11, %cond.false ]
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.elem* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %limit.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %2, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = ne %0, %2
infer %3

; *****
; For LLVM instruction:
;  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %area.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %5, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %area.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = fcmp oeq double %conv, %8
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %a7, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %perimeter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = fptosi double %18 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = ne %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printList()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %call11, %cond.false ]
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @atoi(i8* %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @atoi(i8* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %call6, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000000)

; *****
; For LLVM instruction:
;  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000000)

; *****
; For LLVM instruction:
;  %call13 = call i32 @atoi(i8* %14)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call15 = call i32 @atoi(i8* %16)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %call11, %cond.false ]
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)"
; from ""
; with "i32 0" in:
"%0:i32 = var
cand %0 0:i32 (demandedBits=00000000000000000000000000000000)
"
; with "i32 0"

Module after replacement:
; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Heronian_triangles.c.bc'
source_filename = "./Heronian_triangles.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.elem = type { %struct.triangle, %struct.elem* }
%struct.triangle = type { i32, i32, i32, i32, double }

@.str = private unnamed_addr constant [27 x i8] c"\0ADimensions\09Perimeter\09Area\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"\0A%d x %d x %d\09%d\09\09%d\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"Usage : %s <Max side, max triangles to print and area, -1 for area to ignore>\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Triangles found : %d\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0APrinting first %s triangles.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"\0APrinting triangles with area %s square units.\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addAndOrderList(%struct.elem** %a, %struct.triangle* byval(%struct.triangle) align 8 %t) #0 {
entry:
  %a.addr = alloca %struct.elem**, align 4
  %iter = alloca %struct.elem*, align 4
  %temp = alloca %struct.elem*, align 4
  %flag = alloca i32, align 4
  store %struct.elem** %a, %struct.elem*** %a.addr, align 4
  store i32 0, i32* %flag, align 4
  %0 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %1 = load %struct.elem*, %struct.elem** %0, align 4
  %cmp = icmp eq %struct.elem* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 32)
  %2 = bitcast i8* %call to %struct.elem*
  %3 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  store %struct.elem* %2, %struct.elem** %3, align 4
  %4 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %5 = load %struct.elem*, %struct.elem** %4, align 4
  %t1 = getelementptr inbounds %struct.elem, %struct.elem* %5, i32 0, i32 0
  %6 = bitcast %struct.triangle* %t1 to i8*
  %7 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %9 = load %struct.elem*, %struct.elem** %8, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next, align 8
  br label %if.end63

if.else:                                          ; preds = %entry
  %call2 = call noalias i8* @malloc(i32 32)
  %10 = bitcast i8* %call2 to %struct.elem*
  store %struct.elem* %10, %struct.elem** %temp, align 4
  %11 = load %struct.elem**, %struct.elem*** %a.addr, align 4
  %12 = load %struct.elem*, %struct.elem** %11, align 4
  store %struct.elem* %12, %struct.elem** %iter, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %next3 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 1
  %14 = load %struct.elem*, %struct.elem** %next3, align 8
  %cmp4 = icmp ne %struct.elem* %14, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t5 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %t5, i32 0, i32 4
  %16 = load double, double* %area, align 8
  %area6 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %17 = load double, double* %area6, align 8
  %cmp7 = fcmp olt double %16, %17
  br i1 %cmp7, label %land.lhs.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %18, i32 0, i32 0
  %area9 = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 4
  %19 = load double, double* %area9, align 8
  %area10 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %20 = load double, double* %area10, align 8
  %cmp11 = fcmp oeq double %19, %20
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.elem*, %struct.elem** %iter, align 4
  %t12 = getelementptr inbounds %struct.elem, %struct.elem* %21, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t12, i32 0, i32 3
  %22 = load i32, i32* %perimeter, align 4
  %perimeter13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %23 = load i32, i32* %perimeter13, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %land.lhs.true30, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.elem*, %struct.elem** %iter, align 4
  %t16 = getelementptr inbounds %struct.elem, %struct.elem* %24, i32 0, i32 0
  %area17 = getelementptr inbounds %struct.triangle, %struct.triangle* %t16, i32 0, i32 4
  %25 = load double, double* %area17, align 8
  %area18 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %26 = load double, double* %area18, align 8
  %cmp19 = fcmp oeq double %25, %26
  br i1 %cmp19, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %lor.lhs.false15
  %27 = load %struct.elem*, %struct.elem** %iter, align 4
  %t21 = getelementptr inbounds %struct.elem, %struct.elem* %27, i32 0, i32 0
  %perimeter22 = getelementptr inbounds %struct.triangle, %struct.triangle* %t21, i32 0, i32 3
  %28 = load i32, i32* %perimeter22, align 4
  %perimeter23 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %29 = load i32, i32* %perimeter23, align 4
  %cmp24 = icmp eq i32 %28, %29
  br i1 %cmp24, label %land.lhs.true25, label %if.end

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %30 = load %struct.elem*, %struct.elem** %iter, align 4
  %t26 = getelementptr inbounds %struct.elem, %struct.elem* %30, i32 0, i32 0
  %a27 = getelementptr inbounds %struct.triangle, %struct.triangle* %t26, i32 0, i32 0
  %31 = load i32, i32* %a27, align 8
  %a28 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %32 = load i32, i32* %a28, align 8
  %cmp29 = icmp sle i32 %31, %32
  br i1 %cmp29, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true25, %land.lhs.true, %while.body
  %33 = load %struct.elem*, %struct.elem** %iter, align 4
  %next31 = getelementptr inbounds %struct.elem, %struct.elem* %33, i32 0, i32 1
  %34 = load %struct.elem*, %struct.elem** %next31, align 8
  %cmp32 = icmp eq %struct.elem* %34, null
  br i1 %cmp32, label %if.then51, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true30
  %area34 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %35 = load double, double* %area34, align 8
  %36 = load %struct.elem*, %struct.elem** %iter, align 4
  %next35 = getelementptr inbounds %struct.elem, %struct.elem* %36, i32 0, i32 1
  %37 = load %struct.elem*, %struct.elem** %next35, align 8
  %t36 = getelementptr inbounds %struct.elem, %struct.elem* %37, i32 0, i32 0
  %area37 = getelementptr inbounds %struct.triangle, %struct.triangle* %t36, i32 0, i32 4
  %38 = load double, double* %area37, align 8
  %cmp38 = fcmp olt double %35, %38
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %perimeter40 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 3
  %39 = load i32, i32* %perimeter40, align 4
  %40 = load %struct.elem*, %struct.elem** %iter, align 4
  %next41 = getelementptr inbounds %struct.elem, %struct.elem* %40, i32 0, i32 1
  %41 = load %struct.elem*, %struct.elem** %next41, align 8
  %t42 = getelementptr inbounds %struct.elem, %struct.elem* %41, i32 0, i32 0
  %perimeter43 = getelementptr inbounds %struct.triangle, %struct.triangle* %t42, i32 0, i32 3
  %42 = load i32, i32* %perimeter43, align 4
  %cmp44 = icmp slt i32 %39, %42
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %a46 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 0
  %43 = load i32, i32* %a46, align 8
  %44 = load %struct.elem*, %struct.elem** %iter, align 4
  %next47 = getelementptr inbounds %struct.elem, %struct.elem* %44, i32 0, i32 1
  %45 = load %struct.elem*, %struct.elem** %next47, align 8
  %t48 = getelementptr inbounds %struct.elem, %struct.elem* %45, i32 0, i32 0
  %a49 = getelementptr inbounds %struct.triangle, %struct.triangle* %t48, i32 0, i32 0
  %46 = load i32, i32* %a49, align 8
  %cmp50 = icmp slt i32 %43, %46
  br i1 %cmp50, label %if.then51, label %if.end

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %land.lhs.true30
  %47 = load %struct.elem*, %struct.elem** %temp, align 4
  %t52 = getelementptr inbounds %struct.elem, %struct.elem* %47, i32 0, i32 0
  %48 = bitcast %struct.triangle* %t52 to i8*
  %49 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %48, i8* align 8 %49, i32 24, i1 false)
  %50 = load %struct.elem*, %struct.elem** %iter, align 4
  %next53 = getelementptr inbounds %struct.elem, %struct.elem* %50, i32 0, i32 1
  %51 = load %struct.elem*, %struct.elem** %next53, align 8
  %52 = load %struct.elem*, %struct.elem** %temp, align 4
  %next54 = getelementptr inbounds %struct.elem, %struct.elem* %52, i32 0, i32 1
  store %struct.elem* %51, %struct.elem** %next54, align 8
  %53 = load %struct.elem*, %struct.elem** %temp, align 4
  %54 = load %struct.elem*, %struct.elem** %iter, align 4
  %next55 = getelementptr inbounds %struct.elem, %struct.elem* %54, i32 0, i32 1
  store %struct.elem* %53, %struct.elem** %next55, align 8
  store i32 1, i32* %flag, align 4
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false45, %land.lhs.true25, %land.lhs.true20, %lor.lhs.false15
  %55 = load %struct.elem*, %struct.elem** %iter, align 4
  %next56 = getelementptr inbounds %struct.elem, %struct.elem* %55, i32 0, i32 1
  %56 = load %struct.elem*, %struct.elem** %next56, align 8
  store %struct.elem* %56, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then51, %while.cond
  %57 = load i32, i32* %flag, align 4
  %cmp57 = icmp ne i32 %57, 1
  br i1 %cmp57, label %if.then58, label %if.end62

if.then58:                                        ; preds = %while.end
  %58 = load %struct.elem*, %struct.elem** %temp, align 4
  %t59 = getelementptr inbounds %struct.elem, %struct.elem* %58, i32 0, i32 0
  %59 = bitcast %struct.triangle* %t59 to i8*
  %60 = bitcast %struct.triangle* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %59, i8* align 8 %60, i32 24, i1 false)
  %61 = load %struct.elem*, %struct.elem** %temp, align 4
  %next60 = getelementptr inbounds %struct.elem, %struct.elem* %61, i32 0, i32 1
  store %struct.elem* null, %struct.elem** %next60, align 8
  %62 = load %struct.elem*, %struct.elem** %temp, align 4
  %63 = load %struct.elem*, %struct.elem** %iter, align 4
  %next61 = getelementptr inbounds %struct.elem, %struct.elem* %63, i32 0, i32 1
  store %struct.elem* %62, %struct.elem** %next61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then58, %while.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %2, %3
  %call = call i32 @gcd(i32 %1, i32 %rem)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %a.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @calculateArea(%struct.triangle* %t) #0 {
entry:
  %t.addr = alloca %struct.triangle*, align 4
  store %struct.triangle* %t, %struct.triangle** %t.addr, align 4
  %0 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a = getelementptr inbounds %struct.triangle, %struct.triangle* %0, i32 0, i32 0
  %1 = load i32, i32* %a, align 8
  %2 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %2, i32 0, i32 1
  %3 = load i32, i32* %b, align 4
  %add = add nsw i32 %1, %3
  %4 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %4, i32 0, i32 2
  %5 = load i32, i32* %c, align 8
  %add1 = add nsw i32 %add, %5
  %6 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %6, i32 0, i32 3
  store i32 %add1, i32* %perimeter, align 4
  %7 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter2 = getelementptr inbounds %struct.triangle, %struct.triangle* %7, i32 0, i32 3
  %8 = load i32, i32* %perimeter2, align 4
  %conv = sitofp i32 %8 to double
  %mul = fmul double 5.000000e-01, %conv
  %9 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter3 = getelementptr inbounds %struct.triangle, %struct.triangle* %9, i32 0, i32 3
  %10 = load i32, i32* %perimeter3, align 4
  %conv4 = sitofp i32 %10 to double
  %mul5 = fmul double 5.000000e-01, %conv4
  %11 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %a6 = getelementptr inbounds %struct.triangle, %struct.triangle* %11, i32 0, i32 0
  %12 = load i32, i32* %a6, align 8
  %conv7 = sitofp i32 %12 to double
  %sub = fsub double %mul5, %conv7
  %mul8 = fmul double %mul, %sub
  %13 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter9 = getelementptr inbounds %struct.triangle, %struct.triangle* %13, i32 0, i32 3
  %14 = load i32, i32* %perimeter9, align 4
  %conv10 = sitofp i32 %14 to double
  %mul11 = fmul double 5.000000e-01, %conv10
  %15 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %b12 = getelementptr inbounds %struct.triangle, %struct.triangle* %15, i32 0, i32 1
  %16 = load i32, i32* %b12, align 4
  %conv13 = sitofp i32 %16 to double
  %sub14 = fsub double %mul11, %conv13
  %mul15 = fmul double %mul8, %sub14
  %17 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %perimeter16 = getelementptr inbounds %struct.triangle, %struct.triangle* %17, i32 0, i32 3
  %18 = load i32, i32* %perimeter16, align 4
  %conv17 = sitofp i32 %18 to double
  %mul18 = fmul double 5.000000e-01, %conv17
  %19 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %c19 = getelementptr inbounds %struct.triangle, %struct.triangle* %19, i32 0, i32 2
  %20 = load i32, i32* %c19, align 8
  %conv20 = sitofp i32 %20 to double
  %sub21 = fsub double %mul18, %conv20
  %mul22 = fmul double %mul15, %sub21
  %21 = call double @llvm.sqrt.f64(double %mul22)
  %22 = load %struct.triangle*, %struct.triangle** %t.addr, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %22, i32 0, i32 4
  store double %21, double* %area, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden %struct.elem* @generateTriangleList(i32 %maxSide, i32* %count) #0 {
entry:
  %maxSide.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca %struct.triangle, align 8
  %herons = alloca %struct.elem*, align 4
  %.compoundliteral = alloca %struct.triangle, align 8
  store i32 %maxSide, i32* %maxSide.addr, align 4
  store i32* %count, i32** %count.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32*, i32** %count.addr, align 4
  store i32 0, i32* %0, align 4
  store i32 1, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %maxSide.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %b, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc21, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %a, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end23

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %c, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %cmp5 = icmp sle i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %b, align 4
  %add = add nsw i32 %7, %8
  %9 = load i32, i32* %a, align 4
  %cmp7 = icmp sgt i32 %add, %9
  br i1 %cmp7, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %for.body6
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %call = call i32 @gcd(i32 %10, i32 %11)
  %12 = load i32, i32* %c, align 4
  %call8 = call i32 @gcd(i32 %call, i32 %12)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %a10 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 0
  %13 = load i32, i32* %a, align 4
  store i32 %13, i32* %a10, align 8
  %b11 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 1
  %14 = load i32, i32* %b, align 4
  store i32 %14, i32* %b11, align 4
  %c12 = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 2
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %c12, align 8
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 3
  store i32 0, i32* %perimeter, align 4
  %area = getelementptr inbounds %struct.triangle, %struct.triangle* %.compoundliteral, i32 0, i32 4
  store double 0.000000e+00, double* %area, align 8
  %16 = bitcast %struct.triangle* %t to i8*
  %17 = bitcast %struct.triangle* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 24, i1 false)
  call void @calculateArea(%struct.triangle* %t)
  %area13 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %18 = load double, double* %area13, align 8
  %area14 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %19 = load double, double* %area14, align 8
  %conv = fptosi double %19 to i32
  %conv15 = sitofp i32 %conv to double
  %div = fdiv double %18, %conv15
  %cmp16 = fcmp oeq double %div, 1.000000e+00
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  call void @addAndOrderList(%struct.elem** %herons, %struct.triangle* byval(%struct.triangle) align 8 %t)
  %20 = load i32*, i32** %count.addr, align 4
  %21 = load i32, i32* %20, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %20, align 4
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %c, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %c, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %23 = load i32, i32* %b, align 4
  %inc22 = add nsw i32 %23, 1
  store i32 %inc22, i32* %b, align 4
  br label %for.cond1

for.end23:                                        ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %24 = load i32, i32* %a, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %a, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  %25 = load %struct.elem*, %struct.elem** %herons, align 4
  ret %struct.elem* %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @printList(%struct.elem* %a, i32 %limit, i32 %area) #0 {
entry:
  %a.addr = alloca %struct.elem*, align 4
  %limit.addr = alloca i32, align 4
  %area.addr = alloca i32, align 4
  %iter = alloca %struct.elem*, align 4
  %count = alloca i32, align 4
  store %struct.elem* %a, %struct.elem** %a.addr, align 4
  store i32 %limit, i32* %limit.addr, align 4
  store i32 %area, i32* %area.addr, align 4
  %0 = load %struct.elem*, %struct.elem** %a.addr, align 4
  store %struct.elem* %0, %struct.elem** %iter, align 4
  store i32 1, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.elem*, %struct.elem** %iter, align 4
  %cmp = icmp ne %struct.elem* %1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %count, align 4
  %3 = load i32, i32* %limit.addr, align 4
  %add = add nsw i32 %3, 1
  %cmp1 = icmp ne i32 %2, %add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32, i32* %area.addr, align 4
  %cmp2 = icmp eq i32 %5, -1
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i32, i32* %area.addr, align 4
  %conv = sitofp i32 %6 to double
  %7 = load %struct.elem*, %struct.elem** %iter, align 4
  %t = getelementptr inbounds %struct.elem, %struct.elem* %7, i32 0, i32 0
  %area3 = getelementptr inbounds %struct.triangle, %struct.triangle* %t, i32 0, i32 4
  %8 = load double, double* %area3, align 8
  %cmp4 = fcmp oeq double %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %9 = load %struct.elem*, %struct.elem** %iter, align 4
  %t6 = getelementptr inbounds %struct.elem, %struct.elem* %9, i32 0, i32 0
  %a7 = getelementptr inbounds %struct.triangle, %struct.triangle* %t6, i32 0, i32 0
  %10 = load i32, i32* %a7, align 8
  %11 = load %struct.elem*, %struct.elem** %iter, align 4
  %t8 = getelementptr inbounds %struct.elem, %struct.elem* %11, i32 0, i32 0
  %b = getelementptr inbounds %struct.triangle, %struct.triangle* %t8, i32 0, i32 1
  %12 = load i32, i32* %b, align 4
  %13 = load %struct.elem*, %struct.elem** %iter, align 4
  %t9 = getelementptr inbounds %struct.elem, %struct.elem* %13, i32 0, i32 0
  %c = getelementptr inbounds %struct.triangle, %struct.triangle* %t9, i32 0, i32 2
  %14 = load i32, i32* %c, align 8
  %15 = load %struct.elem*, %struct.elem** %iter, align 4
  %t10 = getelementptr inbounds %struct.elem, %struct.elem* %15, i32 0, i32 0
  %perimeter = getelementptr inbounds %struct.triangle, %struct.triangle* %t10, i32 0, i32 3
  %16 = load i32, i32* %perimeter, align 4
  %17 = load %struct.elem*, %struct.elem** %iter, align 4
  %t11 = getelementptr inbounds %struct.elem, %struct.elem* %17, i32 0, i32 0
  %area12 = getelementptr inbounds %struct.triangle, %struct.triangle* %t11, i32 0, i32 4
  %18 = load double, double* %area12, align 8
  %conv13 = fptosi double %18 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i32 %16, i32 %conv13)
  %19 = load i32, i32* %count, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load %struct.elem*, %struct.elem** %iter, align 4
  %next = getelementptr inbounds %struct.elem, %struct.elem* %20, i32 0, i32 1
  %21 = load %struct.elem*, %struct.elem** %next, align 8
  store %struct.elem* %21, %struct.elem** %iter, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %count = alloca i32, align 4
  %herons = alloca %struct.elem*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store %struct.elem* null, %struct.elem** %herons, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %call2 = call i32 @atoi(i8* %4)
  %call3 = call %struct.elem* @generateTriangleList(i32 %call2, i32* %count)
  store %struct.elem* %call3, %struct.elem** %herons, align 4
  %5 = load i32, i32* %count, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %6, i32 3
  %7 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 @atoi(i8* %7)
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i8**, i8*** %argV.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i32 2
  %9 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8* %9)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load i8**, i8*** %argV.addr, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %10, i32 3
  %11 = load i8*, i8** %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %12 = load %struct.elem*, %struct.elem** %herons, align 4
  %13 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %13, i32 2
  %14 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @atoi(i8* %14)
  %15 = load i8**, i8*** %argV.addr, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i32 3
  %16 = load i8*, i8** %arrayidx14, align 4
  %call15 = call i32 @atoi(i8* %16)
  call void @printList(%struct.elem* %12, i32 %call13, i32 %call15)
  %17 = load %struct.elem*, %struct.elem** %herons, align 4
  %18 = bitcast %struct.elem* %17 to i8*
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @atoi(i8* %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @atoi(i8* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %call6, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call13 = call i32 @atoi(i8* %14)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call15 = call i32 @atoi(i8* %16)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
