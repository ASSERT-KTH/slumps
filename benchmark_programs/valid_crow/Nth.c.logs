
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for addSuffix()

; ModuleID = './Nth.c.bc'
source_filename = "./Nth.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"th\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"nd\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"rd\00", align 1
@__const.addSuffix.suffixes = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"Set [0,25]:\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"Set [250,265]:\0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"Set [1000,1025]:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @addSuffix(i32 %num, i8* %buf, i32 %len) #0 {
entry:
  %num.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %suffixes = alloca [4 x i8*], align 16
  %i = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast [4 x i8*]* %suffixes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.addSuffix.suffixes to i8*), i32 16, i1 false)
  %1 = load i32, i32* %num.addr, align 4
  %rem = srem i32 %1, 10
  switch i32 %rem, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb6
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %num.addr, align 4
  %rem1 = srem i32 %2, 100
  %cmp = icmp eq i32 %rem1, 11
  %3 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 0, i32 1
  store i32 %cond, i32* %i, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  %4 = load i32, i32* %num.addr, align 4
  %rem3 = srem i32 %4, 100
  %cmp4 = icmp eq i32 %rem3, 12
  %5 = zext i1 %cmp4 to i64
  %cond5 = select i1 %cmp4, i32 0, i32 2
  store i32 %cond5, i32* %i, align 4
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry
  %6 = load i32, i32* %num.addr, align 4
  %rem7 = srem i32 %6, 100
  %cmp8 = icmp eq i32 %rem7, 13
  %7 = zext i1 %cmp8 to i64
  %cond9 = select i1 %cmp8, i32 0, i32 3
  store i32 %cond9, i32* %i, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb6, %sw.bb2, %sw.bb
  %8 = load i8*, i8** %buf.addr, align 4
  %9 = load i32, i32* %len.addr, align 4
  %10 = load i32, i32* %num.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* %suffixes, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %8, i32 %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %10, i8* %12)
  %13 = load i8*, i8** %buf.addr, align 4
  ret i8* %13
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca [5 x i8], align 1
  %s8 = alloca [6 x i8], align 1
  %s20 = alloca [7 x i8], align 1
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 0
  %call1 = call i8* @addSuffix(i32 %1, i8* %arraydecay, i32 5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0))
  store i32 250, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %3, 266
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %4 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [6 x i8], [6 x i8]* %s8, i32 0, i32 0
  %call10 = call i8* @addSuffix(i32 %4, i8* %arraydecay9, i32 6)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %call10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body7
  %5 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %5, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  %call15 = call i32 @putchar(i32 10)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i32 0, i32 0))
  store i32 1000, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc24, %for.end14
  %6 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %6, 1026
  br i1 %cmp18, label %for.body19, label %for.end26

for.body19:                                       ; preds = %for.cond17
  %7 = load i32, i32* %i, align 4
  %arraydecay21 = getelementptr inbounds [7 x i8], [7 x i8]* %s20, i32 0, i32 0
  %call22 = call i8* @addSuffix(i32 %7, i8* %arraydecay21, i32 7)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %8 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %8, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond17

for.end26:                                        ; preds = %for.cond17
  %call27 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @putchar(i32 %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem1 = srem i32 %2, 100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %rem1, 11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 11:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp, i32 0, i32 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 11:i32, %1 (hasExternalUses)
%3:i32 = select %2, 0:i32, 1:i32
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem3 = srem i32 %4, 100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %rem3, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 12:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cond5 = select i1 %cmp4, i32 0, i32 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 12:i32, %1 (hasExternalUses)
%3:i32 = select %2, 0:i32, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem7 = srem i32 %6, 100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %rem7, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 13:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cond9 = select i1 %cmp8, i32 0, i32 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 13:i32, %1 (hasExternalUses)
%3:i32 = select %2, 0:i32, 3:i32
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 85
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 11:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 11:i32, %1 (hasExternalUses)
%3:i32 = select %2, 0:i32, 1:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 12:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 12:i32, %1 (hasExternalUses)
%3:i32 = select %2, 0:i32, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 13:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = eq 13:i32, %1 (hasExternalUses)
%3:i32 = select %2, 0:i32, 3:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for addSuffix()

; entering Souper's runOnFunction() for main()

; ModuleID = './Nth.c.bc'
source_filename = "./Nth.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"th\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"nd\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"rd\00", align 1
@__const.addSuffix.suffixes = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"Set [0,25]:\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"Set [250,265]:\0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"Set [1000,1025]:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @addSuffix(i32 %num, i8* %buf, i32 %len) #0 {
entry:
  %num.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %suffixes = alloca [4 x i8*], align 16
  %i = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast [4 x i8*]* %suffixes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.addSuffix.suffixes to i8*), i32 16, i1 false)
  %1 = load i32, i32* %num.addr, align 4
  %rem = srem i32 %1, 10
  switch i32 %rem, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb6
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %num.addr, align 4
  %rem1 = srem i32 %2, 100
  %cmp = icmp eq i32 %rem1, 11
  %3 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 0, i32 1
  store i32 %cond, i32* %i, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  %4 = load i32, i32* %num.addr, align 4
  %rem3 = srem i32 %4, 100
  %cmp4 = icmp eq i32 %rem3, 12
  %5 = zext i1 %cmp4 to i64
  %cond5 = select i1 %cmp4, i32 0, i32 2
  store i32 %cond5, i32* %i, align 4
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry
  %6 = load i32, i32* %num.addr, align 4
  %rem7 = srem i32 %6, 100
  %cmp8 = icmp eq i32 %rem7, 13
  %7 = zext i1 %cmp8 to i64
  %cond9 = select i1 %cmp8, i32 0, i32 3
  store i32 %cond9, i32* %i, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb6, %sw.bb2, %sw.bb
  %8 = load i8*, i8** %buf.addr, align 4
  %9 = load i32, i32* %len.addr, align 4
  %10 = load i32, i32* %num.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* %suffixes, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %8, i32 %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %10, i8* %12)
  %13 = load i8*, i8** %buf.addr, align 4
  ret i8* %13
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca [5 x i8], align 1
  %s8 = alloca [6 x i8], align 1
  %s20 = alloca [7 x i8], align 1
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 0
  %call1 = call i8* @addSuffix(i32 %1, i8* %arraydecay, i32 5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0))
  store i32 250, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %3, 266
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %4 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [6 x i8], [6 x i8]* %s8, i32 0, i32 0
  %call10 = call i8* @addSuffix(i32 %4, i8* %arraydecay9, i32 6)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %call10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body7
  %5 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %5, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  %call15 = call i32 @putchar(i32 10)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i32 0, i32 0))
  store i32 1000, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc24, %for.end14
  %6 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %6, 1026
  br i1 %cmp18, label %for.body19, label %for.end26

for.body19:                                       ; preds = %for.cond17
  %7 = load i32, i32* %i, align 4
  %arraydecay21 = getelementptr inbounds [7 x i8], [7 x i8]* %s20, i32 0, i32 0
  %call22 = call i8* @addSuffix(i32 %7, i8* %arraydecay21, i32 7)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body19
  %8 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %8, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond17

for.end26:                                        ; preds = %for.cond17
  %call27 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @putchar(i32 %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %3, 266
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 266:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp slt i32 %6, 1026
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 1026:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 266:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 1026:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
