
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for table()

; ModuleID = './Terminal_control-Coloured_text.c.bc'
source_filename = "./Terminal_control-Coloured_text.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A\1B[1m%s\1B[m\0A bg\09 fg\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"%3d\09\1B[%s%dm\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"\1B[%dm%3d \00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"\1B[m\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"normal ( ESC[22m or ESC[m )\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"22;\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"bold ( ESC[1m )\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"1;\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"faint ( ESC[2m ), not well supported\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"2;\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"italic ( ESC[3m ), not well supported\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"3;\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"underline ( ESC[4m ), support varies\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"4;\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"blink ( ESC[5m )\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"5;\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"inverted ( ESC[7m )\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"7;\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @table(i8* %title, i8* %mode) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %mode.addr = alloca i8*, align 4
  %f = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i8* %mode, i8** %mode.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 40, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %1 = load i32, i32* %b, align 4
  %cmp = icmp sle i32 %1, 107
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %b, align 4
  %cmp1 = icmp eq i32 %2, 48
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 100, i32* %b, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i8*, i8** %mode.addr, align 4
  %5 = load i32, i32* %b, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %3, i8* %4, i32 %5)
  store i32 30, i32* %f, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %if.end
  %6 = load i32, i32* %f, align 4
  %cmp4 = icmp sle i32 %6, 97
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %f, align 4
  %cmp6 = icmp eq i32 %7, 38
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %for.body5
  store i32 90, i32* %f, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %for.body5
  %8 = load i32, i32* %f, align 4
  %9 = load i32, i32* %f, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i32 %8, i32 %9)
  br label %for.inc

for.inc:                                          ; preds = %if.end8
  %10 = load i32, i32* %f, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %f, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %call10 = call i32 @puts(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %11 = load i32, i32* %b, align 4
  %inc12 = add nsw i32 %11, 1
  store i32 %inc12, i32* %b, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %fg = alloca i32, align 4
  %bg = alloca i32, align 4
  %blink = alloca i32, align 4
  %inverse = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @table(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, 107
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 107:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %2, 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 48:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sle i32 %6, 97
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %7, 38
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 38:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 107:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 48:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 97:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 38:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for table()

; entering Souper's runOnFunction() for main()

; ModuleID = './Terminal_control-Coloured_text.c.bc'
source_filename = "./Terminal_control-Coloured_text.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A\1B[1m%s\1B[m\0A bg\09 fg\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"%3d\09\1B[%s%dm\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"\1B[%dm%3d \00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"\1B[m\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"normal ( ESC[22m or ESC[m )\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"22;\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"bold ( ESC[1m )\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"1;\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"faint ( ESC[2m ), not well supported\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"2;\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"italic ( ESC[3m ), not well supported\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"3;\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"underline ( ESC[4m ), support varies\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"4;\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"blink ( ESC[5m )\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"5;\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"inverted ( ESC[7m )\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"7;\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @table(i8* %title, i8* %mode) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %mode.addr = alloca i8*, align 4
  %f = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i8* %mode, i8** %mode.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 40, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %1 = load i32, i32* %b, align 4
  %cmp = icmp sle i32 %1, 107
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %b, align 4
  %cmp1 = icmp eq i32 %2, 48
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 100, i32* %b, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %3 = load i32, i32* %b, align 4
  %4 = load i8*, i8** %mode.addr, align 4
  %5 = load i32, i32* %b, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %3, i8* %4, i32 %5)
  store i32 30, i32* %f, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %if.end
  %6 = load i32, i32* %f, align 4
  %cmp4 = icmp sle i32 %6, 97
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %f, align 4
  %cmp6 = icmp eq i32 %7, 38
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %for.body5
  store i32 90, i32* %f, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %for.body5
  %8 = load i32, i32* %f, align 4
  %9 = load i32, i32* %f, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i32 %8, i32 %9)
  br label %for.inc

for.inc:                                          ; preds = %if.end8
  %10 = load i32, i32* %f, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %f, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %call10 = call i32 @puts(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %11 = load i32, i32* %b, align 4
  %inc12 = add nsw i32 %11, 1
  store i32 %inc12, i32* %b, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %fg = alloca i32, align 4
  %bg = alloca i32, align 4
  %blink = alloca i32, align 4
  %inverse = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @table(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0))
  call void @table(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
