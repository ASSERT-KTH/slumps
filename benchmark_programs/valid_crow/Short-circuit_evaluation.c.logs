
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for a()

; ModuleID = './Short-circuit_evaluation.c.bc'
source_filename = "./Short-circuit_evaluation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"I am a\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"I am b\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"false && true = %s\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"true || false = %s\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"true && false = %s\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"false || false = %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @a(i1 zeroext %in) #0 {
entry:
  %in.addr = alloca i8, align 1
  %frombool = zext i1 %in to i8
  store i8 %frombool, i8* %in.addr, align 1
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0))
  %0 = load i8, i8* %in.addr, align 1
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @b(i1 zeroext %in) #0 {
entry:
  %in.addr = alloca i8, align 1
  %frombool = zext i1 %in to i8
  store i8 %frombool, i8* %in.addr, align 1
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %0 = load i8, i8* %in.addr, align 1
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call zeroext i1 @a(i1 zeroext false)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body
  %call1 = call zeroext i1 @b(i1 zeroext true)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body
  %0 = phi i1 [ false, %do.body ], [ %call1, %land.rhs ]
  %frombool = zext i1 %0 to i8
  store i8 %frombool, i8* %x, align 1
  %1 = load i8, i8* %x, align 1
  %tobool = trunc i8 %1 to i1
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i8* %cond)
  br label %do.end

do.end:                                           ; preds = %land.end
  br label %do.body3

do.body3:                                         ; preds = %do.end
  %call4 = call zeroext i1 @a(i1 zeroext true)
  br i1 %call4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body3
  %call5 = call zeroext i1 @b(i1 zeroext false)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body3
  %3 = phi i1 [ true, %do.body3 ], [ %call5, %lor.rhs ]
  %frombool6 = zext i1 %3 to i8
  store i8 %frombool6, i8* %x, align 1
  %4 = load i8, i8* %x, align 1
  %tobool7 = trunc i8 %4 to i1
  %5 = zext i1 %tobool7 to i64
  %cond8 = select i1 %tobool7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i8* %cond8)
  br label %do.end10

do.end10:                                         ; preds = %lor.end
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  %call12 = call zeroext i1 @a(i1 zeroext true)
  br i1 %call12, label %land.rhs13, label %land.end15

land.rhs13:                                       ; preds = %do.body11
  %call14 = call zeroext i1 @b(i1 zeroext false)
  br label %land.end15

land.end15:                                       ; preds = %land.rhs13, %do.body11
  %6 = phi i1 [ false, %do.body11 ], [ %call14, %land.rhs13 ]
  %frombool16 = zext i1 %6 to i8
  store i8 %frombool16, i8* %x, align 1
  %7 = load i8, i8* %x, align 1
  %tobool17 = trunc i8 %7 to i1
  %8 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i8* %cond18)
  br label %do.end20

do.end20:                                         ; preds = %land.end15
  br label %do.body21

do.body21:                                        ; preds = %do.end20
  %call22 = call zeroext i1 @a(i1 zeroext false)
  br i1 %call22, label %lor.end25, label %lor.rhs23

lor.rhs23:                                        ; preds = %do.body21
  %call24 = call zeroext i1 @b(i1 zeroext false)
  br label %lor.end25

lor.end25:                                        ; preds = %lor.rhs23, %do.body21
  %9 = phi i1 [ true, %do.body21 ], [ %call24, %lor.rhs23 ]
  %frombool26 = zext i1 %9 to i8
  store i8 %frombool26, i8* %x, align 1
  %10 = load i8, i8* %x, align 1
  %tobool27 = trunc i8 %10 to i1
  %11 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0), i8* %cond28)
  br label %do.end30

do.end30:                                         ; preds = %lor.end25
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %frombool = zext i1 %in to i8
; Looking for a replacement for:
%0:i1 = var
%1:i8 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %0 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %0 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i8 = zext %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00000001)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for a()

; entering Souper's runOnFunction() for b()

; ModuleID = './Short-circuit_evaluation.c.bc'
source_filename = "./Short-circuit_evaluation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"I am a\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"I am b\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"false && true = %s\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"true || false = %s\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"true && false = %s\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"false || false = %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @a(i1 zeroext %in) #0 {
entry:
  %in.addr = alloca i8, align 1
  %frombool = zext i1 %in to i8
  store i8 %frombool, i8* %in.addr, align 1
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0))
  %0 = load i8, i8* %in.addr, align 1
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @b(i1 zeroext %in) #0 {
entry:
  %in.addr = alloca i8, align 1
  %frombool = zext i1 %in to i8
  store i8 %frombool, i8* %in.addr, align 1
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %0 = load i8, i8* %in.addr, align 1
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call zeroext i1 @a(i1 zeroext false)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body
  %call1 = call zeroext i1 @b(i1 zeroext true)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body
  %0 = phi i1 [ false, %do.body ], [ %call1, %land.rhs ]
  %frombool = zext i1 %0 to i8
  store i8 %frombool, i8* %x, align 1
  %1 = load i8, i8* %x, align 1
  %tobool = trunc i8 %1 to i1
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i8* %cond)
  br label %do.end

do.end:                                           ; preds = %land.end
  br label %do.body3

do.body3:                                         ; preds = %do.end
  %call4 = call zeroext i1 @a(i1 zeroext true)
  br i1 %call4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body3
  %call5 = call zeroext i1 @b(i1 zeroext false)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body3
  %3 = phi i1 [ true, %do.body3 ], [ %call5, %lor.rhs ]
  %frombool6 = zext i1 %3 to i8
  store i8 %frombool6, i8* %x, align 1
  %4 = load i8, i8* %x, align 1
  %tobool7 = trunc i8 %4 to i1
  %5 = zext i1 %tobool7 to i64
  %cond8 = select i1 %tobool7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i8* %cond8)
  br label %do.end10

do.end10:                                         ; preds = %lor.end
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  %call12 = call zeroext i1 @a(i1 zeroext true)
  br i1 %call12, label %land.rhs13, label %land.end15

land.rhs13:                                       ; preds = %do.body11
  %call14 = call zeroext i1 @b(i1 zeroext false)
  br label %land.end15

land.end15:                                       ; preds = %land.rhs13, %do.body11
  %6 = phi i1 [ false, %do.body11 ], [ %call14, %land.rhs13 ]
  %frombool16 = zext i1 %6 to i8
  store i8 %frombool16, i8* %x, align 1
  %7 = load i8, i8* %x, align 1
  %tobool17 = trunc i8 %7 to i1
  %8 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i8* %cond18)
  br label %do.end20

do.end20:                                         ; preds = %land.end15
  br label %do.body21

do.body21:                                        ; preds = %do.end20
  %call22 = call zeroext i1 @a(i1 zeroext false)
  br i1 %call22, label %lor.end25, label %lor.rhs23

lor.rhs23:                                        ; preds = %do.body21
  %call24 = call zeroext i1 @b(i1 zeroext false)
  br label %lor.end25

lor.end25:                                        ; preds = %lor.rhs23, %do.body21
  %9 = phi i1 [ true, %do.body21 ], [ %call24, %lor.rhs23 ]
  %frombool26 = zext i1 %9 to i8
  store i8 %frombool26, i8* %x, align 1
  %10 = load i8, i8* %x, align 1
  %tobool27 = trunc i8 %10 to i1
  %11 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0), i8* %cond28)
  br label %do.end30

do.end30:                                         ; preds = %lor.end25
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %frombool = zext i1 %in to i8
; Looking for a replacement for:
%0:i1 = var
%1:i8 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %0 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %0 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for b()

; entering Souper's runOnFunction() for main()

; ModuleID = './Short-circuit_evaluation.c.bc'
source_filename = "./Short-circuit_evaluation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"I am a\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"I am b\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"false && true = %s\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"true || false = %s\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"true && false = %s\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"false || false = %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @a(i1 zeroext %in) #0 {
entry:
  %in.addr = alloca i8, align 1
  %frombool = zext i1 %in to i8
  store i8 %frombool, i8* %in.addr, align 1
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0))
  %0 = load i8, i8* %in.addr, align 1
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @b(i1 zeroext %in) #0 {
entry:
  %in.addr = alloca i8, align 1
  %frombool = zext i1 %in to i8
  store i8 %frombool, i8* %in.addr, align 1
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %0 = load i8, i8* %in.addr, align 1
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call zeroext i1 @a(i1 zeroext false)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.body
  %call1 = call zeroext i1 @b(i1 zeroext true)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.body
  %0 = phi i1 [ false, %do.body ], [ %call1, %land.rhs ]
  %frombool = zext i1 %0 to i8
  store i8 %frombool, i8* %x, align 1
  %1 = load i8, i8* %x, align 1
  %tobool = trunc i8 %1 to i1
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i8* %cond)
  br label %do.end

do.end:                                           ; preds = %land.end
  br label %do.body3

do.body3:                                         ; preds = %do.end
  %call4 = call zeroext i1 @a(i1 zeroext true)
  br i1 %call4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body3
  %call5 = call zeroext i1 @b(i1 zeroext false)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body3
  %3 = phi i1 [ true, %do.body3 ], [ %call5, %lor.rhs ]
  %frombool6 = zext i1 %3 to i8
  store i8 %frombool6, i8* %x, align 1
  %4 = load i8, i8* %x, align 1
  %tobool7 = trunc i8 %4 to i1
  %5 = zext i1 %tobool7 to i64
  %cond8 = select i1 %tobool7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i8* %cond8)
  br label %do.end10

do.end10:                                         ; preds = %lor.end
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  %call12 = call zeroext i1 @a(i1 zeroext true)
  br i1 %call12, label %land.rhs13, label %land.end15

land.rhs13:                                       ; preds = %do.body11
  %call14 = call zeroext i1 @b(i1 zeroext false)
  br label %land.end15

land.end15:                                       ; preds = %land.rhs13, %do.body11
  %6 = phi i1 [ false, %do.body11 ], [ %call14, %land.rhs13 ]
  %frombool16 = zext i1 %6 to i8
  store i8 %frombool16, i8* %x, align 1
  %7 = load i8, i8* %x, align 1
  %tobool17 = trunc i8 %7 to i1
  %8 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i8* %cond18)
  br label %do.end20

do.end20:                                         ; preds = %land.end15
  br label %do.body21

do.body21:                                        ; preds = %do.end20
  %call22 = call zeroext i1 @a(i1 zeroext false)
  br i1 %call22, label %lor.end25, label %lor.rhs23

lor.rhs23:                                        ; preds = %do.body21
  %call24 = call zeroext i1 @b(i1 zeroext false)
  br label %lor.end25

lor.end25:                                        ; preds = %lor.rhs23, %do.body21
  %9 = phi i1 [ true, %do.body21 ], [ %call24, %lor.rhs23 ]
  %frombool26 = zext i1 %9 to i8
  store i8 %frombool26, i8* %x, align 1
  %10 = load i8, i8* %x, align 1
  %tobool27 = trunc i8 %10 to i1
  %11 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0), i8* %cond28)
  br label %do.end30

do.end30:                                         ; preds = %lor.end25
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call zeroext i1 @a(i1 zeroext false)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call zeroext i1 @b(i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %0 = phi i1 [ false, %do.body ], [ %call1, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %frombool = zext i1 %0 to i8
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
%3:i8 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %x, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %1 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %call4 = call zeroext i1 @a(i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call5 = call zeroext i1 @b(i1 zeroext false)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = phi i1 [ true, %do.body3 ], [ %call5, %lor.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %frombool6 = zext i1 %3 to i8
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
%3:i8 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %x, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool7 = trunc i8 %4 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %call12 = call zeroext i1 @a(i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call14 = call zeroext i1 @b(i1 zeroext false)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %do.body11 ], [ %call14, %land.rhs13 ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %frombool16 = zext i1 %6 to i8
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
%3:i8 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %x, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool17 = trunc i8 %7 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %call22 = call zeroext i1 @a(i1 zeroext false)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call24 = call zeroext i1 @b(i1 zeroext false)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = phi i1 [ true, %do.body21 ], [ %call24, %lor.rhs23 ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %frombool26 = zext i1 %9 to i8
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
%3:i8 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %x, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool27 = trunc i8 %10 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
%3:i8 = zext %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
%3:i8 = zext %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
