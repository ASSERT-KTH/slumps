
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './A*_search_algorithm.c.bc'
source_filename = "./A*_search_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.stop = type { double, double, i32*, i32, double, double, double, i32 }
%struct.route = type { i32, i32, double }

@map = hidden global [10 x [10 x i8]] [[10 x i8] c"\01\01\01\01\01\01\01\01\01\01", [10 x i8] c"\01\00\00\00\00\00\00\00\00\01", [10 x i8] c"\01\00\00\00\00\00\00\00\00\01", [10 x i8] c"\01\00\00\00\00\01\01\01\00\01", [10 x i8] c"\01\00\00\01\00\00\00\01\00\01", [10 x i8] c"\01\00\00\01\00\00\00\01\00\01", [10 x i8] c"\01\00\00\01\01\01\01\01\00\01", [10 x i8] c"\01\00\00\00\00\00\00\00\00\01", [10 x i8] c"\01\00\00\00\00\00\00\00\00\01", [10 x i8] c"\01\01\01\01\01\01\01\01\01\01"], align 16
@ind = hidden global [10 x [10 x i32]] [[10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], [10 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1]], align 16
@.str = private unnamed_addr constant [11 x i8] c"IMPOSSIBLE\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"path cost is %d:\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"(%1.0f, %1.0f)\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %b = alloca i32, align 4
  %found = alloca i32, align 4
  %p_len = alloca i32, align 4
  %path = alloca i32*, align 4
  %c_len = alloca i32, align 4
  %closed = alloca i32*, align 4
  %o_len = alloca i32, align 4
  %open = alloca i32*, align 4
  %min = alloca double, align 8
  %tempg = alloca double, align 8
  %s = alloca i32, align 4
  %e = alloca i32, align 4
  %current = alloca i32, align 4
  %s_len = alloca i32, align 4
  %stops = alloca %struct.stop*, align 4
  %r_len = alloca i32, align 4
  %routes = alloca %struct.route*, align 4
  %t = alloca i32, align 4
  %t77 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %p_len, align 4
  store i32* null, i32** %path, align 4
  store i32 0, i32* %c_len, align 4
  store i32* null, i32** %closed, align 4
  store i32 1, i32* %o_len, align 4
  %0 = load i32, i32* %o_len, align 4
  %call = call noalias i8* @calloc(i32 %0, i32 4)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %open, align 4
  store i32 0, i32* %s_len, align 4
  store %struct.stop* null, %struct.stop** %stops, align 4
  store i32 0, i32* %r_len, align 4
  store %struct.route* null, %struct.route** %routes, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc16, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end18

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 9
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @map, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  %tobool = icmp ne i8 %6, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %s_len, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %s_len, align 4
  %8 = load %struct.stop*, %struct.stop** %stops, align 4
  %9 = bitcast %struct.stop* %8 to i8*
  %10 = load i32, i32* %s_len, align 4
  %mul = mul i32 %10, 56
  %call5 = call i8* @realloc(i8* %9, i32 %mul)
  %11 = bitcast i8* %call5 to %struct.stop*
  store %struct.stop* %11, %struct.stop** %stops, align 4
  %12 = load i32, i32* %s_len, align 4
  %sub = sub nsw i32 %12, 1
  store i32 %sub, i32* %t, align 4
  %13 = load i32, i32* %j, align 4
  %conv = sitofp i32 %13 to double
  %14 = load %struct.stop*, %struct.stop** %stops, align 4
  %15 = load i32, i32* %t, align 4
  %arrayidx6 = getelementptr inbounds %struct.stop, %struct.stop* %14, i32 %15
  %col = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx6, i32 0, i32 0
  store double %conv, double* %col, align 8
  %16 = load i32, i32* %i, align 4
  %conv7 = sitofp i32 %16 to double
  %17 = load %struct.stop*, %struct.stop** %stops, align 4
  %18 = load i32, i32* %t, align 4
  %arrayidx8 = getelementptr inbounds %struct.stop, %struct.stop* %17, i32 %18
  %row = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx8, i32 0, i32 1
  store double %conv7, double* %row, align 8
  %19 = load %struct.stop*, %struct.stop** %stops, align 4
  %20 = load i32, i32* %t, align 4
  %arrayidx9 = getelementptr inbounds %struct.stop, %struct.stop* %19, i32 %20
  %from = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx9, i32 0, i32 7
  store i32 -1, i32* %from, align 8
  %21 = load %struct.stop*, %struct.stop** %stops, align 4
  %22 = load i32, i32* %t, align 4
  %arrayidx10 = getelementptr inbounds %struct.stop, %struct.stop* %21, i32 %22
  %g = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx10, i32 0, i32 5
  store double 0x7FEFFFFFFFFFFFFF, double* %g, align 8
  %23 = load %struct.stop*, %struct.stop** %stops, align 4
  %24 = load i32, i32* %t, align 4
  %arrayidx11 = getelementptr inbounds %struct.stop, %struct.stop* %23, i32 %24
  %n_len = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx11, i32 0, i32 3
  store i32 0, i32* %n_len, align 4
  %25 = load %struct.stop*, %struct.stop** %stops, align 4
  %26 = load i32, i32* %t, align 4
  %arrayidx12 = getelementptr inbounds %struct.stop, %struct.stop* %25, i32 %26
  %n = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx12, i32 0, i32 2
  store i32* null, i32** %n, align 8
  %27 = load i32, i32* %t, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @ind, i32 0, i32 %28
  %29 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx13, i32 0, i32 %29
  store i32 %27, i32* %arrayidx14, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %30 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %30, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc16

for.inc16:                                        ; preds = %for.end
  %31 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %31, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond

for.end18:                                        ; preds = %for.cond
  store i32 0, i32* %s, align 4
  %32 = load i32, i32* %s_len, align 4
  %sub19 = sub nsw i32 %32, 1
  store i32 %sub19, i32* %e, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %for.end18
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %s_len, align 4
  %cmp21 = icmp slt i32 %33, %34
  br i1 %cmp21, label %for.body23, label %for.end37

for.body23:                                       ; preds = %for.cond20
  %35 = load %struct.stop*, %struct.stop** %stops, align 4
  %36 = load i32, i32* %e, align 4
  %arrayidx24 = getelementptr inbounds %struct.stop, %struct.stop* %35, i32 %36
  %row25 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx24, i32 0, i32 1
  %37 = load double, double* %row25, align 8
  %38 = load %struct.stop*, %struct.stop** %stops, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.stop, %struct.stop* %38, i32 %39
  %row27 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx26, i32 0, i32 1
  %40 = load double, double* %row27, align 8
  %sub28 = fsub double %37, %40
  %41 = call double @llvm.pow.f64(double %sub28, double 2.000000e+00)
  %42 = load %struct.stop*, %struct.stop** %stops, align 4
  %43 = load i32, i32* %e, align 4
  %arrayidx29 = getelementptr inbounds %struct.stop, %struct.stop* %42, i32 %43
  %col30 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx29, i32 0, i32 0
  %44 = load double, double* %col30, align 8
  %45 = load %struct.stop*, %struct.stop** %stops, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds %struct.stop, %struct.stop* %45, i32 %46
  %col32 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx31, i32 0, i32 0
  %47 = load double, double* %col32, align 8
  %sub33 = fsub double %44, %47
  %48 = call double @llvm.pow.f64(double %sub33, double 2.000000e+00)
  %add = fadd double %41, %48
  %49 = call double @llvm.sqrt.f64(double %add)
  %50 = load %struct.stop*, %struct.stop** %stops, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.stop, %struct.stop* %50, i32 %51
  %h = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx34, i32 0, i32 6
  store double %49, double* %h, align 8
  br label %for.inc35

for.inc35:                                        ; preds = %for.body23
  %52 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %52, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond20

for.end37:                                        ; preds = %for.cond20
  store i32 1, i32* %i, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc145, %for.end37
  %53 = load i32, i32* %i, align 4
  %cmp39 = icmp slt i32 %53, 9
  br i1 %cmp39, label %for.body41, label %for.end147

for.body41:                                       ; preds = %for.cond38
  store i32 1, i32* %j, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc142, %for.body41
  %54 = load i32, i32* %j, align 4
  %cmp43 = icmp slt i32 %54, 9
  br i1 %cmp43, label %for.body45, label %for.end144

for.body45:                                       ; preds = %for.cond42
  %55 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @ind, i32 0, i32 %55
  %56 = load i32, i32* %j, align 4
  %arrayidx47 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx46, i32 0, i32 %56
  %57 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sge i32 %57, 0
  br i1 %cmp48, label %if.then50, label %if.end141

if.then50:                                        ; preds = %for.body45
  %58 = load i32, i32* %i, align 4
  %sub51 = sub nsw i32 %58, 1
  store i32 %sub51, i32* %k, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc138, %if.then50
  %59 = load i32, i32* %k, align 4
  %60 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %60, 1
  %cmp54 = icmp sle i32 %59, %add53
  br i1 %cmp54, label %for.body56, label %for.end140

for.body56:                                       ; preds = %for.cond52
  %61 = load i32, i32* %j, align 4
  %sub57 = sub nsw i32 %61, 1
  store i32 %sub57, i32* %l, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc135, %for.body56
  %62 = load i32, i32* %l, align 4
  %63 = load i32, i32* %j, align 4
  %add59 = add nsw i32 %63, 1
  %cmp60 = icmp sle i32 %62, %add59
  br i1 %cmp60, label %for.body62, label %for.end137

for.body62:                                       ; preds = %for.cond58
  %64 = load i32, i32* %k, align 4
  %65 = load i32, i32* %i, align 4
  %cmp63 = icmp eq i32 %64, %65
  br i1 %cmp63, label %land.lhs.true, label %if.end68

land.lhs.true:                                    ; preds = %for.body62
  %66 = load i32, i32* %l, align 4
  %67 = load i32, i32* %j, align 4
  %cmp65 = icmp eq i32 %66, %67
  br i1 %cmp65, label %if.then67, label %if.end68

if.then67:                                        ; preds = %land.lhs.true
  br label %for.inc135

if.end68:                                         ; preds = %land.lhs.true, %for.body62
  %68 = load i32, i32* %k, align 4
  %arrayidx69 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @ind, i32 0, i32 %68
  %69 = load i32, i32* %l, align 4
  %arrayidx70 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx69, i32 0, i32 %69
  %70 = load i32, i32* %arrayidx70, align 4
  %cmp71 = icmp sge i32 %70, 0
  br i1 %cmp71, label %if.then73, label %if.end134

if.then73:                                        ; preds = %if.end68
  %71 = load i32, i32* %r_len, align 4
  %inc74 = add nsw i32 %71, 1
  store i32 %inc74, i32* %r_len, align 4
  %72 = load %struct.route*, %struct.route** %routes, align 4
  %73 = bitcast %struct.route* %72 to i8*
  %74 = load i32, i32* %r_len, align 4
  %mul75 = mul i32 %74, 16
  %call76 = call i8* @realloc(i8* %73, i32 %mul75)
  %75 = bitcast i8* %call76 to %struct.route*
  store %struct.route* %75, %struct.route** %routes, align 4
  %76 = load i32, i32* %r_len, align 4
  %sub78 = sub nsw i32 %76, 1
  store i32 %sub78, i32* %t77, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx79 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @ind, i32 0, i32 %77
  %78 = load i32, i32* %j, align 4
  %arrayidx80 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx79, i32 0, i32 %78
  %79 = load i32, i32* %arrayidx80, align 4
  %80 = load %struct.route*, %struct.route** %routes, align 4
  %81 = load i32, i32* %t77, align 4
  %arrayidx81 = getelementptr inbounds %struct.route, %struct.route* %80, i32 %81
  %x = getelementptr inbounds %struct.route, %struct.route* %arrayidx81, i32 0, i32 0
  store i32 %79, i32* %x, align 8
  %82 = load i32, i32* %k, align 4
  %arrayidx82 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @ind, i32 0, i32 %82
  %83 = load i32, i32* %l, align 4
  %arrayidx83 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx82, i32 0, i32 %83
  %84 = load i32, i32* %arrayidx83, align 4
  %85 = load %struct.route*, %struct.route** %routes, align 4
  %86 = load i32, i32* %t77, align 4
  %arrayidx84 = getelementptr inbounds %struct.route, %struct.route* %85, i32 %86
  %y = getelementptr inbounds %struct.route, %struct.route* %arrayidx84, i32 0, i32 1
  store i32 %84, i32* %y, align 4
  %87 = load %struct.stop*, %struct.stop** %stops, align 4
  %88 = load %struct.route*, %struct.route** %routes, align 4
  %89 = load i32, i32* %t77, align 4
  %arrayidx85 = getelementptr inbounds %struct.route, %struct.route* %88, i32 %89
  %y86 = getelementptr inbounds %struct.route, %struct.route* %arrayidx85, i32 0, i32 1
  %90 = load i32, i32* %y86, align 4
  %arrayidx87 = getelementptr inbounds %struct.stop, %struct.stop* %87, i32 %90
  %row88 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx87, i32 0, i32 1
  %91 = load double, double* %row88, align 8
  %92 = load %struct.stop*, %struct.stop** %stops, align 4
  %93 = load %struct.route*, %struct.route** %routes, align 4
  %94 = load i32, i32* %t77, align 4
  %arrayidx89 = getelementptr inbounds %struct.route, %struct.route* %93, i32 %94
  %x90 = getelementptr inbounds %struct.route, %struct.route* %arrayidx89, i32 0, i32 0
  %95 = load i32, i32* %x90, align 8
  %arrayidx91 = getelementptr inbounds %struct.stop, %struct.stop* %92, i32 %95
  %row92 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx91, i32 0, i32 1
  %96 = load double, double* %row92, align 8
  %sub93 = fsub double %91, %96
  %97 = call double @llvm.pow.f64(double %sub93, double 2.000000e+00)
  %98 = load %struct.stop*, %struct.stop** %stops, align 4
  %99 = load %struct.route*, %struct.route** %routes, align 4
  %100 = load i32, i32* %t77, align 4
  %arrayidx94 = getelementptr inbounds %struct.route, %struct.route* %99, i32 %100
  %y95 = getelementptr inbounds %struct.route, %struct.route* %arrayidx94, i32 0, i32 1
  %101 = load i32, i32* %y95, align 4
  %arrayidx96 = getelementptr inbounds %struct.stop, %struct.stop* %98, i32 %101
  %col97 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx96, i32 0, i32 0
  %102 = load double, double* %col97, align 8
  %103 = load %struct.stop*, %struct.stop** %stops, align 4
  %104 = load %struct.route*, %struct.route** %routes, align 4
  %105 = load i32, i32* %t77, align 4
  %arrayidx98 = getelementptr inbounds %struct.route, %struct.route* %104, i32 %105
  %x99 = getelementptr inbounds %struct.route, %struct.route* %arrayidx98, i32 0, i32 0
  %106 = load i32, i32* %x99, align 8
  %arrayidx100 = getelementptr inbounds %struct.stop, %struct.stop* %103, i32 %106
  %col101 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx100, i32 0, i32 0
  %107 = load double, double* %col101, align 8
  %sub102 = fsub double %102, %107
  %108 = call double @llvm.pow.f64(double %sub102, double 2.000000e+00)
  %add103 = fadd double %97, %108
  %109 = call double @llvm.sqrt.f64(double %add103)
  %110 = load %struct.route*, %struct.route** %routes, align 4
  %111 = load i32, i32* %t77, align 4
  %arrayidx104 = getelementptr inbounds %struct.route, %struct.route* %110, i32 %111
  %d = getelementptr inbounds %struct.route, %struct.route* %arrayidx104, i32 0, i32 2
  store double %109, double* %d, align 8
  %112 = load %struct.stop*, %struct.stop** %stops, align 4
  %113 = load %struct.route*, %struct.route** %routes, align 4
  %114 = load i32, i32* %t77, align 4
  %arrayidx105 = getelementptr inbounds %struct.route, %struct.route* %113, i32 %114
  %x106 = getelementptr inbounds %struct.route, %struct.route* %arrayidx105, i32 0, i32 0
  %115 = load i32, i32* %x106, align 8
  %arrayidx107 = getelementptr inbounds %struct.stop, %struct.stop* %112, i32 %115
  %n_len108 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx107, i32 0, i32 3
  %116 = load i32, i32* %n_len108, align 4
  %inc109 = add nsw i32 %116, 1
  store i32 %inc109, i32* %n_len108, align 4
  %117 = load %struct.stop*, %struct.stop** %stops, align 4
  %118 = load %struct.route*, %struct.route** %routes, align 4
  %119 = load i32, i32* %t77, align 4
  %arrayidx110 = getelementptr inbounds %struct.route, %struct.route* %118, i32 %119
  %x111 = getelementptr inbounds %struct.route, %struct.route* %arrayidx110, i32 0, i32 0
  %120 = load i32, i32* %x111, align 8
  %arrayidx112 = getelementptr inbounds %struct.stop, %struct.stop* %117, i32 %120
  %n113 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx112, i32 0, i32 2
  %121 = load i32*, i32** %n113, align 8
  %122 = bitcast i32* %121 to i8*
  %123 = load %struct.stop*, %struct.stop** %stops, align 4
  %124 = load %struct.route*, %struct.route** %routes, align 4
  %125 = load i32, i32* %t77, align 4
  %arrayidx114 = getelementptr inbounds %struct.route, %struct.route* %124, i32 %125
  %x115 = getelementptr inbounds %struct.route, %struct.route* %arrayidx114, i32 0, i32 0
  %126 = load i32, i32* %x115, align 8
  %arrayidx116 = getelementptr inbounds %struct.stop, %struct.stop* %123, i32 %126
  %n_len117 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx116, i32 0, i32 3
  %127 = load i32, i32* %n_len117, align 4
  %mul118 = mul i32 %127, 4
  %call119 = call i8* @realloc(i8* %122, i32 %mul118)
  %128 = bitcast i8* %call119 to i32*
  %129 = load %struct.stop*, %struct.stop** %stops, align 4
  %130 = load %struct.route*, %struct.route** %routes, align 4
  %131 = load i32, i32* %t77, align 4
  %arrayidx120 = getelementptr inbounds %struct.route, %struct.route* %130, i32 %131
  %x121 = getelementptr inbounds %struct.route, %struct.route* %arrayidx120, i32 0, i32 0
  %132 = load i32, i32* %x121, align 8
  %arrayidx122 = getelementptr inbounds %struct.stop, %struct.stop* %129, i32 %132
  %n123 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx122, i32 0, i32 2
  store i32* %128, i32** %n123, align 8
  %133 = load i32, i32* %t77, align 4
  %134 = load %struct.stop*, %struct.stop** %stops, align 4
  %135 = load %struct.route*, %struct.route** %routes, align 4
  %136 = load i32, i32* %t77, align 4
  %arrayidx124 = getelementptr inbounds %struct.route, %struct.route* %135, i32 %136
  %x125 = getelementptr inbounds %struct.route, %struct.route* %arrayidx124, i32 0, i32 0
  %137 = load i32, i32* %x125, align 8
  %arrayidx126 = getelementptr inbounds %struct.stop, %struct.stop* %134, i32 %137
  %n127 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx126, i32 0, i32 2
  %138 = load i32*, i32** %n127, align 8
  %139 = load %struct.stop*, %struct.stop** %stops, align 4
  %140 = load %struct.route*, %struct.route** %routes, align 4
  %141 = load i32, i32* %t77, align 4
  %arrayidx128 = getelementptr inbounds %struct.route, %struct.route* %140, i32 %141
  %x129 = getelementptr inbounds %struct.route, %struct.route* %arrayidx128, i32 0, i32 0
  %142 = load i32, i32* %x129, align 8
  %arrayidx130 = getelementptr inbounds %struct.stop, %struct.stop* %139, i32 %142
  %n_len131 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx130, i32 0, i32 3
  %143 = load i32, i32* %n_len131, align 4
  %sub132 = sub nsw i32 %143, 1
  %arrayidx133 = getelementptr inbounds i32, i32* %138, i32 %sub132
  store i32 %133, i32* %arrayidx133, align 4
  br label %if.end134

if.end134:                                        ; preds = %if.then73, %if.end68
  br label %for.inc135

for.inc135:                                       ; preds = %if.end134, %if.then67
  %144 = load i32, i32* %l, align 4
  %inc136 = add nsw i32 %144, 1
  store i32 %inc136, i32* %l, align 4
  br label %for.cond58

for.end137:                                       ; preds = %for.cond58
  br label %for.inc138

for.inc138:                                       ; preds = %for.end137
  %145 = load i32, i32* %k, align 4
  %inc139 = add nsw i32 %145, 1
  store i32 %inc139, i32* %k, align 4
  br label %for.cond52

for.end140:                                       ; preds = %for.cond52
  br label %if.end141

if.end141:                                        ; preds = %for.end140, %for.body45
  br label %for.inc142

for.inc142:                                       ; preds = %if.end141
  %146 = load i32, i32* %j, align 4
  %inc143 = add nsw i32 %146, 1
  store i32 %inc143, i32* %j, align 4
  br label %for.cond42

for.end144:                                       ; preds = %for.cond42
  br label %for.inc145

for.inc145:                                       ; preds = %for.end144
  %147 = load i32, i32* %i, align 4
  %inc146 = add nsw i32 %147, 1
  store i32 %inc146, i32* %i, align 4
  br label %for.cond38

for.end147:                                       ; preds = %for.cond38
  %148 = load i32, i32* %s, align 4
  %149 = load i32*, i32** %open, align 4
  %arrayidx148 = getelementptr inbounds i32, i32* %149, i32 0
  store i32 %148, i32* %arrayidx148, align 4
  %150 = load %struct.stop*, %struct.stop** %stops, align 4
  %151 = load i32, i32* %s, align 4
  %arrayidx149 = getelementptr inbounds %struct.stop, %struct.stop* %150, i32 %151
  %g150 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx149, i32 0, i32 5
  store double 0.000000e+00, double* %g150, align 8
  %152 = load %struct.stop*, %struct.stop** %stops, align 4
  %153 = load i32, i32* %s, align 4
  %arrayidx151 = getelementptr inbounds %struct.stop, %struct.stop* %152, i32 %153
  %g152 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx151, i32 0, i32 5
  %154 = load double, double* %g152, align 8
  %155 = load %struct.stop*, %struct.stop** %stops, align 4
  %156 = load i32, i32* %s, align 4
  %arrayidx153 = getelementptr inbounds %struct.stop, %struct.stop* %155, i32 %156
  %h154 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx153, i32 0, i32 6
  %157 = load double, double* %h154, align 8
  %add155 = fadd double %154, %157
  %158 = load %struct.stop*, %struct.stop** %stops, align 4
  %159 = load i32, i32* %s, align 4
  %arrayidx156 = getelementptr inbounds %struct.stop, %struct.stop* %158, i32 %159
  %f = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx156, i32 0, i32 4
  store double %add155, double* %f, align 8
  store i32 0, i32* %found, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end352, %for.end147
  %160 = load i32, i32* %o_len, align 4
  %tobool157 = icmp ne i32 %160, 0
  br i1 %tobool157, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %161 = load i32, i32* %found, align 4
  %tobool158 = icmp ne i32 %161, 0
  %lnot = xor i1 %tobool158, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %162 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %162, label %while.body, label %while.end353

while.body:                                       ; preds = %land.end
  store double 0x7FEFFFFFFFFFFFFF, double* %min, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond159

for.cond159:                                      ; preds = %for.inc174, %while.body
  %163 = load i32, i32* %i, align 4
  %164 = load i32, i32* %o_len, align 4
  %cmp160 = icmp slt i32 %163, %164
  br i1 %cmp160, label %for.body162, label %for.end176

for.body162:                                      ; preds = %for.cond159
  %165 = load %struct.stop*, %struct.stop** %stops, align 4
  %166 = load i32*, i32** %open, align 4
  %167 = load i32, i32* %i, align 4
  %arrayidx163 = getelementptr inbounds i32, i32* %166, i32 %167
  %168 = load i32, i32* %arrayidx163, align 4
  %arrayidx164 = getelementptr inbounds %struct.stop, %struct.stop* %165, i32 %168
  %f165 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx164, i32 0, i32 4
  %169 = load double, double* %f165, align 8
  %170 = load double, double* %min, align 8
  %cmp166 = fcmp olt double %169, %170
  br i1 %cmp166, label %if.then168, label %if.end173

if.then168:                                       ; preds = %for.body162
  %171 = load i32*, i32** %open, align 4
  %172 = load i32, i32* %i, align 4
  %arrayidx169 = getelementptr inbounds i32, i32* %171, i32 %172
  %173 = load i32, i32* %arrayidx169, align 4
  store i32 %173, i32* %current, align 4
  %174 = load %struct.stop*, %struct.stop** %stops, align 4
  %175 = load i32*, i32** %open, align 4
  %176 = load i32, i32* %i, align 4
  %arrayidx170 = getelementptr inbounds i32, i32* %175, i32 %176
  %177 = load i32, i32* %arrayidx170, align 4
  %arrayidx171 = getelementptr inbounds %struct.stop, %struct.stop* %174, i32 %177
  %f172 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx171, i32 0, i32 4
  %178 = load double, double* %f172, align 8
  store double %178, double* %min, align 8
  br label %if.end173

if.end173:                                        ; preds = %if.then168, %for.body162
  br label %for.inc174

for.inc174:                                       ; preds = %if.end173
  %179 = load i32, i32* %i, align 4
  %inc175 = add nsw i32 %179, 1
  store i32 %inc175, i32* %i, align 4
  br label %for.cond159

for.end176:                                       ; preds = %for.cond159
  %180 = load i32, i32* %current, align 4
  %181 = load i32, i32* %e, align 4
  %cmp177 = icmp eq i32 %180, %181
  br i1 %cmp177, label %if.then179, label %if.end198

if.then179:                                       ; preds = %for.end176
  store i32 1, i32* %found, align 4
  %182 = load i32, i32* %p_len, align 4
  %inc180 = add nsw i32 %182, 1
  store i32 %inc180, i32* %p_len, align 4
  %183 = load i32*, i32** %path, align 4
  %184 = bitcast i32* %183 to i8*
  %185 = load i32, i32* %p_len, align 4
  %mul181 = mul i32 %185, 4
  %call182 = call i8* @realloc(i8* %184, i32 %mul181)
  %186 = bitcast i8* %call182 to i32*
  store i32* %186, i32** %path, align 4
  %187 = load i32, i32* %current, align 4
  %188 = load i32*, i32** %path, align 4
  %189 = load i32, i32* %p_len, align 4
  %sub183 = sub nsw i32 %189, 1
  %arrayidx184 = getelementptr inbounds i32, i32* %188, i32 %sub183
  store i32 %187, i32* %arrayidx184, align 4
  br label %while.cond185

while.cond185:                                    ; preds = %while.body190, %if.then179
  %190 = load %struct.stop*, %struct.stop** %stops, align 4
  %191 = load i32, i32* %current, align 4
  %arrayidx186 = getelementptr inbounds %struct.stop, %struct.stop* %190, i32 %191
  %from187 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx186, i32 0, i32 7
  %192 = load i32, i32* %from187, align 8
  %cmp188 = icmp sge i32 %192, 0
  br i1 %cmp188, label %while.body190, label %while.end

while.body190:                                    ; preds = %while.cond185
  %193 = load %struct.stop*, %struct.stop** %stops, align 4
  %194 = load i32, i32* %current, align 4
  %arrayidx191 = getelementptr inbounds %struct.stop, %struct.stop* %193, i32 %194
  %from192 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx191, i32 0, i32 7
  %195 = load i32, i32* %from192, align 8
  store i32 %195, i32* %current, align 4
  %196 = load i32, i32* %p_len, align 4
  %inc193 = add nsw i32 %196, 1
  store i32 %inc193, i32* %p_len, align 4
  %197 = load i32*, i32** %path, align 4
  %198 = bitcast i32* %197 to i8*
  %199 = load i32, i32* %p_len, align 4
  %mul194 = mul i32 %199, 4
  %call195 = call i8* @realloc(i8* %198, i32 %mul194)
  %200 = bitcast i8* %call195 to i32*
  store i32* %200, i32** %path, align 4
  %201 = load i32, i32* %current, align 4
  %202 = load i32*, i32** %path, align 4
  %203 = load i32, i32* %p_len, align 4
  %sub196 = sub nsw i32 %203, 1
  %arrayidx197 = getelementptr inbounds i32, i32* %202, i32 %sub196
  store i32 %201, i32* %arrayidx197, align 4
  br label %while.cond185

while.end:                                        ; preds = %while.cond185
  br label %if.end198

if.end198:                                        ; preds = %while.end, %for.end176
  store i32 0, i32* %i, align 4
  br label %for.cond199

for.cond199:                                      ; preds = %for.inc226, %if.end198
  %204 = load i32, i32* %i, align 4
  %205 = load i32, i32* %o_len, align 4
  %cmp200 = icmp slt i32 %204, %205
  br i1 %cmp200, label %for.body202, label %for.end228

for.body202:                                      ; preds = %for.cond199
  %206 = load i32*, i32** %open, align 4
  %207 = load i32, i32* %i, align 4
  %arrayidx203 = getelementptr inbounds i32, i32* %206, i32 %207
  %208 = load i32, i32* %arrayidx203, align 4
  %209 = load i32, i32* %current, align 4
  %cmp204 = icmp eq i32 %208, %209
  br i1 %cmp204, label %if.then206, label %if.end225

if.then206:                                       ; preds = %for.body202
  %210 = load i32, i32* %i, align 4
  %211 = load i32, i32* %o_len, align 4
  %sub207 = sub nsw i32 %211, 1
  %cmp208 = icmp ne i32 %210, %sub207
  br i1 %cmp208, label %if.then210, label %if.end222

if.then210:                                       ; preds = %if.then206
  %212 = load i32, i32* %i, align 4
  store i32 %212, i32* %j, align 4
  br label %for.cond211

for.cond211:                                      ; preds = %for.inc219, %if.then210
  %213 = load i32, i32* %j, align 4
  %214 = load i32, i32* %o_len, align 4
  %sub212 = sub nsw i32 %214, 1
  %cmp213 = icmp slt i32 %213, %sub212
  br i1 %cmp213, label %for.body215, label %for.end221

for.body215:                                      ; preds = %for.cond211
  %215 = load i32*, i32** %open, align 4
  %216 = load i32, i32* %j, align 4
  %add216 = add nsw i32 %216, 1
  %arrayidx217 = getelementptr inbounds i32, i32* %215, i32 %add216
  %217 = load i32, i32* %arrayidx217, align 4
  %218 = load i32*, i32** %open, align 4
  %219 = load i32, i32* %j, align 4
  %arrayidx218 = getelementptr inbounds i32, i32* %218, i32 %219
  store i32 %217, i32* %arrayidx218, align 4
  br label %for.inc219

for.inc219:                                       ; preds = %for.body215
  %220 = load i32, i32* %j, align 4
  %inc220 = add nsw i32 %220, 1
  store i32 %inc220, i32* %j, align 4
  br label %for.cond211

for.end221:                                       ; preds = %for.cond211
  br label %if.end222

if.end222:                                        ; preds = %for.end221, %if.then206
  %221 = load i32, i32* %o_len, align 4
  %dec = add nsw i32 %221, -1
  store i32 %dec, i32* %o_len, align 4
  %222 = load i32*, i32** %open, align 4
  %223 = bitcast i32* %222 to i8*
  %224 = load i32, i32* %o_len, align 4
  %mul223 = mul i32 %224, 4
  %call224 = call i8* @realloc(i8* %223, i32 %mul223)
  %225 = bitcast i8* %call224 to i32*
  store i32* %225, i32** %open, align 4
  br label %for.end228

if.end225:                                        ; preds = %for.body202
  br label %for.inc226

for.inc226:                                       ; preds = %if.end225
  %226 = load i32, i32* %i, align 4
  %inc227 = add nsw i32 %226, 1
  store i32 %inc227, i32* %i, align 4
  br label %for.cond199

for.end228:                                       ; preds = %if.end222, %for.cond199
  %227 = load i32, i32* %c_len, align 4
  %inc229 = add nsw i32 %227, 1
  store i32 %inc229, i32* %c_len, align 4
  %228 = load i32*, i32** %closed, align 4
  %229 = bitcast i32* %228 to i8*
  %230 = load i32, i32* %c_len, align 4
  %mul230 = mul i32 %230, 4
  %call231 = call i8* @realloc(i8* %229, i32 %mul230)
  %231 = bitcast i8* %call231 to i32*
  store i32* %231, i32** %closed, align 4
  %232 = load i32, i32* %current, align 4
  %233 = load i32*, i32** %closed, align 4
  %234 = load i32, i32* %c_len, align 4
  %sub232 = sub nsw i32 %234, 1
  %arrayidx233 = getelementptr inbounds i32, i32* %233, i32 %sub232
  store i32 %232, i32* %arrayidx233, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond234

for.cond234:                                      ; preds = %for.inc350, %for.end228
  %235 = load i32, i32* %i, align 4
  %236 = load %struct.stop*, %struct.stop** %stops, align 4
  %237 = load i32, i32* %current, align 4
  %arrayidx235 = getelementptr inbounds %struct.stop, %struct.stop* %236, i32 %237
  %n_len236 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx235, i32 0, i32 3
  %238 = load i32, i32* %n_len236, align 4
  %cmp237 = icmp slt i32 %235, %238
  br i1 %cmp237, label %for.body239, label %for.end352

for.body239:                                      ; preds = %for.cond234
  store i32 0, i32* %b, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond240

for.cond240:                                      ; preds = %for.inc254, %for.body239
  %239 = load i32, i32* %j, align 4
  %240 = load i32, i32* %c_len, align 4
  %cmp241 = icmp slt i32 %239, %240
  br i1 %cmp241, label %for.body243, label %for.end256

for.body243:                                      ; preds = %for.cond240
  %241 = load %struct.route*, %struct.route** %routes, align 4
  %242 = load %struct.stop*, %struct.stop** %stops, align 4
  %243 = load i32, i32* %current, align 4
  %arrayidx244 = getelementptr inbounds %struct.stop, %struct.stop* %242, i32 %243
  %n245 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx244, i32 0, i32 2
  %244 = load i32*, i32** %n245, align 8
  %245 = load i32, i32* %i, align 4
  %arrayidx246 = getelementptr inbounds i32, i32* %244, i32 %245
  %246 = load i32, i32* %arrayidx246, align 4
  %arrayidx247 = getelementptr inbounds %struct.route, %struct.route* %241, i32 %246
  %y248 = getelementptr inbounds %struct.route, %struct.route* %arrayidx247, i32 0, i32 1
  %247 = load i32, i32* %y248, align 4
  %248 = load i32*, i32** %closed, align 4
  %249 = load i32, i32* %j, align 4
  %arrayidx249 = getelementptr inbounds i32, i32* %248, i32 %249
  %250 = load i32, i32* %arrayidx249, align 4
  %cmp250 = icmp eq i32 %247, %250
  br i1 %cmp250, label %if.then252, label %if.end253

if.then252:                                       ; preds = %for.body243
  store i32 1, i32* %b, align 4
  br label %if.end253

if.end253:                                        ; preds = %if.then252, %for.body243
  br label %for.inc254

for.inc254:                                       ; preds = %if.end253
  %251 = load i32, i32* %j, align 4
  %inc255 = add nsw i32 %251, 1
  store i32 %inc255, i32* %j, align 4
  br label %for.cond240

for.end256:                                       ; preds = %for.cond240
  %252 = load i32, i32* %b, align 4
  %tobool257 = icmp ne i32 %252, 0
  br i1 %tobool257, label %if.then258, label %if.end259

if.then258:                                       ; preds = %for.end256
  br label %for.inc350

if.end259:                                        ; preds = %for.end256
  %253 = load %struct.stop*, %struct.stop** %stops, align 4
  %254 = load i32, i32* %current, align 4
  %arrayidx260 = getelementptr inbounds %struct.stop, %struct.stop* %253, i32 %254
  %g261 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx260, i32 0, i32 5
  %255 = load double, double* %g261, align 8
  %256 = load %struct.route*, %struct.route** %routes, align 4
  %257 = load %struct.stop*, %struct.stop** %stops, align 4
  %258 = load i32, i32* %current, align 4
  %arrayidx262 = getelementptr inbounds %struct.stop, %struct.stop* %257, i32 %258
  %n263 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx262, i32 0, i32 2
  %259 = load i32*, i32** %n263, align 8
  %260 = load i32, i32* %i, align 4
  %arrayidx264 = getelementptr inbounds i32, i32* %259, i32 %260
  %261 = load i32, i32* %arrayidx264, align 4
  %arrayidx265 = getelementptr inbounds %struct.route, %struct.route* %256, i32 %261
  %d266 = getelementptr inbounds %struct.route, %struct.route* %arrayidx265, i32 0, i32 2
  %262 = load double, double* %d266, align 8
  %add267 = fadd double %255, %262
  store double %add267, double* %tempg, align 8
  store i32 1, i32* %b, align 4
  %263 = load i32, i32* %o_len, align 4
  %cmp268 = icmp sgt i32 %263, 0
  br i1 %cmp268, label %if.then270, label %if.end288

if.then270:                                       ; preds = %if.end259
  store i32 0, i32* %j, align 4
  br label %for.cond271

for.cond271:                                      ; preds = %for.inc285, %if.then270
  %264 = load i32, i32* %j, align 4
  %265 = load i32, i32* %o_len, align 4
  %cmp272 = icmp slt i32 %264, %265
  br i1 %cmp272, label %for.body274, label %for.end287

for.body274:                                      ; preds = %for.cond271
  %266 = load %struct.route*, %struct.route** %routes, align 4
  %267 = load %struct.stop*, %struct.stop** %stops, align 4
  %268 = load i32, i32* %current, align 4
  %arrayidx275 = getelementptr inbounds %struct.stop, %struct.stop* %267, i32 %268
  %n276 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx275, i32 0, i32 2
  %269 = load i32*, i32** %n276, align 8
  %270 = load i32, i32* %i, align 4
  %arrayidx277 = getelementptr inbounds i32, i32* %269, i32 %270
  %271 = load i32, i32* %arrayidx277, align 4
  %arrayidx278 = getelementptr inbounds %struct.route, %struct.route* %266, i32 %271
  %y279 = getelementptr inbounds %struct.route, %struct.route* %arrayidx278, i32 0, i32 1
  %272 = load i32, i32* %y279, align 4
  %273 = load i32*, i32** %open, align 4
  %274 = load i32, i32* %j, align 4
  %arrayidx280 = getelementptr inbounds i32, i32* %273, i32 %274
  %275 = load i32, i32* %arrayidx280, align 4
  %cmp281 = icmp eq i32 %272, %275
  br i1 %cmp281, label %if.then283, label %if.end284

if.then283:                                       ; preds = %for.body274
  store i32 0, i32* %b, align 4
  br label %if.end284

if.end284:                                        ; preds = %if.then283, %for.body274
  br label %for.inc285

for.inc285:                                       ; preds = %if.end284
  %276 = load i32, i32* %j, align 4
  %inc286 = add nsw i32 %276, 1
  store i32 %inc286, i32* %j, align 4
  br label %for.cond271

for.end287:                                       ; preds = %for.cond271
  br label %if.end288

if.end288:                                        ; preds = %for.end287, %if.end259
  %277 = load i32, i32* %b, align 4
  %tobool289 = icmp ne i32 %277, 0
  br i1 %tobool289, label %if.then299, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end288
  %278 = load double, double* %tempg, align 8
  %279 = load %struct.stop*, %struct.stop** %stops, align 4
  %280 = load %struct.route*, %struct.route** %routes, align 4
  %281 = load %struct.stop*, %struct.stop** %stops, align 4
  %282 = load i32, i32* %current, align 4
  %arrayidx290 = getelementptr inbounds %struct.stop, %struct.stop* %281, i32 %282
  %n291 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx290, i32 0, i32 2
  %283 = load i32*, i32** %n291, align 8
  %284 = load i32, i32* %i, align 4
  %arrayidx292 = getelementptr inbounds i32, i32* %283, i32 %284
  %285 = load i32, i32* %arrayidx292, align 4
  %arrayidx293 = getelementptr inbounds %struct.route, %struct.route* %280, i32 %285
  %y294 = getelementptr inbounds %struct.route, %struct.route* %arrayidx293, i32 0, i32 1
  %286 = load i32, i32* %y294, align 4
  %arrayidx295 = getelementptr inbounds %struct.stop, %struct.stop* %279, i32 %286
  %g296 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx295, i32 0, i32 5
  %287 = load double, double* %g296, align 8
  %cmp297 = fcmp olt double %278, %287
  br i1 %cmp297, label %if.then299, label %if.end349

if.then299:                                       ; preds = %lor.lhs.false, %if.end288
  %288 = load i32, i32* %current, align 4
  %289 = load %struct.stop*, %struct.stop** %stops, align 4
  %290 = load %struct.route*, %struct.route** %routes, align 4
  %291 = load %struct.stop*, %struct.stop** %stops, align 4
  %292 = load i32, i32* %current, align 4
  %arrayidx300 = getelementptr inbounds %struct.stop, %struct.stop* %291, i32 %292
  %n301 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx300, i32 0, i32 2
  %293 = load i32*, i32** %n301, align 8
  %294 = load i32, i32* %i, align 4
  %arrayidx302 = getelementptr inbounds i32, i32* %293, i32 %294
  %295 = load i32, i32* %arrayidx302, align 4
  %arrayidx303 = getelementptr inbounds %struct.route, %struct.route* %290, i32 %295
  %y304 = getelementptr inbounds %struct.route, %struct.route* %arrayidx303, i32 0, i32 1
  %296 = load i32, i32* %y304, align 4
  %arrayidx305 = getelementptr inbounds %struct.stop, %struct.stop* %289, i32 %296
  %from306 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx305, i32 0, i32 7
  store i32 %288, i32* %from306, align 8
  %297 = load double, double* %tempg, align 8
  %298 = load %struct.stop*, %struct.stop** %stops, align 4
  %299 = load %struct.route*, %struct.route** %routes, align 4
  %300 = load %struct.stop*, %struct.stop** %stops, align 4
  %301 = load i32, i32* %current, align 4
  %arrayidx307 = getelementptr inbounds %struct.stop, %struct.stop* %300, i32 %301
  %n308 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx307, i32 0, i32 2
  %302 = load i32*, i32** %n308, align 8
  %303 = load i32, i32* %i, align 4
  %arrayidx309 = getelementptr inbounds i32, i32* %302, i32 %303
  %304 = load i32, i32* %arrayidx309, align 4
  %arrayidx310 = getelementptr inbounds %struct.route, %struct.route* %299, i32 %304
  %y311 = getelementptr inbounds %struct.route, %struct.route* %arrayidx310, i32 0, i32 1
  %305 = load i32, i32* %y311, align 4
  %arrayidx312 = getelementptr inbounds %struct.stop, %struct.stop* %298, i32 %305
  %g313 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx312, i32 0, i32 5
  store double %297, double* %g313, align 8
  %306 = load %struct.stop*, %struct.stop** %stops, align 4
  %307 = load %struct.route*, %struct.route** %routes, align 4
  %308 = load %struct.stop*, %struct.stop** %stops, align 4
  %309 = load i32, i32* %current, align 4
  %arrayidx314 = getelementptr inbounds %struct.stop, %struct.stop* %308, i32 %309
  %n315 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx314, i32 0, i32 2
  %310 = load i32*, i32** %n315, align 8
  %311 = load i32, i32* %i, align 4
  %arrayidx316 = getelementptr inbounds i32, i32* %310, i32 %311
  %312 = load i32, i32* %arrayidx316, align 4
  %arrayidx317 = getelementptr inbounds %struct.route, %struct.route* %307, i32 %312
  %y318 = getelementptr inbounds %struct.route, %struct.route* %arrayidx317, i32 0, i32 1
  %313 = load i32, i32* %y318, align 4
  %arrayidx319 = getelementptr inbounds %struct.stop, %struct.stop* %306, i32 %313
  %g320 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx319, i32 0, i32 5
  %314 = load double, double* %g320, align 8
  %315 = load %struct.stop*, %struct.stop** %stops, align 4
  %316 = load %struct.route*, %struct.route** %routes, align 4
  %317 = load %struct.stop*, %struct.stop** %stops, align 4
  %318 = load i32, i32* %current, align 4
  %arrayidx321 = getelementptr inbounds %struct.stop, %struct.stop* %317, i32 %318
  %n322 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx321, i32 0, i32 2
  %319 = load i32*, i32** %n322, align 8
  %320 = load i32, i32* %i, align 4
  %arrayidx323 = getelementptr inbounds i32, i32* %319, i32 %320
  %321 = load i32, i32* %arrayidx323, align 4
  %arrayidx324 = getelementptr inbounds %struct.route, %struct.route* %316, i32 %321
  %y325 = getelementptr inbounds %struct.route, %struct.route* %arrayidx324, i32 0, i32 1
  %322 = load i32, i32* %y325, align 4
  %arrayidx326 = getelementptr inbounds %struct.stop, %struct.stop* %315, i32 %322
  %h327 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx326, i32 0, i32 6
  %323 = load double, double* %h327, align 8
  %add328 = fadd double %314, %323
  %324 = load %struct.stop*, %struct.stop** %stops, align 4
  %325 = load %struct.route*, %struct.route** %routes, align 4
  %326 = load %struct.stop*, %struct.stop** %stops, align 4
  %327 = load i32, i32* %current, align 4
  %arrayidx329 = getelementptr inbounds %struct.stop, %struct.stop* %326, i32 %327
  %n330 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx329, i32 0, i32 2
  %328 = load i32*, i32** %n330, align 8
  %329 = load i32, i32* %i, align 4
  %arrayidx331 = getelementptr inbounds i32, i32* %328, i32 %329
  %330 = load i32, i32* %arrayidx331, align 4
  %arrayidx332 = getelementptr inbounds %struct.route, %struct.route* %325, i32 %330
  %y333 = getelementptr inbounds %struct.route, %struct.route* %arrayidx332, i32 0, i32 1
  %331 = load i32, i32* %y333, align 4
  %arrayidx334 = getelementptr inbounds %struct.stop, %struct.stop* %324, i32 %331
  %f335 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx334, i32 0, i32 4
  store double %add328, double* %f335, align 8
  %332 = load i32, i32* %b, align 4
  %tobool336 = icmp ne i32 %332, 0
  br i1 %tobool336, label %if.then337, label %if.end348

if.then337:                                       ; preds = %if.then299
  %333 = load i32, i32* %o_len, align 4
  %inc338 = add nsw i32 %333, 1
  store i32 %inc338, i32* %o_len, align 4
  %334 = load i32*, i32** %open, align 4
  %335 = bitcast i32* %334 to i8*
  %336 = load i32, i32* %o_len, align 4
  %mul339 = mul i32 %336, 4
  %call340 = call i8* @realloc(i8* %335, i32 %mul339)
  %337 = bitcast i8* %call340 to i32*
  store i32* %337, i32** %open, align 4
  %338 = load %struct.route*, %struct.route** %routes, align 4
  %339 = load %struct.stop*, %struct.stop** %stops, align 4
  %340 = load i32, i32* %current, align 4
  %arrayidx341 = getelementptr inbounds %struct.stop, %struct.stop* %339, i32 %340
  %n342 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx341, i32 0, i32 2
  %341 = load i32*, i32** %n342, align 8
  %342 = load i32, i32* %i, align 4
  %arrayidx343 = getelementptr inbounds i32, i32* %341, i32 %342
  %343 = load i32, i32* %arrayidx343, align 4
  %arrayidx344 = getelementptr inbounds %struct.route, %struct.route* %338, i32 %343
  %y345 = getelementptr inbounds %struct.route, %struct.route* %arrayidx344, i32 0, i32 1
  %344 = load i32, i32* %y345, align 4
  %345 = load i32*, i32** %open, align 4
  %346 = load i32, i32* %o_len, align 4
  %sub346 = sub nsw i32 %346, 1
  %arrayidx347 = getelementptr inbounds i32, i32* %345, i32 %sub346
  store i32 %344, i32* %arrayidx347, align 4
  br label %if.end348

if.end348:                                        ; preds = %if.then337, %if.then299
  br label %if.end349

if.end349:                                        ; preds = %if.end348, %lor.lhs.false
  br label %for.inc350

for.inc350:                                       ; preds = %if.end349, %if.then258
  %347 = load i32, i32* %i, align 4
  %inc351 = add nsw i32 %347, 1
  store i32 %inc351, i32* %i, align 4
  br label %for.cond234

for.end352:                                       ; preds = %for.cond234
  br label %while.cond

while.end353:                                     ; preds = %land.end
  store i32 0, i32* %i, align 4
  br label %for.cond354

for.cond354:                                      ; preds = %for.inc393, %while.end353
  %348 = load i32, i32* %i, align 4
  %cmp355 = icmp slt i32 %348, 10
  br i1 %cmp355, label %for.body357, label %for.end395

for.body357:                                      ; preds = %for.cond354
  store i32 0, i32* %j, align 4
  br label %for.cond358

for.cond358:                                      ; preds = %for.inc389, %for.body357
  %349 = load i32, i32* %j, align 4
  %cmp359 = icmp slt i32 %349, 10
  br i1 %cmp359, label %for.body361, label %for.end391

for.body361:                                      ; preds = %for.cond358
  %350 = load i32, i32* %i, align 4
  %arrayidx362 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @map, i32 0, i32 %350
  %351 = load i32, i32* %j, align 4
  %arrayidx363 = getelementptr inbounds [10 x i8], [10 x i8]* %arrayidx362, i32 0, i32 %351
  %352 = load i8, i8* %arrayidx363, align 1
  %tobool364 = icmp ne i8 %352, 0
  br i1 %tobool364, label %if.then365, label %if.else

if.then365:                                       ; preds = %for.body361
  %call366 = call i32 @putchar(i32 219)
  br label %if.end388

if.else:                                          ; preds = %for.body361
  store i32 0, i32* %b, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond367

for.cond367:                                      ; preds = %for.inc379, %if.else
  %353 = load i32, i32* %k, align 4
  %354 = load i32, i32* %p_len, align 4
  %cmp368 = icmp slt i32 %353, %354
  br i1 %cmp368, label %for.body370, label %for.end381

for.body370:                                      ; preds = %for.cond367
  %355 = load i32, i32* %i, align 4
  %arrayidx371 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @ind, i32 0, i32 %355
  %356 = load i32, i32* %j, align 4
  %arrayidx372 = getelementptr inbounds [10 x i32], [10 x i32]* %arrayidx371, i32 0, i32 %356
  %357 = load i32, i32* %arrayidx372, align 4
  %358 = load i32*, i32** %path, align 4
  %359 = load i32, i32* %k, align 4
  %arrayidx373 = getelementptr inbounds i32, i32* %358, i32 %359
  %360 = load i32, i32* %arrayidx373, align 4
  %cmp374 = icmp eq i32 %357, %360
  br i1 %cmp374, label %if.then376, label %if.end378

if.then376:                                       ; preds = %for.body370
  %361 = load i32, i32* %b, align 4
  %inc377 = add nsw i32 %361, 1
  store i32 %inc377, i32* %b, align 4
  br label %if.end378

if.end378:                                        ; preds = %if.then376, %for.body370
  br label %for.inc379

for.inc379:                                       ; preds = %if.end378
  %362 = load i32, i32* %k, align 4
  %inc380 = add nsw i32 %362, 1
  store i32 %inc380, i32* %k, align 4
  br label %for.cond367

for.end381:                                       ; preds = %for.cond367
  %363 = load i32, i32* %b, align 4
  %tobool382 = icmp ne i32 %363, 0
  br i1 %tobool382, label %if.then383, label %if.else385

if.then383:                                       ; preds = %for.end381
  %call384 = call i32 @putchar(i32 120)
  br label %if.end387

if.else385:                                       ; preds = %for.end381
  %call386 = call i32 @putchar(i32 46)
  br label %if.end387

if.end387:                                        ; preds = %if.else385, %if.then383
  br label %if.end388

if.end388:                                        ; preds = %if.end387, %if.then365
  br label %for.inc389

for.inc389:                                       ; preds = %if.end388
  %364 = load i32, i32* %j, align 4
  %inc390 = add nsw i32 %364, 1
  store i32 %inc390, i32* %j, align 4
  br label %for.cond358

for.end391:                                       ; preds = %for.cond358
  %call392 = call i32 @putchar(i32 10)
  br label %for.inc393

for.inc393:                                       ; preds = %for.end391
  %365 = load i32, i32* %i, align 4
  %inc394 = add nsw i32 %365, 1
  store i32 %inc394, i32* %i, align 4
  br label %for.cond354

for.end395:                                       ; preds = %for.cond354
  %366 = load i32, i32* %found, align 4
  %tobool396 = icmp ne i32 %366, 0
  br i1 %tobool396, label %if.else399, label %if.then397

if.then397:                                       ; preds = %for.end395
  %call398 = call i32 @puts(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  br label %if.end416

if.else399:                                       ; preds = %for.end395
  %367 = load i32, i32* %p_len, align 4
  %call400 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %367)
  %368 = load i32, i32* %p_len, align 4
  %sub401 = sub nsw i32 %368, 1
  store i32 %sub401, i32* %i, align 4
  br label %for.cond402

for.cond402:                                      ; preds = %for.inc413, %if.else399
  %369 = load i32, i32* %i, align 4
  %cmp403 = icmp sge i32 %369, 0
  br i1 %cmp403, label %for.body405, label %for.end415

for.body405:                                      ; preds = %for.cond402
  %370 = load %struct.stop*, %struct.stop** %stops, align 4
  %371 = load i32*, i32** %path, align 4
  %372 = load i32, i32* %i, align 4
  %arrayidx406 = getelementptr inbounds i32, i32* %371, i32 %372
  %373 = load i32, i32* %arrayidx406, align 4
  %arrayidx407 = getelementptr inbounds %struct.stop, %struct.stop* %370, i32 %373
  %col408 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx407, i32 0, i32 0
  %374 = load double, double* %col408, align 8
  %375 = load %struct.stop*, %struct.stop** %stops, align 4
  %376 = load i32*, i32** %path, align 4
  %377 = load i32, i32* %i, align 4
  %arrayidx409 = getelementptr inbounds i32, i32* %376, i32 %377
  %378 = load i32, i32* %arrayidx409, align 4
  %arrayidx410 = getelementptr inbounds %struct.stop, %struct.stop* %375, i32 %378
  %row411 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx410, i32 0, i32 1
  %379 = load double, double* %row411, align 8
  %call412 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), double %374, double %379)
  br label %for.inc413

for.inc413:                                       ; preds = %for.body405
  %380 = load i32, i32* %i, align 4
  %dec414 = add nsw i32 %380, -1
  store i32 %dec414, i32* %i, align 4
  br label %for.cond402

for.end415:                                       ; preds = %for.cond402
  br label %if.end416

if.end416:                                        ; preds = %for.end415, %if.then397
  store i32 0, i32* %i, align 4
  br label %for.cond417

for.cond417:                                      ; preds = %for.inc423, %if.end416
  %381 = load i32, i32* %i, align 4
  %382 = load i32, i32* %s_len, align 4
  %cmp418 = icmp slt i32 %381, %382
  br i1 %cmp418, label %for.body420, label %for.end425

for.body420:                                      ; preds = %for.cond417
  %383 = load %struct.stop*, %struct.stop** %stops, align 4
  %384 = load i32, i32* %i, align 4
  %arrayidx421 = getelementptr inbounds %struct.stop, %struct.stop* %383, i32 %384
  %n422 = getelementptr inbounds %struct.stop, %struct.stop* %arrayidx421, i32 0, i32 2
  %385 = load i32*, i32** %n422, align 8
  %386 = bitcast i32* %385 to i8*
  call void @free(i8* %386)
  br label %for.inc423

for.inc423:                                       ; preds = %for.body420
  %387 = load i32, i32* %i, align 4
  %inc424 = add nsw i32 %387, 1
  store i32 %inc424, i32* %i, align 4
  br label %for.cond417

for.end425:                                       ; preds = %for.cond417
  %388 = load %struct.stop*, %struct.stop** %stops, align 4
  %389 = bitcast %struct.stop* %388 to i8*
  call void @free(i8* %389)
  %390 = load %struct.route*, %struct.route** %routes, align 4
  %391 = bitcast %struct.route* %390 to i8*
  call void @free(i8* %391)
  %392 = load i32*, i32** %path, align 4
  %393 = bitcast i32* %392 to i8*
  call void @free(i8* %393)
  %394 = load i32*, i32** %open, align 4
  %395 = bitcast i32* %394 to i8*
  call void @free(i8* %395)
  %396 = load i32*, i32** %closed, align 4
  %397 = bitcast i32* %396 to i8*
  call void @free(i8* %397)
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double %0, double %1) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

declare i32 @putchar(i32 %0) #1

declare i32 @puts(i8* %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %6, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %s_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %s_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %10, 56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 56:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %s_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %s_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %s_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %33, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %52, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp slt i32 %53, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp43 = icmp slt i32 %54, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %arrayidx47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp48 = icmp sge i32 %57, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub51 = sub nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add53 = add nsw i32 %60, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp54 = icmp sle i32 %59, %add53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = sle %0, %2
infer %3

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub57 = sub nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add59 = add nsw i32 %63, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp60 = icmp sle i32 %62, %add59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = sle %0, %2
infer %3

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp eq i32 %64, %65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp65 = icmp eq i32 %66, %67
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %arrayidx70, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp71 = icmp sge i32 %70, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %r_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc74 = add nsw i32 %71, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %r_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul75 = mul i32 %74, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %r_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub78 = sub nsw i32 %76, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %arrayidx80, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %arrayidx83, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %89 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %90 = load i32, i32* %y86, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %94 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %95 = load i32, i32* %x90, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %101 = load i32, i32* %y95, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %105 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %106 = load i32, i32* %x99, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %111 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %114 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %115 = load i32, i32* %x106, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %116 = load i32, i32* %n_len108, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc109 = add nsw i32 %116, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %119 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %120 = load i32, i32* %x111, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %125 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %126 = load i32, i32* %x115, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %127 = load i32, i32* %n_len117, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul118 = mul i32 %127, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %131 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %132 = load i32, i32* %x121, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %133 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %136 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %137 = load i32, i32* %x125, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %141 = load i32, i32* %t77, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %142 = load i32, i32* %x129, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %143 = load i32, i32* %n_len131, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub132 = sub nsw i32 %143, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %144 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc136 = add nsw i32 %144, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %145 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc139 = add nsw i32 %145, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %146 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc143 = add nsw i32 %146, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %147 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc146 = add nsw i32 %147, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %148 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %151 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %153 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %156 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %159 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %160 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool157 = icmp ne i32 %160, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %161 = load i32, i32* %found, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool158 = icmp ne i32 %161, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool158, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %162 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %163 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %164 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp160 = icmp slt i32 %163, %164
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %167 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %168 = load i32, i32* %arrayidx163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp166 = fcmp olt double %169, %170
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %172 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %173 = load i32, i32* %arrayidx169, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %176 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %177 = load i32, i32* %arrayidx170, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %179 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc175 = add nsw i32 %179, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %180 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %181 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp177 = icmp eq i32 %180, %181
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %182 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc180 = add nsw i32 %182, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %185 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul181 = mul i32 %185, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %187 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %189 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub183 = sub nsw i32 %189, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %191 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %192 = load i32, i32* %from187, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp188 = icmp sge i32 %192, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %194 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %195 = load i32, i32* %from192, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %196 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc193 = add nsw i32 %196, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %199 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul194 = mul i32 %199, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %201 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %203 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub196 = sub nsw i32 %203, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %204 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %205 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp200 = icmp slt i32 %204, %205
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %207 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %208 = load i32, i32* %arrayidx203, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %209 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp204 = icmp eq i32 %208, %209
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %210 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %211 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub207 = sub nsw i32 %211, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp208 = icmp ne i32 %210, %sub207
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = ne %0, %2
infer %3

; *****
; For LLVM instruction:
;  %212 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %213 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %214 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub212 = sub nsw i32 %214, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp213 = icmp slt i32 %213, %sub212
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %216 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add216 = add nsw i32 %216, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %217 = load i32, i32* %arrayidx217, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %219 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %220 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc220 = add nsw i32 %220, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %221 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %221, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %224 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul223 = mul i32 %224, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %226 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc227 = add nsw i32 %226, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %227 = load i32, i32* %c_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc229 = add nsw i32 %227, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %230 = load i32, i32* %c_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul230 = mul i32 %230, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %232 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %234 = load i32, i32* %c_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub232 = sub nsw i32 %234, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %235 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %237 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %238 = load i32, i32* %n_len236, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp237 = icmp slt i32 %235, %238
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %239 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %240 = load i32, i32* %c_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp241 = icmp slt i32 %239, %240
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %243 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %245 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %246 = load i32, i32* %arrayidx246, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %247 = load i32, i32* %y248, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %249 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %250 = load i32, i32* %arrayidx249, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp250 = icmp eq i32 %247, %250
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %251 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc255 = add nsw i32 %251, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %252 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool257 = icmp ne i32 %252, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %254 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %258 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %260 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %261 = load i32, i32* %arrayidx264, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %263 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp268 = icmp sgt i32 %263, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %264 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %265 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp272 = icmp slt i32 %264, %265
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %268 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %270 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %271 = load i32, i32* %arrayidx277, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %272 = load i32, i32* %y279, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %274 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %275 = load i32, i32* %arrayidx280, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp281 = icmp eq i32 %272, %275
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %276 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc286 = add nsw i32 %276, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %277 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool289 = icmp ne i32 %277, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %282 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %284 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %285 = load i32, i32* %arrayidx292, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %286 = load i32, i32* %y294, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp297 = fcmp olt double %278, %287
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %288 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %292 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %294 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %295 = load i32, i32* %arrayidx302, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %296 = load i32, i32* %y304, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %301 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %303 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %304 = load i32, i32* %arrayidx309, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %305 = load i32, i32* %y311, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %309 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %311 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %312 = load i32, i32* %arrayidx316, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %313 = load i32, i32* %y318, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %318 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %320 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %321 = load i32, i32* %arrayidx323, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %322 = load i32, i32* %y325, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %327 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %329 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %330 = load i32, i32* %arrayidx331, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %331 = load i32, i32* %y333, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %332 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool336 = icmp ne i32 %332, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %333 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc338 = add nsw i32 %333, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %336 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul339 = mul i32 %336, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %340 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %342 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %343 = load i32, i32* %arrayidx343, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %344 = load i32, i32* %y345, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %346 = load i32, i32* %o_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub346 = sub nsw i32 %346, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %347 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc351 = add nsw i32 %347, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %348 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp355 = icmp slt i32 %348, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %349 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp359 = icmp slt i32 %349, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %350 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %351 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %352 = load i8, i8* %arrayidx363, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool364 = icmp ne i8 %352, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %353 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %354 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp368 = icmp slt i32 %353, %354
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %355 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %356 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %357 = load i32, i32* %arrayidx372, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %359 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %360 = load i32, i32* %arrayidx373, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp374 = icmp eq i32 %357, %360
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %361 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc377 = add nsw i32 %361, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %362 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc380 = add nsw i32 %362, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %363 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool382 = icmp ne i32 %363, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %364 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc390 = add nsw i32 %364, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %365 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc394 = add nsw i32 %365, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %366 = load i32, i32* %found, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool396 = icmp ne i32 %366, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %367 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %368 = load i32, i32* %p_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub401 = sub nsw i32 %368, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %369 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp403 = icmp sge i32 %369, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %372 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %373 = load i32, i32* %arrayidx406, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %377 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %378 = load i32, i32* %arrayidx409, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %380 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec414 = add nsw i32 %380, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %381 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %382 = load i32, i32* %s_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp418 = icmp slt i32 %381, %382
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %384 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %387 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc424 = add nsw i32 %387, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 56:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073747968
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = sle %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = ne %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
