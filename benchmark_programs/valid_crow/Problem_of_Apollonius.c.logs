
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for cross()

; ModuleID = './Problem_of_Apollonius.c.bc'
source_filename = "./Problem_of_Apollonius.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.circ = type { { double, double }, double }

@.str = private unnamed_addr constant [31 x i8] c"Given conditions confused me.\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"found: \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"circle (%6.3f,%6.3f), r = %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"line (%6.3f,%6.3f) (%6.3f,%6.3f) (%6.3f,%6.3f)\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"set 1\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"set 2\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"set 3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @cross({ double, double }* byval({ double, double }) align 8 %a, { double, double }* byval({ double, double }) align 8 %b) #0 {
entry:
  %indirect-arg-temp127 = alloca { double, double }, align 8
  %indirect-arg-temp722 = alloca { double, double }, align 8
  %indirect-arg-temp1317 = alloca { double, double }, align 8
  %indirect-arg-temp16 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp1 = alloca { double, double }, align 8
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %indirect-arg-temp13 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp16 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp, align 8
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp, align 8
  %indirect-arg-temp1.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 0
  %indirect-arg-temp1.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp1.realp, align 8
  store double %b.imag, double* %indirect-arg-temp1.imagp, align 8
  %2 = bitcast { double, double }* %indirect-arg-temp127 to i8*
  %3 = bitcast { double, double }* %indirect-arg-temp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 16, i1 false)
  %__x.realp.i28 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 0
  %__x.real.i29 = load double, double* %__x.realp.i28, align 8
  %__x.imagp.i30 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 1
  %__x.imag.i31 = load double, double* %__x.imagp.i30, align 8
  %mul = fmul double %__x.real.i, %__x.imag.i31
  %a.realp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real4 = load double, double* %a.realp3, align 8
  %a.imagp5 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag6 = load double, double* %a.imagp5, align 8
  %indirect-arg-temp7.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %indirect-arg-temp7.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  store double %a.real4, double* %indirect-arg-temp7.realp, align 8
  store double %a.imag6, double* %indirect-arg-temp7.imagp, align 8
  %4 = bitcast { double, double }* %indirect-arg-temp722 to i8*
  %5 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 16, i1 false)
  %__x.realp.i23 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 0
  %__x.real.i24 = load double, double* %__x.realp.i23, align 8
  %__x.imagp.i25 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 1
  %__x.imag.i26 = load double, double* %__x.imagp.i25, align 8
  %b.realp9 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real10 = load double, double* %b.realp9, align 8
  %b.imagp11 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag12 = load double, double* %b.imagp11, align 8
  %indirect-arg-temp13.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 0
  %indirect-arg-temp13.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 1
  store double %b.real10, double* %indirect-arg-temp13.realp, align 8
  store double %b.imag12, double* %indirect-arg-temp13.imagp, align 8
  %6 = bitcast { double, double }* %indirect-arg-temp1317 to i8*
  %7 = bitcast { double, double }* %indirect-arg-temp13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 16, i1 false)
  %__x.realp.i18 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 0
  %__x.real.i19 = load double, double* %__x.realp.i18, align 8
  %__x.imagp.i20 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 1
  %__x.imag.i21 = load double, double* %__x.imagp.i20, align 8
  %mul15 = fmul double %__x.imag.i26, %__x.real.i19
  %sub = fsub double %mul, %mul15
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden double @abs2({ double, double }* byval({ double, double }) align 8 %a) #0 {
entry:
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %a.realp1 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real2 = load double, double* %a.realp1, align 8
  %a.imagp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag4 = load double, double* %a.imagp3, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real2, double* %indirect-arg-temp.realp, align 8
  store double %a.imag4, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8, !noalias !2
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8, !noalias !2
  %neg.i = fneg double %__x.imag.i
  %agg.result.realp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %__x.real.i, double* %agg.result.realp.i, align 8, !alias.scope !2
  store double %neg.i, double* %agg.result.imagp.i, align 8, !alias.scope !2
  %agg.result.realp1.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.real.i = load double, double* %agg.result.realp1.i, align 8, !alias.scope !2
  %agg.result.imagp2.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %agg.result.imag.i = load double, double* %agg.result.imagp2.i, align 8, !alias.scope !2
  %agg.result.realp3.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp4.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %agg.result.real.i, double* %agg.result.realp3.i, align 8, !alias.scope !2
  store double %agg.result.imag.i, double* %agg.result.imagp4.i, align 8, !alias.scope !2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %mul_ac = fmul double %a.real, %tmp.real
  %mul_bd = fmul double %a.imag, %tmp.imag
  %mul_ad = fmul double %a.real, %tmp.imag
  %mul_bc = fmul double %a.imag, %tmp.real
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %entry
  %isnan_cmp5 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp5, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp6, double %a.real, double %a.imag, double %tmp.real, double %tmp.imag) #6
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %entry
  %real_mul_phi = phi double [ %mul_r, %entry ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp6.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %entry ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp6.imag, %complex_mul_libcall ]
  ret double %real_mul_phi
}

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius_in(%struct.circ* %aa, i32* %ss, i32 %flip, i32 %divert) #0 {
entry:
  %indirect-arg-temp223260 = alloca { double, double }, align 8
  %indirect-arg-temp198255 = alloca { double, double }, align 8
  %indirect-arg-temp204250 = alloca { double, double }, align 8
  %indirect-arg-temp208245 = alloca { double, double }, align 8
  %indirect-arg-temp211240 = alloca { double, double }, align 8
  %indirect-arg-temp214235 = alloca { double, double }, align 8
  %indirect-arg-temp217230 = alloca { double, double }, align 8
  %indirect-arg-temp220229 = alloca { double, double }, align 8
  %__x.addr.i228 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %aa.addr = alloca %struct.circ*, align 4
  %ss.addr = alloca i32*, align 4
  %flip.addr = alloca i32, align 4
  %divert.addr = alloca i32, align 4
  %n = alloca [3 x { double, double }], align 16
  %x = alloca [3 x { double, double }], align 16
  %t = alloca [3 x { double, double }], align 16
  %a = alloca { double, double }, align 8
  %b = alloca { double, double }, align 8
  %center = alloca { double, double }, align 8
  %s = alloca [3 x i32], align 4
  %iter = alloca i32, align 4
  %res = alloca i32, align 4
  %diff = alloca double, align 8
  %diff_old = alloca double, align 8
  %axb = alloca double, align 8
  %d = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp15 = alloca { double, double }, align 8
  %indirect-arg-temp20 = alloca { double, double }, align 8
  %indirect-arg-temp26 = alloca { double, double }, align 8
  %indirect-arg-temp38 = alloca { double, double }, align 8
  %indirect-arg-temp48 = alloca { double, double }, align 8
  %indirect-arg-temp58 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %i80 = alloca i32, align 4
  %tmp105 = alloca { double, double }, align 8
  %tmp119 = alloca { double, double }, align 8
  %i127 = alloca i32, align 4
  %indirect-arg-temp136 = alloca { double, double }, align 8
  %tmp153 = alloca { double, double }, align 8
  %i163 = alloca i32, align 4
  %indirect-arg-temp172 = alloca { double, double }, align 8
  %indirect-arg-temp198 = alloca { double, double }, align 8
  %indirect-arg-temp204 = alloca { double, double }, align 8
  %indirect-arg-temp208 = alloca { double, double }, align 8
  %indirect-arg-temp211 = alloca { double, double }, align 8
  %indirect-arg-temp214 = alloca { double, double }, align 8
  %indirect-arg-temp217 = alloca { double, double }, align 8
  %indirect-arg-temp220 = alloca { double, double }, align 8
  %indirect-arg-temp223 = alloca { double, double }, align 8
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32* %ss, i32** %ss.addr, align 4
  store i32 %flip, i32* %flip.addr, align 4
  store i32 %divert, i32* %divert.addr, align 4
  store i32 0, i32* %iter, align 4
  store i32 0, i32* %res, align 4
  store double 1.000000e+00, double* %diff, align 8
  store double -1.000000e+00, double* %diff_old, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %ss.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %3, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 -1
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %5
  store i32 %cond, i32* %arrayidx1, align 4
  %6 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.circ, %struct.circ* %6, i32 %7
  %c = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx2, i32 0, i32 0
  %c.realp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 0
  %c.real = load double, double* %c.realp, align 8
  %c.imagp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 1
  %c.imag = load double, double* %c.imagp, align 8
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %8
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %c.real, double* %arrayidx3.realp, align 16
  store double %c.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end190, %for.end
  %10 = load double, double* %diff, align 8
  %cmp4 = fcmp ogt double %10, 0x3BC79CA10C924223
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arrayidx5 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx5.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 0
  %arrayidx5.real = load double, double* %arrayidx5.realp, align 16
  %arrayidx5.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 1
  %arrayidx5.imag = load double, double* %arrayidx5.imagp, align 8
  %arrayidx6 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx6.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 0
  %arrayidx6.real = load double, double* %arrayidx6.realp, align 16
  %arrayidx6.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 1
  %arrayidx6.imag = load double, double* %arrayidx6.imagp, align 8
  %sub.r = fsub double %arrayidx5.real, %arrayidx6.real
  %sub.i = fsub double %arrayidx5.imag, %arrayidx6.imag
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  store double %sub.r, double* %a.realp, align 8
  store double %sub.i, double* %a.imagp, align 8
  %arrayidx7 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx7.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 0
  %arrayidx7.real = load double, double* %arrayidx7.realp, align 16
  %arrayidx7.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 1
  %arrayidx7.imag = load double, double* %arrayidx7.imagp, align 8
  %arrayidx8 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %sub.r9 = fsub double %arrayidx7.real, %arrayidx8.real
  %sub.i10 = fsub double %arrayidx7.imag, %arrayidx8.imag
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  store double %sub.r9, double* %b.realp, align 8
  store double %sub.i10, double* %b.imagp, align 8
  store double 0.000000e+00, double* %diff, align 8
  %a.realp11 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp11, align 8
  %a.imagp12 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp12, align 8
  %b.realp13 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp13, align 8
  %b.imagp14 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp14, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %indirect-arg-temp15.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 0
  %indirect-arg-temp15.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp15.realp, align 8
  store double %b.imag, double* %indirect-arg-temp15.imagp, align 8
  %call = call double @cross({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp15)
  %fneg = fneg double %call
  store double %fneg, double* %axb, align 8
  %a.realp16 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real17 = load double, double* %a.realp16, align 8
  %a.imagp18 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag19 = load double, double* %a.imagp18, align 8
  %indirect-arg-temp20.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 0
  %indirect-arg-temp20.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 1
  store double %a.real17, double* %indirect-arg-temp20.realp, align 8
  store double %a.imag19, double* %indirect-arg-temp20.imagp, align 8
  %call21 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp20)
  %b.realp22 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real23 = load double, double* %b.realp22, align 8
  %b.imagp24 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag25 = load double, double* %b.imagp24, align 8
  %indirect-arg-temp26.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 0
  %indirect-arg-temp26.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 1
  store double %b.real23, double* %indirect-arg-temp26.realp, align 8
  store double %b.imag25, double* %indirect-arg-temp26.imagp, align 8
  %call27 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp26)
  %mul = fmul double %call21, %call27
  %a.realp28 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real29 = load double, double* %a.realp28, align 8
  %a.imagp30 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag31 = load double, double* %a.imagp30, align 8
  %b.realp32 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real33 = load double, double* %b.realp32, align 8
  %b.imagp34 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag35 = load double, double* %b.imagp34, align 8
  %sub.r36 = fsub double %a.real29, %b.real33
  %sub.i37 = fsub double %a.imag31, %b.imag35
  %indirect-arg-temp38.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 0
  %indirect-arg-temp38.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 1
  store double %sub.r36, double* %indirect-arg-temp38.realp, align 8
  store double %sub.i37, double* %indirect-arg-temp38.imagp, align 8
  %call39 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp38)
  %mul40 = fmul double %mul, %call39
  store double %mul40, double* %__x.addr.i, align 8
  %11 = load double, double* %__x.addr.i, align 8
  %12 = call double @llvm.sqrt.f64(double %11) #6
  store double %12, double* %d, align 8
  %13 = load double, double* %d, align 8
  %14 = load double, double* %axb, align 8
  %mul42 = fmul double 2.000000e+00, %14
  %div = fdiv double %13, %mul42
  store double %div, double* %__x.addr.i228, align 8
  %15 = load double, double* %__x.addr.i228, align 8
  %16 = call double @llvm.fabs.f64(double %15) #6
  store double %16, double* %r, align 8
  %a.realp44 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real45 = load double, double* %a.realp44, align 8
  %a.imagp46 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag47 = load double, double* %a.imagp46, align 8
  %indirect-arg-temp48.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 0
  %indirect-arg-temp48.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 1
  store double %a.real45, double* %indirect-arg-temp48.realp, align 8
  store double %a.imag47, double* %indirect-arg-temp48.imagp, align 8
  %call49 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp48)
  %b.realp50 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real51 = load double, double* %b.realp50, align 8
  %b.imagp52 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag53 = load double, double* %b.imagp52, align 8
  %mul.rl = fmul double %call49, %b.real51
  %mul.ir = fmul double %call49, %b.imag53
  %b.realp54 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real55 = load double, double* %b.realp54, align 8
  %b.imagp56 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag57 = load double, double* %b.imagp56, align 8
  %indirect-arg-temp58.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 0
  %indirect-arg-temp58.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 1
  store double %b.real55, double* %indirect-arg-temp58.realp, align 8
  store double %b.imag57, double* %indirect-arg-temp58.imagp, align 8
  %call59 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp58)
  %a.realp60 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real61 = load double, double* %a.realp60, align 8
  %a.imagp62 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag63 = load double, double* %a.imagp62, align 8
  %mul.rl64 = fmul double %call59, %a.real61
  %mul.ir65 = fmul double %call59, %a.imag63
  %sub.r66 = fsub double %mul.rl, %mul.rl64
  %sub.i67 = fsub double %mul.ir, %mul.ir65
  %17 = load double, double* %axb, align 8
  %mul68 = fmul double 2.000000e+00, %17
  %18 = fdiv double %sub.r66, %mul68
  %19 = fdiv double %sub.i67, %mul68
  %mul_ac = fmul double %18, 0.000000e+00
  %mul_bd = fmul double %19, 1.000000e+00
  %mul_ad = fmul double %18, 1.000000e+00
  %mul_bc = fmul double %19, 0.000000e+00
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %while.body
  %isnan_cmp69 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp69, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %18, double %19, double 0.000000e+00, double 1.000000e+00) #6
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %while.body
  %real_mul_phi = phi double [ %mul_r, %while.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %while.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %arrayidx70 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx70.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 0
  %arrayidx70.real = load double, double* %arrayidx70.realp, align 16
  %arrayidx70.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 1
  %arrayidx70.imag = load double, double* %arrayidx70.imagp, align 8
  %add.r = fadd double %real_mul_phi, %arrayidx70.real
  %add.i = fadd double %imag_mul_phi, %arrayidx70.imag
  %center.realp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.imagp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  store double %add.r, double* %center.realp, align 8
  store double %add.i, double* %center.imagp, align 8
  %20 = load double, double* %axb, align 8
  %tobool71 = fcmp une double %20, 0.000000e+00
  br i1 %tobool71, label %if.end79, label %land.lhs.true

land.lhs.true:                                    ; preds = %complex_mul_cont
  %21 = load i32, i32* %flip.addr, align 4
  %cmp72 = icmp ne i32 %21, -1
  br i1 %cmp72, label %land.lhs.true73, label %if.end79

land.lhs.true73:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %divert.addr, align 4
  %tobool74 = icmp ne i32 %22, 0
  br i1 %tobool74, label %if.end79, label %if.then

if.then:                                          ; preds = %land.lhs.true73
  %23 = load double, double* %d, align 8
  %tobool75 = fcmp une double %23, 0.000000e+00
  br i1 %tobool75, label %if.end, label %if.then76

if.then76:                                        ; preds = %if.then
  %call77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 1, i32* %divert.addr, align 4
  %24 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %25 = load i32*, i32** %ss.addr, align 4
  %call78 = call i32 @apollonius_in(%struct.circ* %24, i32* %25, i32 -1, i32 1)
  store i32 %call78, i32* %res, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.end, %land.lhs.true73, %land.lhs.true, %complex_mul_cont
  store i32 0, i32* %i80, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc124, %if.end79
  %26 = load i32, i32* %i80, align 4
  %cmp82 = icmp slt i32 %26, 3
  br i1 %cmp82, label %for.body83, label %for.end126

for.body83:                                       ; preds = %for.cond81
  %27 = load double, double* %axb, align 8
  %tobool84 = fcmp une double %27, 0.000000e+00
  br i1 %tobool84, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body83
  %28 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %29 = load i32, i32* %i80, align 4
  %arrayidx85 = getelementptr inbounds %struct.circ, %struct.circ* %28, i32 %29
  %c86 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx85, i32 0, i32 0
  %c86.realp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 0
  %c86.real = load double, double* %c86.realp, align 8
  %c86.imagp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 1
  %c86.imag = load double, double* %c86.imagp, align 8
  %center.realp87 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real = load double, double* %center.realp87, align 8
  %center.imagp88 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag = load double, double* %center.imagp88, align 8
  %sub.r89 = fsub double %c86.real, %center.real
  %sub.i90 = fsub double %c86.imag, %center.imag
  br label %cond.end

cond.false:                                       ; preds = %for.body83
  %a.realp91 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real92 = load double, double* %a.realp91, align 8
  %a.imagp93 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag94 = load double, double* %a.imagp93, align 8
  %mul_ac95 = fmul double %a.real92, 0.000000e+00
  %mul_bd96 = fmul double %a.imag94, 1.000000e+00
  %mul_ad97 = fmul double %a.real92, 1.000000e+00
  %mul_bc98 = fmul double %a.imag94, 0.000000e+00
  %mul_r99 = fsub double %mul_ac95, %mul_bd96
  %mul_i100 = fadd double %mul_ad97, %mul_bc98
  %isnan_cmp101 = fcmp uno double %mul_r99, %mul_r99
  br i1 %isnan_cmp101, label %complex_mul_imag_nan102, label %complex_mul_cont106, !prof !5

complex_mul_imag_nan102:                          ; preds = %cond.false
  %isnan_cmp103 = fcmp uno double %mul_i100, %mul_i100
  br i1 %isnan_cmp103, label %complex_mul_libcall104, label %complex_mul_cont106, !prof !5

complex_mul_libcall104:                           ; preds = %complex_mul_imag_nan102
  call void @__muldc3({ double, double }* sret align 8 %tmp105, double %a.real92, double %a.imag94, double 0.000000e+00, double 1.000000e+00) #6
  %tmp105.realp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 0
  %tmp105.real = load double, double* %tmp105.realp, align 8
  %tmp105.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 1
  %tmp105.imag = load double, double* %tmp105.imagp, align 8
  br label %complex_mul_cont106

complex_mul_cont106:                              ; preds = %complex_mul_libcall104, %complex_mul_imag_nan102, %cond.false
  %real_mul_phi107 = phi double [ %mul_r99, %cond.false ], [ %mul_r99, %complex_mul_imag_nan102 ], [ %tmp105.real, %complex_mul_libcall104 ]
  %imag_mul_phi108 = phi double [ %mul_i100, %cond.false ], [ %mul_i100, %complex_mul_imag_nan102 ], [ %tmp105.imag, %complex_mul_libcall104 ]
  %30 = load i32, i32* %flip.addr, align 4
  %conv = sitofp i32 %30 to double
  %mul_ac109 = fmul double %real_mul_phi107, %conv
  %mul_bd110 = fmul double %imag_mul_phi108, 0.000000e+00
  %mul_ad111 = fmul double %real_mul_phi107, 0.000000e+00
  %mul_bc112 = fmul double %imag_mul_phi108, %conv
  %mul_r113 = fsub double %mul_ac109, %mul_bd110
  %mul_i114 = fadd double %mul_ad111, %mul_bc112
  %isnan_cmp115 = fcmp uno double %mul_r113, %mul_r113
  br i1 %isnan_cmp115, label %complex_mul_imag_nan116, label %complex_mul_cont120, !prof !5

complex_mul_imag_nan116:                          ; preds = %complex_mul_cont106
  %isnan_cmp117 = fcmp uno double %mul_i114, %mul_i114
  br i1 %isnan_cmp117, label %complex_mul_libcall118, label %complex_mul_cont120, !prof !5

complex_mul_libcall118:                           ; preds = %complex_mul_imag_nan116
  call void @__muldc3({ double, double }* sret align 8 %tmp119, double %real_mul_phi107, double %imag_mul_phi108, double %conv, double 0.000000e+00) #6
  %tmp119.realp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 0
  %tmp119.real = load double, double* %tmp119.realp, align 8
  %tmp119.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 1
  %tmp119.imag = load double, double* %tmp119.imagp, align 8
  br label %complex_mul_cont120

complex_mul_cont120:                              ; preds = %complex_mul_libcall118, %complex_mul_imag_nan116, %complex_mul_cont106
  %real_mul_phi121 = phi double [ %mul_r113, %complex_mul_cont106 ], [ %mul_r113, %complex_mul_imag_nan116 ], [ %tmp119.real, %complex_mul_libcall118 ]
  %imag_mul_phi122 = phi double [ %mul_i114, %complex_mul_cont106 ], [ %mul_i114, %complex_mul_imag_nan116 ], [ %tmp119.imag, %complex_mul_libcall118 ]
  br label %cond.end

cond.end:                                         ; preds = %complex_mul_cont120, %cond.true
  %cond.r = phi double [ %sub.r89, %cond.true ], [ %real_mul_phi121, %complex_mul_cont120 ]
  %cond.i = phi double [ %sub.i90, %cond.true ], [ %imag_mul_phi122, %complex_mul_cont120 ]
  %31 = load i32, i32* %i80, align 4
  %arrayidx123 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %31
  %arrayidx123.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 0
  %arrayidx123.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 1
  store double %cond.r, double* %arrayidx123.realp, align 16
  store double %cond.i, double* %arrayidx123.imagp, align 8
  br label %for.inc124

for.inc124:                                       ; preds = %cond.end
  %32 = load i32, i32* %i80, align 4
  %inc125 = add nsw i32 %32, 1
  store i32 %inc125, i32* %i80, align 4
  br label %for.cond81

for.end126:                                       ; preds = %for.cond81
  store i32 0, i32* %i127, align 4
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc160, %for.end126
  %33 = load i32, i32* %i127, align 4
  %cmp129 = icmp slt i32 %33, 3
  br i1 %cmp129, label %for.body131, label %for.end162

for.body131:                                      ; preds = %for.cond128
  %34 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %35 = load i32, i32* %i127, align 4
  %arrayidx132 = getelementptr inbounds %struct.circ, %struct.circ* %34, i32 %35
  %c133 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx132, i32 0, i32 0
  %c133.realp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 0
  %c133.real = load double, double* %c133.realp, align 8
  %c133.imagp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 1
  %c133.imag = load double, double* %c133.imagp, align 8
  %36 = load i32, i32* %i127, align 4
  %arrayidx134 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %36
  %arrayidx134.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 0
  %arrayidx134.real = load double, double* %arrayidx134.realp, align 16
  %arrayidx134.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 1
  %arrayidx134.imag = load double, double* %arrayidx134.imagp, align 8
  %37 = load i32, i32* %i127, align 4
  %arrayidx135 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %37
  %arrayidx135.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 0
  %arrayidx135.real = load double, double* %arrayidx135.realp, align 16
  %arrayidx135.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 1
  %arrayidx135.imag = load double, double* %arrayidx135.imagp, align 8
  %indirect-arg-temp136.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 0
  %indirect-arg-temp136.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 1
  store double %arrayidx135.real, double* %indirect-arg-temp136.realp, align 8
  store double %arrayidx135.imag, double* %indirect-arg-temp136.imagp, align 8
  %call137 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp136) #6
  %38 = fdiv double %arrayidx134.real, %call137
  %39 = fdiv double %arrayidx134.imag, %call137
  %40 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %41 = load i32, i32* %i127, align 4
  %arrayidx138 = getelementptr inbounds %struct.circ, %struct.circ* %40, i32 %41
  %r139 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx138, i32 0, i32 1
  %42 = load double, double* %r139, align 8
  %mul.rl140 = fmul double %38, %42
  %mul.il = fmul double %39, %42
  %43 = load i32, i32* %i127, align 4
  %arrayidx141 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx141, align 4
  %conv142 = sitofp i32 %44 to double
  %mul_ac143 = fmul double %mul.rl140, %conv142
  %mul_bd144 = fmul double %mul.il, 0.000000e+00
  %mul_ad145 = fmul double %mul.rl140, 0.000000e+00
  %mul_bc146 = fmul double %mul.il, %conv142
  %mul_r147 = fsub double %mul_ac143, %mul_bd144
  %mul_i148 = fadd double %mul_ad145, %mul_bc146
  %isnan_cmp149 = fcmp uno double %mul_r147, %mul_r147
  br i1 %isnan_cmp149, label %complex_mul_imag_nan150, label %complex_mul_cont154, !prof !5

complex_mul_imag_nan150:                          ; preds = %for.body131
  %isnan_cmp151 = fcmp uno double %mul_i148, %mul_i148
  br i1 %isnan_cmp151, label %complex_mul_libcall152, label %complex_mul_cont154, !prof !5

complex_mul_libcall152:                           ; preds = %complex_mul_imag_nan150
  call void @__muldc3({ double, double }* sret align 8 %tmp153, double %mul.rl140, double %mul.il, double %conv142, double 0.000000e+00) #6
  %tmp153.realp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 0
  %tmp153.real = load double, double* %tmp153.realp, align 8
  %tmp153.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 1
  %tmp153.imag = load double, double* %tmp153.imagp, align 8
  br label %complex_mul_cont154

complex_mul_cont154:                              ; preds = %complex_mul_libcall152, %complex_mul_imag_nan150, %for.body131
  %real_mul_phi155 = phi double [ %mul_r147, %for.body131 ], [ %mul_r147, %complex_mul_imag_nan150 ], [ %tmp153.real, %complex_mul_libcall152 ]
  %imag_mul_phi156 = phi double [ %mul_i148, %for.body131 ], [ %mul_i148, %complex_mul_imag_nan150 ], [ %tmp153.imag, %complex_mul_libcall152 ]
  %add.r157 = fadd double %c133.real, %real_mul_phi155
  %add.i158 = fadd double %c133.imag, %imag_mul_phi156
  %45 = load i32, i32* %i127, align 4
  %arrayidx159 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %45
  %arrayidx159.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 0
  %arrayidx159.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 1
  store double %add.r157, double* %arrayidx159.realp, align 16
  store double %add.i158, double* %arrayidx159.imagp, align 8
  br label %for.inc160

for.inc160:                                       ; preds = %complex_mul_cont154
  %46 = load i32, i32* %i127, align 4
  %inc161 = add nsw i32 %46, 1
  store i32 %inc161, i32* %i127, align 4
  br label %for.cond128

for.end162:                                       ; preds = %for.cond128
  store i32 0, i32* %i163, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc176, %for.end162
  %47 = load i32, i32* %i163, align 4
  %cmp165 = icmp slt i32 %47, 3
  br i1 %cmp165, label %for.body167, label %for.end178

for.body167:                                      ; preds = %for.cond164
  %48 = load i32, i32* %i163, align 4
  %arrayidx168 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %48
  %arrayidx168.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 0
  %arrayidx168.real = load double, double* %arrayidx168.realp, align 16
  %arrayidx168.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 1
  %arrayidx168.imag = load double, double* %arrayidx168.imagp, align 8
  %49 = load i32, i32* %i163, align 4
  %arrayidx169 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %49
  %arrayidx169.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 0
  %arrayidx169.real = load double, double* %arrayidx169.realp, align 16
  %arrayidx169.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 1
  %arrayidx169.imag = load double, double* %arrayidx169.imagp, align 8
  %sub.r170 = fsub double %arrayidx168.real, %arrayidx169.real
  %sub.i171 = fsub double %arrayidx168.imag, %arrayidx169.imag
  %indirect-arg-temp172.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 0
  %indirect-arg-temp172.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 1
  store double %sub.r170, double* %indirect-arg-temp172.realp, align 8
  store double %sub.i171, double* %indirect-arg-temp172.imagp, align 8
  %call173 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp172)
  %50 = load double, double* %diff, align 8
  %add = fadd double %50, %call173
  store double %add, double* %diff, align 8
  %51 = load i32, i32* %i163, align 4
  %arrayidx174 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %51
  %arrayidx174.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 0
  %arrayidx174.real = load double, double* %arrayidx174.realp, align 16
  %arrayidx174.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 1
  %arrayidx174.imag = load double, double* %arrayidx174.imagp, align 8
  %52 = load i32, i32* %i163, align 4
  %arrayidx175 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %52
  %arrayidx175.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 0
  %arrayidx175.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 1
  store double %arrayidx174.real, double* %arrayidx175.realp, align 16
  store double %arrayidx174.imag, double* %arrayidx175.imagp, align 8
  br label %for.inc176

for.inc176:                                       ; preds = %for.body167
  %53 = load i32, i32* %i163, align 4
  %inc177 = add nsw i32 %53, 1
  store i32 %inc177, i32* %i163, align 4
  br label %for.cond164

for.end178:                                       ; preds = %for.cond164
  %54 = load double, double* %diff, align 8
  %55 = load double, double* %diff_old, align 8
  %cmp179 = fcmp oge double %54, %55
  br i1 %cmp179, label %land.lhs.true181, label %if.end190

land.lhs.true181:                                 ; preds = %for.end178
  %56 = load double, double* %diff_old, align 8
  %cmp182 = fcmp oge double %56, 0.000000e+00
  br i1 %cmp182, label %if.then184, label %if.end190

if.then184:                                       ; preds = %land.lhs.true181
  %57 = load i32, i32* %iter, align 4
  %inc185 = add nsw i32 %57, 1
  store i32 %inc185, i32* %iter, align 4
  %cmp186 = icmp sgt i32 %57, 20
  br i1 %cmp186, label %if.then188, label %if.end189

if.then188:                                       ; preds = %if.then184
  %58 = load i32, i32* %res, align 4
  store i32 %58, i32* %retval, align 4
  br label %return

if.end189:                                        ; preds = %if.then184
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %land.lhs.true181, %for.end178
  %59 = load double, double* %diff, align 8
  store double %59, double* %diff_old, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %60 = load double, double* %axb, align 8
  %tobool192 = fcmp une double %60, 0.000000e+00
  br i1 %tobool192, label %if.then193, label %if.else

if.then193:                                       ; preds = %while.end
  %center.realp194 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real195 = load double, double* %center.realp194, align 8
  %center.imagp196 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag197 = load double, double* %center.imagp196, align 8
  %indirect-arg-temp198.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 0
  %indirect-arg-temp198.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 1
  store double %center.real195, double* %indirect-arg-temp198.realp, align 8
  store double %center.imag197, double* %indirect-arg-temp198.imagp, align 8
  %61 = bitcast { double, double }* %indirect-arg-temp198255 to i8*
  %62 = bitcast { double, double }* %indirect-arg-temp198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 16, i1 false)
  %__x.realp.i256 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 0
  %__x.real.i257 = load double, double* %__x.realp.i256, align 8
  %__x.imagp.i258 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 1
  %__x.imag.i259 = load double, double* %__x.imagp.i258, align 8
  %center.realp200 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real201 = load double, double* %center.realp200, align 8
  %center.imagp202 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag203 = load double, double* %center.imagp202, align 8
  %indirect-arg-temp204.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 0
  %indirect-arg-temp204.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 1
  store double %center.real201, double* %indirect-arg-temp204.realp, align 8
  store double %center.imag203, double* %indirect-arg-temp204.imagp, align 8
  %63 = bitcast { double, double }* %indirect-arg-temp204250 to i8*
  %64 = bitcast { double, double }* %indirect-arg-temp204 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %64, i64 16, i1 false)
  %__x.realp.i251 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 0
  %__x.real.i252 = load double, double* %__x.realp.i251, align 8
  %__x.imagp.i253 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 1
  %__x.imag.i254 = load double, double* %__x.imagp.i253, align 8
  %65 = load double, double* %r, align 8
  %call206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), double %__x.real.i257, double %__x.imag.i254, double %65)
  br label %if.end226

if.else:                                          ; preds = %while.end
  %arrayidx207 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx207.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 0
  %arrayidx207.real = load double, double* %arrayidx207.realp, align 16
  %arrayidx207.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 1
  %arrayidx207.imag = load double, double* %arrayidx207.imagp, align 8
  %indirect-arg-temp208.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 0
  %indirect-arg-temp208.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 1
  store double %arrayidx207.real, double* %indirect-arg-temp208.realp, align 8
  store double %arrayidx207.imag, double* %indirect-arg-temp208.imagp, align 8
  %66 = bitcast { double, double }* %indirect-arg-temp208245 to i8*
  %67 = bitcast { double, double }* %indirect-arg-temp208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %67, i64 16, i1 false)
  %__x.realp.i246 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 0
  %__x.real.i247 = load double, double* %__x.realp.i246, align 8
  %__x.imagp.i248 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 1
  %__x.imag.i249 = load double, double* %__x.imagp.i248, align 8
  %arrayidx210 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx210.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 0
  %arrayidx210.real = load double, double* %arrayidx210.realp, align 16
  %arrayidx210.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 1
  %arrayidx210.imag = load double, double* %arrayidx210.imagp, align 8
  %indirect-arg-temp211.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 0
  %indirect-arg-temp211.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 1
  store double %arrayidx210.real, double* %indirect-arg-temp211.realp, align 8
  store double %arrayidx210.imag, double* %indirect-arg-temp211.imagp, align 8
  %68 = bitcast { double, double }* %indirect-arg-temp211240 to i8*
  %69 = bitcast { double, double }* %indirect-arg-temp211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 16, i1 false)
  %__x.realp.i241 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 0
  %__x.real.i242 = load double, double* %__x.realp.i241, align 8
  %__x.imagp.i243 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 1
  %__x.imag.i244 = load double, double* %__x.imagp.i243, align 8
  %arrayidx213 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx213.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 0
  %arrayidx213.real = load double, double* %arrayidx213.realp, align 16
  %arrayidx213.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 1
  %arrayidx213.imag = load double, double* %arrayidx213.imagp, align 8
  %indirect-arg-temp214.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 0
  %indirect-arg-temp214.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 1
  store double %arrayidx213.real, double* %indirect-arg-temp214.realp, align 8
  store double %arrayidx213.imag, double* %indirect-arg-temp214.imagp, align 8
  %70 = bitcast { double, double }* %indirect-arg-temp214235 to i8*
  %71 = bitcast { double, double }* %indirect-arg-temp214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 16, i1 false)
  %__x.realp.i236 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 0
  %__x.real.i237 = load double, double* %__x.realp.i236, align 8
  %__x.imagp.i238 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 1
  %__x.imag.i239 = load double, double* %__x.imagp.i238, align 8
  %arrayidx216 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx216.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 0
  %arrayidx216.real = load double, double* %arrayidx216.realp, align 16
  %arrayidx216.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 1
  %arrayidx216.imag = load double, double* %arrayidx216.imagp, align 8
  %indirect-arg-temp217.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 0
  %indirect-arg-temp217.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 1
  store double %arrayidx216.real, double* %indirect-arg-temp217.realp, align 8
  store double %arrayidx216.imag, double* %indirect-arg-temp217.imagp, align 8
  %72 = bitcast { double, double }* %indirect-arg-temp217230 to i8*
  %73 = bitcast { double, double }* %indirect-arg-temp217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 16, i1 false)
  %__x.realp.i231 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 0
  %__x.real.i232 = load double, double* %__x.realp.i231, align 8
  %__x.imagp.i233 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 1
  %__x.imag.i234 = load double, double* %__x.imagp.i233, align 8
  %arrayidx219 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx219.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 0
  %arrayidx219.real = load double, double* %arrayidx219.realp, align 16
  %arrayidx219.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 1
  %arrayidx219.imag = load double, double* %arrayidx219.imagp, align 8
  %indirect-arg-temp220.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 0
  %indirect-arg-temp220.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 1
  store double %arrayidx219.real, double* %indirect-arg-temp220.realp, align 8
  store double %arrayidx219.imag, double* %indirect-arg-temp220.imagp, align 8
  %74 = bitcast { double, double }* %indirect-arg-temp220229 to i8*
  %75 = bitcast { double, double }* %indirect-arg-temp220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %arrayidx222 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx222.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 0
  %arrayidx222.real = load double, double* %arrayidx222.realp, align 16
  %arrayidx222.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 1
  %arrayidx222.imag = load double, double* %arrayidx222.imagp, align 8
  %indirect-arg-temp223.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 0
  %indirect-arg-temp223.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 1
  store double %arrayidx222.real, double* %indirect-arg-temp223.realp, align 8
  store double %arrayidx222.imag, double* %indirect-arg-temp223.imagp, align 8
  %76 = bitcast { double, double }* %indirect-arg-temp223260 to i8*
  %77 = bitcast { double, double }* %indirect-arg-temp223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 16, i1 false)
  %__x.realp.i261 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 0
  %__x.real.i262 = load double, double* %__x.realp.i261, align 8
  %__x.imagp.i263 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 1
  %__x.imag.i264 = load double, double* %__x.imagp.i263, align 8
  %call225 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i32 0, i32 0), double %__x.real.i247, double %__x.imag.i244, double %__x.real.i237, double %__x.imag.i234, double %__x.real.i, double %__x.imag.i264)
  br label %if.end226

if.end226:                                        ; preds = %if.else, %if.then193
  %78 = load i32, i32* %res, align 4
  %add227 = add nsw i32 %78, 1
  store i32 %add227, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end226, %if.then188, %if.then76
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius(%struct.circ* %aa) #0 {
entry:
  %aa.addr = alloca %struct.circ*, align 4
  %s = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %and = and i32 %1, 1
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  store i32 %and, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %and1 = and i32 %2, 2
  %arrayidx2 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  store i32 %and1, i32* %arrayidx2, align 4
  %3 = load i32, i32* %i, align 4
  %and3 = and i32 %3, 4
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  store i32 %and3, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %4 = load i32, i32* %arrayidx5, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.circ, %struct.circ* %5, i32 0
  %r = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx6, i32 0, i32 1
  %6 = load double, double* %r, align 8
  %tobool7 = fcmp une double %6, 0.000000e+00
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  %7 = load i32, i32* %arrayidx8, align 4
  %tobool9 = icmp ne i32 %7, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end15

land.lhs.true10:                                  ; preds = %if.end
  %8 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx11 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 1
  %r12 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx11, i32 0, i32 1
  %9 = load double, double* %r12, align 8
  %tobool13 = fcmp une double %9, 0.000000e+00
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %land.lhs.true10
  br label %for.inc

if.end15:                                         ; preds = %land.lhs.true10, %if.end
  %arrayidx16 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  %10 = load i32, i32* %arrayidx16, align 4
  %tobool17 = icmp ne i32 %10, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end23

land.lhs.true18:                                  ; preds = %if.end15
  %11 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx19 = getelementptr inbounds %struct.circ, %struct.circ* %11, i32 2
  %r20 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx19, i32 0, i32 1
  %12 = load double, double* %r20, align 8
  %tobool21 = fcmp une double %12, 0.000000e+00
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %land.lhs.true18
  br label %for.inc

if.end23:                                         ; preds = %land.lhs.true18, %if.end15
  %13 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %call = call i32 @apollonius_in(%struct.circ* %13, i32* %arraydecay, i32 1, i32 0)
  %14 = load i32, i32* %sum, align 4
  %add = add nsw i32 %14, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end23, %if.then22, %if.then14, %if.then
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %sum, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %a = alloca [3 x %struct.circ], align 16
  %b = alloca [3 x %struct.circ], align 16
  %c = alloca [3 x %struct.circ], align 16
  %0 = bitcast [3 x %struct.circ]* %a to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 72, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.circ]*
  %2 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.circ, %struct.circ* %2, i32 0, i32 1
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 1
  %5 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 0
  store double 4.000000e+00, double* %6, align 8
  %7 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 1
  store double 1.000000e+00, double* %7, align 8
  %8 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 2
  %9 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 0
  %10 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 0
  store double 2.000000e+00, double* %10, align 16
  %11 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 1
  store double 4.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 1
  store double 1.000000e+00, double* %12, align 16
  %13 = bitcast [3 x %struct.circ]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %13, i8 0, i32 72, i1 false)
  %14 = bitcast i8* %13 to [3 x %struct.circ]*
  %15 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 0
  %16 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, double }, { double, double }* %16, i32 0, i32 0
  store double -3.000000e+00, double* %17, align 16
  %18 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 1
  store double 2.000000e+00, double* %18, align 16
  %19 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 1
  %20 = getelementptr inbounds %struct.circ, %struct.circ* %19, i32 0, i32 1
  store double 1.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 2
  %22 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, double }, { double, double }* %22, i32 0, i32 0
  store double 3.000000e+00, double* %23, align 16
  %24 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 1
  store double 2.000000e+00, double* %24, align 16
  %25 = bitcast [3 x %struct.circ]* %c to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %25, i8 0, i32 72, i1 false)
  %26 = bitcast i8* %25 to [3 x %struct.circ]*
  %27 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 0
  %29 = getelementptr inbounds { double, double }, { double, double }* %28, i32 0, i32 0
  store double -2.000000e+00, double* %29, align 16
  %30 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 1
  store double 1.000000e+00, double* %30, align 16
  %31 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 1
  %32 = getelementptr inbounds %struct.circ, %struct.circ* %31, i32 0, i32 1
  store double 1.000000e+00, double* %32, align 8
  %33 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 2
  %34 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, double }, { double, double }* %34, i32 0, i32 1
  store double 2.000000e+00, double* %35, align 8
  %36 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 1
  store double 1.000000e+00, double* %36, align 16
  %call = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %a, i32 0, i32 0
  %call1 = call i32 @apollonius(%struct.circ* %arraydecay)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %arraydecay3 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %b, i32 0, i32 0
  %call4 = call i32 @apollonius(%struct.circ* %arraydecay3)
  %call5 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay6 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %c, i32 0, i32 0
  %call7 = call i32 @apollonius(%struct.circ* %arraydecay6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @puts(i8* %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i64 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL9__tg_conjCd: %agg.result"}
!4 = distinct !{!4, !"_ZL9__tg_conjCd"}
!5 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for cross()

; entering Souper's runOnFunction() for abs2()

; ModuleID = './Problem_of_Apollonius.c.bc'
source_filename = "./Problem_of_Apollonius.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.circ = type { { double, double }, double }

@.str = private unnamed_addr constant [31 x i8] c"Given conditions confused me.\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"found: \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"circle (%6.3f,%6.3f), r = %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"line (%6.3f,%6.3f) (%6.3f,%6.3f) (%6.3f,%6.3f)\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"set 1\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"set 2\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"set 3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @cross({ double, double }* byval({ double, double }) align 8 %a, { double, double }* byval({ double, double }) align 8 %b) #0 {
entry:
  %indirect-arg-temp127 = alloca { double, double }, align 8
  %indirect-arg-temp722 = alloca { double, double }, align 8
  %indirect-arg-temp1317 = alloca { double, double }, align 8
  %indirect-arg-temp16 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp1 = alloca { double, double }, align 8
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %indirect-arg-temp13 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp16 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp, align 8
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp, align 8
  %indirect-arg-temp1.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 0
  %indirect-arg-temp1.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp1.realp, align 8
  store double %b.imag, double* %indirect-arg-temp1.imagp, align 8
  %2 = bitcast { double, double }* %indirect-arg-temp127 to i8*
  %3 = bitcast { double, double }* %indirect-arg-temp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 16, i1 false)
  %__x.realp.i28 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 0
  %__x.real.i29 = load double, double* %__x.realp.i28, align 8
  %__x.imagp.i30 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 1
  %__x.imag.i31 = load double, double* %__x.imagp.i30, align 8
  %mul = fmul double %__x.real.i, %__x.imag.i31
  %a.realp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real4 = load double, double* %a.realp3, align 8
  %a.imagp5 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag6 = load double, double* %a.imagp5, align 8
  %indirect-arg-temp7.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %indirect-arg-temp7.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  store double %a.real4, double* %indirect-arg-temp7.realp, align 8
  store double %a.imag6, double* %indirect-arg-temp7.imagp, align 8
  %4 = bitcast { double, double }* %indirect-arg-temp722 to i8*
  %5 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 16, i1 false)
  %__x.realp.i23 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 0
  %__x.real.i24 = load double, double* %__x.realp.i23, align 8
  %__x.imagp.i25 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 1
  %__x.imag.i26 = load double, double* %__x.imagp.i25, align 8
  %b.realp9 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real10 = load double, double* %b.realp9, align 8
  %b.imagp11 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag12 = load double, double* %b.imagp11, align 8
  %indirect-arg-temp13.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 0
  %indirect-arg-temp13.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 1
  store double %b.real10, double* %indirect-arg-temp13.realp, align 8
  store double %b.imag12, double* %indirect-arg-temp13.imagp, align 8
  %6 = bitcast { double, double }* %indirect-arg-temp1317 to i8*
  %7 = bitcast { double, double }* %indirect-arg-temp13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 16, i1 false)
  %__x.realp.i18 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 0
  %__x.real.i19 = load double, double* %__x.realp.i18, align 8
  %__x.imagp.i20 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 1
  %__x.imag.i21 = load double, double* %__x.imagp.i20, align 8
  %mul15 = fmul double %__x.imag.i26, %__x.real.i19
  %sub = fsub double %mul, %mul15
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden double @abs2({ double, double }* byval({ double, double }) align 8 %a) #0 {
entry:
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %a.realp1 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real2 = load double, double* %a.realp1, align 8
  %a.imagp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag4 = load double, double* %a.imagp3, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real2, double* %indirect-arg-temp.realp, align 8
  store double %a.imag4, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8, !noalias !2
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8, !noalias !2
  %neg.i = fneg double %__x.imag.i
  %agg.result.realp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %__x.real.i, double* %agg.result.realp.i, align 8, !alias.scope !2
  store double %neg.i, double* %agg.result.imagp.i, align 8, !alias.scope !2
  %agg.result.realp1.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.real.i = load double, double* %agg.result.realp1.i, align 8, !alias.scope !2
  %agg.result.imagp2.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %agg.result.imag.i = load double, double* %agg.result.imagp2.i, align 8, !alias.scope !2
  %agg.result.realp3.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp4.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %agg.result.real.i, double* %agg.result.realp3.i, align 8, !alias.scope !2
  store double %agg.result.imag.i, double* %agg.result.imagp4.i, align 8, !alias.scope !2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %mul_ac = fmul double %a.real, %tmp.real
  %mul_bd = fmul double %a.imag, %tmp.imag
  %mul_ad = fmul double %a.real, %tmp.imag
  %mul_bc = fmul double %a.imag, %tmp.real
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %entry
  %isnan_cmp5 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp5, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp6, double %a.real, double %a.imag, double %tmp.real, double %tmp.imag) #6
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %entry
  %real_mul_phi = phi double [ %mul_r, %entry ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp6.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %entry ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp6.imag, %complex_mul_libcall ]
  ret double %real_mul_phi
}

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius_in(%struct.circ* %aa, i32* %ss, i32 %flip, i32 %divert) #0 {
entry:
  %indirect-arg-temp223260 = alloca { double, double }, align 8
  %indirect-arg-temp198255 = alloca { double, double }, align 8
  %indirect-arg-temp204250 = alloca { double, double }, align 8
  %indirect-arg-temp208245 = alloca { double, double }, align 8
  %indirect-arg-temp211240 = alloca { double, double }, align 8
  %indirect-arg-temp214235 = alloca { double, double }, align 8
  %indirect-arg-temp217230 = alloca { double, double }, align 8
  %indirect-arg-temp220229 = alloca { double, double }, align 8
  %__x.addr.i228 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %aa.addr = alloca %struct.circ*, align 4
  %ss.addr = alloca i32*, align 4
  %flip.addr = alloca i32, align 4
  %divert.addr = alloca i32, align 4
  %n = alloca [3 x { double, double }], align 16
  %x = alloca [3 x { double, double }], align 16
  %t = alloca [3 x { double, double }], align 16
  %a = alloca { double, double }, align 8
  %b = alloca { double, double }, align 8
  %center = alloca { double, double }, align 8
  %s = alloca [3 x i32], align 4
  %iter = alloca i32, align 4
  %res = alloca i32, align 4
  %diff = alloca double, align 8
  %diff_old = alloca double, align 8
  %axb = alloca double, align 8
  %d = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp15 = alloca { double, double }, align 8
  %indirect-arg-temp20 = alloca { double, double }, align 8
  %indirect-arg-temp26 = alloca { double, double }, align 8
  %indirect-arg-temp38 = alloca { double, double }, align 8
  %indirect-arg-temp48 = alloca { double, double }, align 8
  %indirect-arg-temp58 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %i80 = alloca i32, align 4
  %tmp105 = alloca { double, double }, align 8
  %tmp119 = alloca { double, double }, align 8
  %i127 = alloca i32, align 4
  %indirect-arg-temp136 = alloca { double, double }, align 8
  %tmp153 = alloca { double, double }, align 8
  %i163 = alloca i32, align 4
  %indirect-arg-temp172 = alloca { double, double }, align 8
  %indirect-arg-temp198 = alloca { double, double }, align 8
  %indirect-arg-temp204 = alloca { double, double }, align 8
  %indirect-arg-temp208 = alloca { double, double }, align 8
  %indirect-arg-temp211 = alloca { double, double }, align 8
  %indirect-arg-temp214 = alloca { double, double }, align 8
  %indirect-arg-temp217 = alloca { double, double }, align 8
  %indirect-arg-temp220 = alloca { double, double }, align 8
  %indirect-arg-temp223 = alloca { double, double }, align 8
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32* %ss, i32** %ss.addr, align 4
  store i32 %flip, i32* %flip.addr, align 4
  store i32 %divert, i32* %divert.addr, align 4
  store i32 0, i32* %iter, align 4
  store i32 0, i32* %res, align 4
  store double 1.000000e+00, double* %diff, align 8
  store double -1.000000e+00, double* %diff_old, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %ss.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %3, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 -1
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %5
  store i32 %cond, i32* %arrayidx1, align 4
  %6 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.circ, %struct.circ* %6, i32 %7
  %c = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx2, i32 0, i32 0
  %c.realp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 0
  %c.real = load double, double* %c.realp, align 8
  %c.imagp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 1
  %c.imag = load double, double* %c.imagp, align 8
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %8
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %c.real, double* %arrayidx3.realp, align 16
  store double %c.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end190, %for.end
  %10 = load double, double* %diff, align 8
  %cmp4 = fcmp ogt double %10, 0x3BC79CA10C924223
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arrayidx5 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx5.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 0
  %arrayidx5.real = load double, double* %arrayidx5.realp, align 16
  %arrayidx5.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 1
  %arrayidx5.imag = load double, double* %arrayidx5.imagp, align 8
  %arrayidx6 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx6.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 0
  %arrayidx6.real = load double, double* %arrayidx6.realp, align 16
  %arrayidx6.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 1
  %arrayidx6.imag = load double, double* %arrayidx6.imagp, align 8
  %sub.r = fsub double %arrayidx5.real, %arrayidx6.real
  %sub.i = fsub double %arrayidx5.imag, %arrayidx6.imag
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  store double %sub.r, double* %a.realp, align 8
  store double %sub.i, double* %a.imagp, align 8
  %arrayidx7 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx7.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 0
  %arrayidx7.real = load double, double* %arrayidx7.realp, align 16
  %arrayidx7.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 1
  %arrayidx7.imag = load double, double* %arrayidx7.imagp, align 8
  %arrayidx8 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %sub.r9 = fsub double %arrayidx7.real, %arrayidx8.real
  %sub.i10 = fsub double %arrayidx7.imag, %arrayidx8.imag
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  store double %sub.r9, double* %b.realp, align 8
  store double %sub.i10, double* %b.imagp, align 8
  store double 0.000000e+00, double* %diff, align 8
  %a.realp11 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp11, align 8
  %a.imagp12 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp12, align 8
  %b.realp13 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp13, align 8
  %b.imagp14 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp14, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %indirect-arg-temp15.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 0
  %indirect-arg-temp15.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp15.realp, align 8
  store double %b.imag, double* %indirect-arg-temp15.imagp, align 8
  %call = call double @cross({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp15)
  %fneg = fneg double %call
  store double %fneg, double* %axb, align 8
  %a.realp16 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real17 = load double, double* %a.realp16, align 8
  %a.imagp18 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag19 = load double, double* %a.imagp18, align 8
  %indirect-arg-temp20.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 0
  %indirect-arg-temp20.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 1
  store double %a.real17, double* %indirect-arg-temp20.realp, align 8
  store double %a.imag19, double* %indirect-arg-temp20.imagp, align 8
  %call21 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp20)
  %b.realp22 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real23 = load double, double* %b.realp22, align 8
  %b.imagp24 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag25 = load double, double* %b.imagp24, align 8
  %indirect-arg-temp26.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 0
  %indirect-arg-temp26.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 1
  store double %b.real23, double* %indirect-arg-temp26.realp, align 8
  store double %b.imag25, double* %indirect-arg-temp26.imagp, align 8
  %call27 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp26)
  %mul = fmul double %call21, %call27
  %a.realp28 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real29 = load double, double* %a.realp28, align 8
  %a.imagp30 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag31 = load double, double* %a.imagp30, align 8
  %b.realp32 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real33 = load double, double* %b.realp32, align 8
  %b.imagp34 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag35 = load double, double* %b.imagp34, align 8
  %sub.r36 = fsub double %a.real29, %b.real33
  %sub.i37 = fsub double %a.imag31, %b.imag35
  %indirect-arg-temp38.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 0
  %indirect-arg-temp38.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 1
  store double %sub.r36, double* %indirect-arg-temp38.realp, align 8
  store double %sub.i37, double* %indirect-arg-temp38.imagp, align 8
  %call39 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp38)
  %mul40 = fmul double %mul, %call39
  store double %mul40, double* %__x.addr.i, align 8
  %11 = load double, double* %__x.addr.i, align 8
  %12 = call double @llvm.sqrt.f64(double %11) #6
  store double %12, double* %d, align 8
  %13 = load double, double* %d, align 8
  %14 = load double, double* %axb, align 8
  %mul42 = fmul double 2.000000e+00, %14
  %div = fdiv double %13, %mul42
  store double %div, double* %__x.addr.i228, align 8
  %15 = load double, double* %__x.addr.i228, align 8
  %16 = call double @llvm.fabs.f64(double %15) #6
  store double %16, double* %r, align 8
  %a.realp44 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real45 = load double, double* %a.realp44, align 8
  %a.imagp46 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag47 = load double, double* %a.imagp46, align 8
  %indirect-arg-temp48.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 0
  %indirect-arg-temp48.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 1
  store double %a.real45, double* %indirect-arg-temp48.realp, align 8
  store double %a.imag47, double* %indirect-arg-temp48.imagp, align 8
  %call49 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp48)
  %b.realp50 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real51 = load double, double* %b.realp50, align 8
  %b.imagp52 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag53 = load double, double* %b.imagp52, align 8
  %mul.rl = fmul double %call49, %b.real51
  %mul.ir = fmul double %call49, %b.imag53
  %b.realp54 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real55 = load double, double* %b.realp54, align 8
  %b.imagp56 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag57 = load double, double* %b.imagp56, align 8
  %indirect-arg-temp58.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 0
  %indirect-arg-temp58.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 1
  store double %b.real55, double* %indirect-arg-temp58.realp, align 8
  store double %b.imag57, double* %indirect-arg-temp58.imagp, align 8
  %call59 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp58)
  %a.realp60 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real61 = load double, double* %a.realp60, align 8
  %a.imagp62 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag63 = load double, double* %a.imagp62, align 8
  %mul.rl64 = fmul double %call59, %a.real61
  %mul.ir65 = fmul double %call59, %a.imag63
  %sub.r66 = fsub double %mul.rl, %mul.rl64
  %sub.i67 = fsub double %mul.ir, %mul.ir65
  %17 = load double, double* %axb, align 8
  %mul68 = fmul double 2.000000e+00, %17
  %18 = fdiv double %sub.r66, %mul68
  %19 = fdiv double %sub.i67, %mul68
  %mul_ac = fmul double %18, 0.000000e+00
  %mul_bd = fmul double %19, 1.000000e+00
  %mul_ad = fmul double %18, 1.000000e+00
  %mul_bc = fmul double %19, 0.000000e+00
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %while.body
  %isnan_cmp69 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp69, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %18, double %19, double 0.000000e+00, double 1.000000e+00) #6
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %while.body
  %real_mul_phi = phi double [ %mul_r, %while.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %while.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %arrayidx70 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx70.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 0
  %arrayidx70.real = load double, double* %arrayidx70.realp, align 16
  %arrayidx70.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 1
  %arrayidx70.imag = load double, double* %arrayidx70.imagp, align 8
  %add.r = fadd double %real_mul_phi, %arrayidx70.real
  %add.i = fadd double %imag_mul_phi, %arrayidx70.imag
  %center.realp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.imagp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  store double %add.r, double* %center.realp, align 8
  store double %add.i, double* %center.imagp, align 8
  %20 = load double, double* %axb, align 8
  %tobool71 = fcmp une double %20, 0.000000e+00
  br i1 %tobool71, label %if.end79, label %land.lhs.true

land.lhs.true:                                    ; preds = %complex_mul_cont
  %21 = load i32, i32* %flip.addr, align 4
  %cmp72 = icmp ne i32 %21, -1
  br i1 %cmp72, label %land.lhs.true73, label %if.end79

land.lhs.true73:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %divert.addr, align 4
  %tobool74 = icmp ne i32 %22, 0
  br i1 %tobool74, label %if.end79, label %if.then

if.then:                                          ; preds = %land.lhs.true73
  %23 = load double, double* %d, align 8
  %tobool75 = fcmp une double %23, 0.000000e+00
  br i1 %tobool75, label %if.end, label %if.then76

if.then76:                                        ; preds = %if.then
  %call77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 1, i32* %divert.addr, align 4
  %24 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %25 = load i32*, i32** %ss.addr, align 4
  %call78 = call i32 @apollonius_in(%struct.circ* %24, i32* %25, i32 -1, i32 1)
  store i32 %call78, i32* %res, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.end, %land.lhs.true73, %land.lhs.true, %complex_mul_cont
  store i32 0, i32* %i80, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc124, %if.end79
  %26 = load i32, i32* %i80, align 4
  %cmp82 = icmp slt i32 %26, 3
  br i1 %cmp82, label %for.body83, label %for.end126

for.body83:                                       ; preds = %for.cond81
  %27 = load double, double* %axb, align 8
  %tobool84 = fcmp une double %27, 0.000000e+00
  br i1 %tobool84, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body83
  %28 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %29 = load i32, i32* %i80, align 4
  %arrayidx85 = getelementptr inbounds %struct.circ, %struct.circ* %28, i32 %29
  %c86 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx85, i32 0, i32 0
  %c86.realp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 0
  %c86.real = load double, double* %c86.realp, align 8
  %c86.imagp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 1
  %c86.imag = load double, double* %c86.imagp, align 8
  %center.realp87 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real = load double, double* %center.realp87, align 8
  %center.imagp88 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag = load double, double* %center.imagp88, align 8
  %sub.r89 = fsub double %c86.real, %center.real
  %sub.i90 = fsub double %c86.imag, %center.imag
  br label %cond.end

cond.false:                                       ; preds = %for.body83
  %a.realp91 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real92 = load double, double* %a.realp91, align 8
  %a.imagp93 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag94 = load double, double* %a.imagp93, align 8
  %mul_ac95 = fmul double %a.real92, 0.000000e+00
  %mul_bd96 = fmul double %a.imag94, 1.000000e+00
  %mul_ad97 = fmul double %a.real92, 1.000000e+00
  %mul_bc98 = fmul double %a.imag94, 0.000000e+00
  %mul_r99 = fsub double %mul_ac95, %mul_bd96
  %mul_i100 = fadd double %mul_ad97, %mul_bc98
  %isnan_cmp101 = fcmp uno double %mul_r99, %mul_r99
  br i1 %isnan_cmp101, label %complex_mul_imag_nan102, label %complex_mul_cont106, !prof !5

complex_mul_imag_nan102:                          ; preds = %cond.false
  %isnan_cmp103 = fcmp uno double %mul_i100, %mul_i100
  br i1 %isnan_cmp103, label %complex_mul_libcall104, label %complex_mul_cont106, !prof !5

complex_mul_libcall104:                           ; preds = %complex_mul_imag_nan102
  call void @__muldc3({ double, double }* sret align 8 %tmp105, double %a.real92, double %a.imag94, double 0.000000e+00, double 1.000000e+00) #6
  %tmp105.realp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 0
  %tmp105.real = load double, double* %tmp105.realp, align 8
  %tmp105.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 1
  %tmp105.imag = load double, double* %tmp105.imagp, align 8
  br label %complex_mul_cont106

complex_mul_cont106:                              ; preds = %complex_mul_libcall104, %complex_mul_imag_nan102, %cond.false
  %real_mul_phi107 = phi double [ %mul_r99, %cond.false ], [ %mul_r99, %complex_mul_imag_nan102 ], [ %tmp105.real, %complex_mul_libcall104 ]
  %imag_mul_phi108 = phi double [ %mul_i100, %cond.false ], [ %mul_i100, %complex_mul_imag_nan102 ], [ %tmp105.imag, %complex_mul_libcall104 ]
  %30 = load i32, i32* %flip.addr, align 4
  %conv = sitofp i32 %30 to double
  %mul_ac109 = fmul double %real_mul_phi107, %conv
  %mul_bd110 = fmul double %imag_mul_phi108, 0.000000e+00
  %mul_ad111 = fmul double %real_mul_phi107, 0.000000e+00
  %mul_bc112 = fmul double %imag_mul_phi108, %conv
  %mul_r113 = fsub double %mul_ac109, %mul_bd110
  %mul_i114 = fadd double %mul_ad111, %mul_bc112
  %isnan_cmp115 = fcmp uno double %mul_r113, %mul_r113
  br i1 %isnan_cmp115, label %complex_mul_imag_nan116, label %complex_mul_cont120, !prof !5

complex_mul_imag_nan116:                          ; preds = %complex_mul_cont106
  %isnan_cmp117 = fcmp uno double %mul_i114, %mul_i114
  br i1 %isnan_cmp117, label %complex_mul_libcall118, label %complex_mul_cont120, !prof !5

complex_mul_libcall118:                           ; preds = %complex_mul_imag_nan116
  call void @__muldc3({ double, double }* sret align 8 %tmp119, double %real_mul_phi107, double %imag_mul_phi108, double %conv, double 0.000000e+00) #6
  %tmp119.realp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 0
  %tmp119.real = load double, double* %tmp119.realp, align 8
  %tmp119.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 1
  %tmp119.imag = load double, double* %tmp119.imagp, align 8
  br label %complex_mul_cont120

complex_mul_cont120:                              ; preds = %complex_mul_libcall118, %complex_mul_imag_nan116, %complex_mul_cont106
  %real_mul_phi121 = phi double [ %mul_r113, %complex_mul_cont106 ], [ %mul_r113, %complex_mul_imag_nan116 ], [ %tmp119.real, %complex_mul_libcall118 ]
  %imag_mul_phi122 = phi double [ %mul_i114, %complex_mul_cont106 ], [ %mul_i114, %complex_mul_imag_nan116 ], [ %tmp119.imag, %complex_mul_libcall118 ]
  br label %cond.end

cond.end:                                         ; preds = %complex_mul_cont120, %cond.true
  %cond.r = phi double [ %sub.r89, %cond.true ], [ %real_mul_phi121, %complex_mul_cont120 ]
  %cond.i = phi double [ %sub.i90, %cond.true ], [ %imag_mul_phi122, %complex_mul_cont120 ]
  %31 = load i32, i32* %i80, align 4
  %arrayidx123 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %31
  %arrayidx123.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 0
  %arrayidx123.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 1
  store double %cond.r, double* %arrayidx123.realp, align 16
  store double %cond.i, double* %arrayidx123.imagp, align 8
  br label %for.inc124

for.inc124:                                       ; preds = %cond.end
  %32 = load i32, i32* %i80, align 4
  %inc125 = add nsw i32 %32, 1
  store i32 %inc125, i32* %i80, align 4
  br label %for.cond81

for.end126:                                       ; preds = %for.cond81
  store i32 0, i32* %i127, align 4
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc160, %for.end126
  %33 = load i32, i32* %i127, align 4
  %cmp129 = icmp slt i32 %33, 3
  br i1 %cmp129, label %for.body131, label %for.end162

for.body131:                                      ; preds = %for.cond128
  %34 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %35 = load i32, i32* %i127, align 4
  %arrayidx132 = getelementptr inbounds %struct.circ, %struct.circ* %34, i32 %35
  %c133 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx132, i32 0, i32 0
  %c133.realp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 0
  %c133.real = load double, double* %c133.realp, align 8
  %c133.imagp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 1
  %c133.imag = load double, double* %c133.imagp, align 8
  %36 = load i32, i32* %i127, align 4
  %arrayidx134 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %36
  %arrayidx134.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 0
  %arrayidx134.real = load double, double* %arrayidx134.realp, align 16
  %arrayidx134.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 1
  %arrayidx134.imag = load double, double* %arrayidx134.imagp, align 8
  %37 = load i32, i32* %i127, align 4
  %arrayidx135 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %37
  %arrayidx135.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 0
  %arrayidx135.real = load double, double* %arrayidx135.realp, align 16
  %arrayidx135.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 1
  %arrayidx135.imag = load double, double* %arrayidx135.imagp, align 8
  %indirect-arg-temp136.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 0
  %indirect-arg-temp136.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 1
  store double %arrayidx135.real, double* %indirect-arg-temp136.realp, align 8
  store double %arrayidx135.imag, double* %indirect-arg-temp136.imagp, align 8
  %call137 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp136) #6
  %38 = fdiv double %arrayidx134.real, %call137
  %39 = fdiv double %arrayidx134.imag, %call137
  %40 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %41 = load i32, i32* %i127, align 4
  %arrayidx138 = getelementptr inbounds %struct.circ, %struct.circ* %40, i32 %41
  %r139 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx138, i32 0, i32 1
  %42 = load double, double* %r139, align 8
  %mul.rl140 = fmul double %38, %42
  %mul.il = fmul double %39, %42
  %43 = load i32, i32* %i127, align 4
  %arrayidx141 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx141, align 4
  %conv142 = sitofp i32 %44 to double
  %mul_ac143 = fmul double %mul.rl140, %conv142
  %mul_bd144 = fmul double %mul.il, 0.000000e+00
  %mul_ad145 = fmul double %mul.rl140, 0.000000e+00
  %mul_bc146 = fmul double %mul.il, %conv142
  %mul_r147 = fsub double %mul_ac143, %mul_bd144
  %mul_i148 = fadd double %mul_ad145, %mul_bc146
  %isnan_cmp149 = fcmp uno double %mul_r147, %mul_r147
  br i1 %isnan_cmp149, label %complex_mul_imag_nan150, label %complex_mul_cont154, !prof !5

complex_mul_imag_nan150:                          ; preds = %for.body131
  %isnan_cmp151 = fcmp uno double %mul_i148, %mul_i148
  br i1 %isnan_cmp151, label %complex_mul_libcall152, label %complex_mul_cont154, !prof !5

complex_mul_libcall152:                           ; preds = %complex_mul_imag_nan150
  call void @__muldc3({ double, double }* sret align 8 %tmp153, double %mul.rl140, double %mul.il, double %conv142, double 0.000000e+00) #6
  %tmp153.realp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 0
  %tmp153.real = load double, double* %tmp153.realp, align 8
  %tmp153.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 1
  %tmp153.imag = load double, double* %tmp153.imagp, align 8
  br label %complex_mul_cont154

complex_mul_cont154:                              ; preds = %complex_mul_libcall152, %complex_mul_imag_nan150, %for.body131
  %real_mul_phi155 = phi double [ %mul_r147, %for.body131 ], [ %mul_r147, %complex_mul_imag_nan150 ], [ %tmp153.real, %complex_mul_libcall152 ]
  %imag_mul_phi156 = phi double [ %mul_i148, %for.body131 ], [ %mul_i148, %complex_mul_imag_nan150 ], [ %tmp153.imag, %complex_mul_libcall152 ]
  %add.r157 = fadd double %c133.real, %real_mul_phi155
  %add.i158 = fadd double %c133.imag, %imag_mul_phi156
  %45 = load i32, i32* %i127, align 4
  %arrayidx159 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %45
  %arrayidx159.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 0
  %arrayidx159.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 1
  store double %add.r157, double* %arrayidx159.realp, align 16
  store double %add.i158, double* %arrayidx159.imagp, align 8
  br label %for.inc160

for.inc160:                                       ; preds = %complex_mul_cont154
  %46 = load i32, i32* %i127, align 4
  %inc161 = add nsw i32 %46, 1
  store i32 %inc161, i32* %i127, align 4
  br label %for.cond128

for.end162:                                       ; preds = %for.cond128
  store i32 0, i32* %i163, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc176, %for.end162
  %47 = load i32, i32* %i163, align 4
  %cmp165 = icmp slt i32 %47, 3
  br i1 %cmp165, label %for.body167, label %for.end178

for.body167:                                      ; preds = %for.cond164
  %48 = load i32, i32* %i163, align 4
  %arrayidx168 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %48
  %arrayidx168.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 0
  %arrayidx168.real = load double, double* %arrayidx168.realp, align 16
  %arrayidx168.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 1
  %arrayidx168.imag = load double, double* %arrayidx168.imagp, align 8
  %49 = load i32, i32* %i163, align 4
  %arrayidx169 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %49
  %arrayidx169.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 0
  %arrayidx169.real = load double, double* %arrayidx169.realp, align 16
  %arrayidx169.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 1
  %arrayidx169.imag = load double, double* %arrayidx169.imagp, align 8
  %sub.r170 = fsub double %arrayidx168.real, %arrayidx169.real
  %sub.i171 = fsub double %arrayidx168.imag, %arrayidx169.imag
  %indirect-arg-temp172.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 0
  %indirect-arg-temp172.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 1
  store double %sub.r170, double* %indirect-arg-temp172.realp, align 8
  store double %sub.i171, double* %indirect-arg-temp172.imagp, align 8
  %call173 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp172)
  %50 = load double, double* %diff, align 8
  %add = fadd double %50, %call173
  store double %add, double* %diff, align 8
  %51 = load i32, i32* %i163, align 4
  %arrayidx174 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %51
  %arrayidx174.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 0
  %arrayidx174.real = load double, double* %arrayidx174.realp, align 16
  %arrayidx174.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 1
  %arrayidx174.imag = load double, double* %arrayidx174.imagp, align 8
  %52 = load i32, i32* %i163, align 4
  %arrayidx175 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %52
  %arrayidx175.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 0
  %arrayidx175.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 1
  store double %arrayidx174.real, double* %arrayidx175.realp, align 16
  store double %arrayidx174.imag, double* %arrayidx175.imagp, align 8
  br label %for.inc176

for.inc176:                                       ; preds = %for.body167
  %53 = load i32, i32* %i163, align 4
  %inc177 = add nsw i32 %53, 1
  store i32 %inc177, i32* %i163, align 4
  br label %for.cond164

for.end178:                                       ; preds = %for.cond164
  %54 = load double, double* %diff, align 8
  %55 = load double, double* %diff_old, align 8
  %cmp179 = fcmp oge double %54, %55
  br i1 %cmp179, label %land.lhs.true181, label %if.end190

land.lhs.true181:                                 ; preds = %for.end178
  %56 = load double, double* %diff_old, align 8
  %cmp182 = fcmp oge double %56, 0.000000e+00
  br i1 %cmp182, label %if.then184, label %if.end190

if.then184:                                       ; preds = %land.lhs.true181
  %57 = load i32, i32* %iter, align 4
  %inc185 = add nsw i32 %57, 1
  store i32 %inc185, i32* %iter, align 4
  %cmp186 = icmp sgt i32 %57, 20
  br i1 %cmp186, label %if.then188, label %if.end189

if.then188:                                       ; preds = %if.then184
  %58 = load i32, i32* %res, align 4
  store i32 %58, i32* %retval, align 4
  br label %return

if.end189:                                        ; preds = %if.then184
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %land.lhs.true181, %for.end178
  %59 = load double, double* %diff, align 8
  store double %59, double* %diff_old, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %60 = load double, double* %axb, align 8
  %tobool192 = fcmp une double %60, 0.000000e+00
  br i1 %tobool192, label %if.then193, label %if.else

if.then193:                                       ; preds = %while.end
  %center.realp194 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real195 = load double, double* %center.realp194, align 8
  %center.imagp196 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag197 = load double, double* %center.imagp196, align 8
  %indirect-arg-temp198.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 0
  %indirect-arg-temp198.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 1
  store double %center.real195, double* %indirect-arg-temp198.realp, align 8
  store double %center.imag197, double* %indirect-arg-temp198.imagp, align 8
  %61 = bitcast { double, double }* %indirect-arg-temp198255 to i8*
  %62 = bitcast { double, double }* %indirect-arg-temp198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 16, i1 false)
  %__x.realp.i256 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 0
  %__x.real.i257 = load double, double* %__x.realp.i256, align 8
  %__x.imagp.i258 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 1
  %__x.imag.i259 = load double, double* %__x.imagp.i258, align 8
  %center.realp200 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real201 = load double, double* %center.realp200, align 8
  %center.imagp202 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag203 = load double, double* %center.imagp202, align 8
  %indirect-arg-temp204.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 0
  %indirect-arg-temp204.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 1
  store double %center.real201, double* %indirect-arg-temp204.realp, align 8
  store double %center.imag203, double* %indirect-arg-temp204.imagp, align 8
  %63 = bitcast { double, double }* %indirect-arg-temp204250 to i8*
  %64 = bitcast { double, double }* %indirect-arg-temp204 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %64, i64 16, i1 false)
  %__x.realp.i251 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 0
  %__x.real.i252 = load double, double* %__x.realp.i251, align 8
  %__x.imagp.i253 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 1
  %__x.imag.i254 = load double, double* %__x.imagp.i253, align 8
  %65 = load double, double* %r, align 8
  %call206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), double %__x.real.i257, double %__x.imag.i254, double %65)
  br label %if.end226

if.else:                                          ; preds = %while.end
  %arrayidx207 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx207.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 0
  %arrayidx207.real = load double, double* %arrayidx207.realp, align 16
  %arrayidx207.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 1
  %arrayidx207.imag = load double, double* %arrayidx207.imagp, align 8
  %indirect-arg-temp208.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 0
  %indirect-arg-temp208.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 1
  store double %arrayidx207.real, double* %indirect-arg-temp208.realp, align 8
  store double %arrayidx207.imag, double* %indirect-arg-temp208.imagp, align 8
  %66 = bitcast { double, double }* %indirect-arg-temp208245 to i8*
  %67 = bitcast { double, double }* %indirect-arg-temp208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %67, i64 16, i1 false)
  %__x.realp.i246 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 0
  %__x.real.i247 = load double, double* %__x.realp.i246, align 8
  %__x.imagp.i248 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 1
  %__x.imag.i249 = load double, double* %__x.imagp.i248, align 8
  %arrayidx210 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx210.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 0
  %arrayidx210.real = load double, double* %arrayidx210.realp, align 16
  %arrayidx210.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 1
  %arrayidx210.imag = load double, double* %arrayidx210.imagp, align 8
  %indirect-arg-temp211.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 0
  %indirect-arg-temp211.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 1
  store double %arrayidx210.real, double* %indirect-arg-temp211.realp, align 8
  store double %arrayidx210.imag, double* %indirect-arg-temp211.imagp, align 8
  %68 = bitcast { double, double }* %indirect-arg-temp211240 to i8*
  %69 = bitcast { double, double }* %indirect-arg-temp211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 16, i1 false)
  %__x.realp.i241 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 0
  %__x.real.i242 = load double, double* %__x.realp.i241, align 8
  %__x.imagp.i243 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 1
  %__x.imag.i244 = load double, double* %__x.imagp.i243, align 8
  %arrayidx213 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx213.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 0
  %arrayidx213.real = load double, double* %arrayidx213.realp, align 16
  %arrayidx213.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 1
  %arrayidx213.imag = load double, double* %arrayidx213.imagp, align 8
  %indirect-arg-temp214.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 0
  %indirect-arg-temp214.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 1
  store double %arrayidx213.real, double* %indirect-arg-temp214.realp, align 8
  store double %arrayidx213.imag, double* %indirect-arg-temp214.imagp, align 8
  %70 = bitcast { double, double }* %indirect-arg-temp214235 to i8*
  %71 = bitcast { double, double }* %indirect-arg-temp214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 16, i1 false)
  %__x.realp.i236 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 0
  %__x.real.i237 = load double, double* %__x.realp.i236, align 8
  %__x.imagp.i238 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 1
  %__x.imag.i239 = load double, double* %__x.imagp.i238, align 8
  %arrayidx216 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx216.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 0
  %arrayidx216.real = load double, double* %arrayidx216.realp, align 16
  %arrayidx216.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 1
  %arrayidx216.imag = load double, double* %arrayidx216.imagp, align 8
  %indirect-arg-temp217.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 0
  %indirect-arg-temp217.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 1
  store double %arrayidx216.real, double* %indirect-arg-temp217.realp, align 8
  store double %arrayidx216.imag, double* %indirect-arg-temp217.imagp, align 8
  %72 = bitcast { double, double }* %indirect-arg-temp217230 to i8*
  %73 = bitcast { double, double }* %indirect-arg-temp217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 16, i1 false)
  %__x.realp.i231 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 0
  %__x.real.i232 = load double, double* %__x.realp.i231, align 8
  %__x.imagp.i233 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 1
  %__x.imag.i234 = load double, double* %__x.imagp.i233, align 8
  %arrayidx219 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx219.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 0
  %arrayidx219.real = load double, double* %arrayidx219.realp, align 16
  %arrayidx219.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 1
  %arrayidx219.imag = load double, double* %arrayidx219.imagp, align 8
  %indirect-arg-temp220.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 0
  %indirect-arg-temp220.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 1
  store double %arrayidx219.real, double* %indirect-arg-temp220.realp, align 8
  store double %arrayidx219.imag, double* %indirect-arg-temp220.imagp, align 8
  %74 = bitcast { double, double }* %indirect-arg-temp220229 to i8*
  %75 = bitcast { double, double }* %indirect-arg-temp220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %arrayidx222 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx222.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 0
  %arrayidx222.real = load double, double* %arrayidx222.realp, align 16
  %arrayidx222.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 1
  %arrayidx222.imag = load double, double* %arrayidx222.imagp, align 8
  %indirect-arg-temp223.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 0
  %indirect-arg-temp223.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 1
  store double %arrayidx222.real, double* %indirect-arg-temp223.realp, align 8
  store double %arrayidx222.imag, double* %indirect-arg-temp223.imagp, align 8
  %76 = bitcast { double, double }* %indirect-arg-temp223260 to i8*
  %77 = bitcast { double, double }* %indirect-arg-temp223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 16, i1 false)
  %__x.realp.i261 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 0
  %__x.real.i262 = load double, double* %__x.realp.i261, align 8
  %__x.imagp.i263 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 1
  %__x.imag.i264 = load double, double* %__x.imagp.i263, align 8
  %call225 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i32 0, i32 0), double %__x.real.i247, double %__x.imag.i244, double %__x.real.i237, double %__x.imag.i234, double %__x.real.i, double %__x.imag.i264)
  br label %if.end226

if.end226:                                        ; preds = %if.else, %if.then193
  %78 = load i32, i32* %res, align 4
  %add227 = add nsw i32 %78, 1
  store i32 %add227, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end226, %if.then188, %if.then76
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius(%struct.circ* %aa) #0 {
entry:
  %aa.addr = alloca %struct.circ*, align 4
  %s = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %and = and i32 %1, 1
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  store i32 %and, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %and1 = and i32 %2, 2
  %arrayidx2 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  store i32 %and1, i32* %arrayidx2, align 4
  %3 = load i32, i32* %i, align 4
  %and3 = and i32 %3, 4
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  store i32 %and3, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %4 = load i32, i32* %arrayidx5, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.circ, %struct.circ* %5, i32 0
  %r = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx6, i32 0, i32 1
  %6 = load double, double* %r, align 8
  %tobool7 = fcmp une double %6, 0.000000e+00
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  %7 = load i32, i32* %arrayidx8, align 4
  %tobool9 = icmp ne i32 %7, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end15

land.lhs.true10:                                  ; preds = %if.end
  %8 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx11 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 1
  %r12 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx11, i32 0, i32 1
  %9 = load double, double* %r12, align 8
  %tobool13 = fcmp une double %9, 0.000000e+00
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %land.lhs.true10
  br label %for.inc

if.end15:                                         ; preds = %land.lhs.true10, %if.end
  %arrayidx16 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  %10 = load i32, i32* %arrayidx16, align 4
  %tobool17 = icmp ne i32 %10, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end23

land.lhs.true18:                                  ; preds = %if.end15
  %11 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx19 = getelementptr inbounds %struct.circ, %struct.circ* %11, i32 2
  %r20 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx19, i32 0, i32 1
  %12 = load double, double* %r20, align 8
  %tobool21 = fcmp une double %12, 0.000000e+00
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %land.lhs.true18
  br label %for.inc

if.end23:                                         ; preds = %land.lhs.true18, %if.end15
  %13 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %call = call i32 @apollonius_in(%struct.circ* %13, i32* %arraydecay, i32 1, i32 0)
  %14 = load i32, i32* %sum, align 4
  %add = add nsw i32 %14, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end23, %if.then22, %if.then14, %if.then
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %sum, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %a = alloca [3 x %struct.circ], align 16
  %b = alloca [3 x %struct.circ], align 16
  %c = alloca [3 x %struct.circ], align 16
  %0 = bitcast [3 x %struct.circ]* %a to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 72, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.circ]*
  %2 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.circ, %struct.circ* %2, i32 0, i32 1
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 1
  %5 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 0
  store double 4.000000e+00, double* %6, align 8
  %7 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 1
  store double 1.000000e+00, double* %7, align 8
  %8 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 2
  %9 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 0
  %10 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 0
  store double 2.000000e+00, double* %10, align 16
  %11 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 1
  store double 4.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 1
  store double 1.000000e+00, double* %12, align 16
  %13 = bitcast [3 x %struct.circ]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %13, i8 0, i32 72, i1 false)
  %14 = bitcast i8* %13 to [3 x %struct.circ]*
  %15 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 0
  %16 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, double }, { double, double }* %16, i32 0, i32 0
  store double -3.000000e+00, double* %17, align 16
  %18 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 1
  store double 2.000000e+00, double* %18, align 16
  %19 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 1
  %20 = getelementptr inbounds %struct.circ, %struct.circ* %19, i32 0, i32 1
  store double 1.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 2
  %22 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, double }, { double, double }* %22, i32 0, i32 0
  store double 3.000000e+00, double* %23, align 16
  %24 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 1
  store double 2.000000e+00, double* %24, align 16
  %25 = bitcast [3 x %struct.circ]* %c to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %25, i8 0, i32 72, i1 false)
  %26 = bitcast i8* %25 to [3 x %struct.circ]*
  %27 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 0
  %29 = getelementptr inbounds { double, double }, { double, double }* %28, i32 0, i32 0
  store double -2.000000e+00, double* %29, align 16
  %30 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 1
  store double 1.000000e+00, double* %30, align 16
  %31 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 1
  %32 = getelementptr inbounds %struct.circ, %struct.circ* %31, i32 0, i32 1
  store double 1.000000e+00, double* %32, align 8
  %33 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 2
  %34 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, double }, { double, double }* %34, i32 0, i32 1
  store double 2.000000e+00, double* %35, align 8
  %36 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 1
  store double 1.000000e+00, double* %36, align 16
  %call = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %a, i32 0, i32 0
  %call1 = call i32 @apollonius(%struct.circ* %arraydecay)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %arraydecay3 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %b, i32 0, i32 0
  %call4 = call i32 @apollonius(%struct.circ* %arraydecay3)
  %call5 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay6 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %c, i32 0, i32 0
  %call7 = call i32 @apollonius(%struct.circ* %arraydecay6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @puts(i8* %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i64 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL9__tg_conjCd: %agg.result"}
!4 = distinct !{!4, !"_ZL9__tg_conjCd"}
!5 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %isnan_cmp = fcmp uno double %mul_r, %mul_r
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp5 = fcmp uno double %mul_i, %mul_i
; Looking for a replacement for:
%0:i1 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for abs2()

; entering Souper's runOnFunction() for apollonius_in()

; ModuleID = './Problem_of_Apollonius.c.bc'
source_filename = "./Problem_of_Apollonius.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.circ = type { { double, double }, double }

@.str = private unnamed_addr constant [31 x i8] c"Given conditions confused me.\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"found: \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"circle (%6.3f,%6.3f), r = %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"line (%6.3f,%6.3f) (%6.3f,%6.3f) (%6.3f,%6.3f)\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"set 1\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"set 2\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"set 3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @cross({ double, double }* byval({ double, double }) align 8 %a, { double, double }* byval({ double, double }) align 8 %b) #0 {
entry:
  %indirect-arg-temp127 = alloca { double, double }, align 8
  %indirect-arg-temp722 = alloca { double, double }, align 8
  %indirect-arg-temp1317 = alloca { double, double }, align 8
  %indirect-arg-temp16 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp1 = alloca { double, double }, align 8
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %indirect-arg-temp13 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp16 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp, align 8
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp, align 8
  %indirect-arg-temp1.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 0
  %indirect-arg-temp1.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp1.realp, align 8
  store double %b.imag, double* %indirect-arg-temp1.imagp, align 8
  %2 = bitcast { double, double }* %indirect-arg-temp127 to i8*
  %3 = bitcast { double, double }* %indirect-arg-temp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 16, i1 false)
  %__x.realp.i28 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 0
  %__x.real.i29 = load double, double* %__x.realp.i28, align 8
  %__x.imagp.i30 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 1
  %__x.imag.i31 = load double, double* %__x.imagp.i30, align 8
  %mul = fmul double %__x.real.i, %__x.imag.i31
  %a.realp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real4 = load double, double* %a.realp3, align 8
  %a.imagp5 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag6 = load double, double* %a.imagp5, align 8
  %indirect-arg-temp7.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %indirect-arg-temp7.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  store double %a.real4, double* %indirect-arg-temp7.realp, align 8
  store double %a.imag6, double* %indirect-arg-temp7.imagp, align 8
  %4 = bitcast { double, double }* %indirect-arg-temp722 to i8*
  %5 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 16, i1 false)
  %__x.realp.i23 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 0
  %__x.real.i24 = load double, double* %__x.realp.i23, align 8
  %__x.imagp.i25 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 1
  %__x.imag.i26 = load double, double* %__x.imagp.i25, align 8
  %b.realp9 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real10 = load double, double* %b.realp9, align 8
  %b.imagp11 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag12 = load double, double* %b.imagp11, align 8
  %indirect-arg-temp13.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 0
  %indirect-arg-temp13.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 1
  store double %b.real10, double* %indirect-arg-temp13.realp, align 8
  store double %b.imag12, double* %indirect-arg-temp13.imagp, align 8
  %6 = bitcast { double, double }* %indirect-arg-temp1317 to i8*
  %7 = bitcast { double, double }* %indirect-arg-temp13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 16, i1 false)
  %__x.realp.i18 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 0
  %__x.real.i19 = load double, double* %__x.realp.i18, align 8
  %__x.imagp.i20 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 1
  %__x.imag.i21 = load double, double* %__x.imagp.i20, align 8
  %mul15 = fmul double %__x.imag.i26, %__x.real.i19
  %sub = fsub double %mul, %mul15
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden double @abs2({ double, double }* byval({ double, double }) align 8 %a) #0 {
entry:
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %a.realp1 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real2 = load double, double* %a.realp1, align 8
  %a.imagp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag4 = load double, double* %a.imagp3, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real2, double* %indirect-arg-temp.realp, align 8
  store double %a.imag4, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8, !noalias !2
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8, !noalias !2
  %neg.i = fneg double %__x.imag.i
  %agg.result.realp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %__x.real.i, double* %agg.result.realp.i, align 8, !alias.scope !2
  store double %neg.i, double* %agg.result.imagp.i, align 8, !alias.scope !2
  %agg.result.realp1.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.real.i = load double, double* %agg.result.realp1.i, align 8, !alias.scope !2
  %agg.result.imagp2.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %agg.result.imag.i = load double, double* %agg.result.imagp2.i, align 8, !alias.scope !2
  %agg.result.realp3.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp4.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %agg.result.real.i, double* %agg.result.realp3.i, align 8, !alias.scope !2
  store double %agg.result.imag.i, double* %agg.result.imagp4.i, align 8, !alias.scope !2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %mul_ac = fmul double %a.real, %tmp.real
  %mul_bd = fmul double %a.imag, %tmp.imag
  %mul_ad = fmul double %a.real, %tmp.imag
  %mul_bc = fmul double %a.imag, %tmp.real
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %entry
  %isnan_cmp5 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp5, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp6, double %a.real, double %a.imag, double %tmp.real, double %tmp.imag) #6
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %entry
  %real_mul_phi = phi double [ %mul_r, %entry ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp6.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %entry ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp6.imag, %complex_mul_libcall ]
  ret double %real_mul_phi
}

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius_in(%struct.circ* %aa, i32* %ss, i32 %flip, i32 %divert) #0 {
entry:
  %indirect-arg-temp223260 = alloca { double, double }, align 8
  %indirect-arg-temp198255 = alloca { double, double }, align 8
  %indirect-arg-temp204250 = alloca { double, double }, align 8
  %indirect-arg-temp208245 = alloca { double, double }, align 8
  %indirect-arg-temp211240 = alloca { double, double }, align 8
  %indirect-arg-temp214235 = alloca { double, double }, align 8
  %indirect-arg-temp217230 = alloca { double, double }, align 8
  %indirect-arg-temp220229 = alloca { double, double }, align 8
  %__x.addr.i228 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %aa.addr = alloca %struct.circ*, align 4
  %ss.addr = alloca i32*, align 4
  %flip.addr = alloca i32, align 4
  %divert.addr = alloca i32, align 4
  %n = alloca [3 x { double, double }], align 16
  %x = alloca [3 x { double, double }], align 16
  %t = alloca [3 x { double, double }], align 16
  %a = alloca { double, double }, align 8
  %b = alloca { double, double }, align 8
  %center = alloca { double, double }, align 8
  %s = alloca [3 x i32], align 4
  %iter = alloca i32, align 4
  %res = alloca i32, align 4
  %diff = alloca double, align 8
  %diff_old = alloca double, align 8
  %axb = alloca double, align 8
  %d = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp15 = alloca { double, double }, align 8
  %indirect-arg-temp20 = alloca { double, double }, align 8
  %indirect-arg-temp26 = alloca { double, double }, align 8
  %indirect-arg-temp38 = alloca { double, double }, align 8
  %indirect-arg-temp48 = alloca { double, double }, align 8
  %indirect-arg-temp58 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %i80 = alloca i32, align 4
  %tmp105 = alloca { double, double }, align 8
  %tmp119 = alloca { double, double }, align 8
  %i127 = alloca i32, align 4
  %indirect-arg-temp136 = alloca { double, double }, align 8
  %tmp153 = alloca { double, double }, align 8
  %i163 = alloca i32, align 4
  %indirect-arg-temp172 = alloca { double, double }, align 8
  %indirect-arg-temp198 = alloca { double, double }, align 8
  %indirect-arg-temp204 = alloca { double, double }, align 8
  %indirect-arg-temp208 = alloca { double, double }, align 8
  %indirect-arg-temp211 = alloca { double, double }, align 8
  %indirect-arg-temp214 = alloca { double, double }, align 8
  %indirect-arg-temp217 = alloca { double, double }, align 8
  %indirect-arg-temp220 = alloca { double, double }, align 8
  %indirect-arg-temp223 = alloca { double, double }, align 8
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32* %ss, i32** %ss.addr, align 4
  store i32 %flip, i32* %flip.addr, align 4
  store i32 %divert, i32* %divert.addr, align 4
  store i32 0, i32* %iter, align 4
  store i32 0, i32* %res, align 4
  store double 1.000000e+00, double* %diff, align 8
  store double -1.000000e+00, double* %diff_old, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %ss.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %3, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 -1
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %5
  store i32 %cond, i32* %arrayidx1, align 4
  %6 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.circ, %struct.circ* %6, i32 %7
  %c = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx2, i32 0, i32 0
  %c.realp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 0
  %c.real = load double, double* %c.realp, align 8
  %c.imagp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 1
  %c.imag = load double, double* %c.imagp, align 8
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %8
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %c.real, double* %arrayidx3.realp, align 16
  store double %c.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end190, %for.end
  %10 = load double, double* %diff, align 8
  %cmp4 = fcmp ogt double %10, 0x3BC79CA10C924223
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arrayidx5 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx5.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 0
  %arrayidx5.real = load double, double* %arrayidx5.realp, align 16
  %arrayidx5.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 1
  %arrayidx5.imag = load double, double* %arrayidx5.imagp, align 8
  %arrayidx6 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx6.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 0
  %arrayidx6.real = load double, double* %arrayidx6.realp, align 16
  %arrayidx6.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 1
  %arrayidx6.imag = load double, double* %arrayidx6.imagp, align 8
  %sub.r = fsub double %arrayidx5.real, %arrayidx6.real
  %sub.i = fsub double %arrayidx5.imag, %arrayidx6.imag
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  store double %sub.r, double* %a.realp, align 8
  store double %sub.i, double* %a.imagp, align 8
  %arrayidx7 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx7.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 0
  %arrayidx7.real = load double, double* %arrayidx7.realp, align 16
  %arrayidx7.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 1
  %arrayidx7.imag = load double, double* %arrayidx7.imagp, align 8
  %arrayidx8 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %sub.r9 = fsub double %arrayidx7.real, %arrayidx8.real
  %sub.i10 = fsub double %arrayidx7.imag, %arrayidx8.imag
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  store double %sub.r9, double* %b.realp, align 8
  store double %sub.i10, double* %b.imagp, align 8
  store double 0.000000e+00, double* %diff, align 8
  %a.realp11 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp11, align 8
  %a.imagp12 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp12, align 8
  %b.realp13 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp13, align 8
  %b.imagp14 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp14, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %indirect-arg-temp15.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 0
  %indirect-arg-temp15.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp15.realp, align 8
  store double %b.imag, double* %indirect-arg-temp15.imagp, align 8
  %call = call double @cross({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp15)
  %fneg = fneg double %call
  store double %fneg, double* %axb, align 8
  %a.realp16 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real17 = load double, double* %a.realp16, align 8
  %a.imagp18 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag19 = load double, double* %a.imagp18, align 8
  %indirect-arg-temp20.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 0
  %indirect-arg-temp20.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 1
  store double %a.real17, double* %indirect-arg-temp20.realp, align 8
  store double %a.imag19, double* %indirect-arg-temp20.imagp, align 8
  %call21 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp20)
  %b.realp22 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real23 = load double, double* %b.realp22, align 8
  %b.imagp24 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag25 = load double, double* %b.imagp24, align 8
  %indirect-arg-temp26.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 0
  %indirect-arg-temp26.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 1
  store double %b.real23, double* %indirect-arg-temp26.realp, align 8
  store double %b.imag25, double* %indirect-arg-temp26.imagp, align 8
  %call27 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp26)
  %mul = fmul double %call21, %call27
  %a.realp28 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real29 = load double, double* %a.realp28, align 8
  %a.imagp30 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag31 = load double, double* %a.imagp30, align 8
  %b.realp32 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real33 = load double, double* %b.realp32, align 8
  %b.imagp34 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag35 = load double, double* %b.imagp34, align 8
  %sub.r36 = fsub double %a.real29, %b.real33
  %sub.i37 = fsub double %a.imag31, %b.imag35
  %indirect-arg-temp38.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 0
  %indirect-arg-temp38.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 1
  store double %sub.r36, double* %indirect-arg-temp38.realp, align 8
  store double %sub.i37, double* %indirect-arg-temp38.imagp, align 8
  %call39 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp38)
  %mul40 = fmul double %mul, %call39
  store double %mul40, double* %__x.addr.i, align 8
  %11 = load double, double* %__x.addr.i, align 8
  %12 = call double @llvm.sqrt.f64(double %11) #6
  store double %12, double* %d, align 8
  %13 = load double, double* %d, align 8
  %14 = load double, double* %axb, align 8
  %mul42 = fmul double 2.000000e+00, %14
  %div = fdiv double %13, %mul42
  store double %div, double* %__x.addr.i228, align 8
  %15 = load double, double* %__x.addr.i228, align 8
  %16 = call double @llvm.fabs.f64(double %15) #6
  store double %16, double* %r, align 8
  %a.realp44 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real45 = load double, double* %a.realp44, align 8
  %a.imagp46 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag47 = load double, double* %a.imagp46, align 8
  %indirect-arg-temp48.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 0
  %indirect-arg-temp48.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 1
  store double %a.real45, double* %indirect-arg-temp48.realp, align 8
  store double %a.imag47, double* %indirect-arg-temp48.imagp, align 8
  %call49 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp48)
  %b.realp50 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real51 = load double, double* %b.realp50, align 8
  %b.imagp52 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag53 = load double, double* %b.imagp52, align 8
  %mul.rl = fmul double %call49, %b.real51
  %mul.ir = fmul double %call49, %b.imag53
  %b.realp54 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real55 = load double, double* %b.realp54, align 8
  %b.imagp56 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag57 = load double, double* %b.imagp56, align 8
  %indirect-arg-temp58.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 0
  %indirect-arg-temp58.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 1
  store double %b.real55, double* %indirect-arg-temp58.realp, align 8
  store double %b.imag57, double* %indirect-arg-temp58.imagp, align 8
  %call59 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp58)
  %a.realp60 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real61 = load double, double* %a.realp60, align 8
  %a.imagp62 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag63 = load double, double* %a.imagp62, align 8
  %mul.rl64 = fmul double %call59, %a.real61
  %mul.ir65 = fmul double %call59, %a.imag63
  %sub.r66 = fsub double %mul.rl, %mul.rl64
  %sub.i67 = fsub double %mul.ir, %mul.ir65
  %17 = load double, double* %axb, align 8
  %mul68 = fmul double 2.000000e+00, %17
  %18 = fdiv double %sub.r66, %mul68
  %19 = fdiv double %sub.i67, %mul68
  %mul_ac = fmul double %18, 0.000000e+00
  %mul_bd = fmul double %19, 1.000000e+00
  %mul_ad = fmul double %18, 1.000000e+00
  %mul_bc = fmul double %19, 0.000000e+00
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %while.body
  %isnan_cmp69 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp69, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %18, double %19, double 0.000000e+00, double 1.000000e+00) #6
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %while.body
  %real_mul_phi = phi double [ %mul_r, %while.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %while.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %arrayidx70 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx70.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 0
  %arrayidx70.real = load double, double* %arrayidx70.realp, align 16
  %arrayidx70.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 1
  %arrayidx70.imag = load double, double* %arrayidx70.imagp, align 8
  %add.r = fadd double %real_mul_phi, %arrayidx70.real
  %add.i = fadd double %imag_mul_phi, %arrayidx70.imag
  %center.realp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.imagp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  store double %add.r, double* %center.realp, align 8
  store double %add.i, double* %center.imagp, align 8
  %20 = load double, double* %axb, align 8
  %tobool71 = fcmp une double %20, 0.000000e+00
  br i1 %tobool71, label %if.end79, label %land.lhs.true

land.lhs.true:                                    ; preds = %complex_mul_cont
  %21 = load i32, i32* %flip.addr, align 4
  %cmp72 = icmp ne i32 %21, -1
  br i1 %cmp72, label %land.lhs.true73, label %if.end79

land.lhs.true73:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %divert.addr, align 4
  %tobool74 = icmp ne i32 %22, 0
  br i1 %tobool74, label %if.end79, label %if.then

if.then:                                          ; preds = %land.lhs.true73
  %23 = load double, double* %d, align 8
  %tobool75 = fcmp une double %23, 0.000000e+00
  br i1 %tobool75, label %if.end, label %if.then76

if.then76:                                        ; preds = %if.then
  %call77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 1, i32* %divert.addr, align 4
  %24 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %25 = load i32*, i32** %ss.addr, align 4
  %call78 = call i32 @apollonius_in(%struct.circ* %24, i32* %25, i32 -1, i32 1)
  store i32 %call78, i32* %res, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.end, %land.lhs.true73, %land.lhs.true, %complex_mul_cont
  store i32 0, i32* %i80, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc124, %if.end79
  %26 = load i32, i32* %i80, align 4
  %cmp82 = icmp slt i32 %26, 3
  br i1 %cmp82, label %for.body83, label %for.end126

for.body83:                                       ; preds = %for.cond81
  %27 = load double, double* %axb, align 8
  %tobool84 = fcmp une double %27, 0.000000e+00
  br i1 %tobool84, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body83
  %28 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %29 = load i32, i32* %i80, align 4
  %arrayidx85 = getelementptr inbounds %struct.circ, %struct.circ* %28, i32 %29
  %c86 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx85, i32 0, i32 0
  %c86.realp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 0
  %c86.real = load double, double* %c86.realp, align 8
  %c86.imagp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 1
  %c86.imag = load double, double* %c86.imagp, align 8
  %center.realp87 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real = load double, double* %center.realp87, align 8
  %center.imagp88 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag = load double, double* %center.imagp88, align 8
  %sub.r89 = fsub double %c86.real, %center.real
  %sub.i90 = fsub double %c86.imag, %center.imag
  br label %cond.end

cond.false:                                       ; preds = %for.body83
  %a.realp91 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real92 = load double, double* %a.realp91, align 8
  %a.imagp93 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag94 = load double, double* %a.imagp93, align 8
  %mul_ac95 = fmul double %a.real92, 0.000000e+00
  %mul_bd96 = fmul double %a.imag94, 1.000000e+00
  %mul_ad97 = fmul double %a.real92, 1.000000e+00
  %mul_bc98 = fmul double %a.imag94, 0.000000e+00
  %mul_r99 = fsub double %mul_ac95, %mul_bd96
  %mul_i100 = fadd double %mul_ad97, %mul_bc98
  %isnan_cmp101 = fcmp uno double %mul_r99, %mul_r99
  br i1 %isnan_cmp101, label %complex_mul_imag_nan102, label %complex_mul_cont106, !prof !5

complex_mul_imag_nan102:                          ; preds = %cond.false
  %isnan_cmp103 = fcmp uno double %mul_i100, %mul_i100
  br i1 %isnan_cmp103, label %complex_mul_libcall104, label %complex_mul_cont106, !prof !5

complex_mul_libcall104:                           ; preds = %complex_mul_imag_nan102
  call void @__muldc3({ double, double }* sret align 8 %tmp105, double %a.real92, double %a.imag94, double 0.000000e+00, double 1.000000e+00) #6
  %tmp105.realp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 0
  %tmp105.real = load double, double* %tmp105.realp, align 8
  %tmp105.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 1
  %tmp105.imag = load double, double* %tmp105.imagp, align 8
  br label %complex_mul_cont106

complex_mul_cont106:                              ; preds = %complex_mul_libcall104, %complex_mul_imag_nan102, %cond.false
  %real_mul_phi107 = phi double [ %mul_r99, %cond.false ], [ %mul_r99, %complex_mul_imag_nan102 ], [ %tmp105.real, %complex_mul_libcall104 ]
  %imag_mul_phi108 = phi double [ %mul_i100, %cond.false ], [ %mul_i100, %complex_mul_imag_nan102 ], [ %tmp105.imag, %complex_mul_libcall104 ]
  %30 = load i32, i32* %flip.addr, align 4
  %conv = sitofp i32 %30 to double
  %mul_ac109 = fmul double %real_mul_phi107, %conv
  %mul_bd110 = fmul double %imag_mul_phi108, 0.000000e+00
  %mul_ad111 = fmul double %real_mul_phi107, 0.000000e+00
  %mul_bc112 = fmul double %imag_mul_phi108, %conv
  %mul_r113 = fsub double %mul_ac109, %mul_bd110
  %mul_i114 = fadd double %mul_ad111, %mul_bc112
  %isnan_cmp115 = fcmp uno double %mul_r113, %mul_r113
  br i1 %isnan_cmp115, label %complex_mul_imag_nan116, label %complex_mul_cont120, !prof !5

complex_mul_imag_nan116:                          ; preds = %complex_mul_cont106
  %isnan_cmp117 = fcmp uno double %mul_i114, %mul_i114
  br i1 %isnan_cmp117, label %complex_mul_libcall118, label %complex_mul_cont120, !prof !5

complex_mul_libcall118:                           ; preds = %complex_mul_imag_nan116
  call void @__muldc3({ double, double }* sret align 8 %tmp119, double %real_mul_phi107, double %imag_mul_phi108, double %conv, double 0.000000e+00) #6
  %tmp119.realp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 0
  %tmp119.real = load double, double* %tmp119.realp, align 8
  %tmp119.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 1
  %tmp119.imag = load double, double* %tmp119.imagp, align 8
  br label %complex_mul_cont120

complex_mul_cont120:                              ; preds = %complex_mul_libcall118, %complex_mul_imag_nan116, %complex_mul_cont106
  %real_mul_phi121 = phi double [ %mul_r113, %complex_mul_cont106 ], [ %mul_r113, %complex_mul_imag_nan116 ], [ %tmp119.real, %complex_mul_libcall118 ]
  %imag_mul_phi122 = phi double [ %mul_i114, %complex_mul_cont106 ], [ %mul_i114, %complex_mul_imag_nan116 ], [ %tmp119.imag, %complex_mul_libcall118 ]
  br label %cond.end

cond.end:                                         ; preds = %complex_mul_cont120, %cond.true
  %cond.r = phi double [ %sub.r89, %cond.true ], [ %real_mul_phi121, %complex_mul_cont120 ]
  %cond.i = phi double [ %sub.i90, %cond.true ], [ %imag_mul_phi122, %complex_mul_cont120 ]
  %31 = load i32, i32* %i80, align 4
  %arrayidx123 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %31
  %arrayidx123.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 0
  %arrayidx123.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 1
  store double %cond.r, double* %arrayidx123.realp, align 16
  store double %cond.i, double* %arrayidx123.imagp, align 8
  br label %for.inc124

for.inc124:                                       ; preds = %cond.end
  %32 = load i32, i32* %i80, align 4
  %inc125 = add nsw i32 %32, 1
  store i32 %inc125, i32* %i80, align 4
  br label %for.cond81

for.end126:                                       ; preds = %for.cond81
  store i32 0, i32* %i127, align 4
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc160, %for.end126
  %33 = load i32, i32* %i127, align 4
  %cmp129 = icmp slt i32 %33, 3
  br i1 %cmp129, label %for.body131, label %for.end162

for.body131:                                      ; preds = %for.cond128
  %34 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %35 = load i32, i32* %i127, align 4
  %arrayidx132 = getelementptr inbounds %struct.circ, %struct.circ* %34, i32 %35
  %c133 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx132, i32 0, i32 0
  %c133.realp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 0
  %c133.real = load double, double* %c133.realp, align 8
  %c133.imagp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 1
  %c133.imag = load double, double* %c133.imagp, align 8
  %36 = load i32, i32* %i127, align 4
  %arrayidx134 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %36
  %arrayidx134.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 0
  %arrayidx134.real = load double, double* %arrayidx134.realp, align 16
  %arrayidx134.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 1
  %arrayidx134.imag = load double, double* %arrayidx134.imagp, align 8
  %37 = load i32, i32* %i127, align 4
  %arrayidx135 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %37
  %arrayidx135.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 0
  %arrayidx135.real = load double, double* %arrayidx135.realp, align 16
  %arrayidx135.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 1
  %arrayidx135.imag = load double, double* %arrayidx135.imagp, align 8
  %indirect-arg-temp136.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 0
  %indirect-arg-temp136.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 1
  store double %arrayidx135.real, double* %indirect-arg-temp136.realp, align 8
  store double %arrayidx135.imag, double* %indirect-arg-temp136.imagp, align 8
  %call137 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp136) #6
  %38 = fdiv double %arrayidx134.real, %call137
  %39 = fdiv double %arrayidx134.imag, %call137
  %40 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %41 = load i32, i32* %i127, align 4
  %arrayidx138 = getelementptr inbounds %struct.circ, %struct.circ* %40, i32 %41
  %r139 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx138, i32 0, i32 1
  %42 = load double, double* %r139, align 8
  %mul.rl140 = fmul double %38, %42
  %mul.il = fmul double %39, %42
  %43 = load i32, i32* %i127, align 4
  %arrayidx141 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx141, align 4
  %conv142 = sitofp i32 %44 to double
  %mul_ac143 = fmul double %mul.rl140, %conv142
  %mul_bd144 = fmul double %mul.il, 0.000000e+00
  %mul_ad145 = fmul double %mul.rl140, 0.000000e+00
  %mul_bc146 = fmul double %mul.il, %conv142
  %mul_r147 = fsub double %mul_ac143, %mul_bd144
  %mul_i148 = fadd double %mul_ad145, %mul_bc146
  %isnan_cmp149 = fcmp uno double %mul_r147, %mul_r147
  br i1 %isnan_cmp149, label %complex_mul_imag_nan150, label %complex_mul_cont154, !prof !5

complex_mul_imag_nan150:                          ; preds = %for.body131
  %isnan_cmp151 = fcmp uno double %mul_i148, %mul_i148
  br i1 %isnan_cmp151, label %complex_mul_libcall152, label %complex_mul_cont154, !prof !5

complex_mul_libcall152:                           ; preds = %complex_mul_imag_nan150
  call void @__muldc3({ double, double }* sret align 8 %tmp153, double %mul.rl140, double %mul.il, double %conv142, double 0.000000e+00) #6
  %tmp153.realp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 0
  %tmp153.real = load double, double* %tmp153.realp, align 8
  %tmp153.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 1
  %tmp153.imag = load double, double* %tmp153.imagp, align 8
  br label %complex_mul_cont154

complex_mul_cont154:                              ; preds = %complex_mul_libcall152, %complex_mul_imag_nan150, %for.body131
  %real_mul_phi155 = phi double [ %mul_r147, %for.body131 ], [ %mul_r147, %complex_mul_imag_nan150 ], [ %tmp153.real, %complex_mul_libcall152 ]
  %imag_mul_phi156 = phi double [ %mul_i148, %for.body131 ], [ %mul_i148, %complex_mul_imag_nan150 ], [ %tmp153.imag, %complex_mul_libcall152 ]
  %add.r157 = fadd double %c133.real, %real_mul_phi155
  %add.i158 = fadd double %c133.imag, %imag_mul_phi156
  %45 = load i32, i32* %i127, align 4
  %arrayidx159 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %45
  %arrayidx159.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 0
  %arrayidx159.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 1
  store double %add.r157, double* %arrayidx159.realp, align 16
  store double %add.i158, double* %arrayidx159.imagp, align 8
  br label %for.inc160

for.inc160:                                       ; preds = %complex_mul_cont154
  %46 = load i32, i32* %i127, align 4
  %inc161 = add nsw i32 %46, 1
  store i32 %inc161, i32* %i127, align 4
  br label %for.cond128

for.end162:                                       ; preds = %for.cond128
  store i32 0, i32* %i163, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc176, %for.end162
  %47 = load i32, i32* %i163, align 4
  %cmp165 = icmp slt i32 %47, 3
  br i1 %cmp165, label %for.body167, label %for.end178

for.body167:                                      ; preds = %for.cond164
  %48 = load i32, i32* %i163, align 4
  %arrayidx168 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %48
  %arrayidx168.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 0
  %arrayidx168.real = load double, double* %arrayidx168.realp, align 16
  %arrayidx168.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 1
  %arrayidx168.imag = load double, double* %arrayidx168.imagp, align 8
  %49 = load i32, i32* %i163, align 4
  %arrayidx169 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %49
  %arrayidx169.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 0
  %arrayidx169.real = load double, double* %arrayidx169.realp, align 16
  %arrayidx169.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 1
  %arrayidx169.imag = load double, double* %arrayidx169.imagp, align 8
  %sub.r170 = fsub double %arrayidx168.real, %arrayidx169.real
  %sub.i171 = fsub double %arrayidx168.imag, %arrayidx169.imag
  %indirect-arg-temp172.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 0
  %indirect-arg-temp172.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 1
  store double %sub.r170, double* %indirect-arg-temp172.realp, align 8
  store double %sub.i171, double* %indirect-arg-temp172.imagp, align 8
  %call173 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp172)
  %50 = load double, double* %diff, align 8
  %add = fadd double %50, %call173
  store double %add, double* %diff, align 8
  %51 = load i32, i32* %i163, align 4
  %arrayidx174 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %51
  %arrayidx174.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 0
  %arrayidx174.real = load double, double* %arrayidx174.realp, align 16
  %arrayidx174.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 1
  %arrayidx174.imag = load double, double* %arrayidx174.imagp, align 8
  %52 = load i32, i32* %i163, align 4
  %arrayidx175 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %52
  %arrayidx175.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 0
  %arrayidx175.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 1
  store double %arrayidx174.real, double* %arrayidx175.realp, align 16
  store double %arrayidx174.imag, double* %arrayidx175.imagp, align 8
  br label %for.inc176

for.inc176:                                       ; preds = %for.body167
  %53 = load i32, i32* %i163, align 4
  %inc177 = add nsw i32 %53, 1
  store i32 %inc177, i32* %i163, align 4
  br label %for.cond164

for.end178:                                       ; preds = %for.cond164
  %54 = load double, double* %diff, align 8
  %55 = load double, double* %diff_old, align 8
  %cmp179 = fcmp oge double %54, %55
  br i1 %cmp179, label %land.lhs.true181, label %if.end190

land.lhs.true181:                                 ; preds = %for.end178
  %56 = load double, double* %diff_old, align 8
  %cmp182 = fcmp oge double %56, 0.000000e+00
  br i1 %cmp182, label %if.then184, label %if.end190

if.then184:                                       ; preds = %land.lhs.true181
  %57 = load i32, i32* %iter, align 4
  %inc185 = add nsw i32 %57, 1
  store i32 %inc185, i32* %iter, align 4
  %cmp186 = icmp sgt i32 %57, 20
  br i1 %cmp186, label %if.then188, label %if.end189

if.then188:                                       ; preds = %if.then184
  %58 = load i32, i32* %res, align 4
  store i32 %58, i32* %retval, align 4
  br label %return

if.end189:                                        ; preds = %if.then184
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %land.lhs.true181, %for.end178
  %59 = load double, double* %diff, align 8
  store double %59, double* %diff_old, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %60 = load double, double* %axb, align 8
  %tobool192 = fcmp une double %60, 0.000000e+00
  br i1 %tobool192, label %if.then193, label %if.else

if.then193:                                       ; preds = %while.end
  %center.realp194 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real195 = load double, double* %center.realp194, align 8
  %center.imagp196 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag197 = load double, double* %center.imagp196, align 8
  %indirect-arg-temp198.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 0
  %indirect-arg-temp198.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 1
  store double %center.real195, double* %indirect-arg-temp198.realp, align 8
  store double %center.imag197, double* %indirect-arg-temp198.imagp, align 8
  %61 = bitcast { double, double }* %indirect-arg-temp198255 to i8*
  %62 = bitcast { double, double }* %indirect-arg-temp198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 16, i1 false)
  %__x.realp.i256 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 0
  %__x.real.i257 = load double, double* %__x.realp.i256, align 8
  %__x.imagp.i258 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 1
  %__x.imag.i259 = load double, double* %__x.imagp.i258, align 8
  %center.realp200 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real201 = load double, double* %center.realp200, align 8
  %center.imagp202 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag203 = load double, double* %center.imagp202, align 8
  %indirect-arg-temp204.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 0
  %indirect-arg-temp204.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 1
  store double %center.real201, double* %indirect-arg-temp204.realp, align 8
  store double %center.imag203, double* %indirect-arg-temp204.imagp, align 8
  %63 = bitcast { double, double }* %indirect-arg-temp204250 to i8*
  %64 = bitcast { double, double }* %indirect-arg-temp204 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %64, i64 16, i1 false)
  %__x.realp.i251 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 0
  %__x.real.i252 = load double, double* %__x.realp.i251, align 8
  %__x.imagp.i253 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 1
  %__x.imag.i254 = load double, double* %__x.imagp.i253, align 8
  %65 = load double, double* %r, align 8
  %call206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), double %__x.real.i257, double %__x.imag.i254, double %65)
  br label %if.end226

if.else:                                          ; preds = %while.end
  %arrayidx207 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx207.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 0
  %arrayidx207.real = load double, double* %arrayidx207.realp, align 16
  %arrayidx207.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 1
  %arrayidx207.imag = load double, double* %arrayidx207.imagp, align 8
  %indirect-arg-temp208.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 0
  %indirect-arg-temp208.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 1
  store double %arrayidx207.real, double* %indirect-arg-temp208.realp, align 8
  store double %arrayidx207.imag, double* %indirect-arg-temp208.imagp, align 8
  %66 = bitcast { double, double }* %indirect-arg-temp208245 to i8*
  %67 = bitcast { double, double }* %indirect-arg-temp208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %67, i64 16, i1 false)
  %__x.realp.i246 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 0
  %__x.real.i247 = load double, double* %__x.realp.i246, align 8
  %__x.imagp.i248 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 1
  %__x.imag.i249 = load double, double* %__x.imagp.i248, align 8
  %arrayidx210 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx210.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 0
  %arrayidx210.real = load double, double* %arrayidx210.realp, align 16
  %arrayidx210.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 1
  %arrayidx210.imag = load double, double* %arrayidx210.imagp, align 8
  %indirect-arg-temp211.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 0
  %indirect-arg-temp211.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 1
  store double %arrayidx210.real, double* %indirect-arg-temp211.realp, align 8
  store double %arrayidx210.imag, double* %indirect-arg-temp211.imagp, align 8
  %68 = bitcast { double, double }* %indirect-arg-temp211240 to i8*
  %69 = bitcast { double, double }* %indirect-arg-temp211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 16, i1 false)
  %__x.realp.i241 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 0
  %__x.real.i242 = load double, double* %__x.realp.i241, align 8
  %__x.imagp.i243 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 1
  %__x.imag.i244 = load double, double* %__x.imagp.i243, align 8
  %arrayidx213 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx213.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 0
  %arrayidx213.real = load double, double* %arrayidx213.realp, align 16
  %arrayidx213.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 1
  %arrayidx213.imag = load double, double* %arrayidx213.imagp, align 8
  %indirect-arg-temp214.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 0
  %indirect-arg-temp214.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 1
  store double %arrayidx213.real, double* %indirect-arg-temp214.realp, align 8
  store double %arrayidx213.imag, double* %indirect-arg-temp214.imagp, align 8
  %70 = bitcast { double, double }* %indirect-arg-temp214235 to i8*
  %71 = bitcast { double, double }* %indirect-arg-temp214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 16, i1 false)
  %__x.realp.i236 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 0
  %__x.real.i237 = load double, double* %__x.realp.i236, align 8
  %__x.imagp.i238 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 1
  %__x.imag.i239 = load double, double* %__x.imagp.i238, align 8
  %arrayidx216 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx216.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 0
  %arrayidx216.real = load double, double* %arrayidx216.realp, align 16
  %arrayidx216.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 1
  %arrayidx216.imag = load double, double* %arrayidx216.imagp, align 8
  %indirect-arg-temp217.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 0
  %indirect-arg-temp217.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 1
  store double %arrayidx216.real, double* %indirect-arg-temp217.realp, align 8
  store double %arrayidx216.imag, double* %indirect-arg-temp217.imagp, align 8
  %72 = bitcast { double, double }* %indirect-arg-temp217230 to i8*
  %73 = bitcast { double, double }* %indirect-arg-temp217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 16, i1 false)
  %__x.realp.i231 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 0
  %__x.real.i232 = load double, double* %__x.realp.i231, align 8
  %__x.imagp.i233 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 1
  %__x.imag.i234 = load double, double* %__x.imagp.i233, align 8
  %arrayidx219 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx219.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 0
  %arrayidx219.real = load double, double* %arrayidx219.realp, align 16
  %arrayidx219.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 1
  %arrayidx219.imag = load double, double* %arrayidx219.imagp, align 8
  %indirect-arg-temp220.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 0
  %indirect-arg-temp220.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 1
  store double %arrayidx219.real, double* %indirect-arg-temp220.realp, align 8
  store double %arrayidx219.imag, double* %indirect-arg-temp220.imagp, align 8
  %74 = bitcast { double, double }* %indirect-arg-temp220229 to i8*
  %75 = bitcast { double, double }* %indirect-arg-temp220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %arrayidx222 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx222.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 0
  %arrayidx222.real = load double, double* %arrayidx222.realp, align 16
  %arrayidx222.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 1
  %arrayidx222.imag = load double, double* %arrayidx222.imagp, align 8
  %indirect-arg-temp223.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 0
  %indirect-arg-temp223.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 1
  store double %arrayidx222.real, double* %indirect-arg-temp223.realp, align 8
  store double %arrayidx222.imag, double* %indirect-arg-temp223.imagp, align 8
  %76 = bitcast { double, double }* %indirect-arg-temp223260 to i8*
  %77 = bitcast { double, double }* %indirect-arg-temp223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 16, i1 false)
  %__x.realp.i261 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 0
  %__x.real.i262 = load double, double* %__x.realp.i261, align 8
  %__x.imagp.i263 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 1
  %__x.imag.i264 = load double, double* %__x.imagp.i263, align 8
  %call225 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i32 0, i32 0), double %__x.real.i247, double %__x.imag.i244, double %__x.real.i237, double %__x.imag.i234, double %__x.real.i, double %__x.imag.i264)
  br label %if.end226

if.end226:                                        ; preds = %if.else, %if.then193
  %78 = load i32, i32* %res, align 4
  %add227 = add nsw i32 %78, 1
  store i32 %add227, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end226, %if.then188, %if.then76
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius(%struct.circ* %aa) #0 {
entry:
  %aa.addr = alloca %struct.circ*, align 4
  %s = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %and = and i32 %1, 1
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  store i32 %and, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %and1 = and i32 %2, 2
  %arrayidx2 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  store i32 %and1, i32* %arrayidx2, align 4
  %3 = load i32, i32* %i, align 4
  %and3 = and i32 %3, 4
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  store i32 %and3, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %4 = load i32, i32* %arrayidx5, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.circ, %struct.circ* %5, i32 0
  %r = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx6, i32 0, i32 1
  %6 = load double, double* %r, align 8
  %tobool7 = fcmp une double %6, 0.000000e+00
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  %7 = load i32, i32* %arrayidx8, align 4
  %tobool9 = icmp ne i32 %7, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end15

land.lhs.true10:                                  ; preds = %if.end
  %8 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx11 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 1
  %r12 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx11, i32 0, i32 1
  %9 = load double, double* %r12, align 8
  %tobool13 = fcmp une double %9, 0.000000e+00
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %land.lhs.true10
  br label %for.inc

if.end15:                                         ; preds = %land.lhs.true10, %if.end
  %arrayidx16 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  %10 = load i32, i32* %arrayidx16, align 4
  %tobool17 = icmp ne i32 %10, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end23

land.lhs.true18:                                  ; preds = %if.end15
  %11 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx19 = getelementptr inbounds %struct.circ, %struct.circ* %11, i32 2
  %r20 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx19, i32 0, i32 1
  %12 = load double, double* %r20, align 8
  %tobool21 = fcmp une double %12, 0.000000e+00
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %land.lhs.true18
  br label %for.inc

if.end23:                                         ; preds = %land.lhs.true18, %if.end15
  %13 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %call = call i32 @apollonius_in(%struct.circ* %13, i32* %arraydecay, i32 1, i32 0)
  %14 = load i32, i32* %sum, align 4
  %add = add nsw i32 %14, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end23, %if.then22, %if.then14, %if.then
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %sum, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %a = alloca [3 x %struct.circ], align 16
  %b = alloca [3 x %struct.circ], align 16
  %c = alloca [3 x %struct.circ], align 16
  %0 = bitcast [3 x %struct.circ]* %a to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 72, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.circ]*
  %2 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.circ, %struct.circ* %2, i32 0, i32 1
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 1
  %5 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 0
  store double 4.000000e+00, double* %6, align 8
  %7 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 1
  store double 1.000000e+00, double* %7, align 8
  %8 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 2
  %9 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 0
  %10 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 0
  store double 2.000000e+00, double* %10, align 16
  %11 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 1
  store double 4.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 1
  store double 1.000000e+00, double* %12, align 16
  %13 = bitcast [3 x %struct.circ]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %13, i8 0, i32 72, i1 false)
  %14 = bitcast i8* %13 to [3 x %struct.circ]*
  %15 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 0
  %16 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, double }, { double, double }* %16, i32 0, i32 0
  store double -3.000000e+00, double* %17, align 16
  %18 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 1
  store double 2.000000e+00, double* %18, align 16
  %19 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 1
  %20 = getelementptr inbounds %struct.circ, %struct.circ* %19, i32 0, i32 1
  store double 1.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 2
  %22 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, double }, { double, double }* %22, i32 0, i32 0
  store double 3.000000e+00, double* %23, align 16
  %24 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 1
  store double 2.000000e+00, double* %24, align 16
  %25 = bitcast [3 x %struct.circ]* %c to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %25, i8 0, i32 72, i1 false)
  %26 = bitcast i8* %25 to [3 x %struct.circ]*
  %27 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 0
  %29 = getelementptr inbounds { double, double }, { double, double }* %28, i32 0, i32 0
  store double -2.000000e+00, double* %29, align 16
  %30 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 1
  store double 1.000000e+00, double* %30, align 16
  %31 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 1
  %32 = getelementptr inbounds %struct.circ, %struct.circ* %31, i32 0, i32 1
  store double 1.000000e+00, double* %32, align 8
  %33 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 2
  %34 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, double }, { double, double }* %34, i32 0, i32 1
  store double 2.000000e+00, double* %35, align 8
  %36 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 1
  store double 1.000000e+00, double* %36, align 16
  %call = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %a, i32 0, i32 0
  %call1 = call i32 @apollonius(%struct.circ* %arraydecay)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %arraydecay3 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %b, i32 0, i32 0
  %call4 = call i32 @apollonius(%struct.circ* %arraydecay3)
  %call5 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay6 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %c, i32 0, i32 0
  %call7 = call i32 @apollonius(%struct.circ* %arraydecay6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @puts(i8* %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i64 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL9__tg_conjCd: %agg.result"}
!4 = distinct !{!4, !"_ZL9__tg_conjCd"}
!5 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool, i32 1, i32 -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 4294967295:i32
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = fcmp ogt double %10, 0x3BC79CA10C924223
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp = fcmp uno double %mul_r, %mul_r
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp69 = fcmp uno double %mul_i, %mul_i
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool71 = fcmp une double %20, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %flip.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp72 = icmp ne i32 %21, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %divert.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool74 = icmp ne i32 %22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool75 = fcmp une double %23, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call78 = call i32 @apollonius_in(%struct.circ* %24, i32* %25, i32 -1, i32 1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i80, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp82 = icmp slt i32 %26, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool84 = fcmp une double %27, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i80, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp101 = fcmp uno double %mul_r99, %mul_r99
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp103 = fcmp uno double %mul_i100, %mul_i100
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %flip.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp115 = fcmp uno double %mul_r113, %mul_r113
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp117 = fcmp uno double %mul_i114, %mul_i114
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i80, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i80, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc125 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp129 = icmp slt i32 %33, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %arrayidx141, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp149 = fcmp uno double %mul_r147, %mul_r147
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %isnan_cmp151 = fcmp uno double %mul_i148, %mul_i148
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc161 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp165 = icmp slt i32 %47, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %i163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %i163, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc177 = add nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp179 = fcmp oge double %54, %55
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp182 = fcmp oge double %56, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %iter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc185 = add nsw i32 %57, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp186 = icmp sgt i32 %57, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %res, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool192 = fcmp une double %60, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %res, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add227 = add nsw i32 %78, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 4294967295:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 20:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for apollonius_in()

; entering Souper's runOnFunction() for apollonius()

; ModuleID = './Problem_of_Apollonius.c.bc'
source_filename = "./Problem_of_Apollonius.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.circ = type { { double, double }, double }

@.str = private unnamed_addr constant [31 x i8] c"Given conditions confused me.\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"found: \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"circle (%6.3f,%6.3f), r = %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"line (%6.3f,%6.3f) (%6.3f,%6.3f) (%6.3f,%6.3f)\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"set 1\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"set 2\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"set 3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @cross({ double, double }* byval({ double, double }) align 8 %a, { double, double }* byval({ double, double }) align 8 %b) #0 {
entry:
  %indirect-arg-temp127 = alloca { double, double }, align 8
  %indirect-arg-temp722 = alloca { double, double }, align 8
  %indirect-arg-temp1317 = alloca { double, double }, align 8
  %indirect-arg-temp16 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp1 = alloca { double, double }, align 8
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %indirect-arg-temp13 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp16 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp, align 8
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp, align 8
  %indirect-arg-temp1.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 0
  %indirect-arg-temp1.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp1.realp, align 8
  store double %b.imag, double* %indirect-arg-temp1.imagp, align 8
  %2 = bitcast { double, double }* %indirect-arg-temp127 to i8*
  %3 = bitcast { double, double }* %indirect-arg-temp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 16, i1 false)
  %__x.realp.i28 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 0
  %__x.real.i29 = load double, double* %__x.realp.i28, align 8
  %__x.imagp.i30 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 1
  %__x.imag.i31 = load double, double* %__x.imagp.i30, align 8
  %mul = fmul double %__x.real.i, %__x.imag.i31
  %a.realp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real4 = load double, double* %a.realp3, align 8
  %a.imagp5 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag6 = load double, double* %a.imagp5, align 8
  %indirect-arg-temp7.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %indirect-arg-temp7.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  store double %a.real4, double* %indirect-arg-temp7.realp, align 8
  store double %a.imag6, double* %indirect-arg-temp7.imagp, align 8
  %4 = bitcast { double, double }* %indirect-arg-temp722 to i8*
  %5 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 16, i1 false)
  %__x.realp.i23 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 0
  %__x.real.i24 = load double, double* %__x.realp.i23, align 8
  %__x.imagp.i25 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 1
  %__x.imag.i26 = load double, double* %__x.imagp.i25, align 8
  %b.realp9 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real10 = load double, double* %b.realp9, align 8
  %b.imagp11 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag12 = load double, double* %b.imagp11, align 8
  %indirect-arg-temp13.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 0
  %indirect-arg-temp13.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 1
  store double %b.real10, double* %indirect-arg-temp13.realp, align 8
  store double %b.imag12, double* %indirect-arg-temp13.imagp, align 8
  %6 = bitcast { double, double }* %indirect-arg-temp1317 to i8*
  %7 = bitcast { double, double }* %indirect-arg-temp13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 16, i1 false)
  %__x.realp.i18 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 0
  %__x.real.i19 = load double, double* %__x.realp.i18, align 8
  %__x.imagp.i20 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 1
  %__x.imag.i21 = load double, double* %__x.imagp.i20, align 8
  %mul15 = fmul double %__x.imag.i26, %__x.real.i19
  %sub = fsub double %mul, %mul15
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden double @abs2({ double, double }* byval({ double, double }) align 8 %a) #0 {
entry:
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %a.realp1 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real2 = load double, double* %a.realp1, align 8
  %a.imagp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag4 = load double, double* %a.imagp3, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real2, double* %indirect-arg-temp.realp, align 8
  store double %a.imag4, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8, !noalias !2
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8, !noalias !2
  %neg.i = fneg double %__x.imag.i
  %agg.result.realp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %__x.real.i, double* %agg.result.realp.i, align 8, !alias.scope !2
  store double %neg.i, double* %agg.result.imagp.i, align 8, !alias.scope !2
  %agg.result.realp1.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.real.i = load double, double* %agg.result.realp1.i, align 8, !alias.scope !2
  %agg.result.imagp2.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %agg.result.imag.i = load double, double* %agg.result.imagp2.i, align 8, !alias.scope !2
  %agg.result.realp3.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp4.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %agg.result.real.i, double* %agg.result.realp3.i, align 8, !alias.scope !2
  store double %agg.result.imag.i, double* %agg.result.imagp4.i, align 8, !alias.scope !2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %mul_ac = fmul double %a.real, %tmp.real
  %mul_bd = fmul double %a.imag, %tmp.imag
  %mul_ad = fmul double %a.real, %tmp.imag
  %mul_bc = fmul double %a.imag, %tmp.real
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %entry
  %isnan_cmp5 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp5, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp6, double %a.real, double %a.imag, double %tmp.real, double %tmp.imag) #6
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %entry
  %real_mul_phi = phi double [ %mul_r, %entry ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp6.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %entry ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp6.imag, %complex_mul_libcall ]
  ret double %real_mul_phi
}

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius_in(%struct.circ* %aa, i32* %ss, i32 %flip, i32 %divert) #0 {
entry:
  %indirect-arg-temp223260 = alloca { double, double }, align 8
  %indirect-arg-temp198255 = alloca { double, double }, align 8
  %indirect-arg-temp204250 = alloca { double, double }, align 8
  %indirect-arg-temp208245 = alloca { double, double }, align 8
  %indirect-arg-temp211240 = alloca { double, double }, align 8
  %indirect-arg-temp214235 = alloca { double, double }, align 8
  %indirect-arg-temp217230 = alloca { double, double }, align 8
  %indirect-arg-temp220229 = alloca { double, double }, align 8
  %__x.addr.i228 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %aa.addr = alloca %struct.circ*, align 4
  %ss.addr = alloca i32*, align 4
  %flip.addr = alloca i32, align 4
  %divert.addr = alloca i32, align 4
  %n = alloca [3 x { double, double }], align 16
  %x = alloca [3 x { double, double }], align 16
  %t = alloca [3 x { double, double }], align 16
  %a = alloca { double, double }, align 8
  %b = alloca { double, double }, align 8
  %center = alloca { double, double }, align 8
  %s = alloca [3 x i32], align 4
  %iter = alloca i32, align 4
  %res = alloca i32, align 4
  %diff = alloca double, align 8
  %diff_old = alloca double, align 8
  %axb = alloca double, align 8
  %d = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp15 = alloca { double, double }, align 8
  %indirect-arg-temp20 = alloca { double, double }, align 8
  %indirect-arg-temp26 = alloca { double, double }, align 8
  %indirect-arg-temp38 = alloca { double, double }, align 8
  %indirect-arg-temp48 = alloca { double, double }, align 8
  %indirect-arg-temp58 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %i80 = alloca i32, align 4
  %tmp105 = alloca { double, double }, align 8
  %tmp119 = alloca { double, double }, align 8
  %i127 = alloca i32, align 4
  %indirect-arg-temp136 = alloca { double, double }, align 8
  %tmp153 = alloca { double, double }, align 8
  %i163 = alloca i32, align 4
  %indirect-arg-temp172 = alloca { double, double }, align 8
  %indirect-arg-temp198 = alloca { double, double }, align 8
  %indirect-arg-temp204 = alloca { double, double }, align 8
  %indirect-arg-temp208 = alloca { double, double }, align 8
  %indirect-arg-temp211 = alloca { double, double }, align 8
  %indirect-arg-temp214 = alloca { double, double }, align 8
  %indirect-arg-temp217 = alloca { double, double }, align 8
  %indirect-arg-temp220 = alloca { double, double }, align 8
  %indirect-arg-temp223 = alloca { double, double }, align 8
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32* %ss, i32** %ss.addr, align 4
  store i32 %flip, i32* %flip.addr, align 4
  store i32 %divert, i32* %divert.addr, align 4
  store i32 0, i32* %iter, align 4
  store i32 0, i32* %res, align 4
  store double 1.000000e+00, double* %diff, align 8
  store double -1.000000e+00, double* %diff_old, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %ss.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %3, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 -1
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %5
  store i32 %cond, i32* %arrayidx1, align 4
  %6 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.circ, %struct.circ* %6, i32 %7
  %c = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx2, i32 0, i32 0
  %c.realp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 0
  %c.real = load double, double* %c.realp, align 8
  %c.imagp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 1
  %c.imag = load double, double* %c.imagp, align 8
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %8
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %c.real, double* %arrayidx3.realp, align 16
  store double %c.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end190, %for.end
  %10 = load double, double* %diff, align 8
  %cmp4 = fcmp ogt double %10, 0x3BC79CA10C924223
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arrayidx5 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx5.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 0
  %arrayidx5.real = load double, double* %arrayidx5.realp, align 16
  %arrayidx5.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 1
  %arrayidx5.imag = load double, double* %arrayidx5.imagp, align 8
  %arrayidx6 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx6.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 0
  %arrayidx6.real = load double, double* %arrayidx6.realp, align 16
  %arrayidx6.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 1
  %arrayidx6.imag = load double, double* %arrayidx6.imagp, align 8
  %sub.r = fsub double %arrayidx5.real, %arrayidx6.real
  %sub.i = fsub double %arrayidx5.imag, %arrayidx6.imag
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  store double %sub.r, double* %a.realp, align 8
  store double %sub.i, double* %a.imagp, align 8
  %arrayidx7 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx7.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 0
  %arrayidx7.real = load double, double* %arrayidx7.realp, align 16
  %arrayidx7.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 1
  %arrayidx7.imag = load double, double* %arrayidx7.imagp, align 8
  %arrayidx8 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %sub.r9 = fsub double %arrayidx7.real, %arrayidx8.real
  %sub.i10 = fsub double %arrayidx7.imag, %arrayidx8.imag
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  store double %sub.r9, double* %b.realp, align 8
  store double %sub.i10, double* %b.imagp, align 8
  store double 0.000000e+00, double* %diff, align 8
  %a.realp11 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp11, align 8
  %a.imagp12 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp12, align 8
  %b.realp13 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp13, align 8
  %b.imagp14 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp14, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %indirect-arg-temp15.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 0
  %indirect-arg-temp15.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp15.realp, align 8
  store double %b.imag, double* %indirect-arg-temp15.imagp, align 8
  %call = call double @cross({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp15)
  %fneg = fneg double %call
  store double %fneg, double* %axb, align 8
  %a.realp16 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real17 = load double, double* %a.realp16, align 8
  %a.imagp18 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag19 = load double, double* %a.imagp18, align 8
  %indirect-arg-temp20.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 0
  %indirect-arg-temp20.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 1
  store double %a.real17, double* %indirect-arg-temp20.realp, align 8
  store double %a.imag19, double* %indirect-arg-temp20.imagp, align 8
  %call21 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp20)
  %b.realp22 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real23 = load double, double* %b.realp22, align 8
  %b.imagp24 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag25 = load double, double* %b.imagp24, align 8
  %indirect-arg-temp26.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 0
  %indirect-arg-temp26.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 1
  store double %b.real23, double* %indirect-arg-temp26.realp, align 8
  store double %b.imag25, double* %indirect-arg-temp26.imagp, align 8
  %call27 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp26)
  %mul = fmul double %call21, %call27
  %a.realp28 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real29 = load double, double* %a.realp28, align 8
  %a.imagp30 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag31 = load double, double* %a.imagp30, align 8
  %b.realp32 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real33 = load double, double* %b.realp32, align 8
  %b.imagp34 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag35 = load double, double* %b.imagp34, align 8
  %sub.r36 = fsub double %a.real29, %b.real33
  %sub.i37 = fsub double %a.imag31, %b.imag35
  %indirect-arg-temp38.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 0
  %indirect-arg-temp38.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 1
  store double %sub.r36, double* %indirect-arg-temp38.realp, align 8
  store double %sub.i37, double* %indirect-arg-temp38.imagp, align 8
  %call39 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp38)
  %mul40 = fmul double %mul, %call39
  store double %mul40, double* %__x.addr.i, align 8
  %11 = load double, double* %__x.addr.i, align 8
  %12 = call double @llvm.sqrt.f64(double %11) #6
  store double %12, double* %d, align 8
  %13 = load double, double* %d, align 8
  %14 = load double, double* %axb, align 8
  %mul42 = fmul double 2.000000e+00, %14
  %div = fdiv double %13, %mul42
  store double %div, double* %__x.addr.i228, align 8
  %15 = load double, double* %__x.addr.i228, align 8
  %16 = call double @llvm.fabs.f64(double %15) #6
  store double %16, double* %r, align 8
  %a.realp44 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real45 = load double, double* %a.realp44, align 8
  %a.imagp46 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag47 = load double, double* %a.imagp46, align 8
  %indirect-arg-temp48.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 0
  %indirect-arg-temp48.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 1
  store double %a.real45, double* %indirect-arg-temp48.realp, align 8
  store double %a.imag47, double* %indirect-arg-temp48.imagp, align 8
  %call49 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp48)
  %b.realp50 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real51 = load double, double* %b.realp50, align 8
  %b.imagp52 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag53 = load double, double* %b.imagp52, align 8
  %mul.rl = fmul double %call49, %b.real51
  %mul.ir = fmul double %call49, %b.imag53
  %b.realp54 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real55 = load double, double* %b.realp54, align 8
  %b.imagp56 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag57 = load double, double* %b.imagp56, align 8
  %indirect-arg-temp58.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 0
  %indirect-arg-temp58.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 1
  store double %b.real55, double* %indirect-arg-temp58.realp, align 8
  store double %b.imag57, double* %indirect-arg-temp58.imagp, align 8
  %call59 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp58)
  %a.realp60 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real61 = load double, double* %a.realp60, align 8
  %a.imagp62 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag63 = load double, double* %a.imagp62, align 8
  %mul.rl64 = fmul double %call59, %a.real61
  %mul.ir65 = fmul double %call59, %a.imag63
  %sub.r66 = fsub double %mul.rl, %mul.rl64
  %sub.i67 = fsub double %mul.ir, %mul.ir65
  %17 = load double, double* %axb, align 8
  %mul68 = fmul double 2.000000e+00, %17
  %18 = fdiv double %sub.r66, %mul68
  %19 = fdiv double %sub.i67, %mul68
  %mul_ac = fmul double %18, 0.000000e+00
  %mul_bd = fmul double %19, 1.000000e+00
  %mul_ad = fmul double %18, 1.000000e+00
  %mul_bc = fmul double %19, 0.000000e+00
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %while.body
  %isnan_cmp69 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp69, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %18, double %19, double 0.000000e+00, double 1.000000e+00) #6
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %while.body
  %real_mul_phi = phi double [ %mul_r, %while.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %while.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %arrayidx70 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx70.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 0
  %arrayidx70.real = load double, double* %arrayidx70.realp, align 16
  %arrayidx70.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 1
  %arrayidx70.imag = load double, double* %arrayidx70.imagp, align 8
  %add.r = fadd double %real_mul_phi, %arrayidx70.real
  %add.i = fadd double %imag_mul_phi, %arrayidx70.imag
  %center.realp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.imagp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  store double %add.r, double* %center.realp, align 8
  store double %add.i, double* %center.imagp, align 8
  %20 = load double, double* %axb, align 8
  %tobool71 = fcmp une double %20, 0.000000e+00
  br i1 %tobool71, label %if.end79, label %land.lhs.true

land.lhs.true:                                    ; preds = %complex_mul_cont
  %21 = load i32, i32* %flip.addr, align 4
  %cmp72 = icmp ne i32 %21, -1
  br i1 %cmp72, label %land.lhs.true73, label %if.end79

land.lhs.true73:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %divert.addr, align 4
  %tobool74 = icmp ne i32 %22, 0
  br i1 %tobool74, label %if.end79, label %if.then

if.then:                                          ; preds = %land.lhs.true73
  %23 = load double, double* %d, align 8
  %tobool75 = fcmp une double %23, 0.000000e+00
  br i1 %tobool75, label %if.end, label %if.then76

if.then76:                                        ; preds = %if.then
  %call77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 1, i32* %divert.addr, align 4
  %24 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %25 = load i32*, i32** %ss.addr, align 4
  %call78 = call i32 @apollonius_in(%struct.circ* %24, i32* %25, i32 -1, i32 1)
  store i32 %call78, i32* %res, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.end, %land.lhs.true73, %land.lhs.true, %complex_mul_cont
  store i32 0, i32* %i80, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc124, %if.end79
  %26 = load i32, i32* %i80, align 4
  %cmp82 = icmp slt i32 %26, 3
  br i1 %cmp82, label %for.body83, label %for.end126

for.body83:                                       ; preds = %for.cond81
  %27 = load double, double* %axb, align 8
  %tobool84 = fcmp une double %27, 0.000000e+00
  br i1 %tobool84, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body83
  %28 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %29 = load i32, i32* %i80, align 4
  %arrayidx85 = getelementptr inbounds %struct.circ, %struct.circ* %28, i32 %29
  %c86 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx85, i32 0, i32 0
  %c86.realp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 0
  %c86.real = load double, double* %c86.realp, align 8
  %c86.imagp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 1
  %c86.imag = load double, double* %c86.imagp, align 8
  %center.realp87 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real = load double, double* %center.realp87, align 8
  %center.imagp88 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag = load double, double* %center.imagp88, align 8
  %sub.r89 = fsub double %c86.real, %center.real
  %sub.i90 = fsub double %c86.imag, %center.imag
  br label %cond.end

cond.false:                                       ; preds = %for.body83
  %a.realp91 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real92 = load double, double* %a.realp91, align 8
  %a.imagp93 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag94 = load double, double* %a.imagp93, align 8
  %mul_ac95 = fmul double %a.real92, 0.000000e+00
  %mul_bd96 = fmul double %a.imag94, 1.000000e+00
  %mul_ad97 = fmul double %a.real92, 1.000000e+00
  %mul_bc98 = fmul double %a.imag94, 0.000000e+00
  %mul_r99 = fsub double %mul_ac95, %mul_bd96
  %mul_i100 = fadd double %mul_ad97, %mul_bc98
  %isnan_cmp101 = fcmp uno double %mul_r99, %mul_r99
  br i1 %isnan_cmp101, label %complex_mul_imag_nan102, label %complex_mul_cont106, !prof !5

complex_mul_imag_nan102:                          ; preds = %cond.false
  %isnan_cmp103 = fcmp uno double %mul_i100, %mul_i100
  br i1 %isnan_cmp103, label %complex_mul_libcall104, label %complex_mul_cont106, !prof !5

complex_mul_libcall104:                           ; preds = %complex_mul_imag_nan102
  call void @__muldc3({ double, double }* sret align 8 %tmp105, double %a.real92, double %a.imag94, double 0.000000e+00, double 1.000000e+00) #6
  %tmp105.realp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 0
  %tmp105.real = load double, double* %tmp105.realp, align 8
  %tmp105.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 1
  %tmp105.imag = load double, double* %tmp105.imagp, align 8
  br label %complex_mul_cont106

complex_mul_cont106:                              ; preds = %complex_mul_libcall104, %complex_mul_imag_nan102, %cond.false
  %real_mul_phi107 = phi double [ %mul_r99, %cond.false ], [ %mul_r99, %complex_mul_imag_nan102 ], [ %tmp105.real, %complex_mul_libcall104 ]
  %imag_mul_phi108 = phi double [ %mul_i100, %cond.false ], [ %mul_i100, %complex_mul_imag_nan102 ], [ %tmp105.imag, %complex_mul_libcall104 ]
  %30 = load i32, i32* %flip.addr, align 4
  %conv = sitofp i32 %30 to double
  %mul_ac109 = fmul double %real_mul_phi107, %conv
  %mul_bd110 = fmul double %imag_mul_phi108, 0.000000e+00
  %mul_ad111 = fmul double %real_mul_phi107, 0.000000e+00
  %mul_bc112 = fmul double %imag_mul_phi108, %conv
  %mul_r113 = fsub double %mul_ac109, %mul_bd110
  %mul_i114 = fadd double %mul_ad111, %mul_bc112
  %isnan_cmp115 = fcmp uno double %mul_r113, %mul_r113
  br i1 %isnan_cmp115, label %complex_mul_imag_nan116, label %complex_mul_cont120, !prof !5

complex_mul_imag_nan116:                          ; preds = %complex_mul_cont106
  %isnan_cmp117 = fcmp uno double %mul_i114, %mul_i114
  br i1 %isnan_cmp117, label %complex_mul_libcall118, label %complex_mul_cont120, !prof !5

complex_mul_libcall118:                           ; preds = %complex_mul_imag_nan116
  call void @__muldc3({ double, double }* sret align 8 %tmp119, double %real_mul_phi107, double %imag_mul_phi108, double %conv, double 0.000000e+00) #6
  %tmp119.realp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 0
  %tmp119.real = load double, double* %tmp119.realp, align 8
  %tmp119.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 1
  %tmp119.imag = load double, double* %tmp119.imagp, align 8
  br label %complex_mul_cont120

complex_mul_cont120:                              ; preds = %complex_mul_libcall118, %complex_mul_imag_nan116, %complex_mul_cont106
  %real_mul_phi121 = phi double [ %mul_r113, %complex_mul_cont106 ], [ %mul_r113, %complex_mul_imag_nan116 ], [ %tmp119.real, %complex_mul_libcall118 ]
  %imag_mul_phi122 = phi double [ %mul_i114, %complex_mul_cont106 ], [ %mul_i114, %complex_mul_imag_nan116 ], [ %tmp119.imag, %complex_mul_libcall118 ]
  br label %cond.end

cond.end:                                         ; preds = %complex_mul_cont120, %cond.true
  %cond.r = phi double [ %sub.r89, %cond.true ], [ %real_mul_phi121, %complex_mul_cont120 ]
  %cond.i = phi double [ %sub.i90, %cond.true ], [ %imag_mul_phi122, %complex_mul_cont120 ]
  %31 = load i32, i32* %i80, align 4
  %arrayidx123 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %31
  %arrayidx123.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 0
  %arrayidx123.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 1
  store double %cond.r, double* %arrayidx123.realp, align 16
  store double %cond.i, double* %arrayidx123.imagp, align 8
  br label %for.inc124

for.inc124:                                       ; preds = %cond.end
  %32 = load i32, i32* %i80, align 4
  %inc125 = add nsw i32 %32, 1
  store i32 %inc125, i32* %i80, align 4
  br label %for.cond81

for.end126:                                       ; preds = %for.cond81
  store i32 0, i32* %i127, align 4
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc160, %for.end126
  %33 = load i32, i32* %i127, align 4
  %cmp129 = icmp slt i32 %33, 3
  br i1 %cmp129, label %for.body131, label %for.end162

for.body131:                                      ; preds = %for.cond128
  %34 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %35 = load i32, i32* %i127, align 4
  %arrayidx132 = getelementptr inbounds %struct.circ, %struct.circ* %34, i32 %35
  %c133 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx132, i32 0, i32 0
  %c133.realp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 0
  %c133.real = load double, double* %c133.realp, align 8
  %c133.imagp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 1
  %c133.imag = load double, double* %c133.imagp, align 8
  %36 = load i32, i32* %i127, align 4
  %arrayidx134 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %36
  %arrayidx134.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 0
  %arrayidx134.real = load double, double* %arrayidx134.realp, align 16
  %arrayidx134.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 1
  %arrayidx134.imag = load double, double* %arrayidx134.imagp, align 8
  %37 = load i32, i32* %i127, align 4
  %arrayidx135 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %37
  %arrayidx135.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 0
  %arrayidx135.real = load double, double* %arrayidx135.realp, align 16
  %arrayidx135.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 1
  %arrayidx135.imag = load double, double* %arrayidx135.imagp, align 8
  %indirect-arg-temp136.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 0
  %indirect-arg-temp136.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 1
  store double %arrayidx135.real, double* %indirect-arg-temp136.realp, align 8
  store double %arrayidx135.imag, double* %indirect-arg-temp136.imagp, align 8
  %call137 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp136) #6
  %38 = fdiv double %arrayidx134.real, %call137
  %39 = fdiv double %arrayidx134.imag, %call137
  %40 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %41 = load i32, i32* %i127, align 4
  %arrayidx138 = getelementptr inbounds %struct.circ, %struct.circ* %40, i32 %41
  %r139 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx138, i32 0, i32 1
  %42 = load double, double* %r139, align 8
  %mul.rl140 = fmul double %38, %42
  %mul.il = fmul double %39, %42
  %43 = load i32, i32* %i127, align 4
  %arrayidx141 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx141, align 4
  %conv142 = sitofp i32 %44 to double
  %mul_ac143 = fmul double %mul.rl140, %conv142
  %mul_bd144 = fmul double %mul.il, 0.000000e+00
  %mul_ad145 = fmul double %mul.rl140, 0.000000e+00
  %mul_bc146 = fmul double %mul.il, %conv142
  %mul_r147 = fsub double %mul_ac143, %mul_bd144
  %mul_i148 = fadd double %mul_ad145, %mul_bc146
  %isnan_cmp149 = fcmp uno double %mul_r147, %mul_r147
  br i1 %isnan_cmp149, label %complex_mul_imag_nan150, label %complex_mul_cont154, !prof !5

complex_mul_imag_nan150:                          ; preds = %for.body131
  %isnan_cmp151 = fcmp uno double %mul_i148, %mul_i148
  br i1 %isnan_cmp151, label %complex_mul_libcall152, label %complex_mul_cont154, !prof !5

complex_mul_libcall152:                           ; preds = %complex_mul_imag_nan150
  call void @__muldc3({ double, double }* sret align 8 %tmp153, double %mul.rl140, double %mul.il, double %conv142, double 0.000000e+00) #6
  %tmp153.realp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 0
  %tmp153.real = load double, double* %tmp153.realp, align 8
  %tmp153.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 1
  %tmp153.imag = load double, double* %tmp153.imagp, align 8
  br label %complex_mul_cont154

complex_mul_cont154:                              ; preds = %complex_mul_libcall152, %complex_mul_imag_nan150, %for.body131
  %real_mul_phi155 = phi double [ %mul_r147, %for.body131 ], [ %mul_r147, %complex_mul_imag_nan150 ], [ %tmp153.real, %complex_mul_libcall152 ]
  %imag_mul_phi156 = phi double [ %mul_i148, %for.body131 ], [ %mul_i148, %complex_mul_imag_nan150 ], [ %tmp153.imag, %complex_mul_libcall152 ]
  %add.r157 = fadd double %c133.real, %real_mul_phi155
  %add.i158 = fadd double %c133.imag, %imag_mul_phi156
  %45 = load i32, i32* %i127, align 4
  %arrayidx159 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %45
  %arrayidx159.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 0
  %arrayidx159.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 1
  store double %add.r157, double* %arrayidx159.realp, align 16
  store double %add.i158, double* %arrayidx159.imagp, align 8
  br label %for.inc160

for.inc160:                                       ; preds = %complex_mul_cont154
  %46 = load i32, i32* %i127, align 4
  %inc161 = add nsw i32 %46, 1
  store i32 %inc161, i32* %i127, align 4
  br label %for.cond128

for.end162:                                       ; preds = %for.cond128
  store i32 0, i32* %i163, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc176, %for.end162
  %47 = load i32, i32* %i163, align 4
  %cmp165 = icmp slt i32 %47, 3
  br i1 %cmp165, label %for.body167, label %for.end178

for.body167:                                      ; preds = %for.cond164
  %48 = load i32, i32* %i163, align 4
  %arrayidx168 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %48
  %arrayidx168.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 0
  %arrayidx168.real = load double, double* %arrayidx168.realp, align 16
  %arrayidx168.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 1
  %arrayidx168.imag = load double, double* %arrayidx168.imagp, align 8
  %49 = load i32, i32* %i163, align 4
  %arrayidx169 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %49
  %arrayidx169.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 0
  %arrayidx169.real = load double, double* %arrayidx169.realp, align 16
  %arrayidx169.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 1
  %arrayidx169.imag = load double, double* %arrayidx169.imagp, align 8
  %sub.r170 = fsub double %arrayidx168.real, %arrayidx169.real
  %sub.i171 = fsub double %arrayidx168.imag, %arrayidx169.imag
  %indirect-arg-temp172.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 0
  %indirect-arg-temp172.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 1
  store double %sub.r170, double* %indirect-arg-temp172.realp, align 8
  store double %sub.i171, double* %indirect-arg-temp172.imagp, align 8
  %call173 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp172)
  %50 = load double, double* %diff, align 8
  %add = fadd double %50, %call173
  store double %add, double* %diff, align 8
  %51 = load i32, i32* %i163, align 4
  %arrayidx174 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %51
  %arrayidx174.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 0
  %arrayidx174.real = load double, double* %arrayidx174.realp, align 16
  %arrayidx174.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 1
  %arrayidx174.imag = load double, double* %arrayidx174.imagp, align 8
  %52 = load i32, i32* %i163, align 4
  %arrayidx175 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %52
  %arrayidx175.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 0
  %arrayidx175.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 1
  store double %arrayidx174.real, double* %arrayidx175.realp, align 16
  store double %arrayidx174.imag, double* %arrayidx175.imagp, align 8
  br label %for.inc176

for.inc176:                                       ; preds = %for.body167
  %53 = load i32, i32* %i163, align 4
  %inc177 = add nsw i32 %53, 1
  store i32 %inc177, i32* %i163, align 4
  br label %for.cond164

for.end178:                                       ; preds = %for.cond164
  %54 = load double, double* %diff, align 8
  %55 = load double, double* %diff_old, align 8
  %cmp179 = fcmp oge double %54, %55
  br i1 %cmp179, label %land.lhs.true181, label %if.end190

land.lhs.true181:                                 ; preds = %for.end178
  %56 = load double, double* %diff_old, align 8
  %cmp182 = fcmp oge double %56, 0.000000e+00
  br i1 %cmp182, label %if.then184, label %if.end190

if.then184:                                       ; preds = %land.lhs.true181
  %57 = load i32, i32* %iter, align 4
  %inc185 = add nsw i32 %57, 1
  store i32 %inc185, i32* %iter, align 4
  %cmp186 = icmp sgt i32 %57, 20
  br i1 %cmp186, label %if.then188, label %if.end189

if.then188:                                       ; preds = %if.then184
  %58 = load i32, i32* %res, align 4
  store i32 %58, i32* %retval, align 4
  br label %return

if.end189:                                        ; preds = %if.then184
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %land.lhs.true181, %for.end178
  %59 = load double, double* %diff, align 8
  store double %59, double* %diff_old, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %60 = load double, double* %axb, align 8
  %tobool192 = fcmp une double %60, 0.000000e+00
  br i1 %tobool192, label %if.then193, label %if.else

if.then193:                                       ; preds = %while.end
  %center.realp194 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real195 = load double, double* %center.realp194, align 8
  %center.imagp196 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag197 = load double, double* %center.imagp196, align 8
  %indirect-arg-temp198.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 0
  %indirect-arg-temp198.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 1
  store double %center.real195, double* %indirect-arg-temp198.realp, align 8
  store double %center.imag197, double* %indirect-arg-temp198.imagp, align 8
  %61 = bitcast { double, double }* %indirect-arg-temp198255 to i8*
  %62 = bitcast { double, double }* %indirect-arg-temp198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 16, i1 false)
  %__x.realp.i256 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 0
  %__x.real.i257 = load double, double* %__x.realp.i256, align 8
  %__x.imagp.i258 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 1
  %__x.imag.i259 = load double, double* %__x.imagp.i258, align 8
  %center.realp200 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real201 = load double, double* %center.realp200, align 8
  %center.imagp202 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag203 = load double, double* %center.imagp202, align 8
  %indirect-arg-temp204.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 0
  %indirect-arg-temp204.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 1
  store double %center.real201, double* %indirect-arg-temp204.realp, align 8
  store double %center.imag203, double* %indirect-arg-temp204.imagp, align 8
  %63 = bitcast { double, double }* %indirect-arg-temp204250 to i8*
  %64 = bitcast { double, double }* %indirect-arg-temp204 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %64, i64 16, i1 false)
  %__x.realp.i251 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 0
  %__x.real.i252 = load double, double* %__x.realp.i251, align 8
  %__x.imagp.i253 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 1
  %__x.imag.i254 = load double, double* %__x.imagp.i253, align 8
  %65 = load double, double* %r, align 8
  %call206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), double %__x.real.i257, double %__x.imag.i254, double %65)
  br label %if.end226

if.else:                                          ; preds = %while.end
  %arrayidx207 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx207.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 0
  %arrayidx207.real = load double, double* %arrayidx207.realp, align 16
  %arrayidx207.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 1
  %arrayidx207.imag = load double, double* %arrayidx207.imagp, align 8
  %indirect-arg-temp208.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 0
  %indirect-arg-temp208.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 1
  store double %arrayidx207.real, double* %indirect-arg-temp208.realp, align 8
  store double %arrayidx207.imag, double* %indirect-arg-temp208.imagp, align 8
  %66 = bitcast { double, double }* %indirect-arg-temp208245 to i8*
  %67 = bitcast { double, double }* %indirect-arg-temp208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %67, i64 16, i1 false)
  %__x.realp.i246 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 0
  %__x.real.i247 = load double, double* %__x.realp.i246, align 8
  %__x.imagp.i248 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 1
  %__x.imag.i249 = load double, double* %__x.imagp.i248, align 8
  %arrayidx210 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx210.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 0
  %arrayidx210.real = load double, double* %arrayidx210.realp, align 16
  %arrayidx210.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 1
  %arrayidx210.imag = load double, double* %arrayidx210.imagp, align 8
  %indirect-arg-temp211.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 0
  %indirect-arg-temp211.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 1
  store double %arrayidx210.real, double* %indirect-arg-temp211.realp, align 8
  store double %arrayidx210.imag, double* %indirect-arg-temp211.imagp, align 8
  %68 = bitcast { double, double }* %indirect-arg-temp211240 to i8*
  %69 = bitcast { double, double }* %indirect-arg-temp211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 16, i1 false)
  %__x.realp.i241 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 0
  %__x.real.i242 = load double, double* %__x.realp.i241, align 8
  %__x.imagp.i243 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 1
  %__x.imag.i244 = load double, double* %__x.imagp.i243, align 8
  %arrayidx213 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx213.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 0
  %arrayidx213.real = load double, double* %arrayidx213.realp, align 16
  %arrayidx213.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 1
  %arrayidx213.imag = load double, double* %arrayidx213.imagp, align 8
  %indirect-arg-temp214.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 0
  %indirect-arg-temp214.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 1
  store double %arrayidx213.real, double* %indirect-arg-temp214.realp, align 8
  store double %arrayidx213.imag, double* %indirect-arg-temp214.imagp, align 8
  %70 = bitcast { double, double }* %indirect-arg-temp214235 to i8*
  %71 = bitcast { double, double }* %indirect-arg-temp214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 16, i1 false)
  %__x.realp.i236 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 0
  %__x.real.i237 = load double, double* %__x.realp.i236, align 8
  %__x.imagp.i238 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 1
  %__x.imag.i239 = load double, double* %__x.imagp.i238, align 8
  %arrayidx216 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx216.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 0
  %arrayidx216.real = load double, double* %arrayidx216.realp, align 16
  %arrayidx216.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 1
  %arrayidx216.imag = load double, double* %arrayidx216.imagp, align 8
  %indirect-arg-temp217.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 0
  %indirect-arg-temp217.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 1
  store double %arrayidx216.real, double* %indirect-arg-temp217.realp, align 8
  store double %arrayidx216.imag, double* %indirect-arg-temp217.imagp, align 8
  %72 = bitcast { double, double }* %indirect-arg-temp217230 to i8*
  %73 = bitcast { double, double }* %indirect-arg-temp217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 16, i1 false)
  %__x.realp.i231 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 0
  %__x.real.i232 = load double, double* %__x.realp.i231, align 8
  %__x.imagp.i233 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 1
  %__x.imag.i234 = load double, double* %__x.imagp.i233, align 8
  %arrayidx219 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx219.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 0
  %arrayidx219.real = load double, double* %arrayidx219.realp, align 16
  %arrayidx219.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 1
  %arrayidx219.imag = load double, double* %arrayidx219.imagp, align 8
  %indirect-arg-temp220.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 0
  %indirect-arg-temp220.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 1
  store double %arrayidx219.real, double* %indirect-arg-temp220.realp, align 8
  store double %arrayidx219.imag, double* %indirect-arg-temp220.imagp, align 8
  %74 = bitcast { double, double }* %indirect-arg-temp220229 to i8*
  %75 = bitcast { double, double }* %indirect-arg-temp220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %arrayidx222 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx222.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 0
  %arrayidx222.real = load double, double* %arrayidx222.realp, align 16
  %arrayidx222.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 1
  %arrayidx222.imag = load double, double* %arrayidx222.imagp, align 8
  %indirect-arg-temp223.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 0
  %indirect-arg-temp223.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 1
  store double %arrayidx222.real, double* %indirect-arg-temp223.realp, align 8
  store double %arrayidx222.imag, double* %indirect-arg-temp223.imagp, align 8
  %76 = bitcast { double, double }* %indirect-arg-temp223260 to i8*
  %77 = bitcast { double, double }* %indirect-arg-temp223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 16, i1 false)
  %__x.realp.i261 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 0
  %__x.real.i262 = load double, double* %__x.realp.i261, align 8
  %__x.imagp.i263 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 1
  %__x.imag.i264 = load double, double* %__x.imagp.i263, align 8
  %call225 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i32 0, i32 0), double %__x.real.i247, double %__x.imag.i244, double %__x.real.i237, double %__x.imag.i234, double %__x.real.i, double %__x.imag.i264)
  br label %if.end226

if.end226:                                        ; preds = %if.else, %if.then193
  %78 = load i32, i32* %res, align 4
  %add227 = add nsw i32 %78, 1
  store i32 %add227, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end226, %if.then188, %if.then76
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius(%struct.circ* %aa) #0 {
entry:
  %aa.addr = alloca %struct.circ*, align 4
  %s = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %and = and i32 %1, 1
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  store i32 %and, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %and1 = and i32 %2, 2
  %arrayidx2 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  store i32 %and1, i32* %arrayidx2, align 4
  %3 = load i32, i32* %i, align 4
  %and3 = and i32 %3, 4
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  store i32 %and3, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %4 = load i32, i32* %arrayidx5, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.circ, %struct.circ* %5, i32 0
  %r = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx6, i32 0, i32 1
  %6 = load double, double* %r, align 8
  %tobool7 = fcmp une double %6, 0.000000e+00
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  %7 = load i32, i32* %arrayidx8, align 4
  %tobool9 = icmp ne i32 %7, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end15

land.lhs.true10:                                  ; preds = %if.end
  %8 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx11 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 1
  %r12 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx11, i32 0, i32 1
  %9 = load double, double* %r12, align 8
  %tobool13 = fcmp une double %9, 0.000000e+00
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %land.lhs.true10
  br label %for.inc

if.end15:                                         ; preds = %land.lhs.true10, %if.end
  %arrayidx16 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  %10 = load i32, i32* %arrayidx16, align 4
  %tobool17 = icmp ne i32 %10, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end23

land.lhs.true18:                                  ; preds = %if.end15
  %11 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx19 = getelementptr inbounds %struct.circ, %struct.circ* %11, i32 2
  %r20 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx19, i32 0, i32 1
  %12 = load double, double* %r20, align 8
  %tobool21 = fcmp une double %12, 0.000000e+00
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %land.lhs.true18
  br label %for.inc

if.end23:                                         ; preds = %land.lhs.true18, %if.end15
  %13 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %call = call i32 @apollonius_in(%struct.circ* %13, i32* %arraydecay, i32 1, i32 0)
  %14 = load i32, i32* %sum, align 4
  %add = add nsw i32 %14, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end23, %if.then22, %if.then14, %if.then
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %sum, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %a = alloca [3 x %struct.circ], align 16
  %b = alloca [3 x %struct.circ], align 16
  %c = alloca [3 x %struct.circ], align 16
  %0 = bitcast [3 x %struct.circ]* %a to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 72, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.circ]*
  %2 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.circ, %struct.circ* %2, i32 0, i32 1
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 1
  %5 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 0
  store double 4.000000e+00, double* %6, align 8
  %7 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 1
  store double 1.000000e+00, double* %7, align 8
  %8 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 2
  %9 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 0
  %10 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 0
  store double 2.000000e+00, double* %10, align 16
  %11 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 1
  store double 4.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 1
  store double 1.000000e+00, double* %12, align 16
  %13 = bitcast [3 x %struct.circ]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %13, i8 0, i32 72, i1 false)
  %14 = bitcast i8* %13 to [3 x %struct.circ]*
  %15 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 0
  %16 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, double }, { double, double }* %16, i32 0, i32 0
  store double -3.000000e+00, double* %17, align 16
  %18 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 1
  store double 2.000000e+00, double* %18, align 16
  %19 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 1
  %20 = getelementptr inbounds %struct.circ, %struct.circ* %19, i32 0, i32 1
  store double 1.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 2
  %22 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, double }, { double, double }* %22, i32 0, i32 0
  store double 3.000000e+00, double* %23, align 16
  %24 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 1
  store double 2.000000e+00, double* %24, align 16
  %25 = bitcast [3 x %struct.circ]* %c to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %25, i8 0, i32 72, i1 false)
  %26 = bitcast i8* %25 to [3 x %struct.circ]*
  %27 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 0
  %29 = getelementptr inbounds { double, double }, { double, double }* %28, i32 0, i32 0
  store double -2.000000e+00, double* %29, align 16
  %30 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 1
  store double 1.000000e+00, double* %30, align 16
  %31 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 1
  %32 = getelementptr inbounds %struct.circ, %struct.circ* %31, i32 0, i32 1
  store double 1.000000e+00, double* %32, align 8
  %33 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 2
  %34 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, double }, { double, double }* %34, i32 0, i32 1
  store double 2.000000e+00, double* %35, align 8
  %36 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 1
  store double 1.000000e+00, double* %36, align 16
  %call = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %a, i32 0, i32 0
  %call1 = call i32 @apollonius(%struct.circ* %arraydecay)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %arraydecay3 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %b, i32 0, i32 0
  %call4 = call i32 @apollonius(%struct.circ* %arraydecay3)
  %call5 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay6 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %c, i32 0, i32 0
  %call7 = call i32 @apollonius(%struct.circ* %arraydecay6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @puts(i8* %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i64 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL9__tg_conjCd: %agg.result"}
!4 = distinct !{!4, !"_ZL9__tg_conjCd"}
!5 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000010)

; *****
; For LLVM instruction:
;  %and1 = and i32 %2, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000100)

; *****
; For LLVM instruction:
;  %and3 = and i32 %3, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool7 = fcmp une double %6, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool13 = fcmp une double %9, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool17 = icmp ne i32 %10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool21 = fcmp une double %12, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @apollonius_in(%struct.circ* %13, i32* %arraydecay, i32 1, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %14, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000010)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000100)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for apollonius()

; entering Souper's runOnFunction() for main()

; ModuleID = './Problem_of_Apollonius.c.bc'
source_filename = "./Problem_of_Apollonius.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.circ = type { { double, double }, double }

@.str = private unnamed_addr constant [31 x i8] c"Given conditions confused me.\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"found: \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"circle (%6.3f,%6.3f), r = %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"line (%6.3f,%6.3f) (%6.3f,%6.3f) (%6.3f,%6.3f)\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"set 1\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"set 2\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"set 3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @cross({ double, double }* byval({ double, double }) align 8 %a, { double, double }* byval({ double, double }) align 8 %b) #0 {
entry:
  %indirect-arg-temp127 = alloca { double, double }, align 8
  %indirect-arg-temp722 = alloca { double, double }, align 8
  %indirect-arg-temp1317 = alloca { double, double }, align 8
  %indirect-arg-temp16 = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp1 = alloca { double, double }, align 8
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %indirect-arg-temp13 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp16 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp16, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp, align 8
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp, align 8
  %indirect-arg-temp1.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 0
  %indirect-arg-temp1.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp1.realp, align 8
  store double %b.imag, double* %indirect-arg-temp1.imagp, align 8
  %2 = bitcast { double, double }* %indirect-arg-temp127 to i8*
  %3 = bitcast { double, double }* %indirect-arg-temp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 16, i1 false)
  %__x.realp.i28 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 0
  %__x.real.i29 = load double, double* %__x.realp.i28, align 8
  %__x.imagp.i30 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp127, i32 0, i32 1
  %__x.imag.i31 = load double, double* %__x.imagp.i30, align 8
  %mul = fmul double %__x.real.i, %__x.imag.i31
  %a.realp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real4 = load double, double* %a.realp3, align 8
  %a.imagp5 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag6 = load double, double* %a.imagp5, align 8
  %indirect-arg-temp7.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %indirect-arg-temp7.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  store double %a.real4, double* %indirect-arg-temp7.realp, align 8
  store double %a.imag6, double* %indirect-arg-temp7.imagp, align 8
  %4 = bitcast { double, double }* %indirect-arg-temp722 to i8*
  %5 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 16, i1 false)
  %__x.realp.i23 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 0
  %__x.real.i24 = load double, double* %__x.realp.i23, align 8
  %__x.imagp.i25 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp722, i32 0, i32 1
  %__x.imag.i26 = load double, double* %__x.imagp.i25, align 8
  %b.realp9 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real10 = load double, double* %b.realp9, align 8
  %b.imagp11 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag12 = load double, double* %b.imagp11, align 8
  %indirect-arg-temp13.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 0
  %indirect-arg-temp13.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp13, i32 0, i32 1
  store double %b.real10, double* %indirect-arg-temp13.realp, align 8
  store double %b.imag12, double* %indirect-arg-temp13.imagp, align 8
  %6 = bitcast { double, double }* %indirect-arg-temp1317 to i8*
  %7 = bitcast { double, double }* %indirect-arg-temp13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 16, i1 false)
  %__x.realp.i18 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 0
  %__x.real.i19 = load double, double* %__x.realp.i18, align 8
  %__x.imagp.i20 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp1317, i32 0, i32 1
  %__x.imag.i21 = load double, double* %__x.imagp.i20, align 8
  %mul15 = fmul double %__x.imag.i26, %__x.real.i19
  %sub = fsub double %mul, %mul15
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden double @abs2({ double, double }* byval({ double, double }) align 8 %a) #0 {
entry:
  %indirect-arg-temp7 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %indirect-arg-temp = alloca { double, double }, align 8
  %tmp6 = alloca { double, double }, align 8
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp, align 8
  %a.realp1 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real2 = load double, double* %a.realp1, align 8
  %a.imagp3 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag4 = load double, double* %a.imagp3, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real2, double* %indirect-arg-temp.realp, align 8
  store double %a.imag4, double* %indirect-arg-temp.imagp, align 8
  %0 = bitcast { double, double }* %indirect-arg-temp7 to i8*
  %1 = bitcast { double, double }* %indirect-arg-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8, !noalias !2
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp7, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8, !noalias !2
  %neg.i = fneg double %__x.imag.i
  %agg.result.realp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %__x.real.i, double* %agg.result.realp.i, align 8, !alias.scope !2
  store double %neg.i, double* %agg.result.imagp.i, align 8, !alias.scope !2
  %agg.result.realp1.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.real.i = load double, double* %agg.result.realp1.i, align 8, !alias.scope !2
  %agg.result.imagp2.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %agg.result.imag.i = load double, double* %agg.result.imagp2.i, align 8, !alias.scope !2
  %agg.result.realp3.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %agg.result.imagp4.i = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  store double %agg.result.real.i, double* %agg.result.realp3.i, align 8, !alias.scope !2
  store double %agg.result.imag.i, double* %agg.result.imagp4.i, align 8, !alias.scope !2
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  %mul_ac = fmul double %a.real, %tmp.real
  %mul_bd = fmul double %a.imag, %tmp.imag
  %mul_ad = fmul double %a.real, %tmp.imag
  %mul_bc = fmul double %a.imag, %tmp.real
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %entry
  %isnan_cmp5 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp5, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp6, double %a.real, double %a.imag, double %tmp.real, double %tmp.imag) #6
  %tmp6.realp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 0
  %tmp6.real = load double, double* %tmp6.realp, align 8
  %tmp6.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp6, i32 0, i32 1
  %tmp6.imag = load double, double* %tmp6.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %entry
  %real_mul_phi = phi double [ %mul_r, %entry ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp6.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %entry ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp6.imag, %complex_mul_libcall ]
  ret double %real_mul_phi
}

declare void @__muldc3({ double, double }* %0, double %1, double %2, double %3, double %4)

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius_in(%struct.circ* %aa, i32* %ss, i32 %flip, i32 %divert) #0 {
entry:
  %indirect-arg-temp223260 = alloca { double, double }, align 8
  %indirect-arg-temp198255 = alloca { double, double }, align 8
  %indirect-arg-temp204250 = alloca { double, double }, align 8
  %indirect-arg-temp208245 = alloca { double, double }, align 8
  %indirect-arg-temp211240 = alloca { double, double }, align 8
  %indirect-arg-temp214235 = alloca { double, double }, align 8
  %indirect-arg-temp217230 = alloca { double, double }, align 8
  %indirect-arg-temp220229 = alloca { double, double }, align 8
  %__x.addr.i228 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %aa.addr = alloca %struct.circ*, align 4
  %ss.addr = alloca i32*, align 4
  %flip.addr = alloca i32, align 4
  %divert.addr = alloca i32, align 4
  %n = alloca [3 x { double, double }], align 16
  %x = alloca [3 x { double, double }], align 16
  %t = alloca [3 x { double, double }], align 16
  %a = alloca { double, double }, align 8
  %b = alloca { double, double }, align 8
  %center = alloca { double, double }, align 8
  %s = alloca [3 x i32], align 4
  %iter = alloca i32, align 4
  %res = alloca i32, align 4
  %diff = alloca double, align 8
  %diff_old = alloca double, align 8
  %axb = alloca double, align 8
  %d = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  %indirect-arg-temp = alloca { double, double }, align 8
  %indirect-arg-temp15 = alloca { double, double }, align 8
  %indirect-arg-temp20 = alloca { double, double }, align 8
  %indirect-arg-temp26 = alloca { double, double }, align 8
  %indirect-arg-temp38 = alloca { double, double }, align 8
  %indirect-arg-temp48 = alloca { double, double }, align 8
  %indirect-arg-temp58 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 8
  %i80 = alloca i32, align 4
  %tmp105 = alloca { double, double }, align 8
  %tmp119 = alloca { double, double }, align 8
  %i127 = alloca i32, align 4
  %indirect-arg-temp136 = alloca { double, double }, align 8
  %tmp153 = alloca { double, double }, align 8
  %i163 = alloca i32, align 4
  %indirect-arg-temp172 = alloca { double, double }, align 8
  %indirect-arg-temp198 = alloca { double, double }, align 8
  %indirect-arg-temp204 = alloca { double, double }, align 8
  %indirect-arg-temp208 = alloca { double, double }, align 8
  %indirect-arg-temp211 = alloca { double, double }, align 8
  %indirect-arg-temp214 = alloca { double, double }, align 8
  %indirect-arg-temp217 = alloca { double, double }, align 8
  %indirect-arg-temp220 = alloca { double, double }, align 8
  %indirect-arg-temp223 = alloca { double, double }, align 8
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32* %ss, i32** %ss.addr, align 4
  store i32 %flip, i32* %flip.addr, align 4
  store i32 %divert, i32* %divert.addr, align 4
  store i32 0, i32* %iter, align 4
  store i32 0, i32* %res, align 4
  store double 1.000000e+00, double* %diff, align 8
  store double -1.000000e+00, double* %diff_old, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %ss.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %3, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 -1
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %5
  store i32 %cond, i32* %arrayidx1, align 4
  %6 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.circ, %struct.circ* %6, i32 %7
  %c = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx2, i32 0, i32 0
  %c.realp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 0
  %c.real = load double, double* %c.realp, align 8
  %c.imagp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 1
  %c.imag = load double, double* %c.imagp, align 8
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %8
  %arrayidx3.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 0
  %arrayidx3.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx3, i32 0, i32 1
  store double %c.real, double* %arrayidx3.realp, align 16
  store double %c.imag, double* %arrayidx3.imagp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end190, %for.end
  %10 = load double, double* %diff, align 8
  %cmp4 = fcmp ogt double %10, 0x3BC79CA10C924223
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arrayidx5 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx5.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 0
  %arrayidx5.real = load double, double* %arrayidx5.realp, align 16
  %arrayidx5.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx5, i32 0, i32 1
  %arrayidx5.imag = load double, double* %arrayidx5.imagp, align 8
  %arrayidx6 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx6.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 0
  %arrayidx6.real = load double, double* %arrayidx6.realp, align 16
  %arrayidx6.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx6, i32 0, i32 1
  %arrayidx6.imag = load double, double* %arrayidx6.imagp, align 8
  %sub.r = fsub double %arrayidx5.real, %arrayidx6.real
  %sub.i = fsub double %arrayidx5.imag, %arrayidx6.imag
  %a.realp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.imagp = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  store double %sub.r, double* %a.realp, align 8
  store double %sub.i, double* %a.imagp, align 8
  %arrayidx7 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx7.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 0
  %arrayidx7.real = load double, double* %arrayidx7.realp, align 16
  %arrayidx7.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx7, i32 0, i32 1
  %arrayidx7.imag = load double, double* %arrayidx7.imagp, align 8
  %arrayidx8 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx8.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 0
  %arrayidx8.real = load double, double* %arrayidx8.realp, align 16
  %arrayidx8.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx8, i32 0, i32 1
  %arrayidx8.imag = load double, double* %arrayidx8.imagp, align 8
  %sub.r9 = fsub double %arrayidx7.real, %arrayidx8.real
  %sub.i10 = fsub double %arrayidx7.imag, %arrayidx8.imag
  %b.realp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.imagp = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  store double %sub.r9, double* %b.realp, align 8
  store double %sub.i10, double* %b.imagp, align 8
  store double 0.000000e+00, double* %diff, align 8
  %a.realp11 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real = load double, double* %a.realp11, align 8
  %a.imagp12 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag = load double, double* %a.imagp12, align 8
  %b.realp13 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real = load double, double* %b.realp13, align 8
  %b.imagp14 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag = load double, double* %b.imagp14, align 8
  %indirect-arg-temp.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 0
  %indirect-arg-temp.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp, i32 0, i32 1
  store double %a.real, double* %indirect-arg-temp.realp, align 8
  store double %a.imag, double* %indirect-arg-temp.imagp, align 8
  %indirect-arg-temp15.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 0
  %indirect-arg-temp15.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp15, i32 0, i32 1
  store double %b.real, double* %indirect-arg-temp15.realp, align 8
  store double %b.imag, double* %indirect-arg-temp15.imagp, align 8
  %call = call double @cross({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp, { double, double }* byval({ double, double }) align 8 %indirect-arg-temp15)
  %fneg = fneg double %call
  store double %fneg, double* %axb, align 8
  %a.realp16 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real17 = load double, double* %a.realp16, align 8
  %a.imagp18 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag19 = load double, double* %a.imagp18, align 8
  %indirect-arg-temp20.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 0
  %indirect-arg-temp20.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp20, i32 0, i32 1
  store double %a.real17, double* %indirect-arg-temp20.realp, align 8
  store double %a.imag19, double* %indirect-arg-temp20.imagp, align 8
  %call21 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp20)
  %b.realp22 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real23 = load double, double* %b.realp22, align 8
  %b.imagp24 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag25 = load double, double* %b.imagp24, align 8
  %indirect-arg-temp26.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 0
  %indirect-arg-temp26.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp26, i32 0, i32 1
  store double %b.real23, double* %indirect-arg-temp26.realp, align 8
  store double %b.imag25, double* %indirect-arg-temp26.imagp, align 8
  %call27 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp26)
  %mul = fmul double %call21, %call27
  %a.realp28 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real29 = load double, double* %a.realp28, align 8
  %a.imagp30 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag31 = load double, double* %a.imagp30, align 8
  %b.realp32 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real33 = load double, double* %b.realp32, align 8
  %b.imagp34 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag35 = load double, double* %b.imagp34, align 8
  %sub.r36 = fsub double %a.real29, %b.real33
  %sub.i37 = fsub double %a.imag31, %b.imag35
  %indirect-arg-temp38.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 0
  %indirect-arg-temp38.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp38, i32 0, i32 1
  store double %sub.r36, double* %indirect-arg-temp38.realp, align 8
  store double %sub.i37, double* %indirect-arg-temp38.imagp, align 8
  %call39 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp38)
  %mul40 = fmul double %mul, %call39
  store double %mul40, double* %__x.addr.i, align 8
  %11 = load double, double* %__x.addr.i, align 8
  %12 = call double @llvm.sqrt.f64(double %11) #6
  store double %12, double* %d, align 8
  %13 = load double, double* %d, align 8
  %14 = load double, double* %axb, align 8
  %mul42 = fmul double 2.000000e+00, %14
  %div = fdiv double %13, %mul42
  store double %div, double* %__x.addr.i228, align 8
  %15 = load double, double* %__x.addr.i228, align 8
  %16 = call double @llvm.fabs.f64(double %15) #6
  store double %16, double* %r, align 8
  %a.realp44 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real45 = load double, double* %a.realp44, align 8
  %a.imagp46 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag47 = load double, double* %a.imagp46, align 8
  %indirect-arg-temp48.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 0
  %indirect-arg-temp48.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp48, i32 0, i32 1
  store double %a.real45, double* %indirect-arg-temp48.realp, align 8
  store double %a.imag47, double* %indirect-arg-temp48.imagp, align 8
  %call49 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp48)
  %b.realp50 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real51 = load double, double* %b.realp50, align 8
  %b.imagp52 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag53 = load double, double* %b.imagp52, align 8
  %mul.rl = fmul double %call49, %b.real51
  %mul.ir = fmul double %call49, %b.imag53
  %b.realp54 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 0
  %b.real55 = load double, double* %b.realp54, align 8
  %b.imagp56 = getelementptr inbounds { double, double }, { double, double }* %b, i32 0, i32 1
  %b.imag57 = load double, double* %b.imagp56, align 8
  %indirect-arg-temp58.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 0
  %indirect-arg-temp58.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp58, i32 0, i32 1
  store double %b.real55, double* %indirect-arg-temp58.realp, align 8
  store double %b.imag57, double* %indirect-arg-temp58.imagp, align 8
  %call59 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp58)
  %a.realp60 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real61 = load double, double* %a.realp60, align 8
  %a.imagp62 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag63 = load double, double* %a.imagp62, align 8
  %mul.rl64 = fmul double %call59, %a.real61
  %mul.ir65 = fmul double %call59, %a.imag63
  %sub.r66 = fsub double %mul.rl, %mul.rl64
  %sub.i67 = fsub double %mul.ir, %mul.ir65
  %17 = load double, double* %axb, align 8
  %mul68 = fmul double 2.000000e+00, %17
  %18 = fdiv double %sub.r66, %mul68
  %19 = fdiv double %sub.i67, %mul68
  %mul_ac = fmul double %18, 0.000000e+00
  %mul_bd = fmul double %19, 1.000000e+00
  %mul_ad = fmul double %18, 1.000000e+00
  %mul_bc = fmul double %19, 0.000000e+00
  %mul_r = fsub double %mul_ac, %mul_bd
  %mul_i = fadd double %mul_ad, %mul_bc
  %isnan_cmp = fcmp uno double %mul_r, %mul_r
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !prof !5

complex_mul_imag_nan:                             ; preds = %while.body
  %isnan_cmp69 = fcmp uno double %mul_i, %mul_i
  br i1 %isnan_cmp69, label %complex_mul_libcall, label %complex_mul_cont, !prof !5

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  call void @__muldc3({ double, double }* sret align 8 %tmp, double %18, double %19, double 0.000000e+00, double 1.000000e+00) #6
  %tmp.realp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double, double* %tmp.realp, align 8
  %tmp.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double, double* %tmp.imagp, align 8
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %while.body
  %real_mul_phi = phi double [ %mul_r, %while.body ], [ %mul_r, %complex_mul_imag_nan ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi double [ %mul_i, %while.body ], [ %mul_i, %complex_mul_imag_nan ], [ %tmp.imag, %complex_mul_libcall ]
  %arrayidx70 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx70.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 0
  %arrayidx70.real = load double, double* %arrayidx70.realp, align 16
  %arrayidx70.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx70, i32 0, i32 1
  %arrayidx70.imag = load double, double* %arrayidx70.imagp, align 8
  %add.r = fadd double %real_mul_phi, %arrayidx70.real
  %add.i = fadd double %imag_mul_phi, %arrayidx70.imag
  %center.realp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.imagp = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  store double %add.r, double* %center.realp, align 8
  store double %add.i, double* %center.imagp, align 8
  %20 = load double, double* %axb, align 8
  %tobool71 = fcmp une double %20, 0.000000e+00
  br i1 %tobool71, label %if.end79, label %land.lhs.true

land.lhs.true:                                    ; preds = %complex_mul_cont
  %21 = load i32, i32* %flip.addr, align 4
  %cmp72 = icmp ne i32 %21, -1
  br i1 %cmp72, label %land.lhs.true73, label %if.end79

land.lhs.true73:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %divert.addr, align 4
  %tobool74 = icmp ne i32 %22, 0
  br i1 %tobool74, label %if.end79, label %if.then

if.then:                                          ; preds = %land.lhs.true73
  %23 = load double, double* %d, align 8
  %tobool75 = fcmp une double %23, 0.000000e+00
  br i1 %tobool75, label %if.end, label %if.then76

if.then76:                                        ; preds = %if.then
  %call77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 1, i32* %divert.addr, align 4
  %24 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %25 = load i32*, i32** %ss.addr, align 4
  %call78 = call i32 @apollonius_in(%struct.circ* %24, i32* %25, i32 -1, i32 1)
  store i32 %call78, i32* %res, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.end, %land.lhs.true73, %land.lhs.true, %complex_mul_cont
  store i32 0, i32* %i80, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc124, %if.end79
  %26 = load i32, i32* %i80, align 4
  %cmp82 = icmp slt i32 %26, 3
  br i1 %cmp82, label %for.body83, label %for.end126

for.body83:                                       ; preds = %for.cond81
  %27 = load double, double* %axb, align 8
  %tobool84 = fcmp une double %27, 0.000000e+00
  br i1 %tobool84, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body83
  %28 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %29 = load i32, i32* %i80, align 4
  %arrayidx85 = getelementptr inbounds %struct.circ, %struct.circ* %28, i32 %29
  %c86 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx85, i32 0, i32 0
  %c86.realp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 0
  %c86.real = load double, double* %c86.realp, align 8
  %c86.imagp = getelementptr inbounds { double, double }, { double, double }* %c86, i32 0, i32 1
  %c86.imag = load double, double* %c86.imagp, align 8
  %center.realp87 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real = load double, double* %center.realp87, align 8
  %center.imagp88 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag = load double, double* %center.imagp88, align 8
  %sub.r89 = fsub double %c86.real, %center.real
  %sub.i90 = fsub double %c86.imag, %center.imag
  br label %cond.end

cond.false:                                       ; preds = %for.body83
  %a.realp91 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 0
  %a.real92 = load double, double* %a.realp91, align 8
  %a.imagp93 = getelementptr inbounds { double, double }, { double, double }* %a, i32 0, i32 1
  %a.imag94 = load double, double* %a.imagp93, align 8
  %mul_ac95 = fmul double %a.real92, 0.000000e+00
  %mul_bd96 = fmul double %a.imag94, 1.000000e+00
  %mul_ad97 = fmul double %a.real92, 1.000000e+00
  %mul_bc98 = fmul double %a.imag94, 0.000000e+00
  %mul_r99 = fsub double %mul_ac95, %mul_bd96
  %mul_i100 = fadd double %mul_ad97, %mul_bc98
  %isnan_cmp101 = fcmp uno double %mul_r99, %mul_r99
  br i1 %isnan_cmp101, label %complex_mul_imag_nan102, label %complex_mul_cont106, !prof !5

complex_mul_imag_nan102:                          ; preds = %cond.false
  %isnan_cmp103 = fcmp uno double %mul_i100, %mul_i100
  br i1 %isnan_cmp103, label %complex_mul_libcall104, label %complex_mul_cont106, !prof !5

complex_mul_libcall104:                           ; preds = %complex_mul_imag_nan102
  call void @__muldc3({ double, double }* sret align 8 %tmp105, double %a.real92, double %a.imag94, double 0.000000e+00, double 1.000000e+00) #6
  %tmp105.realp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 0
  %tmp105.real = load double, double* %tmp105.realp, align 8
  %tmp105.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp105, i32 0, i32 1
  %tmp105.imag = load double, double* %tmp105.imagp, align 8
  br label %complex_mul_cont106

complex_mul_cont106:                              ; preds = %complex_mul_libcall104, %complex_mul_imag_nan102, %cond.false
  %real_mul_phi107 = phi double [ %mul_r99, %cond.false ], [ %mul_r99, %complex_mul_imag_nan102 ], [ %tmp105.real, %complex_mul_libcall104 ]
  %imag_mul_phi108 = phi double [ %mul_i100, %cond.false ], [ %mul_i100, %complex_mul_imag_nan102 ], [ %tmp105.imag, %complex_mul_libcall104 ]
  %30 = load i32, i32* %flip.addr, align 4
  %conv = sitofp i32 %30 to double
  %mul_ac109 = fmul double %real_mul_phi107, %conv
  %mul_bd110 = fmul double %imag_mul_phi108, 0.000000e+00
  %mul_ad111 = fmul double %real_mul_phi107, 0.000000e+00
  %mul_bc112 = fmul double %imag_mul_phi108, %conv
  %mul_r113 = fsub double %mul_ac109, %mul_bd110
  %mul_i114 = fadd double %mul_ad111, %mul_bc112
  %isnan_cmp115 = fcmp uno double %mul_r113, %mul_r113
  br i1 %isnan_cmp115, label %complex_mul_imag_nan116, label %complex_mul_cont120, !prof !5

complex_mul_imag_nan116:                          ; preds = %complex_mul_cont106
  %isnan_cmp117 = fcmp uno double %mul_i114, %mul_i114
  br i1 %isnan_cmp117, label %complex_mul_libcall118, label %complex_mul_cont120, !prof !5

complex_mul_libcall118:                           ; preds = %complex_mul_imag_nan116
  call void @__muldc3({ double, double }* sret align 8 %tmp119, double %real_mul_phi107, double %imag_mul_phi108, double %conv, double 0.000000e+00) #6
  %tmp119.realp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 0
  %tmp119.real = load double, double* %tmp119.realp, align 8
  %tmp119.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp119, i32 0, i32 1
  %tmp119.imag = load double, double* %tmp119.imagp, align 8
  br label %complex_mul_cont120

complex_mul_cont120:                              ; preds = %complex_mul_libcall118, %complex_mul_imag_nan116, %complex_mul_cont106
  %real_mul_phi121 = phi double [ %mul_r113, %complex_mul_cont106 ], [ %mul_r113, %complex_mul_imag_nan116 ], [ %tmp119.real, %complex_mul_libcall118 ]
  %imag_mul_phi122 = phi double [ %mul_i114, %complex_mul_cont106 ], [ %mul_i114, %complex_mul_imag_nan116 ], [ %tmp119.imag, %complex_mul_libcall118 ]
  br label %cond.end

cond.end:                                         ; preds = %complex_mul_cont120, %cond.true
  %cond.r = phi double [ %sub.r89, %cond.true ], [ %real_mul_phi121, %complex_mul_cont120 ]
  %cond.i = phi double [ %sub.i90, %cond.true ], [ %imag_mul_phi122, %complex_mul_cont120 ]
  %31 = load i32, i32* %i80, align 4
  %arrayidx123 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %31
  %arrayidx123.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 0
  %arrayidx123.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx123, i32 0, i32 1
  store double %cond.r, double* %arrayidx123.realp, align 16
  store double %cond.i, double* %arrayidx123.imagp, align 8
  br label %for.inc124

for.inc124:                                       ; preds = %cond.end
  %32 = load i32, i32* %i80, align 4
  %inc125 = add nsw i32 %32, 1
  store i32 %inc125, i32* %i80, align 4
  br label %for.cond81

for.end126:                                       ; preds = %for.cond81
  store i32 0, i32* %i127, align 4
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc160, %for.end126
  %33 = load i32, i32* %i127, align 4
  %cmp129 = icmp slt i32 %33, 3
  br i1 %cmp129, label %for.body131, label %for.end162

for.body131:                                      ; preds = %for.cond128
  %34 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %35 = load i32, i32* %i127, align 4
  %arrayidx132 = getelementptr inbounds %struct.circ, %struct.circ* %34, i32 %35
  %c133 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx132, i32 0, i32 0
  %c133.realp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 0
  %c133.real = load double, double* %c133.realp, align 8
  %c133.imagp = getelementptr inbounds { double, double }, { double, double }* %c133, i32 0, i32 1
  %c133.imag = load double, double* %c133.imagp, align 8
  %36 = load i32, i32* %i127, align 4
  %arrayidx134 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %36
  %arrayidx134.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 0
  %arrayidx134.real = load double, double* %arrayidx134.realp, align 16
  %arrayidx134.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx134, i32 0, i32 1
  %arrayidx134.imag = load double, double* %arrayidx134.imagp, align 8
  %37 = load i32, i32* %i127, align 4
  %arrayidx135 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %n, i32 0, i32 %37
  %arrayidx135.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 0
  %arrayidx135.real = load double, double* %arrayidx135.realp, align 16
  %arrayidx135.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx135, i32 0, i32 1
  %arrayidx135.imag = load double, double* %arrayidx135.imagp, align 8
  %indirect-arg-temp136.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 0
  %indirect-arg-temp136.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp136, i32 0, i32 1
  store double %arrayidx135.real, double* %indirect-arg-temp136.realp, align 8
  store double %arrayidx135.imag, double* %indirect-arg-temp136.imagp, align 8
  %call137 = call double @cabs({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp136) #6
  %38 = fdiv double %arrayidx134.real, %call137
  %39 = fdiv double %arrayidx134.imag, %call137
  %40 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %41 = load i32, i32* %i127, align 4
  %arrayidx138 = getelementptr inbounds %struct.circ, %struct.circ* %40, i32 %41
  %r139 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx138, i32 0, i32 1
  %42 = load double, double* %r139, align 8
  %mul.rl140 = fmul double %38, %42
  %mul.il = fmul double %39, %42
  %43 = load i32, i32* %i127, align 4
  %arrayidx141 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx141, align 4
  %conv142 = sitofp i32 %44 to double
  %mul_ac143 = fmul double %mul.rl140, %conv142
  %mul_bd144 = fmul double %mul.il, 0.000000e+00
  %mul_ad145 = fmul double %mul.rl140, 0.000000e+00
  %mul_bc146 = fmul double %mul.il, %conv142
  %mul_r147 = fsub double %mul_ac143, %mul_bd144
  %mul_i148 = fadd double %mul_ad145, %mul_bc146
  %isnan_cmp149 = fcmp uno double %mul_r147, %mul_r147
  br i1 %isnan_cmp149, label %complex_mul_imag_nan150, label %complex_mul_cont154, !prof !5

complex_mul_imag_nan150:                          ; preds = %for.body131
  %isnan_cmp151 = fcmp uno double %mul_i148, %mul_i148
  br i1 %isnan_cmp151, label %complex_mul_libcall152, label %complex_mul_cont154, !prof !5

complex_mul_libcall152:                           ; preds = %complex_mul_imag_nan150
  call void @__muldc3({ double, double }* sret align 8 %tmp153, double %mul.rl140, double %mul.il, double %conv142, double 0.000000e+00) #6
  %tmp153.realp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 0
  %tmp153.real = load double, double* %tmp153.realp, align 8
  %tmp153.imagp = getelementptr inbounds { double, double }, { double, double }* %tmp153, i32 0, i32 1
  %tmp153.imag = load double, double* %tmp153.imagp, align 8
  br label %complex_mul_cont154

complex_mul_cont154:                              ; preds = %complex_mul_libcall152, %complex_mul_imag_nan150, %for.body131
  %real_mul_phi155 = phi double [ %mul_r147, %for.body131 ], [ %mul_r147, %complex_mul_imag_nan150 ], [ %tmp153.real, %complex_mul_libcall152 ]
  %imag_mul_phi156 = phi double [ %mul_i148, %for.body131 ], [ %mul_i148, %complex_mul_imag_nan150 ], [ %tmp153.imag, %complex_mul_libcall152 ]
  %add.r157 = fadd double %c133.real, %real_mul_phi155
  %add.i158 = fadd double %c133.imag, %imag_mul_phi156
  %45 = load i32, i32* %i127, align 4
  %arrayidx159 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %45
  %arrayidx159.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 0
  %arrayidx159.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx159, i32 0, i32 1
  store double %add.r157, double* %arrayidx159.realp, align 16
  store double %add.i158, double* %arrayidx159.imagp, align 8
  br label %for.inc160

for.inc160:                                       ; preds = %complex_mul_cont154
  %46 = load i32, i32* %i127, align 4
  %inc161 = add nsw i32 %46, 1
  store i32 %inc161, i32* %i127, align 4
  br label %for.cond128

for.end162:                                       ; preds = %for.cond128
  store i32 0, i32* %i163, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc176, %for.end162
  %47 = load i32, i32* %i163, align 4
  %cmp165 = icmp slt i32 %47, 3
  br i1 %cmp165, label %for.body167, label %for.end178

for.body167:                                      ; preds = %for.cond164
  %48 = load i32, i32* %i163, align 4
  %arrayidx168 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %48
  %arrayidx168.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 0
  %arrayidx168.real = load double, double* %arrayidx168.realp, align 16
  %arrayidx168.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx168, i32 0, i32 1
  %arrayidx168.imag = load double, double* %arrayidx168.imagp, align 8
  %49 = load i32, i32* %i163, align 4
  %arrayidx169 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %49
  %arrayidx169.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 0
  %arrayidx169.real = load double, double* %arrayidx169.realp, align 16
  %arrayidx169.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx169, i32 0, i32 1
  %arrayidx169.imag = load double, double* %arrayidx169.imagp, align 8
  %sub.r170 = fsub double %arrayidx168.real, %arrayidx169.real
  %sub.i171 = fsub double %arrayidx168.imag, %arrayidx169.imag
  %indirect-arg-temp172.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 0
  %indirect-arg-temp172.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp172, i32 0, i32 1
  store double %sub.r170, double* %indirect-arg-temp172.realp, align 8
  store double %sub.i171, double* %indirect-arg-temp172.imagp, align 8
  %call173 = call double @abs2({ double, double }* byval({ double, double }) align 8 %indirect-arg-temp172)
  %50 = load double, double* %diff, align 8
  %add = fadd double %50, %call173
  store double %add, double* %diff, align 8
  %51 = load i32, i32* %i163, align 4
  %arrayidx174 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %t, i32 0, i32 %51
  %arrayidx174.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 0
  %arrayidx174.real = load double, double* %arrayidx174.realp, align 16
  %arrayidx174.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx174, i32 0, i32 1
  %arrayidx174.imag = load double, double* %arrayidx174.imagp, align 8
  %52 = load i32, i32* %i163, align 4
  %arrayidx175 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 %52
  %arrayidx175.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 0
  %arrayidx175.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx175, i32 0, i32 1
  store double %arrayidx174.real, double* %arrayidx175.realp, align 16
  store double %arrayidx174.imag, double* %arrayidx175.imagp, align 8
  br label %for.inc176

for.inc176:                                       ; preds = %for.body167
  %53 = load i32, i32* %i163, align 4
  %inc177 = add nsw i32 %53, 1
  store i32 %inc177, i32* %i163, align 4
  br label %for.cond164

for.end178:                                       ; preds = %for.cond164
  %54 = load double, double* %diff, align 8
  %55 = load double, double* %diff_old, align 8
  %cmp179 = fcmp oge double %54, %55
  br i1 %cmp179, label %land.lhs.true181, label %if.end190

land.lhs.true181:                                 ; preds = %for.end178
  %56 = load double, double* %diff_old, align 8
  %cmp182 = fcmp oge double %56, 0.000000e+00
  br i1 %cmp182, label %if.then184, label %if.end190

if.then184:                                       ; preds = %land.lhs.true181
  %57 = load i32, i32* %iter, align 4
  %inc185 = add nsw i32 %57, 1
  store i32 %inc185, i32* %iter, align 4
  %cmp186 = icmp sgt i32 %57, 20
  br i1 %cmp186, label %if.then188, label %if.end189

if.then188:                                       ; preds = %if.then184
  %58 = load i32, i32* %res, align 4
  store i32 %58, i32* %retval, align 4
  br label %return

if.end189:                                        ; preds = %if.then184
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %land.lhs.true181, %for.end178
  %59 = load double, double* %diff, align 8
  store double %59, double* %diff_old, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  %60 = load double, double* %axb, align 8
  %tobool192 = fcmp une double %60, 0.000000e+00
  br i1 %tobool192, label %if.then193, label %if.else

if.then193:                                       ; preds = %while.end
  %center.realp194 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real195 = load double, double* %center.realp194, align 8
  %center.imagp196 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag197 = load double, double* %center.imagp196, align 8
  %indirect-arg-temp198.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 0
  %indirect-arg-temp198.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198, i32 0, i32 1
  store double %center.real195, double* %indirect-arg-temp198.realp, align 8
  store double %center.imag197, double* %indirect-arg-temp198.imagp, align 8
  %61 = bitcast { double, double }* %indirect-arg-temp198255 to i8*
  %62 = bitcast { double, double }* %indirect-arg-temp198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 16, i1 false)
  %__x.realp.i256 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 0
  %__x.real.i257 = load double, double* %__x.realp.i256, align 8
  %__x.imagp.i258 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp198255, i32 0, i32 1
  %__x.imag.i259 = load double, double* %__x.imagp.i258, align 8
  %center.realp200 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 0
  %center.real201 = load double, double* %center.realp200, align 8
  %center.imagp202 = getelementptr inbounds { double, double }, { double, double }* %center, i32 0, i32 1
  %center.imag203 = load double, double* %center.imagp202, align 8
  %indirect-arg-temp204.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 0
  %indirect-arg-temp204.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204, i32 0, i32 1
  store double %center.real201, double* %indirect-arg-temp204.realp, align 8
  store double %center.imag203, double* %indirect-arg-temp204.imagp, align 8
  %63 = bitcast { double, double }* %indirect-arg-temp204250 to i8*
  %64 = bitcast { double, double }* %indirect-arg-temp204 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %64, i64 16, i1 false)
  %__x.realp.i251 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 0
  %__x.real.i252 = load double, double* %__x.realp.i251, align 8
  %__x.imagp.i253 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp204250, i32 0, i32 1
  %__x.imag.i254 = load double, double* %__x.imagp.i253, align 8
  %65 = load double, double* %r, align 8
  %call206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), double %__x.real.i257, double %__x.imag.i254, double %65)
  br label %if.end226

if.else:                                          ; preds = %while.end
  %arrayidx207 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx207.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 0
  %arrayidx207.real = load double, double* %arrayidx207.realp, align 16
  %arrayidx207.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx207, i32 0, i32 1
  %arrayidx207.imag = load double, double* %arrayidx207.imagp, align 8
  %indirect-arg-temp208.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 0
  %indirect-arg-temp208.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208, i32 0, i32 1
  store double %arrayidx207.real, double* %indirect-arg-temp208.realp, align 8
  store double %arrayidx207.imag, double* %indirect-arg-temp208.imagp, align 8
  %66 = bitcast { double, double }* %indirect-arg-temp208245 to i8*
  %67 = bitcast { double, double }* %indirect-arg-temp208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %67, i64 16, i1 false)
  %__x.realp.i246 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 0
  %__x.real.i247 = load double, double* %__x.realp.i246, align 8
  %__x.imagp.i248 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp208245, i32 0, i32 1
  %__x.imag.i249 = load double, double* %__x.imagp.i248, align 8
  %arrayidx210 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 0
  %arrayidx210.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 0
  %arrayidx210.real = load double, double* %arrayidx210.realp, align 16
  %arrayidx210.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx210, i32 0, i32 1
  %arrayidx210.imag = load double, double* %arrayidx210.imagp, align 8
  %indirect-arg-temp211.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 0
  %indirect-arg-temp211.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211, i32 0, i32 1
  store double %arrayidx210.real, double* %indirect-arg-temp211.realp, align 8
  store double %arrayidx210.imag, double* %indirect-arg-temp211.imagp, align 8
  %68 = bitcast { double, double }* %indirect-arg-temp211240 to i8*
  %69 = bitcast { double, double }* %indirect-arg-temp211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 16, i1 false)
  %__x.realp.i241 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 0
  %__x.real.i242 = load double, double* %__x.realp.i241, align 8
  %__x.imagp.i243 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp211240, i32 0, i32 1
  %__x.imag.i244 = load double, double* %__x.imagp.i243, align 8
  %arrayidx213 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx213.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 0
  %arrayidx213.real = load double, double* %arrayidx213.realp, align 16
  %arrayidx213.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx213, i32 0, i32 1
  %arrayidx213.imag = load double, double* %arrayidx213.imagp, align 8
  %indirect-arg-temp214.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 0
  %indirect-arg-temp214.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214, i32 0, i32 1
  store double %arrayidx213.real, double* %indirect-arg-temp214.realp, align 8
  store double %arrayidx213.imag, double* %indirect-arg-temp214.imagp, align 8
  %70 = bitcast { double, double }* %indirect-arg-temp214235 to i8*
  %71 = bitcast { double, double }* %indirect-arg-temp214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 16, i1 false)
  %__x.realp.i236 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 0
  %__x.real.i237 = load double, double* %__x.realp.i236, align 8
  %__x.imagp.i238 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp214235, i32 0, i32 1
  %__x.imag.i239 = load double, double* %__x.imagp.i238, align 8
  %arrayidx216 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 1
  %arrayidx216.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 0
  %arrayidx216.real = load double, double* %arrayidx216.realp, align 16
  %arrayidx216.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx216, i32 0, i32 1
  %arrayidx216.imag = load double, double* %arrayidx216.imagp, align 8
  %indirect-arg-temp217.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 0
  %indirect-arg-temp217.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217, i32 0, i32 1
  store double %arrayidx216.real, double* %indirect-arg-temp217.realp, align 8
  store double %arrayidx216.imag, double* %indirect-arg-temp217.imagp, align 8
  %72 = bitcast { double, double }* %indirect-arg-temp217230 to i8*
  %73 = bitcast { double, double }* %indirect-arg-temp217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 16, i1 false)
  %__x.realp.i231 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 0
  %__x.real.i232 = load double, double* %__x.realp.i231, align 8
  %__x.imagp.i233 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp217230, i32 0, i32 1
  %__x.imag.i234 = load double, double* %__x.imagp.i233, align 8
  %arrayidx219 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx219.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 0
  %arrayidx219.real = load double, double* %arrayidx219.realp, align 16
  %arrayidx219.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx219, i32 0, i32 1
  %arrayidx219.imag = load double, double* %arrayidx219.imagp, align 8
  %indirect-arg-temp220.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 0
  %indirect-arg-temp220.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220, i32 0, i32 1
  store double %arrayidx219.real, double* %indirect-arg-temp220.realp, align 8
  store double %arrayidx219.imag, double* %indirect-arg-temp220.imagp, align 8
  %74 = bitcast { double, double }* %indirect-arg-temp220229 to i8*
  %75 = bitcast { double, double }* %indirect-arg-temp220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 16, i1 false)
  %__x.realp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 0
  %__x.real.i = load double, double* %__x.realp.i, align 8
  %__x.imagp.i = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp220229, i32 0, i32 1
  %__x.imag.i = load double, double* %__x.imagp.i, align 8
  %arrayidx222 = getelementptr inbounds [3 x { double, double }], [3 x { double, double }]* %x, i32 0, i32 2
  %arrayidx222.realp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 0
  %arrayidx222.real = load double, double* %arrayidx222.realp, align 16
  %arrayidx222.imagp = getelementptr inbounds { double, double }, { double, double }* %arrayidx222, i32 0, i32 1
  %arrayidx222.imag = load double, double* %arrayidx222.imagp, align 8
  %indirect-arg-temp223.realp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 0
  %indirect-arg-temp223.imagp = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223, i32 0, i32 1
  store double %arrayidx222.real, double* %indirect-arg-temp223.realp, align 8
  store double %arrayidx222.imag, double* %indirect-arg-temp223.imagp, align 8
  %76 = bitcast { double, double }* %indirect-arg-temp223260 to i8*
  %77 = bitcast { double, double }* %indirect-arg-temp223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 16, i1 false)
  %__x.realp.i261 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 0
  %__x.real.i262 = load double, double* %__x.realp.i261, align 8
  %__x.imagp.i263 = getelementptr inbounds { double, double }, { double, double }* %indirect-arg-temp223260, i32 0, i32 1
  %__x.imag.i264 = load double, double* %__x.imagp.i263, align 8
  %call225 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i32 0, i32 0), double %__x.real.i247, double %__x.imag.i244, double %__x.real.i237, double %__x.imag.i234, double %__x.real.i, double %__x.imag.i264)
  br label %if.end226

if.end226:                                        ; preds = %if.else, %if.then193
  %78 = load i32, i32* %res, align 4
  %add227 = add nsw i32 %78, 1
  store i32 %add227, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end226, %if.then188, %if.then76
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: nounwind
declare double @cabs({ double, double }* byval({ double, double }) align 8 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @apollonius(%struct.circ* %aa) #0 {
entry:
  %aa.addr = alloca %struct.circ*, align 4
  %s = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store %struct.circ* %aa, %struct.circ** %aa.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %and = and i32 %1, 1
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  store i32 %and, i32* %arrayidx, align 4
  %2 = load i32, i32* %i, align 4
  %and1 = and i32 %2, 2
  %arrayidx2 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  store i32 %and1, i32* %arrayidx2, align 4
  %3 = load i32, i32* %i, align 4
  %and3 = and i32 %3, 4
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  store i32 %and3, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %4 = load i32, i32* %arrayidx5, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.circ, %struct.circ* %5, i32 0
  %r = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx6, i32 0, i32 1
  %6 = load double, double* %r, align 8
  %tobool7 = fcmp une double %6, 0.000000e+00
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 1
  %7 = load i32, i32* %arrayidx8, align 4
  %tobool9 = icmp ne i32 %7, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end15

land.lhs.true10:                                  ; preds = %if.end
  %8 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx11 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 1
  %r12 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx11, i32 0, i32 1
  %9 = load double, double* %r12, align 8
  %tobool13 = fcmp une double %9, 0.000000e+00
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %land.lhs.true10
  br label %for.inc

if.end15:                                         ; preds = %land.lhs.true10, %if.end
  %arrayidx16 = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 2
  %10 = load i32, i32* %arrayidx16, align 4
  %tobool17 = icmp ne i32 %10, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end23

land.lhs.true18:                                  ; preds = %if.end15
  %11 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arrayidx19 = getelementptr inbounds %struct.circ, %struct.circ* %11, i32 2
  %r20 = getelementptr inbounds %struct.circ, %struct.circ* %arrayidx19, i32 0, i32 1
  %12 = load double, double* %r20, align 8
  %tobool21 = fcmp une double %12, 0.000000e+00
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %land.lhs.true18
  br label %for.inc

if.end23:                                         ; preds = %land.lhs.true18, %if.end15
  %13 = load %struct.circ*, %struct.circ** %aa.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %s, i32 0, i32 0
  %call = call i32 @apollonius_in(%struct.circ* %13, i32* %arraydecay, i32 1, i32 0)
  %14 = load i32, i32* %sum, align 4
  %add = add nsw i32 %14, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end23, %if.then22, %if.then14, %if.then
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %sum, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %a = alloca [3 x %struct.circ], align 16
  %b = alloca [3 x %struct.circ], align 16
  %c = alloca [3 x %struct.circ], align 16
  %0 = bitcast [3 x %struct.circ]* %a to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 72, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.circ]*
  %2 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.circ, %struct.circ* %2, i32 0, i32 1
  store double 1.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 1
  %5 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 0
  store double 4.000000e+00, double* %6, align 8
  %7 = getelementptr inbounds %struct.circ, %struct.circ* %4, i32 0, i32 1
  store double 1.000000e+00, double* %7, align 8
  %8 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %1, i32 0, i32 2
  %9 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 0
  %10 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 0
  store double 2.000000e+00, double* %10, align 16
  %11 = getelementptr inbounds { double, double }, { double, double }* %9, i32 0, i32 1
  store double 4.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %struct.circ, %struct.circ* %8, i32 0, i32 1
  store double 1.000000e+00, double* %12, align 16
  %13 = bitcast [3 x %struct.circ]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %13, i8 0, i32 72, i1 false)
  %14 = bitcast i8* %13 to [3 x %struct.circ]*
  %15 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 0
  %16 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, double }, { double, double }* %16, i32 0, i32 0
  store double -3.000000e+00, double* %17, align 16
  %18 = getelementptr inbounds %struct.circ, %struct.circ* %15, i32 0, i32 1
  store double 2.000000e+00, double* %18, align 16
  %19 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 1
  %20 = getelementptr inbounds %struct.circ, %struct.circ* %19, i32 0, i32 1
  store double 1.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %14, i32 0, i32 2
  %22 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, double }, { double, double }* %22, i32 0, i32 0
  store double 3.000000e+00, double* %23, align 16
  %24 = getelementptr inbounds %struct.circ, %struct.circ* %21, i32 0, i32 1
  store double 2.000000e+00, double* %24, align 16
  %25 = bitcast [3 x %struct.circ]* %c to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %25, i8 0, i32 72, i1 false)
  %26 = bitcast i8* %25 to [3 x %struct.circ]*
  %27 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 0
  %29 = getelementptr inbounds { double, double }, { double, double }* %28, i32 0, i32 0
  store double -2.000000e+00, double* %29, align 16
  %30 = getelementptr inbounds %struct.circ, %struct.circ* %27, i32 0, i32 1
  store double 1.000000e+00, double* %30, align 16
  %31 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 1
  %32 = getelementptr inbounds %struct.circ, %struct.circ* %31, i32 0, i32 1
  store double 1.000000e+00, double* %32, align 8
  %33 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %26, i32 0, i32 2
  %34 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, double }, { double, double }* %34, i32 0, i32 1
  store double 2.000000e+00, double* %35, align 8
  %36 = getelementptr inbounds %struct.circ, %struct.circ* %33, i32 0, i32 1
  store double 1.000000e+00, double* %36, align 16
  %call = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %a, i32 0, i32 0
  %call1 = call i32 @apollonius(%struct.circ* %arraydecay)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %arraydecay3 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %b, i32 0, i32 0
  %call4 = call i32 @apollonius(%struct.circ* %arraydecay3)
  %call5 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay6 = getelementptr inbounds [3 x %struct.circ], [3 x %struct.circ]* %c, i32 0, i32 0
  %call7 = call i32 @apollonius(%struct.circ* %arraydecay6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @puts(i8* %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i64 %2, i1 immarg %3) #5

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL9__tg_conjCd: %agg.result"}
!4 = distinct !{!4, !"_ZL9__tg_conjCd"}
!5 = !{!"branch_weights", i32 1, i32 1048575}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
