
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for droot()

; ModuleID = './Digital_root.c.bc'
source_filename = "./Digital_root.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.x = private unnamed_addr constant [4 x i64] [i64 627615, i64 39390, i64 588225, i64 393900588225], align 16
@.str = private unnamed_addr constant [24 x i8] c"%lld: pers %d, root %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @droot(i64 %x, i32 %base, i32* %pers) #0 {
entry:
  %x.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %pers.addr = alloca i32*, align 4
  %d = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i32* %pers, i32** %pers.addr, align 4
  store i32 0, i32* %d, align 4
  %0 = load i32*, i32** %pers.addr, align 4
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %pers.addr, align 4
  store i32 0, i32* %1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %if.then
  %2 = load i64, i64* %x.addr, align 8
  %3 = load i32, i32* %base.addr, align 4
  %conv = sext i32 %3 to i64
  %cmp = icmp sge i64 %2, %conv
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %d, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i64, i64* %x.addr, align 8
  %tobool3 = icmp ne i64 %4, 0
  br i1 %tobool3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %5 = load i64, i64* %x.addr, align 8
  %6 = load i32, i32* %base.addr, align 4
  %conv5 = sext i32 %6 to i64
  %rem = srem i64 %5, %conv5
  %7 = load i32, i32* %d, align 4
  %conv6 = sext i32 %7 to i64
  %add = add nsw i64 %conv6, %rem
  %conv7 = trunc i64 %add to i32
  store i32 %conv7, i32* %d, align 4
  %8 = load i32, i32* %base.addr, align 4
  %conv8 = sext i32 %8 to i64
  %9 = load i64, i64* %x.addr, align 8
  %div = sdiv i64 %9, %conv8
  store i64 %div, i64* %x.addr, align 8
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %10 = load i32, i32* %d, align 4
  %conv10 = sext i32 %10 to i64
  store i64 %conv10, i64* %x.addr, align 8
  %11 = load i32*, i32** %pers.addr, align 4
  %12 = load i32, i32* %11, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %11, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  br label %if.end19

if.else:                                          ; preds = %entry
  %13 = load i64, i64* %x.addr, align 8
  %tobool12 = icmp ne i64 %13, 0
  br i1 %tobool12, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %14 = load i64, i64* %x.addr, align 8
  %15 = load i32, i32* %base.addr, align 4
  %sub = sub nsw i32 %15, 1
  %conv13 = sext i32 %sub to i64
  %rem14 = srem i64 %14, %conv13
  %conv15 = trunc i64 %rem14 to i32
  store i32 %conv15, i32* %d, align 4
  %tobool16 = icmp ne i32 %conv15, 0
  br i1 %tobool16, label %if.end, label %if.then17

if.then17:                                        ; preds = %land.lhs.true
  %16 = load i32, i32* %base.addr, align 4
  %sub18 = sub nsw i32 %16, 1
  store i32 %sub18, i32* %d, align 4
  br label %if.end

if.end:                                           ; preds = %if.then17, %land.lhs.true, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end, %for.end11
  %17 = load i32, i32* %d, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %d = alloca i32, align 4
  %pers = alloca i32, align 4
  %x = alloca [4 x i64], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i64]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i64]* @__const.main.x to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %x, i32 0, i32 %2
  %3 = load i64, i64* %arrayidx, align 8
  %call = call i32 @droot(i64 %3, i32 10, i32* %pers)
  store i32 %call, i32* %d, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i64], [4 x i64]* %x, i32 0, i32 %4
  %5 = load i64, i64* %arrayidx1, align 8
  %6 = load i32, i32* %pers, align 4
  %7 = load i32, i32* %d, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i64 %5, i32 %6, i32 %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i32 %3 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sge i64 %2, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
%2:i64 = var
%3:i1 = sle %1, %2
infer %3

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i64 %4, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i32 %6 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i64 %5, %conv5
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = srem %0, %2
infer %3 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i32 %7 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %add = add nsw i64 %conv6, %rem
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = srem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = addnsw %3, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv7 = trunc i64 %add to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = srem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = addnsw %3, %5
%7:i32 = trunc %6
infer %7

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i32 %8 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i64 %9, %conv8
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = sdiv %0, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i32 %10 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool12 = icmp ne i64 %13, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %conv13 = sext i32 %sub to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %rem14 = srem i64 %14, %conv13
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i64 = sext %2
%4:i64 = srem %0, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv15 = trunc i64 %rem14 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i64 = sext %2
%4:i64 = srem %0, %3
%5:i32 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %tobool16 = icmp ne i32 %conv15, 0
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i64 = sext %2
%4:i64 = srem %0, %3
%5:i32 = trunc %4 (hasExternalUses)
%6:i1 = ne 0:i32, %5
infer %6

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub18 = sub nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
%2:i64 = var
%3:i1 = sle %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = srem %0, %2
infer %3 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -73728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = srem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = addnsw %3, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = srem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = addnsw %3, %5
%7:i32 = trunc %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1224677202
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = sdiv %0, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i64 = sext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i64 = sext %2
%4:i64 = srem %0, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i64 = sext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i64 = sext %2
%4:i64 = srem %0, %3
%5:i32 = trunc %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 52009121
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i64 = sext %2
%4:i64 = srem %0, %3
%5:i32 = trunc %4 (hasExternalUses)
%6:i1 = ne 0:i32, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for droot()

; entering Souper's runOnFunction() for main()

; ModuleID = './Digital_root.c.bc'
source_filename = "./Digital_root.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.x = private unnamed_addr constant [4 x i64] [i64 627615, i64 39390, i64 588225, i64 393900588225], align 16
@.str = private unnamed_addr constant [24 x i8] c"%lld: pers %d, root %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @droot(i64 %x, i32 %base, i32* %pers) #0 {
entry:
  %x.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %pers.addr = alloca i32*, align 4
  %d = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i32* %pers, i32** %pers.addr, align 4
  store i32 0, i32* %d, align 4
  %0 = load i32*, i32** %pers.addr, align 4
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %pers.addr, align 4
  store i32 0, i32* %1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %if.then
  %2 = load i64, i64* %x.addr, align 8
  %3 = load i32, i32* %base.addr, align 4
  %conv = sext i32 %3 to i64
  %cmp = icmp sge i64 %2, %conv
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %d, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i64, i64* %x.addr, align 8
  %tobool3 = icmp ne i64 %4, 0
  br i1 %tobool3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %5 = load i64, i64* %x.addr, align 8
  %6 = load i32, i32* %base.addr, align 4
  %conv5 = sext i32 %6 to i64
  %rem = srem i64 %5, %conv5
  %7 = load i32, i32* %d, align 4
  %conv6 = sext i32 %7 to i64
  %add = add nsw i64 %conv6, %rem
  %conv7 = trunc i64 %add to i32
  store i32 %conv7, i32* %d, align 4
  %8 = load i32, i32* %base.addr, align 4
  %conv8 = sext i32 %8 to i64
  %9 = load i64, i64* %x.addr, align 8
  %div = sdiv i64 %9, %conv8
  store i64 %div, i64* %x.addr, align 8
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %10 = load i32, i32* %d, align 4
  %conv10 = sext i32 %10 to i64
  store i64 %conv10, i64* %x.addr, align 8
  %11 = load i32*, i32** %pers.addr, align 4
  %12 = load i32, i32* %11, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %11, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  br label %if.end19

if.else:                                          ; preds = %entry
  %13 = load i64, i64* %x.addr, align 8
  %tobool12 = icmp ne i64 %13, 0
  br i1 %tobool12, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %14 = load i64, i64* %x.addr, align 8
  %15 = load i32, i32* %base.addr, align 4
  %sub = sub nsw i32 %15, 1
  %conv13 = sext i32 %sub to i64
  %rem14 = srem i64 %14, %conv13
  %conv15 = trunc i64 %rem14 to i32
  store i32 %conv15, i32* %d, align 4
  %tobool16 = icmp ne i32 %conv15, 0
  br i1 %tobool16, label %if.end, label %if.then17

if.then17:                                        ; preds = %land.lhs.true
  %16 = load i32, i32* %base.addr, align 4
  %sub18 = sub nsw i32 %16, 1
  store i32 %sub18, i32* %d, align 4
  br label %if.end

if.end:                                           ; preds = %if.then17, %land.lhs.true, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end, %for.end11
  %17 = load i32, i32* %d, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %d = alloca i32, align 4
  %pers = alloca i32, align 4
  %x = alloca [4 x i64], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i64]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i64]* @__const.main.x to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i64], [4 x i64]* %x, i32 0, i32 %2
  %3 = load i64, i64* %arrayidx, align 8
  %call = call i32 @droot(i64 %3, i32 10, i32* %pers)
  store i32 %call, i32* %d, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i64], [4 x i64]* %x, i32 0, i32 %4
  %5 = load i64, i64* %arrayidx1, align 8
  %6 = load i32, i32* %pers, align 4
  %7 = load i32, i32* %d, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i64 %5, i32 %6, i32 %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %arrayidx, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @droot(i64 %3, i32 10, i32* %pers)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %arrayidx1, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %pers, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
