
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for icmp()

; ModuleID = './Stem-and-leaf_plot.c.bc'
source_filename = "./Stem-and-leaf_plot.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%s%3d |\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@__const.main.data = private unnamed_addr constant [121 x i32] [i32 12, i32 127, i32 28, i32 42, i32 39, i32 113, i32 42, i32 18, i32 44, i32 118, i32 44, i32 37, i32 113, i32 124, i32 37, i32 48, i32 127, i32 36, i32 29, i32 31, i32 125, i32 139, i32 131, i32 115, i32 105, i32 132, i32 104, i32 123, i32 35, i32 113, i32 122, i32 42, i32 117, i32 119, i32 58, i32 109, i32 23, i32 105, i32 63, i32 27, i32 44, i32 105, i32 99, i32 41, i32 128, i32 121, i32 116, i32 125, i32 32, i32 61, i32 37, i32 127, i32 29, i32 113, i32 121, i32 58, i32 114, i32 126, i32 53, i32 114, i32 96, i32 25, i32 109, i32 7, i32 31, i32 141, i32 46, i32 13, i32 27, i32 43, i32 117, i32 116, i32 27, i32 7, i32 68, i32 40, i32 31, i32 115, i32 124, i32 42, i32 128, i32 52, i32 71, i32 118, i32 117, i32 38, i32 27, i32 106, i32 33, i32 117, i32 116, i32 111, i32 40, i32 119, i32 47, i32 105, i32 57, i32 122, i32 109, i32 124, i32 115, i32 43, i32 120, i32 43, i32 27, i32 27, i32 18, i32 28, i32 48, i32 125, i32 107, i32 114, i32 34, i32 133, i32 45, i32 120, i32 30, i32 127, i32 31, i32 116, i32 146], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @icmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i32*
  %2 = load i32, i32* %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %cmp = icmp slt i32 %2, %5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load i8*, i8** %a.addr, align 4
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = load i8*, i8** %b.addr, align 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %cmp1 = icmp sgt i32 %8, %11
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @leaf_plot(i32* %x, i32 %len) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32*, i32** %x.addr, align 4
  %1 = bitcast i32* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 4, i32 (i8*, i8*)* @icmp)
  %3 = load i32*, i32** %x.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 0
  %4 = load i32, i32* %arrayidx, align 4
  %div = sdiv i32 %4, 10
  %sub = sub nsw i32 %div, 1
  store i32 %sub, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %x.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %div2 = sdiv i32 %9, 10
  store i32 %div2, i32* %d, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %d, align 4
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %10, %11
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %12, 0
  %13 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* %cond, i32 %inc)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32*, i32** %x.addr, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %rem = srem i32 %17, 10
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %rem)
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %18 = load i32, i32* %j, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %data = alloca [121 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [121 x i32]* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([121 x i32]* @__const.main.data to i8*), i32 484, i1 false)
  %arraydecay = getelementptr inbounds [121 x i32], [121 x i32]* %data, i32 0, i32 0
  call void @leaf_plot(i32* %arraydecay, i32 121)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %8, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp1 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for icmp()

; entering Souper's runOnFunction() for leaf_plot()

; ModuleID = './Stem-and-leaf_plot.c.bc'
source_filename = "./Stem-and-leaf_plot.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%s%3d |\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@__const.main.data = private unnamed_addr constant [121 x i32] [i32 12, i32 127, i32 28, i32 42, i32 39, i32 113, i32 42, i32 18, i32 44, i32 118, i32 44, i32 37, i32 113, i32 124, i32 37, i32 48, i32 127, i32 36, i32 29, i32 31, i32 125, i32 139, i32 131, i32 115, i32 105, i32 132, i32 104, i32 123, i32 35, i32 113, i32 122, i32 42, i32 117, i32 119, i32 58, i32 109, i32 23, i32 105, i32 63, i32 27, i32 44, i32 105, i32 99, i32 41, i32 128, i32 121, i32 116, i32 125, i32 32, i32 61, i32 37, i32 127, i32 29, i32 113, i32 121, i32 58, i32 114, i32 126, i32 53, i32 114, i32 96, i32 25, i32 109, i32 7, i32 31, i32 141, i32 46, i32 13, i32 27, i32 43, i32 117, i32 116, i32 27, i32 7, i32 68, i32 40, i32 31, i32 115, i32 124, i32 42, i32 128, i32 52, i32 71, i32 118, i32 117, i32 38, i32 27, i32 106, i32 33, i32 117, i32 116, i32 111, i32 40, i32 119, i32 47, i32 105, i32 57, i32 122, i32 109, i32 124, i32 115, i32 43, i32 120, i32 43, i32 27, i32 27, i32 18, i32 28, i32 48, i32 125, i32 107, i32 114, i32 34, i32 133, i32 45, i32 120, i32 30, i32 127, i32 31, i32 116, i32 146], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @icmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i32*
  %2 = load i32, i32* %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %cmp = icmp slt i32 %2, %5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load i8*, i8** %a.addr, align 4
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = load i8*, i8** %b.addr, align 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %cmp1 = icmp sgt i32 %8, %11
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @leaf_plot(i32* %x, i32 %len) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32*, i32** %x.addr, align 4
  %1 = bitcast i32* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 4, i32 (i8*, i8*)* @icmp)
  %3 = load i32*, i32** %x.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 0
  %4 = load i32, i32* %arrayidx, align 4
  %div = sdiv i32 %4, 10
  %sub = sub nsw i32 %div, 1
  store i32 %sub, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %x.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %div2 = sdiv i32 %9, 10
  store i32 %div2, i32* %d, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %d, align 4
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %10, %11
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %12, 0
  %13 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* %cond, i32 %inc)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32*, i32** %x.addr, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %rem = srem i32 %17, 10
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %rem)
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %18 = load i32, i32* %j, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %data = alloca [121 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [121 x i32]* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([121 x i32]* @__const.main.data to i8*), i32 484, i1 false)
  %arraydecay = getelementptr inbounds [121 x i32], [121 x i32]* %data, i32 0, i32 0
  call void @leaf_plot(i32* %arraydecay, i32 121)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %4, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %div, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div2 = sdiv i32 %9, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %17, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
%2:i32 = subnsw %1, 1:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -113246209
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sdiv %0, 10:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for leaf_plot()

; entering Souper's runOnFunction() for main()

; ModuleID = './Stem-and-leaf_plot.c.bc'
source_filename = "./Stem-and-leaf_plot.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%s%3d |\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@__const.main.data = private unnamed_addr constant [121 x i32] [i32 12, i32 127, i32 28, i32 42, i32 39, i32 113, i32 42, i32 18, i32 44, i32 118, i32 44, i32 37, i32 113, i32 124, i32 37, i32 48, i32 127, i32 36, i32 29, i32 31, i32 125, i32 139, i32 131, i32 115, i32 105, i32 132, i32 104, i32 123, i32 35, i32 113, i32 122, i32 42, i32 117, i32 119, i32 58, i32 109, i32 23, i32 105, i32 63, i32 27, i32 44, i32 105, i32 99, i32 41, i32 128, i32 121, i32 116, i32 125, i32 32, i32 61, i32 37, i32 127, i32 29, i32 113, i32 121, i32 58, i32 114, i32 126, i32 53, i32 114, i32 96, i32 25, i32 109, i32 7, i32 31, i32 141, i32 46, i32 13, i32 27, i32 43, i32 117, i32 116, i32 27, i32 7, i32 68, i32 40, i32 31, i32 115, i32 124, i32 42, i32 128, i32 52, i32 71, i32 118, i32 117, i32 38, i32 27, i32 106, i32 33, i32 117, i32 116, i32 111, i32 40, i32 119, i32 47, i32 105, i32 57, i32 122, i32 109, i32 124, i32 115, i32 43, i32 120, i32 43, i32 27, i32 27, i32 18, i32 28, i32 48, i32 125, i32 107, i32 114, i32 34, i32 133, i32 45, i32 120, i32 30, i32 127, i32 31, i32 116, i32 146], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @icmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i32*
  %2 = load i32, i32* %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %cmp = icmp slt i32 %2, %5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load i8*, i8** %a.addr, align 4
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = load i8*, i8** %b.addr, align 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %cmp1 = icmp sgt i32 %8, %11
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @leaf_plot(i32* %x, i32 %len) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32*, i32** %x.addr, align 4
  %1 = bitcast i32* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 4, i32 (i8*, i8*)* @icmp)
  %3 = load i32*, i32** %x.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 0
  %4 = load i32, i32* %arrayidx, align 4
  %div = sdiv i32 %4, 10
  %sub = sub nsw i32 %div, 1
  store i32 %sub, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %x.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %div2 = sdiv i32 %9, 10
  store i32 %div2, i32* %d, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %d, align 4
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %10, %11
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %j, align 4
  %tobool = icmp ne i32 %12, 0
  %13 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* %cond, i32 %inc)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32*, i32** %x.addr, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %rem = srem i32 %17, 10
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %rem)
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %18 = load i32, i32* %j, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %data = alloca [121 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [121 x i32]* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([121 x i32]* @__const.main.data to i8*), i32 484, i1 false)
  %arraydecay = getelementptr inbounds [121 x i32], [121 x i32]* %data, i32 0, i32 0
  call void @leaf_plot(i32* %arraydecay, i32 121)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
