
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for meanAngle()

; ModuleID = './Averages-Mean_angle.c.bc'
source_filename = "./Averages-Mean_angle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.angleSet1 = private unnamed_addr constant [2 x double] [double 3.500000e+02, double 1.000000e+01], align 16
@__const.main.angleSet2 = private unnamed_addr constant [4 x double] [double 9.000000e+01, double 1.800000e+02, double 2.700000e+02, double 3.600000e+02], align 16
@__const.main.angleSet3 = private unnamed_addr constant [3 x double] [double 1.000000e+01, double 2.000000e+01, double 3.000000e+01], align 16
@.str = private unnamed_addr constant [38 x i8] c"\0AMean Angle for 1st set : %lf degrees\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"\0AMean Angle for 2nd set : %lf degrees\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"\0AMean Angle for 3rd set : %lf degrees\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @meanAngle(double* %angles, i32 %size) #0 {
entry:
  %angles.addr = alloca double*, align 4
  %size.addr = alloca i32, align 4
  %y_part = alloca double, align 8
  %x_part = alloca double, align 8
  %i = alloca i32, align 4
  store double* %angles, double** %angles.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store double 0.000000e+00, double* %y_part, align 8
  store double 0.000000e+00, double* %x_part, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %angles.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %mul = fmul double %4, 0x400921FB54442D18
  %div = fdiv double %mul, 1.800000e+02
  %5 = call double @llvm.cos.f64(double %div)
  %6 = load double, double* %x_part, align 8
  %add = fadd double %6, %5
  store double %add, double* %x_part, align 8
  %7 = load double*, double** %angles.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx1, align 8
  %mul2 = fmul double %9, 0x400921FB54442D18
  %div3 = fdiv double %mul2, 1.800000e+02
  %10 = call double @llvm.sin.f64(double %div3)
  %11 = load double, double* %y_part, align 8
  %add4 = fadd double %11, %10
  store double %add4, double* %y_part, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load double, double* %y_part, align 8
  %14 = load i32, i32* %size.addr, align 4
  %conv = sitofp i32 %14 to double
  %div5 = fdiv double %13, %conv
  %15 = load double, double* %x_part, align 8
  %16 = load i32, i32* %size.addr, align 4
  %conv6 = sitofp i32 %16 to double
  %div7 = fdiv double %15, %conv6
  %call = call double @atan2(double %div5, double %div7) #5
  %mul8 = fmul double %call, 1.800000e+02
  %div9 = fdiv double %mul8, 0x400921FB54442D18
  ret double %div9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %angleSet1 = alloca [2 x double], align 16
  %angleSet2 = alloca [4 x double], align 16
  %angleSet3 = alloca [3 x double], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [2 x double]* %angleSet1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x double]* @__const.main.angleSet1 to i8*), i32 16, i1 false)
  %1 = bitcast [4 x double]* %angleSet2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([4 x double]* @__const.main.angleSet2 to i8*), i32 32, i1 false)
  %2 = bitcast [3 x double]* %angleSet3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([3 x double]* @__const.main.angleSet3 to i8*), i32 24, i1 false)
  %arraydecay = getelementptr inbounds [2 x double], [2 x double]* %angleSet1, i32 0, i32 0
  %call = call double @meanAngle(double* %arraydecay, i32 2)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i32 0, i32 0), double %call)
  %arraydecay2 = getelementptr inbounds [4 x double], [4 x double]* %angleSet2, i32 0, i32 0
  %call3 = call double @meanAngle(double* %arraydecay2, i32 4)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i32 0, i32 0), double %call3)
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %angleSet3, i32 0, i32 0
  %call6 = call double @meanAngle(double* %arraydecay5, i32 3)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for meanAngle()

; entering Souper's runOnFunction() for main()

; ModuleID = './Averages-Mean_angle.c.bc'
source_filename = "./Averages-Mean_angle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.angleSet1 = private unnamed_addr constant [2 x double] [double 3.500000e+02, double 1.000000e+01], align 16
@__const.main.angleSet2 = private unnamed_addr constant [4 x double] [double 9.000000e+01, double 1.800000e+02, double 2.700000e+02, double 3.600000e+02], align 16
@__const.main.angleSet3 = private unnamed_addr constant [3 x double] [double 1.000000e+01, double 2.000000e+01, double 3.000000e+01], align 16
@.str = private unnamed_addr constant [38 x i8] c"\0AMean Angle for 1st set : %lf degrees\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"\0AMean Angle for 2nd set : %lf degrees\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"\0AMean Angle for 3rd set : %lf degrees\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @meanAngle(double* %angles, i32 %size) #0 {
entry:
  %angles.addr = alloca double*, align 4
  %size.addr = alloca i32, align 4
  %y_part = alloca double, align 8
  %x_part = alloca double, align 8
  %i = alloca i32, align 4
  store double* %angles, double** %angles.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store double 0.000000e+00, double* %y_part, align 8
  store double 0.000000e+00, double* %x_part, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %angles.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %mul = fmul double %4, 0x400921FB54442D18
  %div = fdiv double %mul, 1.800000e+02
  %5 = call double @llvm.cos.f64(double %div)
  %6 = load double, double* %x_part, align 8
  %add = fadd double %6, %5
  store double %add, double* %x_part, align 8
  %7 = load double*, double** %angles.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx1, align 8
  %mul2 = fmul double %9, 0x400921FB54442D18
  %div3 = fdiv double %mul2, 1.800000e+02
  %10 = call double @llvm.sin.f64(double %div3)
  %11 = load double, double* %y_part, align 8
  %add4 = fadd double %11, %10
  store double %add4, double* %y_part, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load double, double* %y_part, align 8
  %14 = load i32, i32* %size.addr, align 4
  %conv = sitofp i32 %14 to double
  %div5 = fdiv double %13, %conv
  %15 = load double, double* %x_part, align 8
  %16 = load i32, i32* %size.addr, align 4
  %conv6 = sitofp i32 %16 to double
  %div7 = fdiv double %15, %conv6
  %call = call double @atan2(double %div5, double %div7) #5
  %mul8 = fmul double %call, 1.800000e+02
  %div9 = fdiv double %mul8, 0x400921FB54442D18
  ret double %div9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: nounwind readnone
declare double @atan2(double %0, double %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %angleSet1 = alloca [2 x double], align 16
  %angleSet2 = alloca [4 x double], align 16
  %angleSet3 = alloca [3 x double], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [2 x double]* %angleSet1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([2 x double]* @__const.main.angleSet1 to i8*), i32 16, i1 false)
  %1 = bitcast [4 x double]* %angleSet2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([4 x double]* @__const.main.angleSet2 to i8*), i32 32, i1 false)
  %2 = bitcast [3 x double]* %angleSet3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([3 x double]* @__const.main.angleSet3 to i8*), i32 24, i1 false)
  %arraydecay = getelementptr inbounds [2 x double], [2 x double]* %angleSet1, i32 0, i32 0
  %call = call double @meanAngle(double* %arraydecay, i32 2)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i32 0, i32 0), double %call)
  %arraydecay2 = getelementptr inbounds [4 x double], [4 x double]* %angleSet2, i32 0, i32 0
  %call3 = call double @meanAngle(double* %arraydecay2, i32 4)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i32 0, i32 0), double %call3)
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %angleSet3, i32 0, i32 0
  %call6 = call double @meanAngle(double* %arraydecay5, i32 3)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i32 0, i32 0), double %call6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
