
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for push()

; ModuleID = './Sorting_algorithms-Strand_sort.c.bc'
source_filename = "./Sorting_algorithms-Strand_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.slist = type { %struct.node_t*, %struct.node_t* }
%struct.node_t = type { i32, %struct.node_t* }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@__const.main.x = private unnamed_addr constant [15 x i32] [i32 -2, i32 0, i32 -2, i32 5, i32 5, i32 3, i32 -1, i32 -3, i32 5, i32 5, i32 0, i32 2, i32 -4, i32 4, i32 2], align 16
@.str.2 = private unnamed_addr constant [13 x i8] c"before sort:\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"after sort: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.slist* %l, %struct.node_t* %e) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e.addr = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  store %struct.node_t* %e, %struct.node_t** %e.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %3 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  store %struct.node_t* %2, %struct.node_t** %head1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %4, i32 0, i32 1
  %5 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %tobool2 = icmp ne %struct.node_t* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %7 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail4 = getelementptr inbounds %struct.slist, %struct.slist* %7, i32 0, i32 1
  %8 = load %struct.node_t*, %struct.node_t** %tail4, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %8, i32 0, i32 1
  store %struct.node_t* %6, %struct.node_t** %next, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %10 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail6 = getelementptr inbounds %struct.slist, %struct.slist* %10, i32 0, i32 1
  store %struct.node_t* %9, %struct.node_t** %tail6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_t* @removehead(%struct.slist* %l) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  store %struct.node_t* %1, %struct.node_t** %e, align 4
  %2 = load %struct.node_t*, %struct.node_t** %e, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %next, align 4
  %5 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 0
  store %struct.node_t* %4, %struct.node_t** %head1, align 4
  %6 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next2 = getelementptr inbounds %struct.node_t, %struct.node_t* %6, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %next2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.node_t*, %struct.node_t** %e, align 4
  ret %struct.node_t* %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @join(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %1 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  call void @push(%struct.slist* %0, %struct.node_t* %2)
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %5 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %tail1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 1
  store %struct.node_t* %4, %struct.node_t** %tail1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @merge(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  %r = alloca %struct.slist, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = bitcast %struct.slist* %r to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %1 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  %4 = load %struct.node_t*, %struct.node_t** %head1, align 4
  %tobool2 = icmp ne %struct.node_t* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head3 = getelementptr inbounds %struct.slist, %struct.slist* %6, i32 0, i32 0
  %7 = load %struct.node_t*, %struct.node_t** %head3, align 4
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %7, i32 0, i32 0
  %8 = load i32, i32* %v, align 4
  %9 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head4 = getelementptr inbounds %struct.slist, %struct.slist* %9, i32 0, i32 0
  %10 = load %struct.node_t*, %struct.node_t** %head4, align 4
  %v5 = getelementptr inbounds %struct.node_t, %struct.node_t* %10, i32 0, i32 0
  %11 = load i32, i32* %v5, align 4
  %cmp = icmp sle i32 %8, %11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %12 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %13 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slist* [ %12, %cond.true ], [ %13, %cond.false ]
  %call = call %struct.node_t* @removehead(%struct.slist* %cond)
  call void @push(%struct.slist* %r, %struct.node_t* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head6 = getelementptr inbounds %struct.slist, %struct.slist* %14, i32 0, i32 0
  %15 = load %struct.node_t*, %struct.node_t** %head6, align 4
  %tobool7 = icmp ne %struct.node_t* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %while.end
  %16 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end10

cond.false9:                                      ; preds = %while.end
  %17 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.slist* [ %16, %cond.true8 ], [ %17, %cond.false9 ]
  call void @join(%struct.slist* %r, %struct.slist* %cond11)
  %18 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %19 = bitcast %struct.slist* %18 to i8*
  %20 = bitcast %struct.slist* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 8, i1 false)
  %21 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %21, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail, align 4
  %22 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head12 = getelementptr inbounds %struct.slist, %struct.slist* %22, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head12, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @sort(i32* %ar, i32 %len) #0 {
entry:
  %ar.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %list = alloca %struct.slist, align 4
  %rem = alloca %struct.slist, align 4
  %strand = alloca %struct.slist, align 4
  %res = alloca %struct.slist, align 4
  %e = alloca %struct.node_t*, align 4
  %i25 = alloca i32, align 4
  store i32* %ar, i32** %ar.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca %struct.node_t, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %ar.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %7
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %v, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  %cmp2 = icmp slt i32 %8, %sub
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %10
  %add.ptr3 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr, i32 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node_t* [ %add.ptr3, %cond.true ], [ null, %cond.false ]
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %11
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx4, i32 0, i32 1
  store %struct.node_t* %cond, %struct.node_t** %next, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %head = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  store %struct.node_t* %vla, %struct.node_t** %head, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 1
  %13 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %13
  %add.ptr6 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr5, i32 -1
  store %struct.node_t* %add.ptr6, %struct.node_t** %tail, align 4
  %14 = bitcast %struct.slist* %strand to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %14, i8 0, i32 8, i1 false)
  %15 = bitcast %struct.slist* %res to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %15, i8 0, i32 8, i1 false)
  store %struct.node_t* null, %struct.node_t** %e, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc23, %for.end
  %head8 = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  %16 = load %struct.node_t*, %struct.node_t** %head8, align 4
  %tobool = icmp ne %struct.node_t* %16, null
  br i1 %tobool, label %for.body9, label %for.end24

for.body9:                                        ; preds = %for.cond7
  %tail10 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail10, align 4
  %head11 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head11, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end21, %for.body9
  %call = call %struct.node_t* @removehead(%struct.slist* %list)
  store %struct.node_t* %call, %struct.node_t** %e, align 4
  %tobool12 = icmp ne %struct.node_t* %call, null
  br i1 %tobool12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %head13 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 0
  %17 = load %struct.node_t*, %struct.node_t** %head13, align 4
  %tobool14 = icmp ne %struct.node_t* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %cond.true19

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.node_t*, %struct.node_t** %e, align 4
  %v15 = getelementptr inbounds %struct.node_t, %struct.node_t* %18, i32 0, i32 0
  %19 = load i32, i32* %v15, align 4
  %tail16 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 1
  %20 = load %struct.node_t*, %struct.node_t** %tail16, align 4
  %v17 = getelementptr inbounds %struct.node_t, %struct.node_t* %20, i32 0, i32 0
  %21 = load i32, i32* %v17, align 4
  %cmp18 = icmp sge i32 %19, %21
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %lor.lhs.false, %while.body
  br label %cond.end21

cond.false20:                                     ; preds = %lor.lhs.false
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.slist* [ %strand, %cond.true19 ], [ %rem, %cond.false20 ]
  %22 = load %struct.node_t*, %struct.node_t** %e, align 4
  call void @push(%struct.slist* %cond22, %struct.node_t* %22)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @merge(%struct.slist* %res, %struct.slist* %strand)
  br label %for.inc23

for.inc23:                                        ; preds = %while.end
  %23 = bitcast %struct.slist* %list to i8*
  %24 = bitcast %struct.slist* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %23, i8* align 4 %24, i32 8, i1 false)
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  store i32 0, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc33, %for.end24
  %head27 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %25 = load %struct.node_t*, %struct.node_t** %head27, align 4
  %tobool28 = icmp ne %struct.node_t* %25, null
  br i1 %tobool28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %head30 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %26 = load %struct.node_t*, %struct.node_t** %head30, align 4
  %v31 = getelementptr inbounds %struct.node_t, %struct.node_t* %26, i32 0, i32 0
  %27 = load i32, i32* %v31, align 4
  %28 = load i32*, i32** %ar.addr, align 4
  %29 = load i32, i32* %i25, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body29
  %30 = load i32, i32* %i25, align 4
  %inc34 = add nsw i32 %30, 1
  store i32 %inc34, i32* %i25, align 4
  %head35 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %31 = load %struct.node_t*, %struct.node_t** %head35, align 4
  %next36 = getelementptr inbounds %struct.node_t, %struct.node_t* %31, i32 0, i32 1
  %32 = load %struct.node_t*, %struct.node_t** %next36, align 4
  %head37 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  store %struct.node_t* %32, %struct.node_t** %head37, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  %33 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %33)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %title, i32* %x, i32 %len) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #4

declare i32 @putchar(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [15 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [15 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([15 x i32]* @__const.main.x to i8*), i32 60, i1 false)
  %arraydecay = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32* %arraydecay, i32 15)
  %arraydecay1 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @sort(i32* %arraydecay1, i32 15)
  %arraydecay2 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32* %arraydecay2, i32 15)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_t* %5, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for push()

; entering Souper's runOnFunction() for removehead()

; ModuleID = './Sorting_algorithms-Strand_sort.c.bc'
source_filename = "./Sorting_algorithms-Strand_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.slist = type { %struct.node_t*, %struct.node_t* }
%struct.node_t = type { i32, %struct.node_t* }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@__const.main.x = private unnamed_addr constant [15 x i32] [i32 -2, i32 0, i32 -2, i32 5, i32 5, i32 3, i32 -1, i32 -3, i32 5, i32 5, i32 0, i32 2, i32 -4, i32 4, i32 2], align 16
@.str.2 = private unnamed_addr constant [13 x i8] c"before sort:\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"after sort: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.slist* %l, %struct.node_t* %e) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e.addr = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  store %struct.node_t* %e, %struct.node_t** %e.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %3 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  store %struct.node_t* %2, %struct.node_t** %head1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %4, i32 0, i32 1
  %5 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %tobool2 = icmp ne %struct.node_t* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %7 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail4 = getelementptr inbounds %struct.slist, %struct.slist* %7, i32 0, i32 1
  %8 = load %struct.node_t*, %struct.node_t** %tail4, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %8, i32 0, i32 1
  store %struct.node_t* %6, %struct.node_t** %next, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %10 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail6 = getelementptr inbounds %struct.slist, %struct.slist* %10, i32 0, i32 1
  store %struct.node_t* %9, %struct.node_t** %tail6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_t* @removehead(%struct.slist* %l) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  store %struct.node_t* %1, %struct.node_t** %e, align 4
  %2 = load %struct.node_t*, %struct.node_t** %e, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %next, align 4
  %5 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 0
  store %struct.node_t* %4, %struct.node_t** %head1, align 4
  %6 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next2 = getelementptr inbounds %struct.node_t, %struct.node_t* %6, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %next2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.node_t*, %struct.node_t** %e, align 4
  ret %struct.node_t* %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @join(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %1 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  call void @push(%struct.slist* %0, %struct.node_t* %2)
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %5 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %tail1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 1
  store %struct.node_t* %4, %struct.node_t** %tail1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @merge(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  %r = alloca %struct.slist, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = bitcast %struct.slist* %r to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %1 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  %4 = load %struct.node_t*, %struct.node_t** %head1, align 4
  %tobool2 = icmp ne %struct.node_t* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head3 = getelementptr inbounds %struct.slist, %struct.slist* %6, i32 0, i32 0
  %7 = load %struct.node_t*, %struct.node_t** %head3, align 4
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %7, i32 0, i32 0
  %8 = load i32, i32* %v, align 4
  %9 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head4 = getelementptr inbounds %struct.slist, %struct.slist* %9, i32 0, i32 0
  %10 = load %struct.node_t*, %struct.node_t** %head4, align 4
  %v5 = getelementptr inbounds %struct.node_t, %struct.node_t* %10, i32 0, i32 0
  %11 = load i32, i32* %v5, align 4
  %cmp = icmp sle i32 %8, %11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %12 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %13 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slist* [ %12, %cond.true ], [ %13, %cond.false ]
  %call = call %struct.node_t* @removehead(%struct.slist* %cond)
  call void @push(%struct.slist* %r, %struct.node_t* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head6 = getelementptr inbounds %struct.slist, %struct.slist* %14, i32 0, i32 0
  %15 = load %struct.node_t*, %struct.node_t** %head6, align 4
  %tobool7 = icmp ne %struct.node_t* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %while.end
  %16 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end10

cond.false9:                                      ; preds = %while.end
  %17 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.slist* [ %16, %cond.true8 ], [ %17, %cond.false9 ]
  call void @join(%struct.slist* %r, %struct.slist* %cond11)
  %18 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %19 = bitcast %struct.slist* %18 to i8*
  %20 = bitcast %struct.slist* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 8, i1 false)
  %21 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %21, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail, align 4
  %22 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head12 = getelementptr inbounds %struct.slist, %struct.slist* %22, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head12, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @sort(i32* %ar, i32 %len) #0 {
entry:
  %ar.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %list = alloca %struct.slist, align 4
  %rem = alloca %struct.slist, align 4
  %strand = alloca %struct.slist, align 4
  %res = alloca %struct.slist, align 4
  %e = alloca %struct.node_t*, align 4
  %i25 = alloca i32, align 4
  store i32* %ar, i32** %ar.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca %struct.node_t, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %ar.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %7
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %v, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  %cmp2 = icmp slt i32 %8, %sub
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %10
  %add.ptr3 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr, i32 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node_t* [ %add.ptr3, %cond.true ], [ null, %cond.false ]
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %11
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx4, i32 0, i32 1
  store %struct.node_t* %cond, %struct.node_t** %next, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %head = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  store %struct.node_t* %vla, %struct.node_t** %head, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 1
  %13 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %13
  %add.ptr6 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr5, i32 -1
  store %struct.node_t* %add.ptr6, %struct.node_t** %tail, align 4
  %14 = bitcast %struct.slist* %strand to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %14, i8 0, i32 8, i1 false)
  %15 = bitcast %struct.slist* %res to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %15, i8 0, i32 8, i1 false)
  store %struct.node_t* null, %struct.node_t** %e, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc23, %for.end
  %head8 = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  %16 = load %struct.node_t*, %struct.node_t** %head8, align 4
  %tobool = icmp ne %struct.node_t* %16, null
  br i1 %tobool, label %for.body9, label %for.end24

for.body9:                                        ; preds = %for.cond7
  %tail10 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail10, align 4
  %head11 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head11, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end21, %for.body9
  %call = call %struct.node_t* @removehead(%struct.slist* %list)
  store %struct.node_t* %call, %struct.node_t** %e, align 4
  %tobool12 = icmp ne %struct.node_t* %call, null
  br i1 %tobool12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %head13 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 0
  %17 = load %struct.node_t*, %struct.node_t** %head13, align 4
  %tobool14 = icmp ne %struct.node_t* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %cond.true19

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.node_t*, %struct.node_t** %e, align 4
  %v15 = getelementptr inbounds %struct.node_t, %struct.node_t* %18, i32 0, i32 0
  %19 = load i32, i32* %v15, align 4
  %tail16 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 1
  %20 = load %struct.node_t*, %struct.node_t** %tail16, align 4
  %v17 = getelementptr inbounds %struct.node_t, %struct.node_t* %20, i32 0, i32 0
  %21 = load i32, i32* %v17, align 4
  %cmp18 = icmp sge i32 %19, %21
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %lor.lhs.false, %while.body
  br label %cond.end21

cond.false20:                                     ; preds = %lor.lhs.false
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.slist* [ %strand, %cond.true19 ], [ %rem, %cond.false20 ]
  %22 = load %struct.node_t*, %struct.node_t** %e, align 4
  call void @push(%struct.slist* %cond22, %struct.node_t* %22)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @merge(%struct.slist* %res, %struct.slist* %strand)
  br label %for.inc23

for.inc23:                                        ; preds = %while.end
  %23 = bitcast %struct.slist* %list to i8*
  %24 = bitcast %struct.slist* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %23, i8* align 4 %24, i32 8, i1 false)
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  store i32 0, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc33, %for.end24
  %head27 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %25 = load %struct.node_t*, %struct.node_t** %head27, align 4
  %tobool28 = icmp ne %struct.node_t* %25, null
  br i1 %tobool28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %head30 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %26 = load %struct.node_t*, %struct.node_t** %head30, align 4
  %v31 = getelementptr inbounds %struct.node_t, %struct.node_t* %26, i32 0, i32 0
  %27 = load i32, i32* %v31, align 4
  %28 = load i32*, i32** %ar.addr, align 4
  %29 = load i32, i32* %i25, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body29
  %30 = load i32, i32* %i25, align 4
  %inc34 = add nsw i32 %30, 1
  store i32 %inc34, i32* %i25, align 4
  %head35 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %31 = load %struct.node_t*, %struct.node_t** %head35, align 4
  %next36 = getelementptr inbounds %struct.node_t, %struct.node_t* %31, i32 0, i32 1
  %32 = load %struct.node_t*, %struct.node_t** %next36, align 4
  %head37 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  store %struct.node_t* %32, %struct.node_t** %head37, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  %33 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %33)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %title, i32* %x, i32 %len) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #4

declare i32 @putchar(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [15 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [15 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([15 x i32]* @__const.main.x to i8*), i32 60, i1 false)
  %arraydecay = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32* %arraydecay, i32 15)
  %arraydecay1 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @sort(i32* %arraydecay1, i32 15)
  %arraydecay2 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32* %arraydecay2, i32 15)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_t* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for removehead()

; entering Souper's runOnFunction() for join()

; ModuleID = './Sorting_algorithms-Strand_sort.c.bc'
source_filename = "./Sorting_algorithms-Strand_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.slist = type { %struct.node_t*, %struct.node_t* }
%struct.node_t = type { i32, %struct.node_t* }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@__const.main.x = private unnamed_addr constant [15 x i32] [i32 -2, i32 0, i32 -2, i32 5, i32 5, i32 3, i32 -1, i32 -3, i32 5, i32 5, i32 0, i32 2, i32 -4, i32 4, i32 2], align 16
@.str.2 = private unnamed_addr constant [13 x i8] c"before sort:\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"after sort: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.slist* %l, %struct.node_t* %e) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e.addr = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  store %struct.node_t* %e, %struct.node_t** %e.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %3 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  store %struct.node_t* %2, %struct.node_t** %head1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %4, i32 0, i32 1
  %5 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %tobool2 = icmp ne %struct.node_t* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %7 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail4 = getelementptr inbounds %struct.slist, %struct.slist* %7, i32 0, i32 1
  %8 = load %struct.node_t*, %struct.node_t** %tail4, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %8, i32 0, i32 1
  store %struct.node_t* %6, %struct.node_t** %next, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %10 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail6 = getelementptr inbounds %struct.slist, %struct.slist* %10, i32 0, i32 1
  store %struct.node_t* %9, %struct.node_t** %tail6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_t* @removehead(%struct.slist* %l) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  store %struct.node_t* %1, %struct.node_t** %e, align 4
  %2 = load %struct.node_t*, %struct.node_t** %e, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %next, align 4
  %5 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 0
  store %struct.node_t* %4, %struct.node_t** %head1, align 4
  %6 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next2 = getelementptr inbounds %struct.node_t, %struct.node_t* %6, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %next2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.node_t*, %struct.node_t** %e, align 4
  ret %struct.node_t* %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @join(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %1 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  call void @push(%struct.slist* %0, %struct.node_t* %2)
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %5 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %tail1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 1
  store %struct.node_t* %4, %struct.node_t** %tail1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @merge(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  %r = alloca %struct.slist, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = bitcast %struct.slist* %r to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %1 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  %4 = load %struct.node_t*, %struct.node_t** %head1, align 4
  %tobool2 = icmp ne %struct.node_t* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head3 = getelementptr inbounds %struct.slist, %struct.slist* %6, i32 0, i32 0
  %7 = load %struct.node_t*, %struct.node_t** %head3, align 4
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %7, i32 0, i32 0
  %8 = load i32, i32* %v, align 4
  %9 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head4 = getelementptr inbounds %struct.slist, %struct.slist* %9, i32 0, i32 0
  %10 = load %struct.node_t*, %struct.node_t** %head4, align 4
  %v5 = getelementptr inbounds %struct.node_t, %struct.node_t* %10, i32 0, i32 0
  %11 = load i32, i32* %v5, align 4
  %cmp = icmp sle i32 %8, %11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %12 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %13 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slist* [ %12, %cond.true ], [ %13, %cond.false ]
  %call = call %struct.node_t* @removehead(%struct.slist* %cond)
  call void @push(%struct.slist* %r, %struct.node_t* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head6 = getelementptr inbounds %struct.slist, %struct.slist* %14, i32 0, i32 0
  %15 = load %struct.node_t*, %struct.node_t** %head6, align 4
  %tobool7 = icmp ne %struct.node_t* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %while.end
  %16 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end10

cond.false9:                                      ; preds = %while.end
  %17 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.slist* [ %16, %cond.true8 ], [ %17, %cond.false9 ]
  call void @join(%struct.slist* %r, %struct.slist* %cond11)
  %18 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %19 = bitcast %struct.slist* %18 to i8*
  %20 = bitcast %struct.slist* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 8, i1 false)
  %21 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %21, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail, align 4
  %22 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head12 = getelementptr inbounds %struct.slist, %struct.slist* %22, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head12, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @sort(i32* %ar, i32 %len) #0 {
entry:
  %ar.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %list = alloca %struct.slist, align 4
  %rem = alloca %struct.slist, align 4
  %strand = alloca %struct.slist, align 4
  %res = alloca %struct.slist, align 4
  %e = alloca %struct.node_t*, align 4
  %i25 = alloca i32, align 4
  store i32* %ar, i32** %ar.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca %struct.node_t, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %ar.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %7
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %v, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  %cmp2 = icmp slt i32 %8, %sub
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %10
  %add.ptr3 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr, i32 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node_t* [ %add.ptr3, %cond.true ], [ null, %cond.false ]
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %11
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx4, i32 0, i32 1
  store %struct.node_t* %cond, %struct.node_t** %next, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %head = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  store %struct.node_t* %vla, %struct.node_t** %head, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 1
  %13 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %13
  %add.ptr6 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr5, i32 -1
  store %struct.node_t* %add.ptr6, %struct.node_t** %tail, align 4
  %14 = bitcast %struct.slist* %strand to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %14, i8 0, i32 8, i1 false)
  %15 = bitcast %struct.slist* %res to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %15, i8 0, i32 8, i1 false)
  store %struct.node_t* null, %struct.node_t** %e, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc23, %for.end
  %head8 = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  %16 = load %struct.node_t*, %struct.node_t** %head8, align 4
  %tobool = icmp ne %struct.node_t* %16, null
  br i1 %tobool, label %for.body9, label %for.end24

for.body9:                                        ; preds = %for.cond7
  %tail10 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail10, align 4
  %head11 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head11, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end21, %for.body9
  %call = call %struct.node_t* @removehead(%struct.slist* %list)
  store %struct.node_t* %call, %struct.node_t** %e, align 4
  %tobool12 = icmp ne %struct.node_t* %call, null
  br i1 %tobool12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %head13 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 0
  %17 = load %struct.node_t*, %struct.node_t** %head13, align 4
  %tobool14 = icmp ne %struct.node_t* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %cond.true19

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.node_t*, %struct.node_t** %e, align 4
  %v15 = getelementptr inbounds %struct.node_t, %struct.node_t* %18, i32 0, i32 0
  %19 = load i32, i32* %v15, align 4
  %tail16 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 1
  %20 = load %struct.node_t*, %struct.node_t** %tail16, align 4
  %v17 = getelementptr inbounds %struct.node_t, %struct.node_t* %20, i32 0, i32 0
  %21 = load i32, i32* %v17, align 4
  %cmp18 = icmp sge i32 %19, %21
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %lor.lhs.false, %while.body
  br label %cond.end21

cond.false20:                                     ; preds = %lor.lhs.false
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.slist* [ %strand, %cond.true19 ], [ %rem, %cond.false20 ]
  %22 = load %struct.node_t*, %struct.node_t** %e, align 4
  call void @push(%struct.slist* %cond22, %struct.node_t* %22)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @merge(%struct.slist* %res, %struct.slist* %strand)
  br label %for.inc23

for.inc23:                                        ; preds = %while.end
  %23 = bitcast %struct.slist* %list to i8*
  %24 = bitcast %struct.slist* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %23, i8* align 4 %24, i32 8, i1 false)
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  store i32 0, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc33, %for.end24
  %head27 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %25 = load %struct.node_t*, %struct.node_t** %head27, align 4
  %tobool28 = icmp ne %struct.node_t* %25, null
  br i1 %tobool28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %head30 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %26 = load %struct.node_t*, %struct.node_t** %head30, align 4
  %v31 = getelementptr inbounds %struct.node_t, %struct.node_t* %26, i32 0, i32 0
  %27 = load i32, i32* %v31, align 4
  %28 = load i32*, i32** %ar.addr, align 4
  %29 = load i32, i32* %i25, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body29
  %30 = load i32, i32* %i25, align 4
  %inc34 = add nsw i32 %30, 1
  store i32 %inc34, i32* %i25, align 4
  %head35 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %31 = load %struct.node_t*, %struct.node_t** %head35, align 4
  %next36 = getelementptr inbounds %struct.node_t, %struct.node_t* %31, i32 0, i32 1
  %32 = load %struct.node_t*, %struct.node_t** %next36, align 4
  %head37 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  store %struct.node_t* %32, %struct.node_t** %head37, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  %33 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %33)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %title, i32* %x, i32 %len) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #4

declare i32 @putchar(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [15 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [15 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([15 x i32]* @__const.main.x to i8*), i32 60, i1 false)
  %arraydecay = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32* %arraydecay, i32 15)
  %arraydecay1 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @sort(i32* %arraydecay1, i32 15)
  %arraydecay2 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32* %arraydecay2, i32 15)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for join()

; entering Souper's runOnFunction() for merge()

; ModuleID = './Sorting_algorithms-Strand_sort.c.bc'
source_filename = "./Sorting_algorithms-Strand_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.slist = type { %struct.node_t*, %struct.node_t* }
%struct.node_t = type { i32, %struct.node_t* }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@__const.main.x = private unnamed_addr constant [15 x i32] [i32 -2, i32 0, i32 -2, i32 5, i32 5, i32 3, i32 -1, i32 -3, i32 5, i32 5, i32 0, i32 2, i32 -4, i32 4, i32 2], align 16
@.str.2 = private unnamed_addr constant [13 x i8] c"before sort:\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"after sort: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.slist* %l, %struct.node_t* %e) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e.addr = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  store %struct.node_t* %e, %struct.node_t** %e.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %3 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  store %struct.node_t* %2, %struct.node_t** %head1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %4, i32 0, i32 1
  %5 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %tobool2 = icmp ne %struct.node_t* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %7 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail4 = getelementptr inbounds %struct.slist, %struct.slist* %7, i32 0, i32 1
  %8 = load %struct.node_t*, %struct.node_t** %tail4, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %8, i32 0, i32 1
  store %struct.node_t* %6, %struct.node_t** %next, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %10 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail6 = getelementptr inbounds %struct.slist, %struct.slist* %10, i32 0, i32 1
  store %struct.node_t* %9, %struct.node_t** %tail6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_t* @removehead(%struct.slist* %l) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  store %struct.node_t* %1, %struct.node_t** %e, align 4
  %2 = load %struct.node_t*, %struct.node_t** %e, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %next, align 4
  %5 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 0
  store %struct.node_t* %4, %struct.node_t** %head1, align 4
  %6 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next2 = getelementptr inbounds %struct.node_t, %struct.node_t* %6, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %next2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.node_t*, %struct.node_t** %e, align 4
  ret %struct.node_t* %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @join(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %1 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  call void @push(%struct.slist* %0, %struct.node_t* %2)
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %5 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %tail1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 1
  store %struct.node_t* %4, %struct.node_t** %tail1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @merge(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  %r = alloca %struct.slist, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = bitcast %struct.slist* %r to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %1 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  %4 = load %struct.node_t*, %struct.node_t** %head1, align 4
  %tobool2 = icmp ne %struct.node_t* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head3 = getelementptr inbounds %struct.slist, %struct.slist* %6, i32 0, i32 0
  %7 = load %struct.node_t*, %struct.node_t** %head3, align 4
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %7, i32 0, i32 0
  %8 = load i32, i32* %v, align 4
  %9 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head4 = getelementptr inbounds %struct.slist, %struct.slist* %9, i32 0, i32 0
  %10 = load %struct.node_t*, %struct.node_t** %head4, align 4
  %v5 = getelementptr inbounds %struct.node_t, %struct.node_t* %10, i32 0, i32 0
  %11 = load i32, i32* %v5, align 4
  %cmp = icmp sle i32 %8, %11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %12 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %13 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slist* [ %12, %cond.true ], [ %13, %cond.false ]
  %call = call %struct.node_t* @removehead(%struct.slist* %cond)
  call void @push(%struct.slist* %r, %struct.node_t* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head6 = getelementptr inbounds %struct.slist, %struct.slist* %14, i32 0, i32 0
  %15 = load %struct.node_t*, %struct.node_t** %head6, align 4
  %tobool7 = icmp ne %struct.node_t* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %while.end
  %16 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end10

cond.false9:                                      ; preds = %while.end
  %17 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.slist* [ %16, %cond.true8 ], [ %17, %cond.false9 ]
  call void @join(%struct.slist* %r, %struct.slist* %cond11)
  %18 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %19 = bitcast %struct.slist* %18 to i8*
  %20 = bitcast %struct.slist* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 8, i1 false)
  %21 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %21, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail, align 4
  %22 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head12 = getelementptr inbounds %struct.slist, %struct.slist* %22, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head12, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @sort(i32* %ar, i32 %len) #0 {
entry:
  %ar.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %list = alloca %struct.slist, align 4
  %rem = alloca %struct.slist, align 4
  %strand = alloca %struct.slist, align 4
  %res = alloca %struct.slist, align 4
  %e = alloca %struct.node_t*, align 4
  %i25 = alloca i32, align 4
  store i32* %ar, i32** %ar.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca %struct.node_t, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %ar.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %7
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %v, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  %cmp2 = icmp slt i32 %8, %sub
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %10
  %add.ptr3 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr, i32 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node_t* [ %add.ptr3, %cond.true ], [ null, %cond.false ]
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %11
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx4, i32 0, i32 1
  store %struct.node_t* %cond, %struct.node_t** %next, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %head = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  store %struct.node_t* %vla, %struct.node_t** %head, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 1
  %13 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %13
  %add.ptr6 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr5, i32 -1
  store %struct.node_t* %add.ptr6, %struct.node_t** %tail, align 4
  %14 = bitcast %struct.slist* %strand to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %14, i8 0, i32 8, i1 false)
  %15 = bitcast %struct.slist* %res to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %15, i8 0, i32 8, i1 false)
  store %struct.node_t* null, %struct.node_t** %e, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc23, %for.end
  %head8 = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  %16 = load %struct.node_t*, %struct.node_t** %head8, align 4
  %tobool = icmp ne %struct.node_t* %16, null
  br i1 %tobool, label %for.body9, label %for.end24

for.body9:                                        ; preds = %for.cond7
  %tail10 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail10, align 4
  %head11 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head11, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end21, %for.body9
  %call = call %struct.node_t* @removehead(%struct.slist* %list)
  store %struct.node_t* %call, %struct.node_t** %e, align 4
  %tobool12 = icmp ne %struct.node_t* %call, null
  br i1 %tobool12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %head13 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 0
  %17 = load %struct.node_t*, %struct.node_t** %head13, align 4
  %tobool14 = icmp ne %struct.node_t* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %cond.true19

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.node_t*, %struct.node_t** %e, align 4
  %v15 = getelementptr inbounds %struct.node_t, %struct.node_t* %18, i32 0, i32 0
  %19 = load i32, i32* %v15, align 4
  %tail16 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 1
  %20 = load %struct.node_t*, %struct.node_t** %tail16, align 4
  %v17 = getelementptr inbounds %struct.node_t, %struct.node_t* %20, i32 0, i32 0
  %21 = load i32, i32* %v17, align 4
  %cmp18 = icmp sge i32 %19, %21
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %lor.lhs.false, %while.body
  br label %cond.end21

cond.false20:                                     ; preds = %lor.lhs.false
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.slist* [ %strand, %cond.true19 ], [ %rem, %cond.false20 ]
  %22 = load %struct.node_t*, %struct.node_t** %e, align 4
  call void @push(%struct.slist* %cond22, %struct.node_t* %22)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @merge(%struct.slist* %res, %struct.slist* %strand)
  br label %for.inc23

for.inc23:                                        ; preds = %while.end
  %23 = bitcast %struct.slist* %list to i8*
  %24 = bitcast %struct.slist* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %23, i8* align 4 %24, i32 8, i1 false)
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  store i32 0, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc33, %for.end24
  %head27 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %25 = load %struct.node_t*, %struct.node_t** %head27, align 4
  %tobool28 = icmp ne %struct.node_t* %25, null
  br i1 %tobool28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %head30 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %26 = load %struct.node_t*, %struct.node_t** %head30, align 4
  %v31 = getelementptr inbounds %struct.node_t, %struct.node_t* %26, i32 0, i32 0
  %27 = load i32, i32* %v31, align 4
  %28 = load i32*, i32** %ar.addr, align 4
  %29 = load i32, i32* %i25, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body29
  %30 = load i32, i32* %i25, align 4
  %inc34 = add nsw i32 %30, 1
  store i32 %inc34, i32* %i25, align 4
  %head35 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %31 = load %struct.node_t*, %struct.node_t** %head35, align 4
  %next36 = getelementptr inbounds %struct.node_t, %struct.node_t* %31, i32 0, i32 1
  %32 = load %struct.node_t*, %struct.node_t** %next36, align 4
  %head37 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  store %struct.node_t* %32, %struct.node_t** %head37, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  %33 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %33)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %title, i32* %x, i32 %len) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #4

declare i32 @putchar(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [15 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [15 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([15 x i32]* @__const.main.x to i8*), i32 60, i1 false)
  %arraydecay = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32* %arraydecay, i32 15)
  %arraydecay1 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @sort(i32* %arraydecay1, i32 15)
  %arraydecay2 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32* %arraydecay2, i32 15)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_t* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_t* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %v5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %8, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne %struct.node_t* %15, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for merge()

; entering Souper's runOnFunction() for sort()

; ModuleID = './Sorting_algorithms-Strand_sort.c.bc'
source_filename = "./Sorting_algorithms-Strand_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.slist = type { %struct.node_t*, %struct.node_t* }
%struct.node_t = type { i32, %struct.node_t* }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@__const.main.x = private unnamed_addr constant [15 x i32] [i32 -2, i32 0, i32 -2, i32 5, i32 5, i32 3, i32 -1, i32 -3, i32 5, i32 5, i32 0, i32 2, i32 -4, i32 4, i32 2], align 16
@.str.2 = private unnamed_addr constant [13 x i8] c"before sort:\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"after sort: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.slist* %l, %struct.node_t* %e) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e.addr = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  store %struct.node_t* %e, %struct.node_t** %e.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %3 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  store %struct.node_t* %2, %struct.node_t** %head1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %4, i32 0, i32 1
  %5 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %tobool2 = icmp ne %struct.node_t* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %7 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail4 = getelementptr inbounds %struct.slist, %struct.slist* %7, i32 0, i32 1
  %8 = load %struct.node_t*, %struct.node_t** %tail4, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %8, i32 0, i32 1
  store %struct.node_t* %6, %struct.node_t** %next, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %10 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail6 = getelementptr inbounds %struct.slist, %struct.slist* %10, i32 0, i32 1
  store %struct.node_t* %9, %struct.node_t** %tail6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_t* @removehead(%struct.slist* %l) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  store %struct.node_t* %1, %struct.node_t** %e, align 4
  %2 = load %struct.node_t*, %struct.node_t** %e, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %next, align 4
  %5 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 0
  store %struct.node_t* %4, %struct.node_t** %head1, align 4
  %6 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next2 = getelementptr inbounds %struct.node_t, %struct.node_t* %6, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %next2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.node_t*, %struct.node_t** %e, align 4
  ret %struct.node_t* %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @join(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %1 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  call void @push(%struct.slist* %0, %struct.node_t* %2)
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %5 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %tail1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 1
  store %struct.node_t* %4, %struct.node_t** %tail1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @merge(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  %r = alloca %struct.slist, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = bitcast %struct.slist* %r to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %1 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  %4 = load %struct.node_t*, %struct.node_t** %head1, align 4
  %tobool2 = icmp ne %struct.node_t* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head3 = getelementptr inbounds %struct.slist, %struct.slist* %6, i32 0, i32 0
  %7 = load %struct.node_t*, %struct.node_t** %head3, align 4
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %7, i32 0, i32 0
  %8 = load i32, i32* %v, align 4
  %9 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head4 = getelementptr inbounds %struct.slist, %struct.slist* %9, i32 0, i32 0
  %10 = load %struct.node_t*, %struct.node_t** %head4, align 4
  %v5 = getelementptr inbounds %struct.node_t, %struct.node_t* %10, i32 0, i32 0
  %11 = load i32, i32* %v5, align 4
  %cmp = icmp sle i32 %8, %11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %12 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %13 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slist* [ %12, %cond.true ], [ %13, %cond.false ]
  %call = call %struct.node_t* @removehead(%struct.slist* %cond)
  call void @push(%struct.slist* %r, %struct.node_t* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head6 = getelementptr inbounds %struct.slist, %struct.slist* %14, i32 0, i32 0
  %15 = load %struct.node_t*, %struct.node_t** %head6, align 4
  %tobool7 = icmp ne %struct.node_t* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %while.end
  %16 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end10

cond.false9:                                      ; preds = %while.end
  %17 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.slist* [ %16, %cond.true8 ], [ %17, %cond.false9 ]
  call void @join(%struct.slist* %r, %struct.slist* %cond11)
  %18 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %19 = bitcast %struct.slist* %18 to i8*
  %20 = bitcast %struct.slist* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 8, i1 false)
  %21 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %21, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail, align 4
  %22 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head12 = getelementptr inbounds %struct.slist, %struct.slist* %22, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head12, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @sort(i32* %ar, i32 %len) #0 {
entry:
  %ar.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %list = alloca %struct.slist, align 4
  %rem = alloca %struct.slist, align 4
  %strand = alloca %struct.slist, align 4
  %res = alloca %struct.slist, align 4
  %e = alloca %struct.node_t*, align 4
  %i25 = alloca i32, align 4
  store i32* %ar, i32** %ar.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca %struct.node_t, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %ar.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %7
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %v, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  %cmp2 = icmp slt i32 %8, %sub
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %10
  %add.ptr3 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr, i32 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node_t* [ %add.ptr3, %cond.true ], [ null, %cond.false ]
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %11
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx4, i32 0, i32 1
  store %struct.node_t* %cond, %struct.node_t** %next, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %head = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  store %struct.node_t* %vla, %struct.node_t** %head, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 1
  %13 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %13
  %add.ptr6 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr5, i32 -1
  store %struct.node_t* %add.ptr6, %struct.node_t** %tail, align 4
  %14 = bitcast %struct.slist* %strand to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %14, i8 0, i32 8, i1 false)
  %15 = bitcast %struct.slist* %res to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %15, i8 0, i32 8, i1 false)
  store %struct.node_t* null, %struct.node_t** %e, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc23, %for.end
  %head8 = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  %16 = load %struct.node_t*, %struct.node_t** %head8, align 4
  %tobool = icmp ne %struct.node_t* %16, null
  br i1 %tobool, label %for.body9, label %for.end24

for.body9:                                        ; preds = %for.cond7
  %tail10 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail10, align 4
  %head11 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head11, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end21, %for.body9
  %call = call %struct.node_t* @removehead(%struct.slist* %list)
  store %struct.node_t* %call, %struct.node_t** %e, align 4
  %tobool12 = icmp ne %struct.node_t* %call, null
  br i1 %tobool12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %head13 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 0
  %17 = load %struct.node_t*, %struct.node_t** %head13, align 4
  %tobool14 = icmp ne %struct.node_t* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %cond.true19

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.node_t*, %struct.node_t** %e, align 4
  %v15 = getelementptr inbounds %struct.node_t, %struct.node_t* %18, i32 0, i32 0
  %19 = load i32, i32* %v15, align 4
  %tail16 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 1
  %20 = load %struct.node_t*, %struct.node_t** %tail16, align 4
  %v17 = getelementptr inbounds %struct.node_t, %struct.node_t* %20, i32 0, i32 0
  %21 = load i32, i32* %v17, align 4
  %cmp18 = icmp sge i32 %19, %21
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %lor.lhs.false, %while.body
  br label %cond.end21

cond.false20:                                     ; preds = %lor.lhs.false
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.slist* [ %strand, %cond.true19 ], [ %rem, %cond.false20 ]
  %22 = load %struct.node_t*, %struct.node_t** %e, align 4
  call void @push(%struct.slist* %cond22, %struct.node_t* %22)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @merge(%struct.slist* %res, %struct.slist* %strand)
  br label %for.inc23

for.inc23:                                        ; preds = %while.end
  %23 = bitcast %struct.slist* %list to i8*
  %24 = bitcast %struct.slist* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %23, i8* align 4 %24, i32 8, i1 false)
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  store i32 0, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc33, %for.end24
  %head27 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %25 = load %struct.node_t*, %struct.node_t** %head27, align 4
  %tobool28 = icmp ne %struct.node_t* %25, null
  br i1 %tobool28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %head30 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %26 = load %struct.node_t*, %struct.node_t** %head30, align 4
  %v31 = getelementptr inbounds %struct.node_t, %struct.node_t* %26, i32 0, i32 0
  %27 = load i32, i32* %v31, align 4
  %28 = load i32*, i32** %ar.addr, align 4
  %29 = load i32, i32* %i25, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body29
  %30 = load i32, i32* %i25, align 4
  %inc34 = add nsw i32 %30, 1
  store i32 %inc34, i32* %i25, align 4
  %head35 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %31 = load %struct.node_t*, %struct.node_t** %head35, align 4
  %next36 = getelementptr inbounds %struct.node_t, %struct.node_t* %31, i32 0, i32 1
  %32 = load %struct.node_t*, %struct.node_t** %next36, align 4
  %head37 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  store %struct.node_t* %32, %struct.node_t** %head37, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  %33 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %33)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %title, i32* %x, i32 %len) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #4

declare i32 @putchar(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [15 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [15 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([15 x i32]* @__const.main.x to i8*), i32 60, i1 false)
  %arraydecay = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32* %arraydecay, i32 15)
  %arraydecay1 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @sort(i32* %arraydecay1, i32 15)
  %arraydecay2 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32* %arraydecay2, i32 15)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %8, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_t* %16, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool12 = icmp ne %struct.node_t* %call, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool14 = icmp ne %struct.node_t* %17, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %v15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %v17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp sge i32 %19, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool28 = icmp ne %struct.node_t* %25, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %v31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc34 = add nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sort()

; entering Souper's runOnFunction() for show()

; ModuleID = './Sorting_algorithms-Strand_sort.c.bc'
source_filename = "./Sorting_algorithms-Strand_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.slist = type { %struct.node_t*, %struct.node_t* }
%struct.node_t = type { i32, %struct.node_t* }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@__const.main.x = private unnamed_addr constant [15 x i32] [i32 -2, i32 0, i32 -2, i32 5, i32 5, i32 3, i32 -1, i32 -3, i32 5, i32 5, i32 0, i32 2, i32 -4, i32 4, i32 2], align 16
@.str.2 = private unnamed_addr constant [13 x i8] c"before sort:\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"after sort: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.slist* %l, %struct.node_t* %e) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e.addr = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  store %struct.node_t* %e, %struct.node_t** %e.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %3 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  store %struct.node_t* %2, %struct.node_t** %head1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %4, i32 0, i32 1
  %5 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %tobool2 = icmp ne %struct.node_t* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %7 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail4 = getelementptr inbounds %struct.slist, %struct.slist* %7, i32 0, i32 1
  %8 = load %struct.node_t*, %struct.node_t** %tail4, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %8, i32 0, i32 1
  store %struct.node_t* %6, %struct.node_t** %next, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %10 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail6 = getelementptr inbounds %struct.slist, %struct.slist* %10, i32 0, i32 1
  store %struct.node_t* %9, %struct.node_t** %tail6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_t* @removehead(%struct.slist* %l) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  store %struct.node_t* %1, %struct.node_t** %e, align 4
  %2 = load %struct.node_t*, %struct.node_t** %e, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %next, align 4
  %5 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 0
  store %struct.node_t* %4, %struct.node_t** %head1, align 4
  %6 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next2 = getelementptr inbounds %struct.node_t, %struct.node_t* %6, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %next2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.node_t*, %struct.node_t** %e, align 4
  ret %struct.node_t* %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @join(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %1 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  call void @push(%struct.slist* %0, %struct.node_t* %2)
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %5 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %tail1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 1
  store %struct.node_t* %4, %struct.node_t** %tail1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @merge(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  %r = alloca %struct.slist, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = bitcast %struct.slist* %r to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %1 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  %4 = load %struct.node_t*, %struct.node_t** %head1, align 4
  %tobool2 = icmp ne %struct.node_t* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head3 = getelementptr inbounds %struct.slist, %struct.slist* %6, i32 0, i32 0
  %7 = load %struct.node_t*, %struct.node_t** %head3, align 4
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %7, i32 0, i32 0
  %8 = load i32, i32* %v, align 4
  %9 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head4 = getelementptr inbounds %struct.slist, %struct.slist* %9, i32 0, i32 0
  %10 = load %struct.node_t*, %struct.node_t** %head4, align 4
  %v5 = getelementptr inbounds %struct.node_t, %struct.node_t* %10, i32 0, i32 0
  %11 = load i32, i32* %v5, align 4
  %cmp = icmp sle i32 %8, %11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %12 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %13 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slist* [ %12, %cond.true ], [ %13, %cond.false ]
  %call = call %struct.node_t* @removehead(%struct.slist* %cond)
  call void @push(%struct.slist* %r, %struct.node_t* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head6 = getelementptr inbounds %struct.slist, %struct.slist* %14, i32 0, i32 0
  %15 = load %struct.node_t*, %struct.node_t** %head6, align 4
  %tobool7 = icmp ne %struct.node_t* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %while.end
  %16 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end10

cond.false9:                                      ; preds = %while.end
  %17 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.slist* [ %16, %cond.true8 ], [ %17, %cond.false9 ]
  call void @join(%struct.slist* %r, %struct.slist* %cond11)
  %18 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %19 = bitcast %struct.slist* %18 to i8*
  %20 = bitcast %struct.slist* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 8, i1 false)
  %21 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %21, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail, align 4
  %22 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head12 = getelementptr inbounds %struct.slist, %struct.slist* %22, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head12, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @sort(i32* %ar, i32 %len) #0 {
entry:
  %ar.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %list = alloca %struct.slist, align 4
  %rem = alloca %struct.slist, align 4
  %strand = alloca %struct.slist, align 4
  %res = alloca %struct.slist, align 4
  %e = alloca %struct.node_t*, align 4
  %i25 = alloca i32, align 4
  store i32* %ar, i32** %ar.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca %struct.node_t, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %ar.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %7
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %v, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  %cmp2 = icmp slt i32 %8, %sub
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %10
  %add.ptr3 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr, i32 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node_t* [ %add.ptr3, %cond.true ], [ null, %cond.false ]
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %11
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx4, i32 0, i32 1
  store %struct.node_t* %cond, %struct.node_t** %next, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %head = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  store %struct.node_t* %vla, %struct.node_t** %head, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 1
  %13 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %13
  %add.ptr6 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr5, i32 -1
  store %struct.node_t* %add.ptr6, %struct.node_t** %tail, align 4
  %14 = bitcast %struct.slist* %strand to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %14, i8 0, i32 8, i1 false)
  %15 = bitcast %struct.slist* %res to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %15, i8 0, i32 8, i1 false)
  store %struct.node_t* null, %struct.node_t** %e, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc23, %for.end
  %head8 = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  %16 = load %struct.node_t*, %struct.node_t** %head8, align 4
  %tobool = icmp ne %struct.node_t* %16, null
  br i1 %tobool, label %for.body9, label %for.end24

for.body9:                                        ; preds = %for.cond7
  %tail10 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail10, align 4
  %head11 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head11, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end21, %for.body9
  %call = call %struct.node_t* @removehead(%struct.slist* %list)
  store %struct.node_t* %call, %struct.node_t** %e, align 4
  %tobool12 = icmp ne %struct.node_t* %call, null
  br i1 %tobool12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %head13 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 0
  %17 = load %struct.node_t*, %struct.node_t** %head13, align 4
  %tobool14 = icmp ne %struct.node_t* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %cond.true19

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.node_t*, %struct.node_t** %e, align 4
  %v15 = getelementptr inbounds %struct.node_t, %struct.node_t* %18, i32 0, i32 0
  %19 = load i32, i32* %v15, align 4
  %tail16 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 1
  %20 = load %struct.node_t*, %struct.node_t** %tail16, align 4
  %v17 = getelementptr inbounds %struct.node_t, %struct.node_t* %20, i32 0, i32 0
  %21 = load i32, i32* %v17, align 4
  %cmp18 = icmp sge i32 %19, %21
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %lor.lhs.false, %while.body
  br label %cond.end21

cond.false20:                                     ; preds = %lor.lhs.false
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.slist* [ %strand, %cond.true19 ], [ %rem, %cond.false20 ]
  %22 = load %struct.node_t*, %struct.node_t** %e, align 4
  call void @push(%struct.slist* %cond22, %struct.node_t* %22)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @merge(%struct.slist* %res, %struct.slist* %strand)
  br label %for.inc23

for.inc23:                                        ; preds = %while.end
  %23 = bitcast %struct.slist* %list to i8*
  %24 = bitcast %struct.slist* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %23, i8* align 4 %24, i32 8, i1 false)
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  store i32 0, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc33, %for.end24
  %head27 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %25 = load %struct.node_t*, %struct.node_t** %head27, align 4
  %tobool28 = icmp ne %struct.node_t* %25, null
  br i1 %tobool28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %head30 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %26 = load %struct.node_t*, %struct.node_t** %head30, align 4
  %v31 = getelementptr inbounds %struct.node_t, %struct.node_t* %26, i32 0, i32 0
  %27 = load i32, i32* %v31, align 4
  %28 = load i32*, i32** %ar.addr, align 4
  %29 = load i32, i32* %i25, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body29
  %30 = load i32, i32* %i25, align 4
  %inc34 = add nsw i32 %30, 1
  store i32 %inc34, i32* %i25, align 4
  %head35 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %31 = load %struct.node_t*, %struct.node_t** %head35, align 4
  %next36 = getelementptr inbounds %struct.node_t, %struct.node_t* %31, i32 0, i32 1
  %32 = load %struct.node_t*, %struct.node_t** %next36, align 4
  %head37 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  store %struct.node_t* %32, %struct.node_t** %head37, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  %33 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %33)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %title, i32* %x, i32 %len) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #4

declare i32 @putchar(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [15 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [15 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([15 x i32]* @__const.main.x to i8*), i32 60, i1 false)
  %arraydecay = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32* %arraydecay, i32 15)
  %arraydecay1 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @sort(i32* %arraydecay1, i32 15)
  %arraydecay2 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32* %arraydecay2, i32 15)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for show()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sorting_algorithms-Strand_sort.c.bc'
source_filename = "./Sorting_algorithms-Strand_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.slist = type { %struct.node_t*, %struct.node_t* }
%struct.node_t = type { i32, %struct.node_t* }

@.str = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@__const.main.x = private unnamed_addr constant [15 x i32] [i32 -2, i32 0, i32 -2, i32 5, i32 5, i32 3, i32 -1, i32 -3, i32 5, i32 5, i32 0, i32 2, i32 -4, i32 4, i32 2], align 16
@.str.2 = private unnamed_addr constant [13 x i8] c"before sort:\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"after sort: \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.slist* %l, %struct.node_t* %e) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e.addr = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  store %struct.node_t* %e, %struct.node_t** %e.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %3 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  store %struct.node_t* %2, %struct.node_t** %head1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %4, i32 0, i32 1
  %5 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %tobool2 = icmp ne %struct.node_t* %5, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %7 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail4 = getelementptr inbounds %struct.slist, %struct.slist* %7, i32 0, i32 1
  %8 = load %struct.node_t*, %struct.node_t** %tail4, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %8, i32 0, i32 1
  store %struct.node_t* %6, %struct.node_t** %next, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.node_t*, %struct.node_t** %e.addr, align 4
  %10 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %tail6 = getelementptr inbounds %struct.slist, %struct.slist* %10, i32 0, i32 1
  store %struct.node_t* %9, %struct.node_t** %tail6, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_t* @removehead(%struct.slist* %l) #0 {
entry:
  %l.addr = alloca %struct.slist*, align 4
  %e = alloca %struct.node_t*, align 4
  store %struct.slist* %l, %struct.slist** %l.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %0, i32 0, i32 0
  %1 = load %struct.node_t*, %struct.node_t** %head, align 4
  store %struct.node_t* %1, %struct.node_t** %e, align 4
  %2 = load %struct.node_t*, %struct.node_t** %e, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %next, align 4
  %5 = load %struct.slist*, %struct.slist** %l.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 0
  store %struct.node_t* %4, %struct.node_t** %head1, align 4
  %6 = load %struct.node_t*, %struct.node_t** %e, align 4
  %next2 = getelementptr inbounds %struct.node_t, %struct.node_t* %6, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %next2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.node_t*, %struct.node_t** %e, align 4
  ret %struct.node_t* %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @join(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %1 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  call void @push(%struct.slist* %0, %struct.node_t* %2)
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 1
  %4 = load %struct.node_t*, %struct.node_t** %tail, align 4
  %5 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %tail1 = getelementptr inbounds %struct.slist, %struct.slist* %5, i32 0, i32 1
  store %struct.node_t* %4, %struct.node_t** %tail1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @merge(%struct.slist* %a, %struct.slist* %b) #0 {
entry:
  %a.addr = alloca %struct.slist*, align 4
  %b.addr = alloca %struct.slist*, align 4
  %r = alloca %struct.slist, align 4
  store %struct.slist* %a, %struct.slist** %a.addr, align 4
  store %struct.slist* %b, %struct.slist** %b.addr, align 4
  %0 = bitcast %struct.slist* %r to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %1 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head = getelementptr inbounds %struct.slist, %struct.slist* %1, i32 0, i32 0
  %2 = load %struct.node_t*, %struct.node_t** %head, align 4
  %tobool = icmp ne %struct.node_t* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head1 = getelementptr inbounds %struct.slist, %struct.slist* %3, i32 0, i32 0
  %4 = load %struct.node_t*, %struct.node_t** %head1, align 4
  %tobool2 = icmp ne %struct.node_t* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head3 = getelementptr inbounds %struct.slist, %struct.slist* %6, i32 0, i32 0
  %7 = load %struct.node_t*, %struct.node_t** %head3, align 4
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %7, i32 0, i32 0
  %8 = load i32, i32* %v, align 4
  %9 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head4 = getelementptr inbounds %struct.slist, %struct.slist* %9, i32 0, i32 0
  %10 = load %struct.node_t*, %struct.node_t** %head4, align 4
  %v5 = getelementptr inbounds %struct.node_t, %struct.node_t* %10, i32 0, i32 0
  %11 = load i32, i32* %v5, align 4
  %cmp = icmp sle i32 %8, %11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %12 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %13 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slist* [ %12, %cond.true ], [ %13, %cond.false ]
  %call = call %struct.node_t* @removehead(%struct.slist* %cond)
  call void @push(%struct.slist* %r, %struct.node_t* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %head6 = getelementptr inbounds %struct.slist, %struct.slist* %14, i32 0, i32 0
  %15 = load %struct.node_t*, %struct.node_t** %head6, align 4
  %tobool7 = icmp ne %struct.node_t* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %while.end
  %16 = load %struct.slist*, %struct.slist** %a.addr, align 4
  br label %cond.end10

cond.false9:                                      ; preds = %while.end
  %17 = load %struct.slist*, %struct.slist** %b.addr, align 4
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.slist* [ %16, %cond.true8 ], [ %17, %cond.false9 ]
  call void @join(%struct.slist* %r, %struct.slist* %cond11)
  %18 = load %struct.slist*, %struct.slist** %a.addr, align 4
  %19 = bitcast %struct.slist* %18 to i8*
  %20 = bitcast %struct.slist* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %19, i8* align 4 %20, i32 8, i1 false)
  %21 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %21, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail, align 4
  %22 = load %struct.slist*, %struct.slist** %b.addr, align 4
  %head12 = getelementptr inbounds %struct.slist, %struct.slist* %22, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head12, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @sort(i32* %ar, i32 %len) #0 {
entry:
  %ar.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %list = alloca %struct.slist, align 4
  %rem = alloca %struct.slist, align 4
  %strand = alloca %struct.slist, align 4
  %res = alloca %struct.slist, align 4
  %e = alloca %struct.node_t*, align 4
  %i25 = alloca i32, align 4
  store i32* %ar, i32** %ar.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca %struct.node_t, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %ar.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %7
  %v = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %v, align 8
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %9, 1
  %cmp2 = icmp slt i32 %8, %sub
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %10
  %add.ptr3 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr, i32 1
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.node_t* [ %add.ptr3, %cond.true ], [ null, %cond.false ]
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %11
  %next = getelementptr inbounds %struct.node_t, %struct.node_t* %arrayidx4, i32 0, i32 1
  store %struct.node_t* %cond, %struct.node_t** %next, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %head = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  store %struct.node_t* %vla, %struct.node_t** %head, align 4
  %tail = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 1
  %13 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node_t, %struct.node_t* %vla, i32 %13
  %add.ptr6 = getelementptr inbounds %struct.node_t, %struct.node_t* %add.ptr5, i32 -1
  store %struct.node_t* %add.ptr6, %struct.node_t** %tail, align 4
  %14 = bitcast %struct.slist* %strand to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %14, i8 0, i32 8, i1 false)
  %15 = bitcast %struct.slist* %res to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %15, i8 0, i32 8, i1 false)
  store %struct.node_t* null, %struct.node_t** %e, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc23, %for.end
  %head8 = getelementptr inbounds %struct.slist, %struct.slist* %list, i32 0, i32 0
  %16 = load %struct.node_t*, %struct.node_t** %head8, align 4
  %tobool = icmp ne %struct.node_t* %16, null
  br i1 %tobool, label %for.body9, label %for.end24

for.body9:                                        ; preds = %for.cond7
  %tail10 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 1
  store %struct.node_t* null, %struct.node_t** %tail10, align 4
  %head11 = getelementptr inbounds %struct.slist, %struct.slist* %rem, i32 0, i32 0
  store %struct.node_t* null, %struct.node_t** %head11, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end21, %for.body9
  %call = call %struct.node_t* @removehead(%struct.slist* %list)
  store %struct.node_t* %call, %struct.node_t** %e, align 4
  %tobool12 = icmp ne %struct.node_t* %call, null
  br i1 %tobool12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %head13 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 0
  %17 = load %struct.node_t*, %struct.node_t** %head13, align 4
  %tobool14 = icmp ne %struct.node_t* %17, null
  br i1 %tobool14, label %lor.lhs.false, label %cond.true19

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct.node_t*, %struct.node_t** %e, align 4
  %v15 = getelementptr inbounds %struct.node_t, %struct.node_t* %18, i32 0, i32 0
  %19 = load i32, i32* %v15, align 4
  %tail16 = getelementptr inbounds %struct.slist, %struct.slist* %strand, i32 0, i32 1
  %20 = load %struct.node_t*, %struct.node_t** %tail16, align 4
  %v17 = getelementptr inbounds %struct.node_t, %struct.node_t* %20, i32 0, i32 0
  %21 = load i32, i32* %v17, align 4
  %cmp18 = icmp sge i32 %19, %21
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %lor.lhs.false, %while.body
  br label %cond.end21

cond.false20:                                     ; preds = %lor.lhs.false
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.slist* [ %strand, %cond.true19 ], [ %rem, %cond.false20 ]
  %22 = load %struct.node_t*, %struct.node_t** %e, align 4
  call void @push(%struct.slist* %cond22, %struct.node_t* %22)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @merge(%struct.slist* %res, %struct.slist* %strand)
  br label %for.inc23

for.inc23:                                        ; preds = %while.end
  %23 = bitcast %struct.slist* %list to i8*
  %24 = bitcast %struct.slist* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %23, i8* align 4 %24, i32 8, i1 false)
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  store i32 0, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc33, %for.end24
  %head27 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %25 = load %struct.node_t*, %struct.node_t** %head27, align 4
  %tobool28 = icmp ne %struct.node_t* %25, null
  br i1 %tobool28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond26
  %head30 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %26 = load %struct.node_t*, %struct.node_t** %head30, align 4
  %v31 = getelementptr inbounds %struct.node_t, %struct.node_t* %26, i32 0, i32 0
  %27 = load i32, i32* %v31, align 4
  %28 = load i32*, i32** %ar.addr, align 4
  %29 = load i32, i32* %i25, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %for.body29
  %30 = load i32, i32* %i25, align 4
  %inc34 = add nsw i32 %30, 1
  store i32 %inc34, i32* %i25, align 4
  %head35 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  %31 = load %struct.node_t*, %struct.node_t** %head35, align 4
  %next36 = getelementptr inbounds %struct.node_t, %struct.node_t* %31, i32 0, i32 1
  %32 = load %struct.node_t*, %struct.node_t** %next36, align 4
  %head37 = getelementptr inbounds %struct.slist, %struct.slist* %res, i32 0, i32 0
  store %struct.node_t* %32, %struct.node_t** %head37, align 4
  br label %for.cond26

for.end38:                                        ; preds = %for.cond26
  %33 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %33)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show(i8* %title, i32* %x, i32 %len) #0 {
entry:
  %title.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %title, i8** %title.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %title.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #4

declare i32 @putchar(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [15 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [15 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([15 x i32]* @__const.main.x to i8*), i32 60, i1 false)
  %arraydecay = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32* %arraydecay, i32 15)
  %arraydecay1 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @sort(i32* %arraydecay1, i32 15)
  %arraydecay2 = getelementptr inbounds [15 x i32], [15 x i32]* %x, i32 0, i32 0
  call void @show(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32* %arraydecay2, i32 15)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
