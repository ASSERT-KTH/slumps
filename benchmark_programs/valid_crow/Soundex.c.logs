
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for add_code()

; ModuleID = './Soundex.c.bc'
source_filename = "./Soundex.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@code = internal global [128 x i8] zeroinitializer, align 16
@init.cls = internal global [9 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* null], align 16
@.str = private unnamed_addr constant [6 x i8] c"AEIOU\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"BFPV\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"CGJKQSXZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"DT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"MN\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@soundex.out = internal global [5 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Soundex\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"S532\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"Example\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"E251\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"Sownteks\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"Ekzampul\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Euler\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"E460\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Gauss\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"G200\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"Hilbert\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"H416\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"Knuth\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"K530\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Lloyd\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"L300\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"Lukasiewicz\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"L222\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"Ellery\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Ghosh\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"Heilbronn\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"Kant\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"Ladd\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Lissajous\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"Wheaton\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"W350\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"Burroughs\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"B620\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"Burrows\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"O'Hara\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"O600\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c"W252\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"Lee\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"L000\00", align 1
@.str.43 = private unnamed_addr constant [10 x i8] c"Gutierrez\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"G362\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"Pfister\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"P236\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"Jackson\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"J250\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"Tymczak\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"T522\00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"VanDeusen\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"V532\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Ashcraft\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"A261\00", align 1
@__const.main.names = private unnamed_addr constant [29 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)], [2 x i8*] zeroinitializer], align 16
@.str.55 = private unnamed_addr constant [46 x i8] c"  Test name  Code  Got\0A----------------------\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"%11s  %s  %s \00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"not ok\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_code(i8* %s, i32 %c) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %c.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %c.addr, align 4
  %conv = trunc i32 %2 to i8
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv1 = sext i8 %4 to i32
  %xor = xor i32 32, %conv1
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %xor
  store i8 %conv, i8* %arrayidx, align 1
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %arrayidx3 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv2
  store i8 %conv, i8* %arrayidx3, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  call void @add_code(i8* %3, i32 %sub)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @soundex(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  %prev = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 4), align 1
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %0 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %1, align 1
  %tobool1 = icmp ne i8 %2, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  store i8 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %5 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %conv = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  store i32 %conv2, i32* %prev, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  %tobool4 = icmp ne i32 %conv3, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %arrayidx7 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv6
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %13 to i32
  store i32 %conv8, i32* %c, align 4
  %14 = load i32, i32* %prev, align 4
  %cmp9 = icmp eq i32 %conv8, %14
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  br label %for.inc

if.end12:                                         ; preds = %for.body
  %15 = load i32, i32* %c, align 4
  %cmp13 = icmp eq i32 %15, -1
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end12
  store i32 0, i32* %prev, align 4
  br label %if.end22

if.else:                                          ; preds = %if.end12
  %16 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %16, 0
  br i1 %cmp16, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.else
  %17 = load i32, i32* %c, align 4
  %add = add nsw i32 %17, 48
  %conv19 = trunc i32 %add to i8
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %18
  store i8 %conv19, i8* %arrayidx20, align 1
  %19 = load i32, i32* %c, align 4
  store i32 %19, i32* %prev, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then15
  br label %for.inc

for.inc:                                          ; preds = %if.end22, %if.then11
  %20 = load i8*, i8** %s.addr, align 4
  %incdec.ptr23 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr23, i8** %s.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %21 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %21, 4
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %22, 1
  store i32 %inc26, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %22
  store i8 48, i8* %arrayidx27, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %23 = load i8*, i8** %retval, align 4
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %sdx = alloca i8*, align 4
  %names = alloca [29 x [2 x i8*]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x [2 x i8*]]* %names to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([29 x [2 x i8*]]* @__const.main.names to i8*), i32 232, i1 false)
  call void @init()
  %call = call i32 @puts(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.55, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %1
  %arrayidx1 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx, i32 0, i32 0
  %2 = load i8*, i8** %arrayidx1, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %3
  %arrayidx3 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx2, i32 0, i32 0
  %4 = load i8*, i8** %arrayidx3, align 8
  %call4 = call i8* @soundex(i8* %4)
  store i8* %call4, i8** %sdx, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %5
  %arrayidx6 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx5, i32 0, i32 0
  %6 = load i8*, i8** %arrayidx6, align 8
  %7 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %7
  %arrayidx8 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx7, i32 0, i32 1
  %8 = load i8*, i8** %arrayidx8, align 4
  %9 = load i8*, i8** %sdx, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), i8* %6, i8* %8, i8* %9)
  %10 = load i8*, i8** %sdx, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %11
  %arrayidx11 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx10, i32 0, i32 1
  %12 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 @strcmp(i8* %10, i8* %12) #4
  %tobool13 = icmp ne i32 %call12, 0
  %13 = zext i1 %tobool13 to i64
  %cond = select i1 %tobool13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8* %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @puts(i8* %0) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %1, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %2 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %xor = xor i32 32, %conv1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = trunc %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 32:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for add_code()

; entering Souper's runOnFunction() for init()

; ModuleID = './Soundex.c.bc'
source_filename = "./Soundex.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@code = internal global [128 x i8] zeroinitializer, align 16
@init.cls = internal global [9 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* null], align 16
@.str = private unnamed_addr constant [6 x i8] c"AEIOU\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"BFPV\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"CGJKQSXZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"DT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"MN\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@soundex.out = internal global [5 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Soundex\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"S532\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"Example\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"E251\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"Sownteks\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"Ekzampul\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Euler\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"E460\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Gauss\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"G200\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"Hilbert\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"H416\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"Knuth\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"K530\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Lloyd\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"L300\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"Lukasiewicz\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"L222\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"Ellery\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Ghosh\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"Heilbronn\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"Kant\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"Ladd\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Lissajous\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"Wheaton\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"W350\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"Burroughs\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"B620\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"Burrows\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"O'Hara\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"O600\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c"W252\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"Lee\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"L000\00", align 1
@.str.43 = private unnamed_addr constant [10 x i8] c"Gutierrez\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"G362\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"Pfister\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"P236\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"Jackson\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"J250\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"Tymczak\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"T522\00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"VanDeusen\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"V532\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Ashcraft\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"A261\00", align 1
@__const.main.names = private unnamed_addr constant [29 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)], [2 x i8*] zeroinitializer], align 16
@.str.55 = private unnamed_addr constant [46 x i8] c"  Test name  Code  Got\0A----------------------\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"%11s  %s  %s \00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"not ok\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_code(i8* %s, i32 %c) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %c.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %c.addr, align 4
  %conv = trunc i32 %2 to i8
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv1 = sext i8 %4 to i32
  %xor = xor i32 32, %conv1
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %xor
  store i8 %conv, i8* %arrayidx, align 1
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %arrayidx3 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv2
  store i8 %conv, i8* %arrayidx3, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  call void @add_code(i8* %3, i32 %sub)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @soundex(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  %prev = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 4), align 1
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %0 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %1, align 1
  %tobool1 = icmp ne i8 %2, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  store i8 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %5 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %conv = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  store i32 %conv2, i32* %prev, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  %tobool4 = icmp ne i32 %conv3, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %arrayidx7 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv6
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %13 to i32
  store i32 %conv8, i32* %c, align 4
  %14 = load i32, i32* %prev, align 4
  %cmp9 = icmp eq i32 %conv8, %14
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  br label %for.inc

if.end12:                                         ; preds = %for.body
  %15 = load i32, i32* %c, align 4
  %cmp13 = icmp eq i32 %15, -1
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end12
  store i32 0, i32* %prev, align 4
  br label %if.end22

if.else:                                          ; preds = %if.end12
  %16 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %16, 0
  br i1 %cmp16, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.else
  %17 = load i32, i32* %c, align 4
  %add = add nsw i32 %17, 48
  %conv19 = trunc i32 %add to i8
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %18
  store i8 %conv19, i8* %arrayidx20, align 1
  %19 = load i32, i32* %c, align 4
  store i32 %19, i32* %prev, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then15
  br label %for.inc

for.inc:                                          ; preds = %if.end22, %if.then11
  %20 = load i8*, i8** %s.addr, align 4
  %incdec.ptr23 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr23, i8** %s.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %21 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %21, 4
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %22, 1
  store i32 %inc26, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %22
  store i8 48, i8* %arrayidx27, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %23 = load i8*, i8** %retval, align 4
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %sdx = alloca i8*, align 4
  %names = alloca [29 x [2 x i8*]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x [2 x i8*]]* %names to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([29 x [2 x i8*]]* @__const.main.names to i8*), i32 232, i1 false)
  call void @init()
  %call = call i32 @puts(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.55, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %1
  %arrayidx1 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx, i32 0, i32 0
  %2 = load i8*, i8** %arrayidx1, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %3
  %arrayidx3 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx2, i32 0, i32 0
  %4 = load i8*, i8** %arrayidx3, align 8
  %call4 = call i8* @soundex(i8* %4)
  store i8* %call4, i8** %sdx, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %5
  %arrayidx6 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx5, i32 0, i32 0
  %6 = load i8*, i8** %arrayidx6, align 8
  %7 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %7
  %arrayidx8 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx7, i32 0, i32 1
  %8 = load i8*, i8** %arrayidx8, align 4
  %9 = load i8*, i8** %sdx, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), i8* %6, i8* %8, i8* %9)
  %10 = load i8*, i8** %sdx, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %11
  %arrayidx11 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx10, i32 0, i32 1
  %12 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 @strcmp(i8* %10, i8* %12) #4
  %tobool13 = icmp ne i32 %call12, 0
  %13 = zext i1 %tobool13 to i64
  %cond = select i1 %tobool13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8* %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @puts(i8* %0) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for init()

; entering Souper's runOnFunction() for soundex()

; ModuleID = './Soundex.c.bc'
source_filename = "./Soundex.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@code = internal global [128 x i8] zeroinitializer, align 16
@init.cls = internal global [9 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* null], align 16
@.str = private unnamed_addr constant [6 x i8] c"AEIOU\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"BFPV\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"CGJKQSXZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"DT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"MN\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@soundex.out = internal global [5 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Soundex\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"S532\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"Example\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"E251\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"Sownteks\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"Ekzampul\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Euler\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"E460\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Gauss\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"G200\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"Hilbert\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"H416\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"Knuth\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"K530\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Lloyd\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"L300\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"Lukasiewicz\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"L222\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"Ellery\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Ghosh\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"Heilbronn\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"Kant\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"Ladd\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Lissajous\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"Wheaton\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"W350\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"Burroughs\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"B620\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"Burrows\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"O'Hara\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"O600\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c"W252\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"Lee\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"L000\00", align 1
@.str.43 = private unnamed_addr constant [10 x i8] c"Gutierrez\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"G362\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"Pfister\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"P236\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"Jackson\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"J250\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"Tymczak\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"T522\00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"VanDeusen\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"V532\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Ashcraft\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"A261\00", align 1
@__const.main.names = private unnamed_addr constant [29 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)], [2 x i8*] zeroinitializer], align 16
@.str.55 = private unnamed_addr constant [46 x i8] c"  Test name  Code  Got\0A----------------------\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"%11s  %s  %s \00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"not ok\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_code(i8* %s, i32 %c) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %c.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %c.addr, align 4
  %conv = trunc i32 %2 to i8
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv1 = sext i8 %4 to i32
  %xor = xor i32 32, %conv1
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %xor
  store i8 %conv, i8* %arrayidx, align 1
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %arrayidx3 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv2
  store i8 %conv, i8* %arrayidx3, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  call void @add_code(i8* %3, i32 %sub)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @soundex(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  %prev = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 4), align 1
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %0 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %1, align 1
  %tobool1 = icmp ne i8 %2, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  store i8 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %5 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %conv = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  store i32 %conv2, i32* %prev, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  %tobool4 = icmp ne i32 %conv3, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %arrayidx7 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv6
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %13 to i32
  store i32 %conv8, i32* %c, align 4
  %14 = load i32, i32* %prev, align 4
  %cmp9 = icmp eq i32 %conv8, %14
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  br label %for.inc

if.end12:                                         ; preds = %for.body
  %15 = load i32, i32* %c, align 4
  %cmp13 = icmp eq i32 %15, -1
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end12
  store i32 0, i32* %prev, align 4
  br label %if.end22

if.else:                                          ; preds = %if.end12
  %16 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %16, 0
  br i1 %cmp16, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.else
  %17 = load i32, i32* %c, align 4
  %add = add nsw i32 %17, 48
  %conv19 = trunc i32 %add to i8
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %18
  store i8 %conv19, i8* %arrayidx20, align 1
  %19 = load i32, i32* %c, align 4
  store i32 %19, i32* %prev, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then15
  br label %for.inc

for.inc:                                          ; preds = %if.end22, %if.then11
  %20 = load i8*, i8** %s.addr, align 4
  %incdec.ptr23 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr23, i8** %s.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %21 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %21, 4
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %22, 1
  store i32 %inc26, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %22
  store i8 48, i8* %arrayidx27, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %23 = load i8*, i8** %retval, align 4
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %sdx = alloca i8*, align 4
  %names = alloca [29 x [2 x i8*]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x [2 x i8*]]* %names to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([29 x [2 x i8*]]* @__const.main.names to i8*), i32 232, i1 false)
  call void @init()
  %call = call i32 @puts(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.55, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %1
  %arrayidx1 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx, i32 0, i32 0
  %2 = load i8*, i8** %arrayidx1, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %3
  %arrayidx3 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx2, i32 0, i32 0
  %4 = load i8*, i8** %arrayidx3, align 8
  %call4 = call i8* @soundex(i8* %4)
  store i8* %call4, i8** %sdx, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %5
  %arrayidx6 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx5, i32 0, i32 0
  %6 = load i8*, i8** %arrayidx6, align 8
  %7 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %7
  %arrayidx8 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx7, i32 0, i32 1
  %8 = load i8*, i8** %arrayidx8, align 4
  %9 = load i8*, i8** %sdx, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), i8* %6, i8* %8, i8* %9)
  %10 = load i8*, i8** %sdx, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %11
  %arrayidx11 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx10, i32 0, i32 1
  %12 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 @strcmp(i8* %10, i8* %12) #4
  %tobool13 = icmp ne i32 %call12, 0
  %13 = zext i1 %tobool13 to i64
  %cond = select i1 %tobool13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8* %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @puts(i8* %0) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i8 %2, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %conv3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %9, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %prev, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %conv8, %14
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp eq i32 %15, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp sgt i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 %17, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv19 = trunc i32 %add to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
%2:i8 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp slt i32 %21, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc26 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 48
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
%2:i8 = trunc %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 52
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for soundex()

; entering Souper's runOnFunction() for main()

; ModuleID = './Soundex.c.bc'
source_filename = "./Soundex.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@code = internal global [128 x i8] zeroinitializer, align 16
@init.cls = internal global [9 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* null], align 16
@.str = private unnamed_addr constant [6 x i8] c"AEIOU\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"BFPV\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"CGJKQSXZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"DT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"MN\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@soundex.out = internal global [5 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Soundex\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"S532\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"Example\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"E251\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"Sownteks\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"Ekzampul\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Euler\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"E460\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Gauss\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"G200\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"Hilbert\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"H416\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"Knuth\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"K530\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Lloyd\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"L300\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"Lukasiewicz\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"L222\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"Ellery\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Ghosh\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"Heilbronn\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"Kant\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"Ladd\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Lissajous\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"Wheaton\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"W350\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"Burroughs\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"B620\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"Burrows\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"O'Hara\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"O600\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c"W252\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"Lee\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"L000\00", align 1
@.str.43 = private unnamed_addr constant [10 x i8] c"Gutierrez\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"G362\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"Pfister\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"P236\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"Jackson\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"J250\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"Tymczak\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"T522\00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"VanDeusen\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"V532\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Ashcraft\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"A261\00", align 1
@__const.main.names = private unnamed_addr constant [29 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)], [2 x i8*] zeroinitializer], align 16
@.str.55 = private unnamed_addr constant [46 x i8] c"  Test name  Code  Got\0A----------------------\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"%11s  %s  %s \00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"not ok\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_code(i8* %s, i32 %c) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %c.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %c.addr, align 4
  %conv = trunc i32 %2 to i8
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv1 = sext i8 %4 to i32
  %xor = xor i32 32, %conv1
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %xor
  store i8 %conv, i8* %arrayidx, align 1
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %arrayidx3 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv2
  store i8 %conv, i8* %arrayidx3, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [9 x i8*], [9 x i8*]* @init.cls, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  call void @add_code(i8* %3, i32 %sub)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @soundex(i8* %s) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  %prev = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 4), align 1
  store i8 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %0 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %1, align 1
  %tobool1 = icmp ne i8 %2, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  store i8 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %5 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), align 1
  %conv = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  store i32 %conv2, i32* %prev, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  %tobool4 = icmp ne i32 %conv3, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %arrayidx7 = getelementptr inbounds [128 x i8], [128 x i8]* @code, i32 0, i32 %conv6
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %13 to i32
  store i32 %conv8, i32* %c, align 4
  %14 = load i32, i32* %prev, align 4
  %cmp9 = icmp eq i32 %conv8, %14
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  br label %for.inc

if.end12:                                         ; preds = %for.body
  %15 = load i32, i32* %c, align 4
  %cmp13 = icmp eq i32 %15, -1
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end12
  store i32 0, i32* %prev, align 4
  br label %if.end22

if.else:                                          ; preds = %if.end12
  %16 = load i32, i32* %c, align 4
  %cmp16 = icmp sgt i32 %16, 0
  br i1 %cmp16, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.else
  %17 = load i32, i32* %c, align 4
  %add = add nsw i32 %17, 48
  %conv19 = trunc i32 %add to i8
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %18
  store i8 %conv19, i8* %arrayidx20, align 1
  %19 = load i32, i32* %c, align 4
  store i32 %19, i32* %prev, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then15
  br label %for.inc

for.inc:                                          ; preds = %if.end22, %if.then11
  %20 = load i8*, i8** %s.addr, align 4
  %incdec.ptr23 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr23, i8** %s.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %21 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %21, 4
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %22, 1
  store i32 %inc26, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds [5 x i8], [5 x i8]* @soundex.out, i32 0, i32 %22
  store i8 48, i8* %arrayidx27, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @soundex.out, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %23 = load i8*, i8** %retval, align 4
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %sdx = alloca i8*, align 4
  %names = alloca [29 x [2 x i8*]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x [2 x i8*]]* %names to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([29 x [2 x i8*]]* @__const.main.names to i8*), i32 232, i1 false)
  call void @init()
  %call = call i32 @puts(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.55, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %1
  %arrayidx1 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx, i32 0, i32 0
  %2 = load i8*, i8** %arrayidx1, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %3
  %arrayidx3 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx2, i32 0, i32 0
  %4 = load i8*, i8** %arrayidx3, align 8
  %call4 = call i8* @soundex(i8* %4)
  store i8* %call4, i8** %sdx, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %5
  %arrayidx6 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx5, i32 0, i32 0
  %6 = load i8*, i8** %arrayidx6, align 8
  %7 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %7
  %arrayidx8 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx7, i32 0, i32 1
  %8 = load i8*, i8** %arrayidx8, align 4
  %9 = load i8*, i8** %sdx, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), i8* %6, i8* %8, i8* %9)
  %10 = load i8*, i8** %sdx, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [29 x [2 x i8*]], [29 x [2 x i8*]]* %names, i32 0, i32 %11
  %arrayidx11 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx10, i32 0, i32 1
  %12 = load i8*, i8** %arrayidx11, align 4
  %call12 = call i32 @strcmp(i8* %10, i8* %12) #4
  %tobool13 = icmp ne i32 %call12, 0
  %13 = zext i1 %tobool13 to i64
  %cond = select i1 %tobool13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8* %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @puts(i8* %0) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call12 = call i32 @strcmp(i8* %10, i8* %12) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool13 = icmp ne i32 %call12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
