
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for show_card()

; ModuleID = './Playing_cards.c.bc'
source_filename = "./Playing_cards.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card_t = type { i32, i32, i32 }
%struct.deck_t = type { i32, [52 x %struct.card_t] }

@locale_ok = hidden global i32 0, align 4
@s_suits = hidden global [5 x i32] [i32 9824, i32 9829, i32 9830, i32 9827, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@s_suits_ascii = hidden global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"WHAT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"OVERFLOW\00", align 1
@s_nums = hidden global [15 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c" %lc%s\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c" %s%s\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%d cards:\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"New deck, \00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"\0AShuffle and deal to three players:\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"Left in deck \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_card(%struct.card_t* %c) #0 {
entry:
  %c.addr = alloca %struct.card_t*, align 4
  store %struct.card_t* %c, %struct.card_t** %c.addr, align 4
  %0 = load i32, i32* @locale_ok, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 0
  %2 = load i32, i32* %suit, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 1
  %5 = load i32, i32* %number, align 4
  %arrayidx1 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 %3, i8* %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit2 = getelementptr inbounds %struct.card_t, %struct.card_t* %7, i32 0, i32 0
  %8 = load i32, i32* %suit2, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @s_suits_ascii, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %10 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number4 = getelementptr inbounds %struct.card_t, %struct.card_t* %10, i32 0, i32 1
  %11 = load i32, i32* %number4, align 4
  %arrayidx5 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %9, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.deck_t* @new_deck() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  %call = call noalias i8* @malloc(i32 628)
  %0 = bitcast i8* %call to %struct.deck_t*
  store %struct.deck_t* %0, %struct.deck_t** %d, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  store i32 52, i32* %n, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %3, 13
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %6 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %6
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %suit, align 4
  %7 = load i32, i32* %j, align 4
  %8 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards4 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 1
  %9 = load i32, i32* %k, align 4
  %arrayidx5 = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards4, i32 0, i32 %9
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx5, i32 0, i32 1
  store i32 %7, i32* %number, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  %11 = load i32, i32* %k, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %k, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %13 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  ret %struct.deck_t* %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %6
  call void @show_card(%struct.card_t* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card_t*
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 2
  %2 = load i32, i32* %_s, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to %struct.card_t*
  %_s1 = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 2
  %5 = load i32, i32* %_s1, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %7 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %cmp2 = icmp sgt i32 %8, %9
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.card_t* @deal_card(%struct.deck_t* %d) #0 {
entry:
  %retval = alloca %struct.card_t*, align 4
  %d.addr = alloca %struct.deck_t*, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.card_t* null, %struct.card_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %n1, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %dec
  store %struct.card_t* %add.ptr, %struct.card_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.card_t*, %struct.card_t** %retval, align 4
  ret %struct.card_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @shuffle_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %4
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 2
  store i32 %call, i32* %_s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards1, i32 0, i32 0
  %7 = bitcast %struct.card_t* %arraydecay to i8*
  %8 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n2 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 0
  %9 = load i32, i32* %n2, align 4
  call void @qsort(i8* %7, i32 %9, i32 12, i32 (i8*, i8*)* @cmp_card)
  ret void
}

declare i32 @rand() #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.deck_t* @new_deck()
  store %struct.deck_t* %call, %struct.deck_t** %d, align 4
  %call1 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i32 0, i32 0))
  %cmp = icmp ne i8* null, %call1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* @locale_ok, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0))
  %0 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0))
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @shuffle_deck(%struct.deck_t* %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %2, 3
  br i1 %cmp4, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %3, 5
  br i1 %cmp7, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond6
  %4 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %call10 = call %struct.card_t* @deal_card(%struct.deck_t* %4)
  call void @show_card(%struct.card_t* %call10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0))
  %7 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %7)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @locale_ok, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %suit, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %number, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %suit2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %number4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for show_card()

; entering Souper's runOnFunction() for new_deck()

; ModuleID = './Playing_cards.c.bc'
source_filename = "./Playing_cards.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card_t = type { i32, i32, i32 }
%struct.deck_t = type { i32, [52 x %struct.card_t] }

@locale_ok = hidden global i32 0, align 4
@s_suits = hidden global [5 x i32] [i32 9824, i32 9829, i32 9830, i32 9827, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@s_suits_ascii = hidden global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"WHAT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"OVERFLOW\00", align 1
@s_nums = hidden global [15 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c" %lc%s\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c" %s%s\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%d cards:\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"New deck, \00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"\0AShuffle and deal to three players:\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"Left in deck \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_card(%struct.card_t* %c) #0 {
entry:
  %c.addr = alloca %struct.card_t*, align 4
  store %struct.card_t* %c, %struct.card_t** %c.addr, align 4
  %0 = load i32, i32* @locale_ok, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 0
  %2 = load i32, i32* %suit, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 1
  %5 = load i32, i32* %number, align 4
  %arrayidx1 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 %3, i8* %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit2 = getelementptr inbounds %struct.card_t, %struct.card_t* %7, i32 0, i32 0
  %8 = load i32, i32* %suit2, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @s_suits_ascii, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %10 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number4 = getelementptr inbounds %struct.card_t, %struct.card_t* %10, i32 0, i32 1
  %11 = load i32, i32* %number4, align 4
  %arrayidx5 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %9, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.deck_t* @new_deck() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  %call = call noalias i8* @malloc(i32 628)
  %0 = bitcast i8* %call to %struct.deck_t*
  store %struct.deck_t* %0, %struct.deck_t** %d, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  store i32 52, i32* %n, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %3, 13
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %6 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %6
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %suit, align 4
  %7 = load i32, i32* %j, align 4
  %8 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards4 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 1
  %9 = load i32, i32* %k, align 4
  %arrayidx5 = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards4, i32 0, i32 %9
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx5, i32 0, i32 1
  store i32 %7, i32* %number, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  %11 = load i32, i32* %k, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %k, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %13 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  ret %struct.deck_t* %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %6
  call void @show_card(%struct.card_t* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card_t*
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 2
  %2 = load i32, i32* %_s, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to %struct.card_t*
  %_s1 = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 2
  %5 = load i32, i32* %_s1, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %7 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %cmp2 = icmp sgt i32 %8, %9
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.card_t* @deal_card(%struct.deck_t* %d) #0 {
entry:
  %retval = alloca %struct.card_t*, align 4
  %d.addr = alloca %struct.deck_t*, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.card_t* null, %struct.card_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %n1, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %dec
  store %struct.card_t* %add.ptr, %struct.card_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.card_t*, %struct.card_t** %retval, align 4
  ret %struct.card_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @shuffle_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %4
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 2
  store i32 %call, i32* %_s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards1, i32 0, i32 0
  %7 = bitcast %struct.card_t* %arraydecay to i8*
  %8 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n2 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 0
  %9 = load i32, i32* %n2, align 4
  call void @qsort(i8* %7, i32 %9, i32 12, i32 (i8*, i8*)* @cmp_card)
  ret void
}

declare i32 @rand() #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.deck_t* @new_deck()
  store %struct.deck_t* %call, %struct.deck_t** %d, align 4
  %call1 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i32 0, i32 0))
  %cmp = icmp ne i8* null, %call1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* @locale_ok, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0))
  %0 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0))
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @shuffle_deck(%struct.deck_t* %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %2, 3
  br i1 %cmp4, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %3, 5
  br i1 %cmp7, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond6
  %4 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %call10 = call %struct.card_t* @deal_card(%struct.deck_t* %4)
  call void @show_card(%struct.card_t* %call10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0))
  %7 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %7)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %3, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 13:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for new_deck()

; entering Souper's runOnFunction() for show_deck()

; ModuleID = './Playing_cards.c.bc'
source_filename = "./Playing_cards.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card_t = type { i32, i32, i32 }
%struct.deck_t = type { i32, [52 x %struct.card_t] }

@locale_ok = hidden global i32 0, align 4
@s_suits = hidden global [5 x i32] [i32 9824, i32 9829, i32 9830, i32 9827, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@s_suits_ascii = hidden global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"WHAT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"OVERFLOW\00", align 1
@s_nums = hidden global [15 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c" %lc%s\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c" %s%s\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%d cards:\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"New deck, \00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"\0AShuffle and deal to three players:\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"Left in deck \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_card(%struct.card_t* %c) #0 {
entry:
  %c.addr = alloca %struct.card_t*, align 4
  store %struct.card_t* %c, %struct.card_t** %c.addr, align 4
  %0 = load i32, i32* @locale_ok, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 0
  %2 = load i32, i32* %suit, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 1
  %5 = load i32, i32* %number, align 4
  %arrayidx1 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 %3, i8* %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit2 = getelementptr inbounds %struct.card_t, %struct.card_t* %7, i32 0, i32 0
  %8 = load i32, i32* %suit2, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @s_suits_ascii, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %10 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number4 = getelementptr inbounds %struct.card_t, %struct.card_t* %10, i32 0, i32 1
  %11 = load i32, i32* %number4, align 4
  %arrayidx5 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %9, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.deck_t* @new_deck() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  %call = call noalias i8* @malloc(i32 628)
  %0 = bitcast i8* %call to %struct.deck_t*
  store %struct.deck_t* %0, %struct.deck_t** %d, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  store i32 52, i32* %n, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %3, 13
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %6 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %6
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %suit, align 4
  %7 = load i32, i32* %j, align 4
  %8 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards4 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 1
  %9 = load i32, i32* %k, align 4
  %arrayidx5 = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards4, i32 0, i32 %9
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx5, i32 0, i32 1
  store i32 %7, i32* %number, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  %11 = load i32, i32* %k, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %k, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %13 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  ret %struct.deck_t* %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %6
  call void @show_card(%struct.card_t* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card_t*
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 2
  %2 = load i32, i32* %_s, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to %struct.card_t*
  %_s1 = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 2
  %5 = load i32, i32* %_s1, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %7 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %cmp2 = icmp sgt i32 %8, %9
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.card_t* @deal_card(%struct.deck_t* %d) #0 {
entry:
  %retval = alloca %struct.card_t*, align 4
  %d.addr = alloca %struct.deck_t*, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.card_t* null, %struct.card_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %n1, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %dec
  store %struct.card_t* %add.ptr, %struct.card_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.card_t*, %struct.card_t** %retval, align 4
  ret %struct.card_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @shuffle_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %4
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 2
  store i32 %call, i32* %_s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards1, i32 0, i32 0
  %7 = bitcast %struct.card_t* %arraydecay to i8*
  %8 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n2 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 0
  %9 = load i32, i32* %n2, align 4
  call void @qsort(i8* %7, i32 %9, i32 12, i32 (i8*, i8*)* @cmp_card)
  ret void
}

declare i32 @rand() #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.deck_t* @new_deck()
  store %struct.deck_t* %call, %struct.deck_t** %d, align 4
  %call1 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i32 0, i32 0))
  %cmp = icmp ne i8* null, %call1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* @locale_ok, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0))
  %0 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0))
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @shuffle_deck(%struct.deck_t* %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %2, 3
  br i1 %cmp4, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %3, 5
  br i1 %cmp7, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond6
  %4 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %call10 = call %struct.card_t* @deal_card(%struct.deck_t* %4)
  call void @show_card(%struct.card_t* %call10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0))
  %7 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %7)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for show_deck()

; entering Souper's runOnFunction() for cmp_card()

; ModuleID = './Playing_cards.c.bc'
source_filename = "./Playing_cards.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card_t = type { i32, i32, i32 }
%struct.deck_t = type { i32, [52 x %struct.card_t] }

@locale_ok = hidden global i32 0, align 4
@s_suits = hidden global [5 x i32] [i32 9824, i32 9829, i32 9830, i32 9827, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@s_suits_ascii = hidden global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"WHAT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"OVERFLOW\00", align 1
@s_nums = hidden global [15 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c" %lc%s\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c" %s%s\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%d cards:\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"New deck, \00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"\0AShuffle and deal to three players:\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"Left in deck \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_card(%struct.card_t* %c) #0 {
entry:
  %c.addr = alloca %struct.card_t*, align 4
  store %struct.card_t* %c, %struct.card_t** %c.addr, align 4
  %0 = load i32, i32* @locale_ok, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 0
  %2 = load i32, i32* %suit, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 1
  %5 = load i32, i32* %number, align 4
  %arrayidx1 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 %3, i8* %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit2 = getelementptr inbounds %struct.card_t, %struct.card_t* %7, i32 0, i32 0
  %8 = load i32, i32* %suit2, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @s_suits_ascii, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %10 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number4 = getelementptr inbounds %struct.card_t, %struct.card_t* %10, i32 0, i32 1
  %11 = load i32, i32* %number4, align 4
  %arrayidx5 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %9, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.deck_t* @new_deck() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  %call = call noalias i8* @malloc(i32 628)
  %0 = bitcast i8* %call to %struct.deck_t*
  store %struct.deck_t* %0, %struct.deck_t** %d, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  store i32 52, i32* %n, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %3, 13
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %6 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %6
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %suit, align 4
  %7 = load i32, i32* %j, align 4
  %8 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards4 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 1
  %9 = load i32, i32* %k, align 4
  %arrayidx5 = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards4, i32 0, i32 %9
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx5, i32 0, i32 1
  store i32 %7, i32* %number, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  %11 = load i32, i32* %k, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %k, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %13 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  ret %struct.deck_t* %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %6
  call void @show_card(%struct.card_t* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card_t*
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 2
  %2 = load i32, i32* %_s, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to %struct.card_t*
  %_s1 = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 2
  %5 = load i32, i32* %_s1, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %7 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %cmp2 = icmp sgt i32 %8, %9
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.card_t* @deal_card(%struct.deck_t* %d) #0 {
entry:
  %retval = alloca %struct.card_t*, align 4
  %d.addr = alloca %struct.deck_t*, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.card_t* null, %struct.card_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %n1, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %dec
  store %struct.card_t* %add.ptr, %struct.card_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.card_t*, %struct.card_t** %retval, align 4
  ret %struct.card_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @shuffle_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %4
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 2
  store i32 %call, i32* %_s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards1, i32 0, i32 0
  %7 = bitcast %struct.card_t* %arraydecay to i8*
  %8 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n2 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 0
  %9 = load i32, i32* %n2, align 4
  call void @qsort(i8* %7, i32 %9, i32 12, i32 (i8*, i8*)* @cmp_card)
  ret void
}

declare i32 @rand() #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.deck_t* @new_deck()
  store %struct.deck_t* %call, %struct.deck_t** %d, align 4
  %call1 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i32 0, i32 0))
  %cmp = icmp ne i8* null, %call1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* @locale_ok, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0))
  %0 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0))
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @shuffle_deck(%struct.deck_t* %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %2, 3
  br i1 %cmp4, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %3, 5
  br i1 %cmp7, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond6
  %4 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %call10 = call %struct.card_t* @deal_card(%struct.deck_t* %4)
  call void @show_card(%struct.card_t* %call10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0))
  %7 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %7)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %_s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %_s1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp2 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cmp_card()

; entering Souper's runOnFunction() for deal_card()

; ModuleID = './Playing_cards.c.bc'
source_filename = "./Playing_cards.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card_t = type { i32, i32, i32 }
%struct.deck_t = type { i32, [52 x %struct.card_t] }

@locale_ok = hidden global i32 0, align 4
@s_suits = hidden global [5 x i32] [i32 9824, i32 9829, i32 9830, i32 9827, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@s_suits_ascii = hidden global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"WHAT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"OVERFLOW\00", align 1
@s_nums = hidden global [15 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c" %lc%s\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c" %s%s\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%d cards:\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"New deck, \00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"\0AShuffle and deal to three players:\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"Left in deck \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_card(%struct.card_t* %c) #0 {
entry:
  %c.addr = alloca %struct.card_t*, align 4
  store %struct.card_t* %c, %struct.card_t** %c.addr, align 4
  %0 = load i32, i32* @locale_ok, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 0
  %2 = load i32, i32* %suit, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 1
  %5 = load i32, i32* %number, align 4
  %arrayidx1 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 %3, i8* %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit2 = getelementptr inbounds %struct.card_t, %struct.card_t* %7, i32 0, i32 0
  %8 = load i32, i32* %suit2, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @s_suits_ascii, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %10 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number4 = getelementptr inbounds %struct.card_t, %struct.card_t* %10, i32 0, i32 1
  %11 = load i32, i32* %number4, align 4
  %arrayidx5 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %9, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.deck_t* @new_deck() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  %call = call noalias i8* @malloc(i32 628)
  %0 = bitcast i8* %call to %struct.deck_t*
  store %struct.deck_t* %0, %struct.deck_t** %d, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  store i32 52, i32* %n, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %3, 13
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %6 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %6
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %suit, align 4
  %7 = load i32, i32* %j, align 4
  %8 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards4 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 1
  %9 = load i32, i32* %k, align 4
  %arrayidx5 = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards4, i32 0, i32 %9
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx5, i32 0, i32 1
  store i32 %7, i32* %number, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  %11 = load i32, i32* %k, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %k, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %13 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  ret %struct.deck_t* %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %6
  call void @show_card(%struct.card_t* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card_t*
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 2
  %2 = load i32, i32* %_s, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to %struct.card_t*
  %_s1 = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 2
  %5 = load i32, i32* %_s1, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %7 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %cmp2 = icmp sgt i32 %8, %9
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.card_t* @deal_card(%struct.deck_t* %d) #0 {
entry:
  %retval = alloca %struct.card_t*, align 4
  %d.addr = alloca %struct.deck_t*, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.card_t* null, %struct.card_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %n1, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %dec
  store %struct.card_t* %add.ptr, %struct.card_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.card_t*, %struct.card_t** %retval, align 4
  ret %struct.card_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @shuffle_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %4
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 2
  store i32 %call, i32* %_s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards1, i32 0, i32 0
  %7 = bitcast %struct.card_t* %arraydecay to i8*
  %8 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n2 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 0
  %9 = load i32, i32* %n2, align 4
  call void @qsort(i8* %7, i32 %9, i32 12, i32 (i8*, i8*)* @cmp_card)
  ret void
}

declare i32 @rand() #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.deck_t* @new_deck()
  store %struct.deck_t* %call, %struct.deck_t** %d, align 4
  %call1 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i32 0, i32 0))
  %cmp = icmp ne i8* null, %call1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* @locale_ok, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0))
  %0 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0))
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @shuffle_deck(%struct.deck_t* %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %2, 3
  br i1 %cmp4, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %3, 5
  br i1 %cmp7, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond6
  %4 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %call10 = call %struct.card_t* @deal_card(%struct.deck_t* %4)
  call void @show_card(%struct.card_t* %call10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0))
  %7 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %7)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %4, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for deal_card()

; entering Souper's runOnFunction() for shuffle_deck()

; ModuleID = './Playing_cards.c.bc'
source_filename = "./Playing_cards.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card_t = type { i32, i32, i32 }
%struct.deck_t = type { i32, [52 x %struct.card_t] }

@locale_ok = hidden global i32 0, align 4
@s_suits = hidden global [5 x i32] [i32 9824, i32 9829, i32 9830, i32 9827, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@s_suits_ascii = hidden global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"WHAT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"OVERFLOW\00", align 1
@s_nums = hidden global [15 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c" %lc%s\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c" %s%s\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%d cards:\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"New deck, \00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"\0AShuffle and deal to three players:\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"Left in deck \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_card(%struct.card_t* %c) #0 {
entry:
  %c.addr = alloca %struct.card_t*, align 4
  store %struct.card_t* %c, %struct.card_t** %c.addr, align 4
  %0 = load i32, i32* @locale_ok, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 0
  %2 = load i32, i32* %suit, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 1
  %5 = load i32, i32* %number, align 4
  %arrayidx1 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 %3, i8* %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit2 = getelementptr inbounds %struct.card_t, %struct.card_t* %7, i32 0, i32 0
  %8 = load i32, i32* %suit2, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @s_suits_ascii, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %10 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number4 = getelementptr inbounds %struct.card_t, %struct.card_t* %10, i32 0, i32 1
  %11 = load i32, i32* %number4, align 4
  %arrayidx5 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %9, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.deck_t* @new_deck() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  %call = call noalias i8* @malloc(i32 628)
  %0 = bitcast i8* %call to %struct.deck_t*
  store %struct.deck_t* %0, %struct.deck_t** %d, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  store i32 52, i32* %n, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %3, 13
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %6 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %6
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %suit, align 4
  %7 = load i32, i32* %j, align 4
  %8 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards4 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 1
  %9 = load i32, i32* %k, align 4
  %arrayidx5 = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards4, i32 0, i32 %9
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx5, i32 0, i32 1
  store i32 %7, i32* %number, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  %11 = load i32, i32* %k, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %k, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %13 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  ret %struct.deck_t* %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %6
  call void @show_card(%struct.card_t* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card_t*
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 2
  %2 = load i32, i32* %_s, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to %struct.card_t*
  %_s1 = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 2
  %5 = load i32, i32* %_s1, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %7 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %cmp2 = icmp sgt i32 %8, %9
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.card_t* @deal_card(%struct.deck_t* %d) #0 {
entry:
  %retval = alloca %struct.card_t*, align 4
  %d.addr = alloca %struct.deck_t*, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.card_t* null, %struct.card_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %n1, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %dec
  store %struct.card_t* %add.ptr, %struct.card_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.card_t*, %struct.card_t** %retval, align 4
  ret %struct.card_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @shuffle_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %4
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 2
  store i32 %call, i32* %_s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards1, i32 0, i32 0
  %7 = bitcast %struct.card_t* %arraydecay to i8*
  %8 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n2 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 0
  %9 = load i32, i32* %n2, align 4
  call void @qsort(i8* %7, i32 %9, i32 12, i32 (i8*, i8*)* @cmp_card)
  ret void
}

declare i32 @rand() #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.deck_t* @new_deck()
  store %struct.deck_t* %call, %struct.deck_t** %d, align 4
  %call1 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i32 0, i32 0))
  %cmp = icmp ne i8* null, %call1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* @locale_ok, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0))
  %0 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0))
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @shuffle_deck(%struct.deck_t* %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %2, 3
  br i1 %cmp4, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %3, 5
  br i1 %cmp7, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond6
  %4 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %call10 = call %struct.card_t* @deal_card(%struct.deck_t* %4)
  call void @show_card(%struct.card_t* %call10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0))
  %7 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %7)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for shuffle_deck()

; entering Souper's runOnFunction() for main()

; ModuleID = './Playing_cards.c.bc'
source_filename = "./Playing_cards.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card_t = type { i32, i32, i32 }
%struct.deck_t = type { i32, [52 x %struct.card_t] }

@locale_ok = hidden global i32 0, align 4
@s_suits = hidden global [5 x i32] [i32 9824, i32 9829, i32 9830, i32 9827, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@s_suits_ascii = hidden global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [5 x i8] c"WHAT\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"OVERFLOW\00", align 1
@s_nums = hidden global [15 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0)], align 16
@.str.19 = private unnamed_addr constant [7 x i8] c" %lc%s\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c" %s%s\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%d cards:\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"New deck, \00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"\0AShuffle and deal to three players:\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"Left in deck \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_card(%struct.card_t* %c) #0 {
entry:
  %c.addr = alloca %struct.card_t*, align 4
  store %struct.card_t* %c, %struct.card_t** %c.addr, align 4
  %0 = load i32, i32* @locale_ok, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 0
  %2 = load i32, i32* %suit, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @s_suits, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 1
  %5 = load i32, i32* %number, align 4
  %arrayidx1 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i32 %3, i8* %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %suit2 = getelementptr inbounds %struct.card_t, %struct.card_t* %7, i32 0, i32 0
  %8 = load i32, i32* %suit2, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @s_suits_ascii, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %10 = load %struct.card_t*, %struct.card_t** %c.addr, align 4
  %number4 = getelementptr inbounds %struct.card_t, %struct.card_t* %10, i32 0, i32 1
  %11 = load i32, i32* %number4, align 4
  %arrayidx5 = getelementptr inbounds [15 x i8*], [15 x i8*]* @s_nums, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %9, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.deck_t* @new_deck() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  %call = call noalias i8* @malloc(i32 628)
  %0 = bitcast i8* %call to %struct.deck_t*
  store %struct.deck_t* %0, %struct.deck_t** %d, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  store i32 52, i32* %n, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %3, 13
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %6 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %6
  %suit = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %suit, align 4
  %7 = load i32, i32* %j, align 4
  %8 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %cards4 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 1
  %9 = load i32, i32* %k, align 4
  %arrayidx5 = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards4, i32 0, i32 %9
  %number = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx5, i32 0, i32 1
  store i32 %7, i32* %number, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  %11 = load i32, i32* %k, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %k, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %12 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %12, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %13 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  ret %struct.deck_t* %13
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %6
  call void @show_card(%struct.card_t* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card_t*
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %1, i32 0, i32 2
  %2 = load i32, i32* %_s, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to %struct.card_t*
  %_s1 = getelementptr inbounds %struct.card_t, %struct.card_t* %4, i32 0, i32 2
  %5 = load i32, i32* %_s1, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %7 = load i32, i32* %y, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %cmp2 = icmp sgt i32 %8, %9
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.card_t* @deal_card(%struct.deck_t* %d) #0 {
entry:
  %retval = alloca %struct.card_t*, align 4
  %d.addr = alloca %struct.deck_t*, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  %0 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %0, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.card_t* null, %struct.card_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 0
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 0
  %4 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %n1, align 4
  %add.ptr = getelementptr inbounds %struct.card_t, %struct.card_t* %arraydecay, i32 %dec
  store %struct.card_t* %add.ptr, %struct.card_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.card_t*, %struct.card_t** %retval, align 4
  ret %struct.card_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @shuffle_deck(%struct.deck_t* %d) #0 {
entry:
  %d.addr = alloca %struct.deck_t*, align 4
  %i = alloca i32, align 4
  store %struct.deck_t* %d, %struct.deck_t** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n = getelementptr inbounds %struct.deck_t, %struct.deck_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %3 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards = getelementptr inbounds %struct.deck_t, %struct.deck_t* %3, i32 0, i32 1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards, i32 0, i32 %4
  %_s = getelementptr inbounds %struct.card_t, %struct.card_t* %arrayidx, i32 0, i32 2
  store i32 %call, i32* %_s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %cards1 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %6, i32 0, i32 1
  %arraydecay = getelementptr inbounds [52 x %struct.card_t], [52 x %struct.card_t]* %cards1, i32 0, i32 0
  %7 = bitcast %struct.card_t* %arraydecay to i8*
  %8 = load %struct.deck_t*, %struct.deck_t** %d.addr, align 4
  %n2 = getelementptr inbounds %struct.deck_t, %struct.deck_t* %8, i32 0, i32 0
  %9 = load i32, i32* %n2, align 4
  call void @qsort(i8* %7, i32 %9, i32 12, i32 (i8*, i8*)* @cmp_card)
  ret void
}

declare i32 @rand() #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca %struct.deck_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.deck_t* @new_deck()
  store %struct.deck_t* %call, %struct.deck_t** %d, align 4
  %call1 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i32 0, i32 0))
  %cmp = icmp ne i8* null, %call1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* @locale_ok, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0))
  %0 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0))
  %1 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @shuffle_deck(%struct.deck_t* %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %2, 3
  br i1 %cmp4, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %3, 5
  br i1 %cmp7, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond6
  %4 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  %call10 = call %struct.card_t* @deal_card(%struct.deck_t* %4)
  call void @show_card(%struct.card_t* %call10)
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %6, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0))
  %7 = load %struct.deck_t*, %struct.deck_t** %d, align 4
  call void @show_deck(%struct.deck_t* %7)
  ret i32 0
}

declare i8* @setlocale(i32 %0, i8* %1) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i8* null, %call1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %2, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %3, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
