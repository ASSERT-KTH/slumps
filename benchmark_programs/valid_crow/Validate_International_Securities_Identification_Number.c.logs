
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for check_isin()

; ModuleID = './Validate_International_Securities_Identification_Number.c.bc'
source_filename = "./Validate_International_Securities_Identification_Number.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [13 x i8] c"US0378331005\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"US0373831005\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"U50378331005\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"US03378331005\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"AU0000XVGZA3\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"AU0000VXGZA3\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"FR0000988040\00", align 1
@__const.main.test = private unnamed_addr constant [7 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [5 x i8] c"%c%c\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @check_isin(i8* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %v = alloca i32, align 4
  %s = alloca [24 x i32], align 16
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %a.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  store i32 %conv, i32* %k, align 4
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sge i32 %4, 48
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %5 = load i32, i32* %k, align 4
  %cmp3 = icmp sle i32 %5, 57
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %6, 2
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load i32, i32* %k, align 4
  %sub = sub nsw i32 %7, 48
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %8
  store i32 %sub, i32* %arrayidx8, align 4
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %for.body
  %9 = load i32, i32* %k, align 4
  %cmp9 = icmp sge i32 %9, 65
  br i1 %cmp9, label %land.lhs.true11, label %if.else24

land.lhs.true11:                                  ; preds = %if.else
  %10 = load i32, i32* %k, align 4
  %cmp12 = icmp sle i32 %10, 90
  br i1 %cmp12, label %if.then14, label %if.else24

if.then14:                                        ; preds = %land.lhs.true11
  %11 = load i32, i32* %i, align 4
  %cmp15 = icmp eq i32 %11, 11
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.then14
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.then14
  %12 = load i32, i32* %k, align 4
  %sub19 = sub nsw i32 %12, 55
  store i32 %sub19, i32* %k, align 4
  %13 = load i32, i32* %k, align 4
  %div = sdiv i32 %13, 10
  %14 = load i32, i32* %j, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %14
  store i32 %div, i32* %arrayidx21, align 4
  %15 = load i32, i32* %k, align 4
  %rem = srem i32 %15, 10
  %16 = load i32, i32* %j, align 4
  %inc22 = add nsw i32 %16, 1
  store i32 %inc22, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %16
  store i32 %rem, i32* %arrayidx23, align 4
  br label %if.end25

if.else24:                                        ; preds = %land.lhs.true11, %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.end18
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end26
  %17 = load i32, i32* %i, align 4
  %inc27 = add nsw i32 %17, 1
  store i32 %inc27, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %a.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx28, align 1
  %tobool = icmp ne i8 %20, 0
  br i1 %tobool, label %if.then29, label %if.end30

if.then29:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %for.end
  store i32 0, i32* %v, align 4
  %21 = load i32, i32* %j, align 4
  %sub31 = sub nsw i32 %21, 2
  store i32 %sub31, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %if.end30
  %22 = load i32, i32* %i, align 4
  %cmp33 = icmp sge i32 %22, 0
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %23 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %23
  %24 = load i32, i32* %arrayidx36, align 4
  %mul = mul nsw i32 2, %24
  store i32 %mul, i32* %k, align 4
  %25 = load i32, i32* %k, align 4
  %cmp37 = icmp sgt i32 %25, 9
  br i1 %cmp37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body35
  %26 = load i32, i32* %k, align 4
  %sub39 = sub nsw i32 %26, 9
  br label %cond.end

cond.false:                                       ; preds = %for.body35
  %27 = load i32, i32* %k, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub39, %cond.true ], [ %27, %cond.false ]
  %28 = load i32, i32* %v, align 4
  %add = add nsw i32 %28, %cond
  store i32 %add, i32* %v, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %cond.end
  %29 = load i32, i32* %i, align 4
  %sub41 = sub nsw i32 %29, 2
  store i32 %sub41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  %30 = load i32, i32* %j, align 4
  %sub43 = sub nsw i32 %30, 1
  store i32 %sub43, i32* %i, align 4
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc50, %for.end42
  %31 = load i32, i32* %i, align 4
  %cmp45 = icmp sge i32 %31, 0
  br i1 %cmp45, label %for.body47, label %for.end52

for.body47:                                       ; preds = %for.cond44
  %32 = load i32, i32* %i, align 4
  %arrayidx48 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx48, align 4
  %34 = load i32, i32* %v, align 4
  %add49 = add nsw i32 %34, %33
  store i32 %add49, i32* %v, align 4
  br label %for.inc50

for.inc50:                                        ; preds = %for.body47
  %35 = load i32, i32* %i, align 4
  %sub51 = sub nsw i32 %35, 2
  store i32 %sub51, i32* %i, align 4
  br label %for.cond44

for.end52:                                        ; preds = %for.cond44
  %36 = load i32, i32* %v, align 4
  %rem53 = srem i32 %36, 10
  %cmp54 = icmp eq i32 %rem53, 0
  %conv55 = zext i1 %cmp54 to i32
  store i32 %conv55, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end52, %if.then29, %if.else24, %if.then17, %if.then7
  %37 = load i32, i32* %retval, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca [7 x i8*], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i8*]* %test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i8*]* @__const.main.test to i8*), i32 28, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i8*], [7 x i8*]* %test, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @check_isin(i8* %3)
  %tobool = icmp ne i32 %call, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 84, i32 70
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp eq i32 %5, 6
  %6 = zext i1 %cmp1 to i64
  %cond2 = select i1 %cmp1, i32 10, i32 32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i32 %cond, i32 %cond2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 12
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 12:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sge i32 %4, 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 48:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sle i32 %5, 57
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 57:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %6, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %7, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sge i32 %9, 65
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 65:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp sle i32 %10, 90
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 90:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp eq i32 %11, 11
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 11:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %12, 55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 55:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %13, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %15, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc27 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %arrayidx28, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %20, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub31 = sub nsw i32 %21, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp sge i32 %22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %arrayidx36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 2, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp37 = icmp sgt i32 %25, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 9:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub39 = sub nsw i32 %26, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %sub39, %cond.true ], [ %27, %cond.false ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %28, %cond
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub41 = sub nsw i32 %29, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub43 = sub nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp45 = icmp sge i32 %31, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx48, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add49 = add nsw i32 %34, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub51 = sub nsw i32 %35, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem53 = srem i32 %36, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp54 = icmp eq i32 %rem53, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %conv55 = zext i1 %cmp54 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i1 = eq 0:i32, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 12:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 48:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 57:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 48:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 65:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 90:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 11:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 55:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -55
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 9:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -9
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i1 = eq 0:i32, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem %0, 10:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for check_isin()

; entering Souper's runOnFunction() for main()

; ModuleID = './Validate_International_Securities_Identification_Number.c.bc'
source_filename = "./Validate_International_Securities_Identification_Number.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [13 x i8] c"US0378331005\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"US0373831005\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"U50378331005\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"US03378331005\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"AU0000XVGZA3\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"AU0000VXGZA3\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"FR0000988040\00", align 1
@__const.main.test = private unnamed_addr constant [7 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [5 x i8] c"%c%c\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @check_isin(i8* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %v = alloca i32, align 4
  %s = alloca [24 x i32], align 16
  store i8* %a, i8** %a.addr, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %a.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  store i32 %conv, i32* %k, align 4
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sge i32 %4, 48
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %5 = load i32, i32* %k, align 4
  %cmp3 = icmp sle i32 %5, 57
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %6, 2
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load i32, i32* %k, align 4
  %sub = sub nsw i32 %7, 48
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %8
  store i32 %sub, i32* %arrayidx8, align 4
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %for.body
  %9 = load i32, i32* %k, align 4
  %cmp9 = icmp sge i32 %9, 65
  br i1 %cmp9, label %land.lhs.true11, label %if.else24

land.lhs.true11:                                  ; preds = %if.else
  %10 = load i32, i32* %k, align 4
  %cmp12 = icmp sle i32 %10, 90
  br i1 %cmp12, label %if.then14, label %if.else24

if.then14:                                        ; preds = %land.lhs.true11
  %11 = load i32, i32* %i, align 4
  %cmp15 = icmp eq i32 %11, 11
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.then14
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.then14
  %12 = load i32, i32* %k, align 4
  %sub19 = sub nsw i32 %12, 55
  store i32 %sub19, i32* %k, align 4
  %13 = load i32, i32* %k, align 4
  %div = sdiv i32 %13, 10
  %14 = load i32, i32* %j, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %14
  store i32 %div, i32* %arrayidx21, align 4
  %15 = load i32, i32* %k, align 4
  %rem = srem i32 %15, 10
  %16 = load i32, i32* %j, align 4
  %inc22 = add nsw i32 %16, 1
  store i32 %inc22, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %16
  store i32 %rem, i32* %arrayidx23, align 4
  br label %if.end25

if.else24:                                        ; preds = %land.lhs.true11, %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.end18
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end26
  %17 = load i32, i32* %i, align 4
  %inc27 = add nsw i32 %17, 1
  store i32 %inc27, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %a.addr, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx28, align 1
  %tobool = icmp ne i8 %20, 0
  br i1 %tobool, label %if.then29, label %if.end30

if.then29:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %for.end
  store i32 0, i32* %v, align 4
  %21 = load i32, i32* %j, align 4
  %sub31 = sub nsw i32 %21, 2
  store i32 %sub31, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %if.end30
  %22 = load i32, i32* %i, align 4
  %cmp33 = icmp sge i32 %22, 0
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %23 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %23
  %24 = load i32, i32* %arrayidx36, align 4
  %mul = mul nsw i32 2, %24
  store i32 %mul, i32* %k, align 4
  %25 = load i32, i32* %k, align 4
  %cmp37 = icmp sgt i32 %25, 9
  br i1 %cmp37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body35
  %26 = load i32, i32* %k, align 4
  %sub39 = sub nsw i32 %26, 9
  br label %cond.end

cond.false:                                       ; preds = %for.body35
  %27 = load i32, i32* %k, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub39, %cond.true ], [ %27, %cond.false ]
  %28 = load i32, i32* %v, align 4
  %add = add nsw i32 %28, %cond
  store i32 %add, i32* %v, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %cond.end
  %29 = load i32, i32* %i, align 4
  %sub41 = sub nsw i32 %29, 2
  store i32 %sub41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  %30 = load i32, i32* %j, align 4
  %sub43 = sub nsw i32 %30, 1
  store i32 %sub43, i32* %i, align 4
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc50, %for.end42
  %31 = load i32, i32* %i, align 4
  %cmp45 = icmp sge i32 %31, 0
  br i1 %cmp45, label %for.body47, label %for.end52

for.body47:                                       ; preds = %for.cond44
  %32 = load i32, i32* %i, align 4
  %arrayidx48 = getelementptr inbounds [24 x i32], [24 x i32]* %s, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx48, align 4
  %34 = load i32, i32* %v, align 4
  %add49 = add nsw i32 %34, %33
  store i32 %add49, i32* %v, align 4
  br label %for.inc50

for.inc50:                                        ; preds = %for.body47
  %35 = load i32, i32* %i, align 4
  %sub51 = sub nsw i32 %35, 2
  store i32 %sub51, i32* %i, align 4
  br label %for.cond44

for.end52:                                        ; preds = %for.cond44
  %36 = load i32, i32* %v, align 4
  %rem53 = srem i32 %36, 10
  %cmp54 = icmp eq i32 %rem53, 0
  %conv55 = zext i1 %cmp54 to i32
  store i32 %conv55, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end52, %if.then29, %if.else24, %if.then17, %if.then7
  %37 = load i32, i32* %retval, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca [7 x i8*], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i8*]* %test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i8*]* @__const.main.test to i8*), i32 28, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i8*], [7 x i8*]* %test, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @check_isin(i8* %3)
  %tobool = icmp ne i32 %call, 0
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 84, i32 70
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp eq i32 %5, 6
  %6 = zext i1 %cmp1 to i64
  %cond2 = select i1 %cmp1, i32 10, i32 32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i32 %cond, i32 %cond2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @check_isin(i8* %3)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool, i32 84, i32 70
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 84:i32, 70:i32
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %5, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond2 = select i1 %cmp1, i32 10, i32 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 6:i32, %0 (hasExternalUses)
%2:i32 = select %1, 10:i32, 32:i32
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 84:i32, 70:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 70
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 84
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 6:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 6:i32, %0 (hasExternalUses)
%2:i32 = select %1, 10:i32, 32:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
