
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for encodeNegativeBase()

; ModuleID = './Negative_base_numbers.c.bc'
source_filename = "./Negative_base_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@DIGITS = hidden constant [63 x i8] c"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 16
@DIGITS_LEN = hidden constant i32 64, align 4
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"%12d encoded in base %3d = %12s\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"%12s decoded in base %3d = %12d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encodeNegativeBase(i32 %n, i32 %base, i8* %out) #0 {
entry:
  %n.addr = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %rem = alloca i32, align 4
  %t = alloca i8, align 1
  store i32 %n, i32* %n.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %out.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i32, i32* %base.addr, align 4
  %cmp = icmp sgt i32 %1, -1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp slt i32 %2, -62
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %if.end4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp ne i32 %4, 0
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %base.addr, align 4
  %rem6 = srem i32 %5, %6
  store i32 %rem6, i32* %rem, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %base.addr, align 4
  %div = sdiv i32 %7, %8
  store i32 %div, i32* %n.addr, align 4
  %9 = load i32, i32* %rem, align 4
  %cmp7 = icmp slt i32 %9, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %while.body
  %10 = load i32, i32* %n.addr, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %n.addr, align 4
  %11 = load i32, i32* %rem, align 4
  %12 = load i32, i32* %base.addr, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %rem, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %while.body
  %13 = load i32, i32* %rem, align 4
  %arrayidx = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx, align 1
  %15 = load i8*, i8** %ptr, align 4
  store i8 %14, i8* %15, align 1
  %16 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %17, align 1
  %18 = load i8*, i8** %ptr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %18, i32 -1
  store i8* %incdec.ptr10, i8** %ptr, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %while.end
  %19 = load i8*, i8** %out.addr, align 4
  %20 = load i8*, i8** %ptr, align 4
  %cmp12 = icmp ult i8* %19, %20
  br i1 %cmp12, label %while.body13, label %while.end16

while.body13:                                     ; preds = %while.cond11
  %21 = load i8*, i8** %out.addr, align 4
  %22 = load i8, i8* %21, align 1
  store i8 %22, i8* %t, align 1
  %23 = load i8*, i8** %ptr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i8*, i8** %out.addr, align 4
  store i8 %24, i8* %25, align 1
  %26 = load i8, i8* %t, align 1
  %27 = load i8*, i8** %ptr, align 4
  store i8 %26, i8* %27, align 1
  %28 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  %29 = load i8*, i8** %ptr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr15, i8** %ptr, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  br label %return

return:                                           ; preds = %while.end16, %if.then3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @decodeNegativeBase(i8* %ns, i32 %base) #0 {
entry:
  %retval = alloca i32, align 4
  %ns.addr = alloca i8*, align 4
  %base.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %bb = alloca i32, align 4
  %i = alloca i32, align 4
  %ptr = alloca i8*, align 4
  store i8* %ns, i8** %ns.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  %0 = load i32, i32* %base.addr, align 4
  %cmp = icmp slt i32 %0, -62
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %ns.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %if.then13, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.end
  %4 = load i8*, i8** %ns.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %cmp7 = icmp eq i32 %conv6, 48
  br i1 %cmp7, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %6 = load i8*, i8** %ns.addr, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %6, i32 1
  %7 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %7 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %land.lhs.true, %lor.lhs.false4
  %8 = load i8*, i8** %ns.addr, align 4
  store i8* %8, i8** %ptr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end14
  %9 = load i8*, i8** %ptr, align 4
  %10 = load i8, i8* %9, align 1
  %conv15 = sext i8 %10 to i32
  %cmp16 = icmp ne i32 %conv15, 0
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %value, align 4
  store i32 1, i32* %bb, align 4
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %12, i32 -1
  store i8* %incdec.ptr18, i8** %ptr, align 4
  br label %while.cond19

while.cond19:                                     ; preds = %for.end, %while.end
  %13 = load i8*, i8** %ptr, align 4
  %14 = load i8*, i8** %ns.addr, align 4
  %cmp20 = icmp uge i8* %13, %14
  br i1 %cmp20, label %while.body22, label %while.end34

while.body22:                                     ; preds = %while.cond19
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body22
  %15 = load i32, i32* %i, align 4
  %cmp23 = icmp slt i32 %15, 64
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %ptr, align 4
  %17 = load i8, i8* %16, align 1
  %conv25 = sext i8 %17 to i32
  %18 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %18
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %19 to i32
  %cmp28 = icmp eq i32 %conv25, %conv27
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %for.body
  %20 = load i32, i32* %value, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %bb, align 4
  %mul = mul nsw i32 %21, %22
  %add = add nsw i32 %20, %mul
  store i32 %add, i32* %value, align 4
  %23 = load i32, i32* %bb, align 4
  %24 = load i32, i32* %base.addr, align 4
  %mul31 = mul nsw i32 %23, %24
  store i32 %mul31, i32* %bb, align 4
  br label %for.end

if.end32:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %26 = load i8*, i8** %ptr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %ptr, align 4
  br label %while.cond19

while.end34:                                      ; preds = %while.cond19
  %27 = load i32, i32* %value, align 4
  store i32 %27, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end34, %if.then13, %if.then
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i32 %n, i32 %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %buf = alloca [64 x i8], align 16
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  call void @encodeNegativeBase(i32 %0, i32 %1, i8* %arraydecay)
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i32 0, i32 0), i32 %2, i32 %3, i8* %arraydecay1)
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %4 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @decodeNegativeBase(i8* %arraydecay2, i32 %4)
  store i32 %call3, i32* %value, align 4
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %5 = load i32, i32* %b.addr, align 4
  %6 = load i32, i32* %value, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay4, i32 %5, i32 %6)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @driver(i32 10, i32 -2)
  call void @driver(i32 146, i32 -3)
  call void @driver(i32 15, i32 -10)
  call void @driver(i32 12, i32 -62)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %1, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %2, -62
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4294967234:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem6 = srem i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %rem, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %rem, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %rem, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp ult i8* %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %t, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4294967234:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for encodeNegativeBase()

; entering Souper's runOnFunction() for decodeNegativeBase()

; ModuleID = './Negative_base_numbers.c.bc'
source_filename = "./Negative_base_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@DIGITS = hidden constant [63 x i8] c"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 16
@DIGITS_LEN = hidden constant i32 64, align 4
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"%12d encoded in base %3d = %12s\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"%12s decoded in base %3d = %12d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encodeNegativeBase(i32 %n, i32 %base, i8* %out) #0 {
entry:
  %n.addr = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %rem = alloca i32, align 4
  %t = alloca i8, align 1
  store i32 %n, i32* %n.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %out.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i32, i32* %base.addr, align 4
  %cmp = icmp sgt i32 %1, -1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp slt i32 %2, -62
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %if.end4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp ne i32 %4, 0
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %base.addr, align 4
  %rem6 = srem i32 %5, %6
  store i32 %rem6, i32* %rem, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %base.addr, align 4
  %div = sdiv i32 %7, %8
  store i32 %div, i32* %n.addr, align 4
  %9 = load i32, i32* %rem, align 4
  %cmp7 = icmp slt i32 %9, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %while.body
  %10 = load i32, i32* %n.addr, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %n.addr, align 4
  %11 = load i32, i32* %rem, align 4
  %12 = load i32, i32* %base.addr, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %rem, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %while.body
  %13 = load i32, i32* %rem, align 4
  %arrayidx = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx, align 1
  %15 = load i8*, i8** %ptr, align 4
  store i8 %14, i8* %15, align 1
  %16 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %17, align 1
  %18 = load i8*, i8** %ptr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %18, i32 -1
  store i8* %incdec.ptr10, i8** %ptr, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %while.end
  %19 = load i8*, i8** %out.addr, align 4
  %20 = load i8*, i8** %ptr, align 4
  %cmp12 = icmp ult i8* %19, %20
  br i1 %cmp12, label %while.body13, label %while.end16

while.body13:                                     ; preds = %while.cond11
  %21 = load i8*, i8** %out.addr, align 4
  %22 = load i8, i8* %21, align 1
  store i8 %22, i8* %t, align 1
  %23 = load i8*, i8** %ptr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i8*, i8** %out.addr, align 4
  store i8 %24, i8* %25, align 1
  %26 = load i8, i8* %t, align 1
  %27 = load i8*, i8** %ptr, align 4
  store i8 %26, i8* %27, align 1
  %28 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  %29 = load i8*, i8** %ptr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr15, i8** %ptr, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  br label %return

return:                                           ; preds = %while.end16, %if.then3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @decodeNegativeBase(i8* %ns, i32 %base) #0 {
entry:
  %retval = alloca i32, align 4
  %ns.addr = alloca i8*, align 4
  %base.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %bb = alloca i32, align 4
  %i = alloca i32, align 4
  %ptr = alloca i8*, align 4
  store i8* %ns, i8** %ns.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  %0 = load i32, i32* %base.addr, align 4
  %cmp = icmp slt i32 %0, -62
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %ns.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %if.then13, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.end
  %4 = load i8*, i8** %ns.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %cmp7 = icmp eq i32 %conv6, 48
  br i1 %cmp7, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %6 = load i8*, i8** %ns.addr, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %6, i32 1
  %7 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %7 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %land.lhs.true, %lor.lhs.false4
  %8 = load i8*, i8** %ns.addr, align 4
  store i8* %8, i8** %ptr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end14
  %9 = load i8*, i8** %ptr, align 4
  %10 = load i8, i8* %9, align 1
  %conv15 = sext i8 %10 to i32
  %cmp16 = icmp ne i32 %conv15, 0
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %value, align 4
  store i32 1, i32* %bb, align 4
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %12, i32 -1
  store i8* %incdec.ptr18, i8** %ptr, align 4
  br label %while.cond19

while.cond19:                                     ; preds = %for.end, %while.end
  %13 = load i8*, i8** %ptr, align 4
  %14 = load i8*, i8** %ns.addr, align 4
  %cmp20 = icmp uge i8* %13, %14
  br i1 %cmp20, label %while.body22, label %while.end34

while.body22:                                     ; preds = %while.cond19
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body22
  %15 = load i32, i32* %i, align 4
  %cmp23 = icmp slt i32 %15, 64
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %ptr, align 4
  %17 = load i8, i8* %16, align 1
  %conv25 = sext i8 %17 to i32
  %18 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %18
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %19 to i32
  %cmp28 = icmp eq i32 %conv25, %conv27
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %for.body
  %20 = load i32, i32* %value, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %bb, align 4
  %mul = mul nsw i32 %21, %22
  %add = add nsw i32 %20, %mul
  store i32 %add, i32* %value, align 4
  %23 = load i32, i32* %bb, align 4
  %24 = load i32, i32* %base.addr, align 4
  %mul31 = mul nsw i32 %23, %24
  store i32 %mul31, i32* %bb, align 4
  br label %for.end

if.end32:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %26 = load i8*, i8** %ptr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %ptr, align 4
  br label %while.cond19

while.end34:                                      ; preds = %while.cond19
  %27 = load i32, i32* %value, align 4
  store i32 %27, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end34, %if.then13, %if.then
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i32 %n, i32 %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %buf = alloca [64 x i8], align 16
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  call void @encodeNegativeBase(i32 %0, i32 %1, i8* %arraydecay)
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i32 0, i32 0), i32 %2, i32 %3, i8* %arraydecay1)
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %4 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @decodeNegativeBase(i8* %arraydecay2, i32 %4)
  store i32 %call3, i32* %value, align 4
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %5 = load i32, i32* %b.addr, align 4
  %6 = load i32, i32* %value, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay4, i32 %5, i32 %6)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @driver(i32 10, i32 -2)
  call void @driver(i32 146, i32 -3)
  call void @driver(i32 15, i32 -10)
  call void @driver(i32 12, i32 -62)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, -62
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4294967234:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %1, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %conv6, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp11 = icmp eq i32 %conv10, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp16 = icmp ne i32 %conv15, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp20 = icmp uge i8* %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp slt i32 %15, 64
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv25 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp28 = icmp eq i32 %conv25, %conv27
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %bb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %20, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %bb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul31 = mul nsw i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for decodeNegativeBase()

; entering Souper's runOnFunction() for driver()

; ModuleID = './Negative_base_numbers.c.bc'
source_filename = "./Negative_base_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@DIGITS = hidden constant [63 x i8] c"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 16
@DIGITS_LEN = hidden constant i32 64, align 4
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"%12d encoded in base %3d = %12s\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"%12s decoded in base %3d = %12d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encodeNegativeBase(i32 %n, i32 %base, i8* %out) #0 {
entry:
  %n.addr = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %rem = alloca i32, align 4
  %t = alloca i8, align 1
  store i32 %n, i32* %n.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %out.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i32, i32* %base.addr, align 4
  %cmp = icmp sgt i32 %1, -1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp slt i32 %2, -62
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %if.end4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp ne i32 %4, 0
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %base.addr, align 4
  %rem6 = srem i32 %5, %6
  store i32 %rem6, i32* %rem, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %base.addr, align 4
  %div = sdiv i32 %7, %8
  store i32 %div, i32* %n.addr, align 4
  %9 = load i32, i32* %rem, align 4
  %cmp7 = icmp slt i32 %9, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %while.body
  %10 = load i32, i32* %n.addr, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %n.addr, align 4
  %11 = load i32, i32* %rem, align 4
  %12 = load i32, i32* %base.addr, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %rem, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %while.body
  %13 = load i32, i32* %rem, align 4
  %arrayidx = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx, align 1
  %15 = load i8*, i8** %ptr, align 4
  store i8 %14, i8* %15, align 1
  %16 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %17, align 1
  %18 = load i8*, i8** %ptr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %18, i32 -1
  store i8* %incdec.ptr10, i8** %ptr, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %while.end
  %19 = load i8*, i8** %out.addr, align 4
  %20 = load i8*, i8** %ptr, align 4
  %cmp12 = icmp ult i8* %19, %20
  br i1 %cmp12, label %while.body13, label %while.end16

while.body13:                                     ; preds = %while.cond11
  %21 = load i8*, i8** %out.addr, align 4
  %22 = load i8, i8* %21, align 1
  store i8 %22, i8* %t, align 1
  %23 = load i8*, i8** %ptr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i8*, i8** %out.addr, align 4
  store i8 %24, i8* %25, align 1
  %26 = load i8, i8* %t, align 1
  %27 = load i8*, i8** %ptr, align 4
  store i8 %26, i8* %27, align 1
  %28 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  %29 = load i8*, i8** %ptr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr15, i8** %ptr, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  br label %return

return:                                           ; preds = %while.end16, %if.then3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @decodeNegativeBase(i8* %ns, i32 %base) #0 {
entry:
  %retval = alloca i32, align 4
  %ns.addr = alloca i8*, align 4
  %base.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %bb = alloca i32, align 4
  %i = alloca i32, align 4
  %ptr = alloca i8*, align 4
  store i8* %ns, i8** %ns.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  %0 = load i32, i32* %base.addr, align 4
  %cmp = icmp slt i32 %0, -62
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %ns.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %if.then13, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.end
  %4 = load i8*, i8** %ns.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %cmp7 = icmp eq i32 %conv6, 48
  br i1 %cmp7, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %6 = load i8*, i8** %ns.addr, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %6, i32 1
  %7 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %7 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %land.lhs.true, %lor.lhs.false4
  %8 = load i8*, i8** %ns.addr, align 4
  store i8* %8, i8** %ptr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end14
  %9 = load i8*, i8** %ptr, align 4
  %10 = load i8, i8* %9, align 1
  %conv15 = sext i8 %10 to i32
  %cmp16 = icmp ne i32 %conv15, 0
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %value, align 4
  store i32 1, i32* %bb, align 4
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %12, i32 -1
  store i8* %incdec.ptr18, i8** %ptr, align 4
  br label %while.cond19

while.cond19:                                     ; preds = %for.end, %while.end
  %13 = load i8*, i8** %ptr, align 4
  %14 = load i8*, i8** %ns.addr, align 4
  %cmp20 = icmp uge i8* %13, %14
  br i1 %cmp20, label %while.body22, label %while.end34

while.body22:                                     ; preds = %while.cond19
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body22
  %15 = load i32, i32* %i, align 4
  %cmp23 = icmp slt i32 %15, 64
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %ptr, align 4
  %17 = load i8, i8* %16, align 1
  %conv25 = sext i8 %17 to i32
  %18 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %18
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %19 to i32
  %cmp28 = icmp eq i32 %conv25, %conv27
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %for.body
  %20 = load i32, i32* %value, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %bb, align 4
  %mul = mul nsw i32 %21, %22
  %add = add nsw i32 %20, %mul
  store i32 %add, i32* %value, align 4
  %23 = load i32, i32* %bb, align 4
  %24 = load i32, i32* %base.addr, align 4
  %mul31 = mul nsw i32 %23, %24
  store i32 %mul31, i32* %bb, align 4
  br label %for.end

if.end32:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %26 = load i8*, i8** %ptr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %ptr, align 4
  br label %while.cond19

while.end34:                                      ; preds = %while.cond19
  %27 = load i32, i32* %value, align 4
  store i32 %27, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end34, %if.then13, %if.then
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i32 %n, i32 %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %buf = alloca [64 x i8], align 16
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  call void @encodeNegativeBase(i32 %0, i32 %1, i8* %arraydecay)
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i32 0, i32 0), i32 %2, i32 %3, i8* %arraydecay1)
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %4 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @decodeNegativeBase(i8* %arraydecay2, i32 %4)
  store i32 %call3, i32* %value, align 4
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %5 = load i32, i32* %b.addr, align 4
  %6 = load i32, i32* %value, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay4, i32 %5, i32 %6)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @driver(i32 10, i32 -2)
  call void @driver(i32 146, i32 -3)
  call void @driver(i32 15, i32 -10)
  call void @driver(i32 12, i32 -62)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @decodeNegativeBase(i8* %arraydecay2, i32 %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for driver()

; entering Souper's runOnFunction() for main()

; ModuleID = './Negative_base_numbers.c.bc'
source_filename = "./Negative_base_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@DIGITS = hidden constant [63 x i8] c"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 16
@DIGITS_LEN = hidden constant i32 64, align 4
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"%12d encoded in base %3d = %12s\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"%12s decoded in base %3d = %12d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encodeNegativeBase(i32 %n, i32 %base, i8* %out) #0 {
entry:
  %n.addr = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  %ptr = alloca i8*, align 4
  %rem = alloca i32, align 4
  %t = alloca i8, align 1
  store i32 %n, i32* %n.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i8*, i8** %out.addr, align 4
  store i8* %0, i8** %ptr, align 4
  %1 = load i32, i32* %base.addr, align 4
  %cmp = icmp sgt i32 %1, -1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp slt i32 %2, -62
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %out.addr, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %if.end4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp ne i32 %4, 0
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %base.addr, align 4
  %rem6 = srem i32 %5, %6
  store i32 %rem6, i32* %rem, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %base.addr, align 4
  %div = sdiv i32 %7, %8
  store i32 %div, i32* %n.addr, align 4
  %9 = load i32, i32* %rem, align 4
  %cmp7 = icmp slt i32 %9, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %while.body
  %10 = load i32, i32* %n.addr, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %n.addr, align 4
  %11 = load i32, i32* %rem, align 4
  %12 = load i32, i32* %base.addr, align 4
  %sub = sub nsw i32 %11, %12
  store i32 %sub, i32* %rem, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %while.body
  %13 = load i32, i32* %rem, align 4
  %arrayidx = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx, align 1
  %15 = load i8*, i8** %ptr, align 4
  store i8 %14, i8* %15, align 1
  %16 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %ptr, align 4
  store i8 0, i8* %17, align 1
  %18 = load i8*, i8** %ptr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %18, i32 -1
  store i8* %incdec.ptr10, i8** %ptr, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %while.end
  %19 = load i8*, i8** %out.addr, align 4
  %20 = load i8*, i8** %ptr, align 4
  %cmp12 = icmp ult i8* %19, %20
  br i1 %cmp12, label %while.body13, label %while.end16

while.body13:                                     ; preds = %while.cond11
  %21 = load i8*, i8** %out.addr, align 4
  %22 = load i8, i8* %21, align 1
  store i8 %22, i8* %t, align 1
  %23 = load i8*, i8** %ptr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i8*, i8** %out.addr, align 4
  store i8 %24, i8* %25, align 1
  %26 = load i8, i8* %t, align 1
  %27 = load i8*, i8** %ptr, align 4
  store i8 %26, i8* %27, align 1
  %28 = load i8*, i8** %out.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr14, i8** %out.addr, align 4
  %29 = load i8*, i8** %ptr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr15, i8** %ptr, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  br label %return

return:                                           ; preds = %while.end16, %if.then3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @decodeNegativeBase(i8* %ns, i32 %base) #0 {
entry:
  %retval = alloca i32, align 4
  %ns.addr = alloca i8*, align 4
  %base.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %bb = alloca i32, align 4
  %i = alloca i32, align 4
  %ptr = alloca i8*, align 4
  store i8* %ns, i8** %ns.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  %0 = load i32, i32* %base.addr, align 4
  %cmp = icmp slt i32 %0, -62
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %ns.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %if.then13, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.end
  %4 = load i8*, i8** %ns.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %cmp7 = icmp eq i32 %conv6, 48
  br i1 %cmp7, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %6 = load i8*, i8** %ns.addr, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %6, i32 1
  %7 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %7 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %land.lhs.true, %lor.lhs.false4
  %8 = load i8*, i8** %ns.addr, align 4
  store i8* %8, i8** %ptr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end14
  %9 = load i8*, i8** %ptr, align 4
  %10 = load i8, i8* %9, align 1
  %conv15 = sext i8 %10 to i32
  %cmp16 = icmp ne i32 %conv15, 0
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %ptr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %value, align 4
  store i32 1, i32* %bb, align 4
  %12 = load i8*, i8** %ptr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %12, i32 -1
  store i8* %incdec.ptr18, i8** %ptr, align 4
  br label %while.cond19

while.cond19:                                     ; preds = %for.end, %while.end
  %13 = load i8*, i8** %ptr, align 4
  %14 = load i8*, i8** %ns.addr, align 4
  %cmp20 = icmp uge i8* %13, %14
  br i1 %cmp20, label %while.body22, label %while.end34

while.body22:                                     ; preds = %while.cond19
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body22
  %15 = load i32, i32* %i, align 4
  %cmp23 = icmp slt i32 %15, 64
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %ptr, align 4
  %17 = load i8, i8* %16, align 1
  %conv25 = sext i8 %17 to i32
  %18 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [63 x i8], [63 x i8]* @DIGITS, i32 0, i32 %18
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %19 to i32
  %cmp28 = icmp eq i32 %conv25, %conv27
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %for.body
  %20 = load i32, i32* %value, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %bb, align 4
  %mul = mul nsw i32 %21, %22
  %add = add nsw i32 %20, %mul
  store i32 %add, i32* %value, align 4
  %23 = load i32, i32* %bb, align 4
  %24 = load i32, i32* %base.addr, align 4
  %mul31 = mul nsw i32 %23, %24
  store i32 %mul31, i32* %bb, align 4
  br label %for.end

if.end32:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %26 = load i8*, i8** %ptr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %ptr, align 4
  br label %while.cond19

while.end34:                                      ; preds = %while.cond19
  %27 = load i32, i32* %value, align 4
  store i32 %27, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end34, %if.then13, %if.then
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i32 %n, i32 %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %buf = alloca [64 x i8], align 16
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  call void @encodeNegativeBase(i32 %0, i32 %1, i8* %arraydecay)
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %b.addr, align 4
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i32 0, i32 0), i32 %2, i32 %3, i8* %arraydecay1)
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %4 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @decodeNegativeBase(i8* %arraydecay2, i32 %4)
  store i32 %call3, i32* %value, align 4
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0
  %5 = load i32, i32* %b.addr, align 4
  %6 = load i32, i32* %value, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay4, i32 %5, i32 %6)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @driver(i32 10, i32 -2)
  call void @driver(i32 146, i32 -3)
  call void @driver(i32 15, i32 -10)
  call void @driver(i32 12, i32 -62)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
