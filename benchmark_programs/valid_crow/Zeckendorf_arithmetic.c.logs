
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for inv()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor = xor i32 %0, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for inv()

; entering Souper's runOnFunction() for a()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %dLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %8, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %shr = ashr i32 %7, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
infer %3 (demandedBits=00000000000000000000000000000011)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
%4:i32 = and 3:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %dVal3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul4 = mul nsw i32 %add, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %shr5 = ashr i32 %11, %mul4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = ashr %0, %3
infer %4 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and6 = and i32 %shr5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = ashr %0, %3
%5:i32 = and 1:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %cmp7 = icmp ne i32 %and6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = ashr %0, %3
%5:i32 = and 1:i32, %4
%6:i1 = ne 1:i32, %5
infer %6

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul10 = mul nsw i32 %13, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %mul10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %add11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
%3:i32 = shl 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %dVal12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add13 = add nsw i32 %15, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw 1:i32, %2
%4:i32 = shl 1:i32, %3
%5:i32 = addnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %dVal15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul16 = mul nsw i32 %18, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %shl17 = shl i32 3, %mul16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = shl 3:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @inv(i32 %shl17)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %and18 = and i32 %17, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add20 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul21 = mul nsw i32 %add20, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
infer %3 (demandedBits=00000000000000000000000000000011)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
%4:i32 = and 3:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = ashr %0, %3
infer %4 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = ashr %0, %3
%5:i32 = and 1:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = ashr %0, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = ashr %0, %3
%5:i32 = and 1:i32, %4
%6:i1 = ne 1:i32, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
%3:i32 = shl 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw 1:i32, %2
%4:i32 = shl 1:i32, %3
%5:i32 = addnsw %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108866
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
%3:i32 = shl 1:i32, %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = shl 3:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 768
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for a()

; entering Souper's runOnFunction() for b()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shr = ashr i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = eq 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %dVal3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %7, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %9, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sgt i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div6 = sdiv i32 %12, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %div6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %dVal8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl9 = shl i32 1, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @inv(i32 %shl9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %and10 = and i32 %14, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp sgt i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp13, i32 2, i32 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0 (hasExternalUses)
%2:i32 = select %1, 2:i32, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %20, %cond
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt 1:i32, %1 (hasExternalUses)
%3:i32 = select %2, 2:i32, 1:i32
%4:i32 = subnsw %0, %3
infer %4
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = eq 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
%2:i32 = subnsw %1, 1:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 512278743
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sdiv %0, 2:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0 (hasExternalUses)
%2:i32 = select %1, 2:i32, 1:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt 1:i32, %1 (hasExternalUses)
%3:i32 = select %2, 2:i32, 1:i32
%4:i32 = subnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for b()

; entering Souper's runOnFunction() for increment()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for increment()

; entering Souper's runOnFunction() for c()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shr = ashr i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %and, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = eq 1:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %dVal1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @inv(i32 %shl)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %and2 = and i32 %4, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sgt i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = eq 1:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for c()

; entering Souper's runOnFunction() for makeZeckendorf()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %1) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %2, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %conv, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %sub1, %7
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = subnsw %2, 48:i32
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %8, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %3, 48:i32
%5:i32 = mulnsw %1, %4
%6:i32 = addnsw %0, %5
infer %6

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 %9, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %10, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = subnsw %2, 48:i32
%4:i32 = mulnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 882376704
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %3, 48:i32
%5:i32 = mulnsw %1, %4
%6:i32 = addnsw %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536871167
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = subnsw %2, 48:i32
%4:i32 = mulnsw %0, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for makeZeckendorf()

; entering Souper's runOnFunction() for addAssign()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %dLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shr = ashr i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %and, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = eq 1:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i1 = slt %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for addAssign()

; entering Souper's runOnFunction() for subAssign()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %dLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shr = ashr i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %and, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = eq 1:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %gn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %dVal2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %dLen3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul nsw i32 %10, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %shr5 = ashr i32 %8, %mul4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
infer %3 (demandedBits=00000000000000000000000000000011)

; *****
; For LLVM instruction:
;  %and6 = and i32 %shr5, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
%4:i32 = and 3:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %and6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
%4:i32 = and 3:i32, %3
%5:i1 = eq 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %dLen8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %dLen10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %15, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
%4:i32 = and 3:i32, %3
%5:i1 = eq 0:i32, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for subAssign()

; entering Souper's runOnFunction() for mulAssign()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %dLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 2:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw 2:i32, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shr = ashr i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = slt 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = ashr %0, %1
%3:i32 = and 1:i32, %2
%4:i1 = slt 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mulAssign()

; entering Souper's runOnFunction() for printZeckendorf()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %dVal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %dVal1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %dLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %shr = ashr i32 %1, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
infer %3 (demandedBits=00000000000000000000000000000011)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
%4:i32 = and 3:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %idx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %dLen3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sge i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %dVal5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul6 = mul nsw i32 %8, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %shr7 = ashr i32 %7, %mul6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
infer %3 (demandedBits=00000000000000000000000000000011)

; *****
; For LLVM instruction:
;  %and8 = and i32 %shr7, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = ashr %0, %2
%4:i32 = and 3:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %idx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %11, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for printZeckendorf()

; entering Souper's runOnFunction() for main()

; ModuleID = './Zeckendorf_arithmetic.c.bc'
source_filename = "./Zeckendorf_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Zeckendorf = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
@printZeckendorf.dig = internal constant [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@printZeckendorf.dig1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"Addition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"1001\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"1000\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"10101\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"Subtraction:\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"101\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"10101010\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1010101\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Multiplication:\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"101010\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @inv(i32 %a) #0 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %xor = xor i32 %0, -1
  ret i32 %xor
}

; Function Attrs: noinline nounwind optnone
define hidden void @a(%struct.Zeckendorf* %self, i32 %n) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %sw.epilog
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %1, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  store i32 %4, i32* %dLen1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal, align 4
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 2
  %shr = ashr i32 %7, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %j, align 4
  %9 = load i32, i32* %j, align 4
  switch i32 %9, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %10, i32 0, i32 0
  %11 = load i32, i32* %dVal3, align 4
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %mul4 = mul nsw i32 %add, 2
  %shr5 = ashr i32 %11, %mul4
  %and6 = and i32 %shr5, 1
  %cmp7 = icmp ne i32 %and6, 1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %sw.bb2
  br label %return

if.end9:                                          ; preds = %sw.bb2
  %13 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %13, 2
  %add11 = add nsw i32 %mul10, 1
  %shl = shl i32 1, %add11
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal12 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 0
  %15 = load i32, i32* %dVal12, align 4
  %add13 = add nsw i32 %15, %shl
  store i32 %add13, i32* %dVal12, align 4
  br label %return

sw.bb14:                                          ; preds = %if.end
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal15 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  %17 = load i32, i32* %dVal15, align 4
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 2
  %shl17 = shl i32 3, %mul16
  %call = call i32 @inv(i32 %shl17)
  %and18 = and i32 %17, %call
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal19 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %19, i32 0, i32 0
  store i32 %and18, i32* %dVal19, align 4
  %20 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %21 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %21, 1
  %mul21 = mul nsw i32 %add20, 2
  call void @b(%struct.Zeckendorf* %20, i32 %mul21)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.body

return:                                           ; preds = %if.end9, %if.then8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @b(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %1)
  br label %if.end15

if.end:                                           ; preds = %entry
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %2, i32 0, i32 0
  %3 = load i32, i32* %dVal, align 4
  %4 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %3, %4
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  %7 = load i32, i32* %dVal3, align 4
  %add = add nsw i32 %7, %shl
  store i32 %add, i32* %dVal3, align 4
  %8 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %div = sdiv i32 %9, 2
  call void @a(%struct.Zeckendorf* %8, i32 %div)
  %10 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %10, 1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %12 = load i32, i32* %pos.addr, align 4
  %div6 = sdiv i32 %12, 2
  %sub = sub nsw i32 %div6, 1
  call void @a(%struct.Zeckendorf* %11, i32 %sub)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.end
  %13 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %13, i32 0, i32 0
  %14 = load i32, i32* %dVal8, align 4
  %15 = load i32, i32* %pos.addr, align 4
  %shl9 = shl i32 1, %15
  %call = call i32 @inv(i32 %shl9)
  %and10 = and i32 %14, %call
  %16 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal11 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %16, i32 0, i32 0
  store i32 %and10, i32* %dVal11, align 4
  %17 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %18 = load i32, i32* %pos.addr, align 4
  %add12 = add nsw i32 %18, 1
  call void @b(%struct.Zeckendorf* %17, i32 %add12)
  %19 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %20 = load i32, i32* %pos.addr, align 4
  %21 = load i32, i32* %pos.addr, align 4
  %cmp13 = icmp sgt i32 %21, 1
  %22 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i32 2, i32 1
  %sub14 = sub nsw i32 %20, %cond
  call void @b(%struct.Zeckendorf* %19, i32 %sub14)
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @increment(%struct.Zeckendorf* %self) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %dVal, align 4
  %2 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @a(%struct.Zeckendorf* %2, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @c(%struct.Zeckendorf* %self, i32 %pos) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %pos.addr = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %0, i32 0, i32 0
  %1 = load i32, i32* %dVal, align 4
  %2 = load i32, i32* %pos.addr, align 4
  %shr = ashr i32 %1, %2
  %and = and i32 %shr, 1
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %3, i32 0, i32 0
  %4 = load i32, i32* %dVal1, align 4
  %5 = load i32, i32* %pos.addr, align 4
  %shl = shl i32 1, %5
  %call = call i32 @inv(i32 %shl)
  %and2 = and i32 %4, %call
  %6 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %6, i32 0, i32 0
  store i32 %and2, i32* %dVal3, align 4
  br label %if.end6

if.end:                                           ; preds = %entry
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %8 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %8, 1
  call void @c(%struct.Zeckendorf* %7, i32 %add)
  %9 = load i32, i32* %pos.addr, align 4
  %cmp4 = icmp sgt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %11 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %11, 1
  call void @b(%struct.Zeckendorf* %10, i32 %sub)
  br label %if.end6

if.else:                                          ; preds = %if.end
  %12 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  call void @increment(%struct.Zeckendorf* %12)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeZeckendorf(%struct.Zeckendorf* noalias sret align 4 %agg.result, i8* %x) #0 {
entry:
  %x.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %x.addr, align 4
  %call = call i32 @strlen(i8* %1) #5
  %sub = sub i32 %call, 1
  store i32 %sub, i32* %i, align 4
  store i32 1, i32* %q, align 4
  %2 = load i32, i32* %i, align 4
  %div = sdiv i32 %2, 2
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 1
  store i32 %div, i32* %dLen, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %sub1 = sub nsw i32 %conv, 48
  %7 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %sub1, %7
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %agg.result, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %add = add nsw i32 %8, %mul
  store i32 %add, i32* %dVal, align 4
  %9 = load i32, i32* %q, align 4
  %mul2 = mul nsw i32 %9, 2
  store i32 %mul2, i32* %q, align 4
  %10 = load i32, i32* %i, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @addAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @b(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %gn = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  store i32 0, i32* %gn, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %gn, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 1
  %1 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %0, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %rhs, i32 0, i32 0
  %2 = load i32, i32* %dVal, align 4
  %3 = load i32, i32* %gn, align 4
  %shr = ashr i32 %2, %3
  %and = and i32 %shr, 1
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %5 = load i32, i32* %gn, align 4
  call void @c(%struct.Zeckendorf* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %gn, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %gn, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal2 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal2, align 4
  %9 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %9, i32 0, i32 1
  %10 = load i32, i32* %dLen3, align 4
  %mul4 = mul nsw i32 %10, 2
  %shr5 = ashr i32 %8, %mul4
  %and6 = and i32 %shr5, 3
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %11 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen8 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %11, i32 0, i32 1
  %12 = load i32, i32* %dLen8, align 4
  %cmp9 = icmp eq i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %13 = phi i1 [ true, %while.cond ], [ %cmp9, %lor.rhs ]
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %14 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen10 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %14, i32 0, i32 1
  %15 = load i32, i32* %dLen10, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %dLen10, align 4
  br label %while.cond

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mulAssign(%struct.Zeckendorf* %self, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %rhs) #0 {
entry:
  %self.addr = alloca %struct.Zeckendorf*, align 4
  %na = alloca %struct.Zeckendorf, align 4
  %nb = alloca %struct.Zeckendorf, align 4
  %nr = alloca %struct.Zeckendorf, align 4
  %nt = alloca %struct.Zeckendorf, align 4
  %i = alloca i32, align 4
  store %struct.Zeckendorf* %self, %struct.Zeckendorf** %self.addr, align 4
  %0 = bitcast %struct.Zeckendorf* %na to i8*
  %1 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  %2 = bitcast %struct.Zeckendorf* %nb to i8*
  %3 = bitcast %struct.Zeckendorf* %rhs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %nr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %5, i32 0, i32 1
  %6 = load i32, i32* %dLen, align 4
  %add = add nsw i32 %6, 1
  %mul = mul nsw i32 %add, 2
  %cmp = icmp slt i32 %4, %mul
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %7, i32 0, i32 0
  %8 = load i32, i32* %dVal, align 4
  %9 = load i32, i32* %i, align 4
  %shr = ashr i32 %8, %9
  %and = and i32 %shr, 1
  %cmp1 = icmp sgt i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @addAssign(%struct.Zeckendorf* %nr, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %nb)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %10 = bitcast %struct.Zeckendorf* %nt to i8*
  %11 = bitcast %struct.Zeckendorf* %nb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 %11, i32 8, i1 false)
  call void @addAssign(%struct.Zeckendorf* %nb, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %na)
  %12 = bitcast %struct.Zeckendorf* %na to i8*
  %13 = bitcast %struct.Zeckendorf* %nt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 %13, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.Zeckendorf*, %struct.Zeckendorf** %self.addr, align 4
  %16 = bitcast %struct.Zeckendorf* %15 to i8*
  %17 = bitcast %struct.Zeckendorf* %nr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %z) #0 {
entry:
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %dVal = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %0 = load i32, i32* %dVal, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %dVal1 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %1 = load i32, i32* %dVal1, align 4
  %dLen = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %2 = load i32, i32* %dLen, align 4
  %mul = mul nsw i32 %2, 2
  %shr = ashr i32 %1, %mul
  %and = and i32 %shr, 3
  store i32 %and, i32* %idx, align 4
  %3 = load i32, i32* %idx, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig1, i32 0, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* %4)
  %dLen3 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 1
  %5 = load i32, i32* %dLen3, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %dVal5 = getelementptr inbounds %struct.Zeckendorf, %struct.Zeckendorf* %z, i32 0, i32 0
  %7 = load i32, i32* %dVal5, align 4
  %8 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %8, 2
  %shr7 = ashr i32 %7, %mul6
  %and8 = and i32 %shr7, 3
  store i32 %and8, i32* %idx, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* @printZeckendorf.dig, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #4

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.Zeckendorf, align 4
  %tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp = alloca %struct.Zeckendorf, align 4
  %agg.tmp2 = alloca %struct.Zeckendorf, align 4
  %agg.tmp4 = alloca %struct.Zeckendorf, align 4
  %agg.tmp6 = alloca %struct.Zeckendorf, align 4
  %agg.tmp8 = alloca %struct.Zeckendorf, align 4
  %tmp11 = alloca %struct.Zeckendorf, align 4
  %agg.tmp12 = alloca %struct.Zeckendorf, align 4
  %tmp14 = alloca %struct.Zeckendorf, align 4
  %agg.tmp15 = alloca %struct.Zeckendorf, align 4
  %tmp18 = alloca %struct.Zeckendorf, align 4
  %agg.tmp19 = alloca %struct.Zeckendorf, align 4
  %tmp21 = alloca %struct.Zeckendorf, align 4
  %agg.tmp22 = alloca %struct.Zeckendorf, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  %0 = bitcast %struct.Zeckendorf* %g to i8*
  %1 = bitcast %struct.Zeckendorf* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 %1, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp2)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp4)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp6)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp8)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %2 = bitcast %struct.Zeckendorf* %g to i8*
  %3 = bitcast %struct.Zeckendorf* %tmp11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp12)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0))
  %4 = bitcast %struct.Zeckendorf* %g to i8*
  %5 = bitcast %struct.Zeckendorf* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0))
  call void @subAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp15)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0))
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %6 = bitcast %struct.Zeckendorf* %g to i8*
  %7 = bitcast %struct.Zeckendorf* %tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @mulAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp19)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %tmp21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  %8 = bitcast %struct.Zeckendorf* %g to i8*
  %9 = bitcast %struct.Zeckendorf* %tmp21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 %9, i32 8, i1 false)
  call void @makeZeckendorf(%struct.Zeckendorf* sret align 4 %agg.tmp22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  call void @addAssign(%struct.Zeckendorf* %g, %struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %agg.tmp22)
  call void @printZeckendorf(%struct.Zeckendorf* byval(%struct.Zeckendorf) align 4 %g)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
