
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for swap()

; ModuleID = './Sorting_algorithms-Cocktail_sort.c.bc'
source_filename = "./Sorting_algorithms-Cocktail_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.cocktailsort.inc = private unnamed_addr constant [2 x i32] [i32 1, i32 -1], align 4
@__const.main.a = private unnamed_addr constant [10 x i32] [i32 5, i32 -1, i32 101, i32 -4, i32 0, i32 1, i32 8, i32 6, i32 2, i32 3], align 16
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @swap(i32* %x, i32* %y) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %y.addr = alloca i32*, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32* %y, i32** %y.addr, align 4
  %0 = load i32*, i32** %x.addr, align 4
  %1 = load i32*, i32** %y.addr, align 4
  %cmp = icmp eq i32* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** %y.addr, align 4
  %3 = load i32, i32* %2, align 4
  %4 = load i32*, i32** %x.addr, align 4
  %5 = load i32, i32* %4, align 4
  %xor = xor i32 %5, %3
  store i32 %xor, i32* %4, align 4
  %6 = load i32*, i32** %x.addr, align 4
  %7 = load i32, i32* %6, align 4
  %8 = load i32*, i32** %y.addr, align 4
  %9 = load i32, i32* %8, align 4
  %xor1 = xor i32 %9, %7
  store i32 %xor1, i32* %8, align 4
  %10 = load i32*, i32** %y.addr, align 4
  %11 = load i32, i32* %10, align 4
  %12 = load i32*, i32** %x.addr, align 4
  %13 = load i32, i32* %12, align 4
  %xor2 = xor i32 %13, %11
  store i32 %xor2, i32* %12, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @cocktailsort(i32* %a, i32 %n) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %n.addr = alloca i32, align 4
  %flag = alloca i8, align 1
  %start = alloca [2 x i32], align 4
  %end = alloca [2 x i32], align 4
  %inc = alloca [2 x i32], align 4
  %it = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %for.end18
  %arrayinit.begin = getelementptr inbounds [2 x i32], [2 x i32]* %start, i32 0, i32 0
  store i32 1, i32* %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32, i32* %arrayinit.begin, i32 1
  %0 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %arrayinit.element, align 4
  %arrayinit.begin1 = getelementptr inbounds [2 x i32], [2 x i32]* %end, i32 0, i32 0
  %1 = load i32, i32* %n.addr, align 4
  store i32 %1, i32* %arrayinit.begin1, align 4
  %arrayinit.element2 = getelementptr inbounds i32, i32* %arrayinit.begin1, i32 1
  store i32 0, i32* %arrayinit.element2, align 4
  %2 = bitcast [2 x i32]* %inc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([2 x i32]* @__const.cocktailsort.inc to i8*), i32 8, i1 false)
  store i32 0, i32* %it, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc16, %while.body
  %3 = load i32, i32* %it, align 4
  %cmp = icmp slt i32 %3, 2
  br i1 %cmp, label %for.body, label %for.end18

for.body:                                         ; preds = %for.cond
  store i8 1, i8* %flag, align 1
  %4 = load i32, i32* %it, align 4
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %start, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %it, align 4
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %end, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp ne i32 %6, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond3
  %9 = load i32*, i32** %a.addr, align 4
  %10 = load i32, i32* %i, align 4
  %sub7 = sub nsw i32 %10, 1
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i32 %sub7
  %11 = load i32, i32* %arrayidx8, align 4
  %12 = load i32*, i32** %a.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp sgt i32 %11, %14
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body6
  %15 = load i32*, i32** %a.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %add.ptr11 = getelementptr inbounds i32, i32* %add.ptr, i32 -1
  %17 = load i32*, i32** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %add.ptr12 = getelementptr inbounds i32, i32* %17, i32 %18
  call void @swap(i32* %add.ptr11, i32* %add.ptr12)
  store i8 0, i8* %flag, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %it, align 4
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %inc, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx13, align 4
  %21 = load i32, i32* %i, align 4
  %add = add i32 %21, %20
  store i32 %add, i32* %i, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %22 = load i8, i8* %flag, align 1
  %tobool = icmp ne i8 %22, 0
  br i1 %tobool, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.end
  ret void

if.end15:                                         ; preds = %for.end
  br label %for.inc16

for.inc16:                                        ; preds = %if.end15
  %23 = load i32, i32* %it, align 4
  %inc17 = add nsw i32 %23, 1
  store i32 %inc17, i32* %it, align 4
  br label %for.cond

for.end18:                                        ; preds = %for.cond
  br label %while.body
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [10 x i32], align 16
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.a to i8*), i32 40, i1 false)
  store i32 10, i32* %n, align 4
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %a, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  call void @cocktailsort(i32* %arraydecay, i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %a, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32* %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor = xor i32 %5, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor1 = xor i32 %9, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor2 = xor i32 %13, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for swap()

; entering Souper's runOnFunction() for cocktailsort()

; ModuleID = './Sorting_algorithms-Cocktail_sort.c.bc'
source_filename = "./Sorting_algorithms-Cocktail_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.cocktailsort.inc = private unnamed_addr constant [2 x i32] [i32 1, i32 -1], align 4
@__const.main.a = private unnamed_addr constant [10 x i32] [i32 5, i32 -1, i32 101, i32 -4, i32 0, i32 1, i32 8, i32 6, i32 2, i32 3], align 16
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @swap(i32* %x, i32* %y) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %y.addr = alloca i32*, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32* %y, i32** %y.addr, align 4
  %0 = load i32*, i32** %x.addr, align 4
  %1 = load i32*, i32** %y.addr, align 4
  %cmp = icmp eq i32* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** %y.addr, align 4
  %3 = load i32, i32* %2, align 4
  %4 = load i32*, i32** %x.addr, align 4
  %5 = load i32, i32* %4, align 4
  %xor = xor i32 %5, %3
  store i32 %xor, i32* %4, align 4
  %6 = load i32*, i32** %x.addr, align 4
  %7 = load i32, i32* %6, align 4
  %8 = load i32*, i32** %y.addr, align 4
  %9 = load i32, i32* %8, align 4
  %xor1 = xor i32 %9, %7
  store i32 %xor1, i32* %8, align 4
  %10 = load i32*, i32** %y.addr, align 4
  %11 = load i32, i32* %10, align 4
  %12 = load i32*, i32** %x.addr, align 4
  %13 = load i32, i32* %12, align 4
  %xor2 = xor i32 %13, %11
  store i32 %xor2, i32* %12, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @cocktailsort(i32* %a, i32 %n) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %n.addr = alloca i32, align 4
  %flag = alloca i8, align 1
  %start = alloca [2 x i32], align 4
  %end = alloca [2 x i32], align 4
  %inc = alloca [2 x i32], align 4
  %it = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %for.end18
  %arrayinit.begin = getelementptr inbounds [2 x i32], [2 x i32]* %start, i32 0, i32 0
  store i32 1, i32* %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32, i32* %arrayinit.begin, i32 1
  %0 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %arrayinit.element, align 4
  %arrayinit.begin1 = getelementptr inbounds [2 x i32], [2 x i32]* %end, i32 0, i32 0
  %1 = load i32, i32* %n.addr, align 4
  store i32 %1, i32* %arrayinit.begin1, align 4
  %arrayinit.element2 = getelementptr inbounds i32, i32* %arrayinit.begin1, i32 1
  store i32 0, i32* %arrayinit.element2, align 4
  %2 = bitcast [2 x i32]* %inc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([2 x i32]* @__const.cocktailsort.inc to i8*), i32 8, i1 false)
  store i32 0, i32* %it, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc16, %while.body
  %3 = load i32, i32* %it, align 4
  %cmp = icmp slt i32 %3, 2
  br i1 %cmp, label %for.body, label %for.end18

for.body:                                         ; preds = %for.cond
  store i8 1, i8* %flag, align 1
  %4 = load i32, i32* %it, align 4
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %start, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %it, align 4
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %end, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp ne i32 %6, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond3
  %9 = load i32*, i32** %a.addr, align 4
  %10 = load i32, i32* %i, align 4
  %sub7 = sub nsw i32 %10, 1
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i32 %sub7
  %11 = load i32, i32* %arrayidx8, align 4
  %12 = load i32*, i32** %a.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp sgt i32 %11, %14
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body6
  %15 = load i32*, i32** %a.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %add.ptr11 = getelementptr inbounds i32, i32* %add.ptr, i32 -1
  %17 = load i32*, i32** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %add.ptr12 = getelementptr inbounds i32, i32* %17, i32 %18
  call void @swap(i32* %add.ptr11, i32* %add.ptr12)
  store i8 0, i8* %flag, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %it, align 4
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %inc, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx13, align 4
  %21 = load i32, i32* %i, align 4
  %add = add i32 %21, %20
  store i32 %add, i32* %i, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %22 = load i8, i8* %flag, align 1
  %tobool = icmp ne i8 %22, 0
  br i1 %tobool, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.end
  ret void

if.end15:                                         ; preds = %for.end
  br label %for.inc16

for.inc16:                                        ; preds = %if.end15
  %23 = load i32, i32* %it, align 4
  %inc17 = add nsw i32 %23, 1
  store i32 %inc17, i32* %it, align 4
  br label %for.cond

for.end18:                                        ; preds = %for.cond
  br label %while.body
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [10 x i32], align 16
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.a to i8*), i32 40, i1 false)
  store i32 10, i32* %n, align 4
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %a, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  call void @cocktailsort(i32* %arraydecay, i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %a, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne i32 %6, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp sgt i32 %11, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %21, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %flag, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %22, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cocktailsort()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sorting_algorithms-Cocktail_sort.c.bc'
source_filename = "./Sorting_algorithms-Cocktail_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.cocktailsort.inc = private unnamed_addr constant [2 x i32] [i32 1, i32 -1], align 4
@__const.main.a = private unnamed_addr constant [10 x i32] [i32 5, i32 -1, i32 101, i32 -4, i32 0, i32 1, i32 8, i32 6, i32 2, i32 3], align 16
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @swap(i32* %x, i32* %y) #0 {
entry:
  %x.addr = alloca i32*, align 4
  %y.addr = alloca i32*, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32* %y, i32** %y.addr, align 4
  %0 = load i32*, i32** %x.addr, align 4
  %1 = load i32*, i32** %y.addr, align 4
  %cmp = icmp eq i32* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** %y.addr, align 4
  %3 = load i32, i32* %2, align 4
  %4 = load i32*, i32** %x.addr, align 4
  %5 = load i32, i32* %4, align 4
  %xor = xor i32 %5, %3
  store i32 %xor, i32* %4, align 4
  %6 = load i32*, i32** %x.addr, align 4
  %7 = load i32, i32* %6, align 4
  %8 = load i32*, i32** %y.addr, align 4
  %9 = load i32, i32* %8, align 4
  %xor1 = xor i32 %9, %7
  store i32 %xor1, i32* %8, align 4
  %10 = load i32*, i32** %y.addr, align 4
  %11 = load i32, i32* %10, align 4
  %12 = load i32*, i32** %x.addr, align 4
  %13 = load i32, i32* %12, align 4
  %xor2 = xor i32 %13, %11
  store i32 %xor2, i32* %12, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @cocktailsort(i32* %a, i32 %n) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %n.addr = alloca i32, align 4
  %flag = alloca i8, align 1
  %start = alloca [2 x i32], align 4
  %end = alloca [2 x i32], align 4
  %inc = alloca [2 x i32], align 4
  %it = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %for.end18
  %arrayinit.begin = getelementptr inbounds [2 x i32], [2 x i32]* %start, i32 0, i32 0
  store i32 1, i32* %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32, i32* %arrayinit.begin, i32 1
  %0 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %arrayinit.element, align 4
  %arrayinit.begin1 = getelementptr inbounds [2 x i32], [2 x i32]* %end, i32 0, i32 0
  %1 = load i32, i32* %n.addr, align 4
  store i32 %1, i32* %arrayinit.begin1, align 4
  %arrayinit.element2 = getelementptr inbounds i32, i32* %arrayinit.begin1, i32 1
  store i32 0, i32* %arrayinit.element2, align 4
  %2 = bitcast [2 x i32]* %inc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([2 x i32]* @__const.cocktailsort.inc to i8*), i32 8, i1 false)
  store i32 0, i32* %it, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc16, %while.body
  %3 = load i32, i32* %it, align 4
  %cmp = icmp slt i32 %3, 2
  br i1 %cmp, label %for.body, label %for.end18

for.body:                                         ; preds = %for.cond
  store i8 1, i8* %flag, align 1
  %4 = load i32, i32* %it, align 4
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %start, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %it, align 4
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %end, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp ne i32 %6, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond3
  %9 = load i32*, i32** %a.addr, align 4
  %10 = load i32, i32* %i, align 4
  %sub7 = sub nsw i32 %10, 1
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i32 %sub7
  %11 = load i32, i32* %arrayidx8, align 4
  %12 = load i32*, i32** %a.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp sgt i32 %11, %14
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body6
  %15 = load i32*, i32** %a.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i32, i32* %15, i32 %16
  %add.ptr11 = getelementptr inbounds i32, i32* %add.ptr, i32 -1
  %17 = load i32*, i32** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %add.ptr12 = getelementptr inbounds i32, i32* %17, i32 %18
  call void @swap(i32* %add.ptr11, i32* %add.ptr12)
  store i8 0, i8* %flag, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %it, align 4
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %inc, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx13, align 4
  %21 = load i32, i32* %i, align 4
  %add = add i32 %21, %20
  store i32 %add, i32* %i, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %22 = load i8, i8* %flag, align 1
  %tobool = icmp ne i8 %22, 0
  br i1 %tobool, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.end
  ret void

if.end15:                                         ; preds = %for.end
  br label %for.inc16

for.inc16:                                        ; preds = %if.end15
  %23 = load i32, i32* %it, align 4
  %inc17 = add nsw i32 %23, 1
  store i32 %inc17, i32* %it, align 4
  br label %for.cond

for.end18:                                        ; preds = %for.cond
  br label %while.body
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [10 x i32], align 16
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.a to i8*), i32 40, i1 false)
  store i32 10, i32* %n, align 4
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %a, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  call void @cocktailsort(i32* %arraydecay, i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %a, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
