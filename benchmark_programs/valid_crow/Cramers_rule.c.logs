
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for init_square_matrix()

; ModuleID = './Cramers_rule.c.bc'
source_filename = "./Cramers_rule.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.SquareMatrix = type { i32, double** }

@.str = private unnamed_addr constant [17 x i8] c"Singular matrix!\00", align 1
@__const.__main_argc_argv.elems = private unnamed_addr constant [4 x [4 x double]] [[4 x double] [double 2.000000e+00, double -1.000000e+00, double 5.000000e+00, double 1.000000e+00], [4 x double] [double 3.000000e+00, double 2.000000e+00, double 2.000000e+00, double -6.000000e+00], [4 x double] [double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double -1.000000e+00], [4 x double] [double 5.000000e+00, double -2.000000e+00, double -3.000000e+00, double 3.000000e+00]], align 16
@__const.__main_argc_argv.b = private unnamed_addr constant [4 x double] [double -3.000000e+00, double -3.200000e+01, double -4.700000e+01, double 4.900000e+01], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"%7.3lf\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, i32 %n, double* %elems) #0 {
entry:
  %n.addr = alloca i32, align 4
  %elems.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %elems, double** %elems.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %n1, align 4
  %elems2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %3, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call to double**
  store double** %4, double*** %elems2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %7, 8
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %8 = bitcast i8* %call4 to double*
  %elems5 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %9 = load double**, double*** %elems5, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %9, i32 %10
  store double* %8, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %13 = load double*, double** %elems.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = mul nsw i32 %14, %1
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 %15
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %16
  %17 = load double, double* %arrayidx10, align 8
  %elems11 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %18 = load double**, double*** %elems11, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx12, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  store double %17, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %23, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @copy_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %src) #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 0
  %0 = load i32, i32* %n, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  store i32 %0, i32* %n1, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %1 = load i32, i32* %n2, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to double**
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  store double** %2, double*** %elems, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %3 = load i32, i32* %i, align 4
  %n3 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %4 = load i32, i32* %n3, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end20

for.body:                                         ; preds = %for.cond
  %n4 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %5 = load i32, i32* %n4, align 4
  %mul5 = mul i32 %5, 8
  %call6 = call noalias i8* @malloc(i32 %mul5)
  %6 = bitcast i8* %call6 to double*
  %elems7 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %7 = load double**, double*** %elems7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %n9 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %10 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %elems12 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 1
  %11 = load double**, double*** %elems12, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx13, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx14, align 8
  %elems15 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %16 = load double**, double*** %elems15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %16, i32 %17
  %18 = load double*, double** %arrayidx16, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %18, i32 %19
  store double %15, double* %arrayidx17, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %retval = alloca double, align 8
  %det = alloca double, align 8
  %j = alloca i32, align 4
  %i_max = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  %i41 = alloca i32, align 4
  %mult = alloca double, align 8
  %k53 = alloca i32, align 4
  %i76 = alloca i32, align 4
  store double 1.000000e+00, double* %det, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc73, %entry
  %0 = load i32, i32* %j, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end75

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  store i32 %2, i32* %i_max, align 4
  %3 = load i32, i32* %j, align 4
  store i32 %3, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %5 = load i32, i32* %n2, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond1
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %6 = load double**, double*** %elems, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  %elems6 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %11 = load double**, double*** %elems6, align 4
  %12 = load i32, i32* %i_max, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx7, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx8, align 8
  %cmp9 = fcmp ogt double %10, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %16 = load i32, i32* %i, align 4
  store i32 %16, i32* %i_max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load i32, i32* %i_max, align 4
  %19 = load i32, i32* %j, align 4
  %cmp10 = icmp ne i32 %18, %19
  br i1 %cmp10, label %if.then11, label %if.end31

if.then11:                                        ; preds = %for.end
  store i32 0, i32* %k, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %if.then11
  %20 = load i32, i32* %k, align 4
  %n13 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %21 = load i32, i32* %n13, align 4
  %cmp14 = icmp slt i32 %20, %21
  br i1 %cmp14, label %for.body15, label %for.end30

for.body15:                                       ; preds = %for.cond12
  %elems16 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %22 = load double**, double*** %elems16, align 4
  %23 = load i32, i32* %i_max, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  store double %26, double* %tmp, align 8
  %elems19 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %27 = load double**, double*** %elems19, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx20, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx21, align 8
  %elems22 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %32 = load double**, double*** %elems22, align 4
  %33 = load i32, i32* %i_max, align 4
  %arrayidx23 = getelementptr inbounds double*, double** %32, i32 %33
  %34 = load double*, double** %arrayidx23, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx24 = getelementptr inbounds double, double* %34, i32 %35
  store double %31, double* %arrayidx24, align 8
  %36 = load double, double* %tmp, align 8
  %elems25 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %37 = load double**, double*** %elems25, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx26, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds double, double* %39, i32 %40
  store double %36, double* %arrayidx27, align 8
  br label %for.inc28

for.inc28:                                        ; preds = %for.body15
  %41 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %41, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  %42 = load double, double* %det, align 8
  %mul = fmul double %42, -1.000000e+00
  store double %mul, double* %det, align 8
  br label %if.end31

if.end31:                                         ; preds = %for.end30, %for.end
  %elems32 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %43 = load double**, double*** %elems32, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx33, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds double, double* %45, i32 %46
  %47 = load double, double* %arrayidx34, align 8
  %conv = fptosi double %47 to i32
  %call = call i32 @abs(i32 %conv) #4
  %conv35 = sitofp i32 %call to double
  %cmp36 = fcmp olt double %conv35, 0x3D719799812DEA11
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end31
  %call39 = call i32 @puts(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0))
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.end31
  %48 = load i32, i32* %j, align 4
  %add = add nsw i32 %48, 1
  store i32 %add, i32* %i41, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc70, %if.end40
  %49 = load i32, i32* %i41, align 4
  %n43 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %50 = load i32, i32* %n43, align 4
  %cmp44 = icmp slt i32 %49, %50
  br i1 %cmp44, label %for.body46, label %for.end72

for.body46:                                       ; preds = %for.cond42
  %elems47 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %51 = load double**, double*** %elems47, align 4
  %52 = load i32, i32* %i41, align 4
  %arrayidx48 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx48, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx49 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx49, align 8
  %fneg = fneg double %55
  %elems50 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %56 = load double**, double*** %elems50, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx51 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx51, align 4
  %59 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx52, align 8
  %div = fdiv double %fneg, %60
  store double %div, double* %mult, align 8
  store i32 0, i32* %k53, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc67, %for.body46
  %61 = load i32, i32* %k53, align 4
  %n55 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %62 = load i32, i32* %n55, align 4
  %cmp56 = icmp slt i32 %61, %62
  br i1 %cmp56, label %for.body58, label %for.end69

for.body58:                                       ; preds = %for.cond54
  %63 = load double, double* %mult, align 8
  %elems59 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %64 = load double**, double*** %elems59, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds double*, double** %64, i32 %65
  %66 = load double*, double** %arrayidx60, align 4
  %67 = load i32, i32* %k53, align 4
  %arrayidx61 = getelementptr inbounds double, double* %66, i32 %67
  %68 = load double, double* %arrayidx61, align 8
  %mul62 = fmul double %63, %68
  %elems63 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %69 = load double**, double*** %elems63, align 4
  %70 = load i32, i32* %i41, align 4
  %arrayidx64 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx64, align 4
  %72 = load i32, i32* %k53, align 4
  %arrayidx65 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx65, align 8
  %add66 = fadd double %73, %mul62
  store double %add66, double* %arrayidx65, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.body58
  %74 = load i32, i32* %k53, align 4
  %inc68 = add nsw i32 %74, 1
  store i32 %inc68, i32* %k53, align 4
  br label %for.cond54

for.end69:                                        ; preds = %for.cond54
  br label %for.inc70

for.inc70:                                        ; preds = %for.end69
  %75 = load i32, i32* %i41, align 4
  %inc71 = add nsw i32 %75, 1
  store i32 %inc71, i32* %i41, align 4
  br label %for.cond42

for.end72:                                        ; preds = %for.cond42
  br label %for.inc73

for.inc73:                                        ; preds = %for.end72
  %76 = load i32, i32* %j, align 4
  %inc74 = add nsw i32 %76, 1
  store i32 %inc74, i32* %j, align 4
  br label %for.cond

for.end75:                                        ; preds = %for.cond
  store i32 0, i32* %i76, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc86, %for.end75
  %77 = load i32, i32* %i76, align 4
  %n78 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %78 = load i32, i32* %n78, align 4
  %cmp79 = icmp slt i32 %77, %78
  br i1 %cmp79, label %for.body81, label %for.end88

for.body81:                                       ; preds = %for.cond77
  %elems82 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %79 = load double**, double*** %elems82, align 4
  %80 = load i32, i32* %i76, align 4
  %arrayidx83 = getelementptr inbounds double*, double** %79, i32 %80
  %81 = load double*, double** %arrayidx83, align 4
  %82 = load i32, i32* %i76, align 4
  %arrayidx84 = getelementptr inbounds double, double* %81, i32 %82
  %83 = load double, double* %arrayidx84, align 8
  %84 = load double, double* %det, align 8
  %mul85 = fmul double %84, %83
  store double %mul85, double* %det, align 8
  br label %for.inc86

for.inc86:                                        ; preds = %for.body81
  %85 = load i32, i32* %i76, align 4
  %inc87 = add nsw i32 %85, 1
  store i32 %inc87, i32* %i76, align 4
  br label %for.cond77

for.end88:                                        ; preds = %for.cond77
  %86 = load double, double* %det, align 8
  store double %86, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end88, %if.then38
  %87 = load double, double* %retval, align 8
  ret double %87
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #2

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %2 = load double**, double*** %elems, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %2, i32 %3
  %4 = load double*, double** %arrayidx, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %elems1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %7 = load double**, double*** %elems1, align 4
  %8 = bitcast double** %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %det_A, double* %b, i32 %var) #0 {
entry:
  %det_A.addr = alloca double, align 8
  %b.addr = alloca double*, align 4
  %var.addr = alloca i32, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %i = alloca i32, align 4
  %det_tmp = alloca double, align 8
  store double %det_A, double* %det_A.addr, align 8
  store double* %b, double** %b.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %b.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 1
  %5 = load double**, double*** %elems, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx1, align 4
  %8 = load i32, i32* %var.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %7, i32 %8
  store double %4, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  store double %call, double* %det_tmp, align 8
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %10 = load double, double* %det_tmp, align 8
  %11 = load double, double* %det_A.addr, align 8
  %div = fdiv double %10, %11
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %elems = alloca [4 x [4 x double]], align 16
  %A = alloca %struct.SquareMatrix, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %det_A = alloca i32, align 4
  %b = alloca [4 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x [4 x double]]* %elems to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x double]]* @__const.__main_argc_argv.elems to i8*), i32 128, i1 false)
  %arraydecay = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %elems, i32 0, i32 0
  %1 = bitcast [4 x double]* %arraydecay to double*
  call void @init_square_matrix(%struct.SquareMatrix* sret align 4 %A, i32 4, double* %1)
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %conv = fptosi double %call to i32
  store i32 %conv, i32* %det_A, align 4
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %2 = bitcast [4 x double]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x double]* @__const.__main_argc_argv.b to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %det_A, align 4
  %conv2 = sitofp i32 %4 to double
  %arraydecay3 = getelementptr inbounds [4 x double], [4 x double]* %b, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call4 = call double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %conv2, double* %arraydecay3, i32 %5)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), double %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %3, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul i32 %7, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = mul nsw i32 %14, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for init_square_matrix()

; entering Souper's runOnFunction() for copy_square_matrix()

; ModuleID = './Cramers_rule.c.bc'
source_filename = "./Cramers_rule.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.SquareMatrix = type { i32, double** }

@.str = private unnamed_addr constant [17 x i8] c"Singular matrix!\00", align 1
@__const.__main_argc_argv.elems = private unnamed_addr constant [4 x [4 x double]] [[4 x double] [double 2.000000e+00, double -1.000000e+00, double 5.000000e+00, double 1.000000e+00], [4 x double] [double 3.000000e+00, double 2.000000e+00, double 2.000000e+00, double -6.000000e+00], [4 x double] [double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double -1.000000e+00], [4 x double] [double 5.000000e+00, double -2.000000e+00, double -3.000000e+00, double 3.000000e+00]], align 16
@__const.__main_argc_argv.b = private unnamed_addr constant [4 x double] [double -3.000000e+00, double -3.200000e+01, double -4.700000e+01, double 4.900000e+01], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"%7.3lf\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, i32 %n, double* %elems) #0 {
entry:
  %n.addr = alloca i32, align 4
  %elems.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %elems, double** %elems.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %n1, align 4
  %elems2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %3, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call to double**
  store double** %4, double*** %elems2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %7, 8
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %8 = bitcast i8* %call4 to double*
  %elems5 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %9 = load double**, double*** %elems5, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %9, i32 %10
  store double* %8, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %13 = load double*, double** %elems.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = mul nsw i32 %14, %1
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 %15
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %16
  %17 = load double, double* %arrayidx10, align 8
  %elems11 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %18 = load double**, double*** %elems11, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx12, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  store double %17, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %23, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @copy_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %src) #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 0
  %0 = load i32, i32* %n, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  store i32 %0, i32* %n1, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %1 = load i32, i32* %n2, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to double**
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  store double** %2, double*** %elems, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %3 = load i32, i32* %i, align 4
  %n3 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %4 = load i32, i32* %n3, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end20

for.body:                                         ; preds = %for.cond
  %n4 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %5 = load i32, i32* %n4, align 4
  %mul5 = mul i32 %5, 8
  %call6 = call noalias i8* @malloc(i32 %mul5)
  %6 = bitcast i8* %call6 to double*
  %elems7 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %7 = load double**, double*** %elems7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %n9 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %10 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %elems12 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 1
  %11 = load double**, double*** %elems12, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx13, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx14, align 8
  %elems15 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %16 = load double**, double*** %elems15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %16, i32 %17
  %18 = load double*, double** %arrayidx16, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %18, i32 %19
  store double %15, double* %arrayidx17, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %retval = alloca double, align 8
  %det = alloca double, align 8
  %j = alloca i32, align 4
  %i_max = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  %i41 = alloca i32, align 4
  %mult = alloca double, align 8
  %k53 = alloca i32, align 4
  %i76 = alloca i32, align 4
  store double 1.000000e+00, double* %det, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc73, %entry
  %0 = load i32, i32* %j, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end75

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  store i32 %2, i32* %i_max, align 4
  %3 = load i32, i32* %j, align 4
  store i32 %3, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %5 = load i32, i32* %n2, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond1
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %6 = load double**, double*** %elems, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  %elems6 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %11 = load double**, double*** %elems6, align 4
  %12 = load i32, i32* %i_max, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx7, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx8, align 8
  %cmp9 = fcmp ogt double %10, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %16 = load i32, i32* %i, align 4
  store i32 %16, i32* %i_max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load i32, i32* %i_max, align 4
  %19 = load i32, i32* %j, align 4
  %cmp10 = icmp ne i32 %18, %19
  br i1 %cmp10, label %if.then11, label %if.end31

if.then11:                                        ; preds = %for.end
  store i32 0, i32* %k, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %if.then11
  %20 = load i32, i32* %k, align 4
  %n13 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %21 = load i32, i32* %n13, align 4
  %cmp14 = icmp slt i32 %20, %21
  br i1 %cmp14, label %for.body15, label %for.end30

for.body15:                                       ; preds = %for.cond12
  %elems16 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %22 = load double**, double*** %elems16, align 4
  %23 = load i32, i32* %i_max, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  store double %26, double* %tmp, align 8
  %elems19 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %27 = load double**, double*** %elems19, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx20, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx21, align 8
  %elems22 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %32 = load double**, double*** %elems22, align 4
  %33 = load i32, i32* %i_max, align 4
  %arrayidx23 = getelementptr inbounds double*, double** %32, i32 %33
  %34 = load double*, double** %arrayidx23, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx24 = getelementptr inbounds double, double* %34, i32 %35
  store double %31, double* %arrayidx24, align 8
  %36 = load double, double* %tmp, align 8
  %elems25 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %37 = load double**, double*** %elems25, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx26, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds double, double* %39, i32 %40
  store double %36, double* %arrayidx27, align 8
  br label %for.inc28

for.inc28:                                        ; preds = %for.body15
  %41 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %41, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  %42 = load double, double* %det, align 8
  %mul = fmul double %42, -1.000000e+00
  store double %mul, double* %det, align 8
  br label %if.end31

if.end31:                                         ; preds = %for.end30, %for.end
  %elems32 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %43 = load double**, double*** %elems32, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx33, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds double, double* %45, i32 %46
  %47 = load double, double* %arrayidx34, align 8
  %conv = fptosi double %47 to i32
  %call = call i32 @abs(i32 %conv) #4
  %conv35 = sitofp i32 %call to double
  %cmp36 = fcmp olt double %conv35, 0x3D719799812DEA11
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end31
  %call39 = call i32 @puts(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0))
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.end31
  %48 = load i32, i32* %j, align 4
  %add = add nsw i32 %48, 1
  store i32 %add, i32* %i41, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc70, %if.end40
  %49 = load i32, i32* %i41, align 4
  %n43 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %50 = load i32, i32* %n43, align 4
  %cmp44 = icmp slt i32 %49, %50
  br i1 %cmp44, label %for.body46, label %for.end72

for.body46:                                       ; preds = %for.cond42
  %elems47 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %51 = load double**, double*** %elems47, align 4
  %52 = load i32, i32* %i41, align 4
  %arrayidx48 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx48, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx49 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx49, align 8
  %fneg = fneg double %55
  %elems50 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %56 = load double**, double*** %elems50, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx51 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx51, align 4
  %59 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx52, align 8
  %div = fdiv double %fneg, %60
  store double %div, double* %mult, align 8
  store i32 0, i32* %k53, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc67, %for.body46
  %61 = load i32, i32* %k53, align 4
  %n55 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %62 = load i32, i32* %n55, align 4
  %cmp56 = icmp slt i32 %61, %62
  br i1 %cmp56, label %for.body58, label %for.end69

for.body58:                                       ; preds = %for.cond54
  %63 = load double, double* %mult, align 8
  %elems59 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %64 = load double**, double*** %elems59, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds double*, double** %64, i32 %65
  %66 = load double*, double** %arrayidx60, align 4
  %67 = load i32, i32* %k53, align 4
  %arrayidx61 = getelementptr inbounds double, double* %66, i32 %67
  %68 = load double, double* %arrayidx61, align 8
  %mul62 = fmul double %63, %68
  %elems63 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %69 = load double**, double*** %elems63, align 4
  %70 = load i32, i32* %i41, align 4
  %arrayidx64 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx64, align 4
  %72 = load i32, i32* %k53, align 4
  %arrayidx65 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx65, align 8
  %add66 = fadd double %73, %mul62
  store double %add66, double* %arrayidx65, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.body58
  %74 = load i32, i32* %k53, align 4
  %inc68 = add nsw i32 %74, 1
  store i32 %inc68, i32* %k53, align 4
  br label %for.cond54

for.end69:                                        ; preds = %for.cond54
  br label %for.inc70

for.inc70:                                        ; preds = %for.end69
  %75 = load i32, i32* %i41, align 4
  %inc71 = add nsw i32 %75, 1
  store i32 %inc71, i32* %i41, align 4
  br label %for.cond42

for.end72:                                        ; preds = %for.cond42
  br label %for.inc73

for.inc73:                                        ; preds = %for.end72
  %76 = load i32, i32* %j, align 4
  %inc74 = add nsw i32 %76, 1
  store i32 %inc74, i32* %j, align 4
  br label %for.cond

for.end75:                                        ; preds = %for.cond
  store i32 0, i32* %i76, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc86, %for.end75
  %77 = load i32, i32* %i76, align 4
  %n78 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %78 = load i32, i32* %n78, align 4
  %cmp79 = icmp slt i32 %77, %78
  br i1 %cmp79, label %for.body81, label %for.end88

for.body81:                                       ; preds = %for.cond77
  %elems82 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %79 = load double**, double*** %elems82, align 4
  %80 = load i32, i32* %i76, align 4
  %arrayidx83 = getelementptr inbounds double*, double** %79, i32 %80
  %81 = load double*, double** %arrayidx83, align 4
  %82 = load i32, i32* %i76, align 4
  %arrayidx84 = getelementptr inbounds double, double* %81, i32 %82
  %83 = load double, double* %arrayidx84, align 8
  %84 = load double, double* %det, align 8
  %mul85 = fmul double %84, %83
  store double %mul85, double* %det, align 8
  br label %for.inc86

for.inc86:                                        ; preds = %for.body81
  %85 = load i32, i32* %i76, align 4
  %inc87 = add nsw i32 %85, 1
  store i32 %inc87, i32* %i76, align 4
  br label %for.cond77

for.end88:                                        ; preds = %for.cond77
  %86 = load double, double* %det, align 8
  store double %86, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end88, %if.then38
  %87 = load double, double* %retval, align 8
  ret double %87
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #2

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %2 = load double**, double*** %elems, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %2, i32 %3
  %4 = load double*, double** %arrayidx, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %elems1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %7 = load double**, double*** %elems1, align 4
  %8 = bitcast double** %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %det_A, double* %b, i32 %var) #0 {
entry:
  %det_A.addr = alloca double, align 8
  %b.addr = alloca double*, align 4
  %var.addr = alloca i32, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %i = alloca i32, align 4
  %det_tmp = alloca double, align 8
  store double %det_A, double* %det_A.addr, align 8
  store double* %b, double** %b.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %b.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 1
  %5 = load double**, double*** %elems, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx1, align 4
  %8 = load i32, i32* %var.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %7, i32 %8
  store double %4, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  store double %call, double* %det_tmp, align 8
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %10 = load double, double* %det_tmp, align 8
  %11 = load double, double* %det_A.addr, align 8
  %div = fdiv double %10, %11
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %elems = alloca [4 x [4 x double]], align 16
  %A = alloca %struct.SquareMatrix, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %det_A = alloca i32, align 4
  %b = alloca [4 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x [4 x double]]* %elems to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x double]]* @__const.__main_argc_argv.elems to i8*), i32 128, i1 false)
  %arraydecay = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %elems, i32 0, i32 0
  %1 = bitcast [4 x double]* %arraydecay to double*
  call void @init_square_matrix(%struct.SquareMatrix* sret align 4 %A, i32 4, double* %1)
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %conv = fptosi double %call to i32
  store i32 %conv, i32* %det_A, align 4
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %2 = bitcast [4 x double]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x double]* @__const.__main_argc_argv.b to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %det_A, align 4
  %conv2 = sitofp i32 %4 to double
  %arraydecay3 = getelementptr inbounds [4 x double], [4 x double]* %b, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call4 = call double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %conv2, double* %arraydecay3, i32 %5)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), double %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul5 = mul i32 %5, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for copy_square_matrix()

; entering Souper's runOnFunction() for det()

; ModuleID = './Cramers_rule.c.bc'
source_filename = "./Cramers_rule.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.SquareMatrix = type { i32, double** }

@.str = private unnamed_addr constant [17 x i8] c"Singular matrix!\00", align 1
@__const.__main_argc_argv.elems = private unnamed_addr constant [4 x [4 x double]] [[4 x double] [double 2.000000e+00, double -1.000000e+00, double 5.000000e+00, double 1.000000e+00], [4 x double] [double 3.000000e+00, double 2.000000e+00, double 2.000000e+00, double -6.000000e+00], [4 x double] [double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double -1.000000e+00], [4 x double] [double 5.000000e+00, double -2.000000e+00, double -3.000000e+00, double 3.000000e+00]], align 16
@__const.__main_argc_argv.b = private unnamed_addr constant [4 x double] [double -3.000000e+00, double -3.200000e+01, double -4.700000e+01, double 4.900000e+01], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"%7.3lf\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, i32 %n, double* %elems) #0 {
entry:
  %n.addr = alloca i32, align 4
  %elems.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %elems, double** %elems.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %n1, align 4
  %elems2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %3, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call to double**
  store double** %4, double*** %elems2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %7, 8
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %8 = bitcast i8* %call4 to double*
  %elems5 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %9 = load double**, double*** %elems5, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %9, i32 %10
  store double* %8, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %13 = load double*, double** %elems.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = mul nsw i32 %14, %1
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 %15
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %16
  %17 = load double, double* %arrayidx10, align 8
  %elems11 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %18 = load double**, double*** %elems11, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx12, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  store double %17, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %23, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @copy_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %src) #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 0
  %0 = load i32, i32* %n, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  store i32 %0, i32* %n1, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %1 = load i32, i32* %n2, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to double**
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  store double** %2, double*** %elems, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %3 = load i32, i32* %i, align 4
  %n3 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %4 = load i32, i32* %n3, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end20

for.body:                                         ; preds = %for.cond
  %n4 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %5 = load i32, i32* %n4, align 4
  %mul5 = mul i32 %5, 8
  %call6 = call noalias i8* @malloc(i32 %mul5)
  %6 = bitcast i8* %call6 to double*
  %elems7 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %7 = load double**, double*** %elems7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %n9 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %10 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %elems12 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 1
  %11 = load double**, double*** %elems12, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx13, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx14, align 8
  %elems15 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %16 = load double**, double*** %elems15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %16, i32 %17
  %18 = load double*, double** %arrayidx16, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %18, i32 %19
  store double %15, double* %arrayidx17, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %retval = alloca double, align 8
  %det = alloca double, align 8
  %j = alloca i32, align 4
  %i_max = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  %i41 = alloca i32, align 4
  %mult = alloca double, align 8
  %k53 = alloca i32, align 4
  %i76 = alloca i32, align 4
  store double 1.000000e+00, double* %det, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc73, %entry
  %0 = load i32, i32* %j, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end75

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  store i32 %2, i32* %i_max, align 4
  %3 = load i32, i32* %j, align 4
  store i32 %3, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %5 = load i32, i32* %n2, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond1
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %6 = load double**, double*** %elems, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  %elems6 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %11 = load double**, double*** %elems6, align 4
  %12 = load i32, i32* %i_max, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx7, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx8, align 8
  %cmp9 = fcmp ogt double %10, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %16 = load i32, i32* %i, align 4
  store i32 %16, i32* %i_max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load i32, i32* %i_max, align 4
  %19 = load i32, i32* %j, align 4
  %cmp10 = icmp ne i32 %18, %19
  br i1 %cmp10, label %if.then11, label %if.end31

if.then11:                                        ; preds = %for.end
  store i32 0, i32* %k, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %if.then11
  %20 = load i32, i32* %k, align 4
  %n13 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %21 = load i32, i32* %n13, align 4
  %cmp14 = icmp slt i32 %20, %21
  br i1 %cmp14, label %for.body15, label %for.end30

for.body15:                                       ; preds = %for.cond12
  %elems16 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %22 = load double**, double*** %elems16, align 4
  %23 = load i32, i32* %i_max, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  store double %26, double* %tmp, align 8
  %elems19 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %27 = load double**, double*** %elems19, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx20, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx21, align 8
  %elems22 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %32 = load double**, double*** %elems22, align 4
  %33 = load i32, i32* %i_max, align 4
  %arrayidx23 = getelementptr inbounds double*, double** %32, i32 %33
  %34 = load double*, double** %arrayidx23, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx24 = getelementptr inbounds double, double* %34, i32 %35
  store double %31, double* %arrayidx24, align 8
  %36 = load double, double* %tmp, align 8
  %elems25 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %37 = load double**, double*** %elems25, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx26, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds double, double* %39, i32 %40
  store double %36, double* %arrayidx27, align 8
  br label %for.inc28

for.inc28:                                        ; preds = %for.body15
  %41 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %41, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  %42 = load double, double* %det, align 8
  %mul = fmul double %42, -1.000000e+00
  store double %mul, double* %det, align 8
  br label %if.end31

if.end31:                                         ; preds = %for.end30, %for.end
  %elems32 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %43 = load double**, double*** %elems32, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx33, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds double, double* %45, i32 %46
  %47 = load double, double* %arrayidx34, align 8
  %conv = fptosi double %47 to i32
  %call = call i32 @abs(i32 %conv) #4
  %conv35 = sitofp i32 %call to double
  %cmp36 = fcmp olt double %conv35, 0x3D719799812DEA11
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end31
  %call39 = call i32 @puts(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0))
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.end31
  %48 = load i32, i32* %j, align 4
  %add = add nsw i32 %48, 1
  store i32 %add, i32* %i41, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc70, %if.end40
  %49 = load i32, i32* %i41, align 4
  %n43 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %50 = load i32, i32* %n43, align 4
  %cmp44 = icmp slt i32 %49, %50
  br i1 %cmp44, label %for.body46, label %for.end72

for.body46:                                       ; preds = %for.cond42
  %elems47 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %51 = load double**, double*** %elems47, align 4
  %52 = load i32, i32* %i41, align 4
  %arrayidx48 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx48, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx49 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx49, align 8
  %fneg = fneg double %55
  %elems50 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %56 = load double**, double*** %elems50, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx51 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx51, align 4
  %59 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx52, align 8
  %div = fdiv double %fneg, %60
  store double %div, double* %mult, align 8
  store i32 0, i32* %k53, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc67, %for.body46
  %61 = load i32, i32* %k53, align 4
  %n55 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %62 = load i32, i32* %n55, align 4
  %cmp56 = icmp slt i32 %61, %62
  br i1 %cmp56, label %for.body58, label %for.end69

for.body58:                                       ; preds = %for.cond54
  %63 = load double, double* %mult, align 8
  %elems59 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %64 = load double**, double*** %elems59, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds double*, double** %64, i32 %65
  %66 = load double*, double** %arrayidx60, align 4
  %67 = load i32, i32* %k53, align 4
  %arrayidx61 = getelementptr inbounds double, double* %66, i32 %67
  %68 = load double, double* %arrayidx61, align 8
  %mul62 = fmul double %63, %68
  %elems63 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %69 = load double**, double*** %elems63, align 4
  %70 = load i32, i32* %i41, align 4
  %arrayidx64 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx64, align 4
  %72 = load i32, i32* %k53, align 4
  %arrayidx65 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx65, align 8
  %add66 = fadd double %73, %mul62
  store double %add66, double* %arrayidx65, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.body58
  %74 = load i32, i32* %k53, align 4
  %inc68 = add nsw i32 %74, 1
  store i32 %inc68, i32* %k53, align 4
  br label %for.cond54

for.end69:                                        ; preds = %for.cond54
  br label %for.inc70

for.inc70:                                        ; preds = %for.end69
  %75 = load i32, i32* %i41, align 4
  %inc71 = add nsw i32 %75, 1
  store i32 %inc71, i32* %i41, align 4
  br label %for.cond42

for.end72:                                        ; preds = %for.cond42
  br label %for.inc73

for.inc73:                                        ; preds = %for.end72
  %76 = load i32, i32* %j, align 4
  %inc74 = add nsw i32 %76, 1
  store i32 %inc74, i32* %j, align 4
  br label %for.cond

for.end75:                                        ; preds = %for.cond
  store i32 0, i32* %i76, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc86, %for.end75
  %77 = load i32, i32* %i76, align 4
  %n78 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %78 = load i32, i32* %n78, align 4
  %cmp79 = icmp slt i32 %77, %78
  br i1 %cmp79, label %for.body81, label %for.end88

for.body81:                                       ; preds = %for.cond77
  %elems82 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %79 = load double**, double*** %elems82, align 4
  %80 = load i32, i32* %i76, align 4
  %arrayidx83 = getelementptr inbounds double*, double** %79, i32 %80
  %81 = load double*, double** %arrayidx83, align 4
  %82 = load i32, i32* %i76, align 4
  %arrayidx84 = getelementptr inbounds double, double* %81, i32 %82
  %83 = load double, double* %arrayidx84, align 8
  %84 = load double, double* %det, align 8
  %mul85 = fmul double %84, %83
  store double %mul85, double* %det, align 8
  br label %for.inc86

for.inc86:                                        ; preds = %for.body81
  %85 = load i32, i32* %i76, align 4
  %inc87 = add nsw i32 %85, 1
  store i32 %inc87, i32* %i76, align 4
  br label %for.cond77

for.end88:                                        ; preds = %for.cond77
  %86 = load double, double* %det, align 8
  store double %86, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end88, %if.then38
  %87 = load double, double* %retval, align 8
  ret double %87
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #2

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %2 = load double**, double*** %elems, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %2, i32 %3
  %4 = load double*, double** %arrayidx, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %elems1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %7 = load double**, double*** %elems1, align 4
  %8 = bitcast double** %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %det_A, double* %b, i32 %var) #0 {
entry:
  %det_A.addr = alloca double, align 8
  %b.addr = alloca double*, align 4
  %var.addr = alloca i32, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %i = alloca i32, align 4
  %det_tmp = alloca double, align 8
  store double %det_A, double* %det_A.addr, align 8
  store double* %b, double** %b.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %b.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 1
  %5 = load double**, double*** %elems, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx1, align 4
  %8 = load i32, i32* %var.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %7, i32 %8
  store double %4, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  store double %call, double* %det_tmp, align 8
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %10 = load double, double* %det_tmp, align 8
  %11 = load double, double* %det_A.addr, align 8
  %div = fdiv double %10, %11
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %elems = alloca [4 x [4 x double]], align 16
  %A = alloca %struct.SquareMatrix, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %det_A = alloca i32, align 4
  %b = alloca [4 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x [4 x double]]* %elems to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x double]]* @__const.__main_argc_argv.elems to i8*), i32 128, i1 false)
  %arraydecay = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %elems, i32 0, i32 0
  %1 = bitcast [4 x double]* %arraydecay to double*
  call void @init_square_matrix(%struct.SquareMatrix* sret align 4 %A, i32 4, double* %1)
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %conv = fptosi double %call to i32
  store i32 %conv, i32* %det_A, align 4
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %2 = bitcast [4 x double]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x double]* @__const.__main_argc_argv.b to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %det_A, align 4
  %conv2 = sitofp i32 %4 to double
  %arraydecay3 = getelementptr inbounds [4 x double], [4 x double]* %b, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call4 = call double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %conv2, double* %arraydecay3, i32 %5)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), double %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i_max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = fcmp ogt double %10, %15
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i_max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp ne i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %n13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %20, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i_max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i_max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %41, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = fptosi double %47 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @abs(i32 %conv) #4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp36 = fcmp olt double %conv35, 0x3D719799812DEA11
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i41, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %n43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp44 = icmp slt i32 %49, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %i41, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %k53, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %n55, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp56 = icmp slt i32 %61, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %k53, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %i41, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %k53, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %k53, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc68 = add nsw i32 %74, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %i41, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc71 = add nsw i32 %75, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc74 = add nsw i32 %76, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i76, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %n78, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp79 = icmp slt i32 %77, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %i76, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %i76, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %i76, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc87 = add nsw i32 %85, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 497679720
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for det()

; entering Souper's runOnFunction() for deinit_square_matrix()

; ModuleID = './Cramers_rule.c.bc'
source_filename = "./Cramers_rule.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.SquareMatrix = type { i32, double** }

@.str = private unnamed_addr constant [17 x i8] c"Singular matrix!\00", align 1
@__const.__main_argc_argv.elems = private unnamed_addr constant [4 x [4 x double]] [[4 x double] [double 2.000000e+00, double -1.000000e+00, double 5.000000e+00, double 1.000000e+00], [4 x double] [double 3.000000e+00, double 2.000000e+00, double 2.000000e+00, double -6.000000e+00], [4 x double] [double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double -1.000000e+00], [4 x double] [double 5.000000e+00, double -2.000000e+00, double -3.000000e+00, double 3.000000e+00]], align 16
@__const.__main_argc_argv.b = private unnamed_addr constant [4 x double] [double -3.000000e+00, double -3.200000e+01, double -4.700000e+01, double 4.900000e+01], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"%7.3lf\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, i32 %n, double* %elems) #0 {
entry:
  %n.addr = alloca i32, align 4
  %elems.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %elems, double** %elems.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %n1, align 4
  %elems2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %3, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call to double**
  store double** %4, double*** %elems2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %7, 8
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %8 = bitcast i8* %call4 to double*
  %elems5 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %9 = load double**, double*** %elems5, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %9, i32 %10
  store double* %8, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %13 = load double*, double** %elems.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = mul nsw i32 %14, %1
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 %15
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %16
  %17 = load double, double* %arrayidx10, align 8
  %elems11 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %18 = load double**, double*** %elems11, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx12, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  store double %17, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %23, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @copy_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %src) #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 0
  %0 = load i32, i32* %n, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  store i32 %0, i32* %n1, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %1 = load i32, i32* %n2, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to double**
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  store double** %2, double*** %elems, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %3 = load i32, i32* %i, align 4
  %n3 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %4 = load i32, i32* %n3, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end20

for.body:                                         ; preds = %for.cond
  %n4 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %5 = load i32, i32* %n4, align 4
  %mul5 = mul i32 %5, 8
  %call6 = call noalias i8* @malloc(i32 %mul5)
  %6 = bitcast i8* %call6 to double*
  %elems7 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %7 = load double**, double*** %elems7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %n9 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %10 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %elems12 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 1
  %11 = load double**, double*** %elems12, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx13, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx14, align 8
  %elems15 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %16 = load double**, double*** %elems15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %16, i32 %17
  %18 = load double*, double** %arrayidx16, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %18, i32 %19
  store double %15, double* %arrayidx17, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %retval = alloca double, align 8
  %det = alloca double, align 8
  %j = alloca i32, align 4
  %i_max = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  %i41 = alloca i32, align 4
  %mult = alloca double, align 8
  %k53 = alloca i32, align 4
  %i76 = alloca i32, align 4
  store double 1.000000e+00, double* %det, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc73, %entry
  %0 = load i32, i32* %j, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end75

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  store i32 %2, i32* %i_max, align 4
  %3 = load i32, i32* %j, align 4
  store i32 %3, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %5 = load i32, i32* %n2, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond1
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %6 = load double**, double*** %elems, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  %elems6 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %11 = load double**, double*** %elems6, align 4
  %12 = load i32, i32* %i_max, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx7, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx8, align 8
  %cmp9 = fcmp ogt double %10, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %16 = load i32, i32* %i, align 4
  store i32 %16, i32* %i_max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load i32, i32* %i_max, align 4
  %19 = load i32, i32* %j, align 4
  %cmp10 = icmp ne i32 %18, %19
  br i1 %cmp10, label %if.then11, label %if.end31

if.then11:                                        ; preds = %for.end
  store i32 0, i32* %k, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %if.then11
  %20 = load i32, i32* %k, align 4
  %n13 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %21 = load i32, i32* %n13, align 4
  %cmp14 = icmp slt i32 %20, %21
  br i1 %cmp14, label %for.body15, label %for.end30

for.body15:                                       ; preds = %for.cond12
  %elems16 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %22 = load double**, double*** %elems16, align 4
  %23 = load i32, i32* %i_max, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  store double %26, double* %tmp, align 8
  %elems19 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %27 = load double**, double*** %elems19, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx20, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx21, align 8
  %elems22 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %32 = load double**, double*** %elems22, align 4
  %33 = load i32, i32* %i_max, align 4
  %arrayidx23 = getelementptr inbounds double*, double** %32, i32 %33
  %34 = load double*, double** %arrayidx23, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx24 = getelementptr inbounds double, double* %34, i32 %35
  store double %31, double* %arrayidx24, align 8
  %36 = load double, double* %tmp, align 8
  %elems25 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %37 = load double**, double*** %elems25, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx26, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds double, double* %39, i32 %40
  store double %36, double* %arrayidx27, align 8
  br label %for.inc28

for.inc28:                                        ; preds = %for.body15
  %41 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %41, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  %42 = load double, double* %det, align 8
  %mul = fmul double %42, -1.000000e+00
  store double %mul, double* %det, align 8
  br label %if.end31

if.end31:                                         ; preds = %for.end30, %for.end
  %elems32 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %43 = load double**, double*** %elems32, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx33, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds double, double* %45, i32 %46
  %47 = load double, double* %arrayidx34, align 8
  %conv = fptosi double %47 to i32
  %call = call i32 @abs(i32 %conv) #4
  %conv35 = sitofp i32 %call to double
  %cmp36 = fcmp olt double %conv35, 0x3D719799812DEA11
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end31
  %call39 = call i32 @puts(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0))
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.end31
  %48 = load i32, i32* %j, align 4
  %add = add nsw i32 %48, 1
  store i32 %add, i32* %i41, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc70, %if.end40
  %49 = load i32, i32* %i41, align 4
  %n43 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %50 = load i32, i32* %n43, align 4
  %cmp44 = icmp slt i32 %49, %50
  br i1 %cmp44, label %for.body46, label %for.end72

for.body46:                                       ; preds = %for.cond42
  %elems47 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %51 = load double**, double*** %elems47, align 4
  %52 = load i32, i32* %i41, align 4
  %arrayidx48 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx48, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx49 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx49, align 8
  %fneg = fneg double %55
  %elems50 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %56 = load double**, double*** %elems50, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx51 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx51, align 4
  %59 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx52, align 8
  %div = fdiv double %fneg, %60
  store double %div, double* %mult, align 8
  store i32 0, i32* %k53, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc67, %for.body46
  %61 = load i32, i32* %k53, align 4
  %n55 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %62 = load i32, i32* %n55, align 4
  %cmp56 = icmp slt i32 %61, %62
  br i1 %cmp56, label %for.body58, label %for.end69

for.body58:                                       ; preds = %for.cond54
  %63 = load double, double* %mult, align 8
  %elems59 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %64 = load double**, double*** %elems59, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds double*, double** %64, i32 %65
  %66 = load double*, double** %arrayidx60, align 4
  %67 = load i32, i32* %k53, align 4
  %arrayidx61 = getelementptr inbounds double, double* %66, i32 %67
  %68 = load double, double* %arrayidx61, align 8
  %mul62 = fmul double %63, %68
  %elems63 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %69 = load double**, double*** %elems63, align 4
  %70 = load i32, i32* %i41, align 4
  %arrayidx64 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx64, align 4
  %72 = load i32, i32* %k53, align 4
  %arrayidx65 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx65, align 8
  %add66 = fadd double %73, %mul62
  store double %add66, double* %arrayidx65, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.body58
  %74 = load i32, i32* %k53, align 4
  %inc68 = add nsw i32 %74, 1
  store i32 %inc68, i32* %k53, align 4
  br label %for.cond54

for.end69:                                        ; preds = %for.cond54
  br label %for.inc70

for.inc70:                                        ; preds = %for.end69
  %75 = load i32, i32* %i41, align 4
  %inc71 = add nsw i32 %75, 1
  store i32 %inc71, i32* %i41, align 4
  br label %for.cond42

for.end72:                                        ; preds = %for.cond42
  br label %for.inc73

for.inc73:                                        ; preds = %for.end72
  %76 = load i32, i32* %j, align 4
  %inc74 = add nsw i32 %76, 1
  store i32 %inc74, i32* %j, align 4
  br label %for.cond

for.end75:                                        ; preds = %for.cond
  store i32 0, i32* %i76, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc86, %for.end75
  %77 = load i32, i32* %i76, align 4
  %n78 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %78 = load i32, i32* %n78, align 4
  %cmp79 = icmp slt i32 %77, %78
  br i1 %cmp79, label %for.body81, label %for.end88

for.body81:                                       ; preds = %for.cond77
  %elems82 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %79 = load double**, double*** %elems82, align 4
  %80 = load i32, i32* %i76, align 4
  %arrayidx83 = getelementptr inbounds double*, double** %79, i32 %80
  %81 = load double*, double** %arrayidx83, align 4
  %82 = load i32, i32* %i76, align 4
  %arrayidx84 = getelementptr inbounds double, double* %81, i32 %82
  %83 = load double, double* %arrayidx84, align 8
  %84 = load double, double* %det, align 8
  %mul85 = fmul double %84, %83
  store double %mul85, double* %det, align 8
  br label %for.inc86

for.inc86:                                        ; preds = %for.body81
  %85 = load i32, i32* %i76, align 4
  %inc87 = add nsw i32 %85, 1
  store i32 %inc87, i32* %i76, align 4
  br label %for.cond77

for.end88:                                        ; preds = %for.cond77
  %86 = load double, double* %det, align 8
  store double %86, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end88, %if.then38
  %87 = load double, double* %retval, align 8
  ret double %87
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #2

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %2 = load double**, double*** %elems, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %2, i32 %3
  %4 = load double*, double** %arrayidx, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %elems1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %7 = load double**, double*** %elems1, align 4
  %8 = bitcast double** %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %det_A, double* %b, i32 %var) #0 {
entry:
  %det_A.addr = alloca double, align 8
  %b.addr = alloca double*, align 4
  %var.addr = alloca i32, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %i = alloca i32, align 4
  %det_tmp = alloca double, align 8
  store double %det_A, double* %det_A.addr, align 8
  store double* %b, double** %b.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %b.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 1
  %5 = load double**, double*** %elems, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx1, align 4
  %8 = load i32, i32* %var.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %7, i32 %8
  store double %4, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  store double %call, double* %det_tmp, align 8
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %10 = load double, double* %det_tmp, align 8
  %11 = load double, double* %det_A.addr, align 8
  %div = fdiv double %10, %11
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %elems = alloca [4 x [4 x double]], align 16
  %A = alloca %struct.SquareMatrix, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %det_A = alloca i32, align 4
  %b = alloca [4 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x [4 x double]]* %elems to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x double]]* @__const.__main_argc_argv.elems to i8*), i32 128, i1 false)
  %arraydecay = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %elems, i32 0, i32 0
  %1 = bitcast [4 x double]* %arraydecay to double*
  call void @init_square_matrix(%struct.SquareMatrix* sret align 4 %A, i32 4, double* %1)
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %conv = fptosi double %call to i32
  store i32 %conv, i32* %det_A, align 4
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %2 = bitcast [4 x double]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x double]* @__const.__main_argc_argv.b to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %det_A, align 4
  %conv2 = sitofp i32 %4 to double
  %arraydecay3 = getelementptr inbounds [4 x double], [4 x double]* %b, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call4 = call double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %conv2, double* %arraydecay3, i32 %5)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), double %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for deinit_square_matrix()

; entering Souper's runOnFunction() for cramer_solve()

; ModuleID = './Cramers_rule.c.bc'
source_filename = "./Cramers_rule.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.SquareMatrix = type { i32, double** }

@.str = private unnamed_addr constant [17 x i8] c"Singular matrix!\00", align 1
@__const.__main_argc_argv.elems = private unnamed_addr constant [4 x [4 x double]] [[4 x double] [double 2.000000e+00, double -1.000000e+00, double 5.000000e+00, double 1.000000e+00], [4 x double] [double 3.000000e+00, double 2.000000e+00, double 2.000000e+00, double -6.000000e+00], [4 x double] [double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double -1.000000e+00], [4 x double] [double 5.000000e+00, double -2.000000e+00, double -3.000000e+00, double 3.000000e+00]], align 16
@__const.__main_argc_argv.b = private unnamed_addr constant [4 x double] [double -3.000000e+00, double -3.200000e+01, double -4.700000e+01, double 4.900000e+01], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"%7.3lf\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, i32 %n, double* %elems) #0 {
entry:
  %n.addr = alloca i32, align 4
  %elems.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %elems, double** %elems.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %n1, align 4
  %elems2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %3, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call to double**
  store double** %4, double*** %elems2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %7, 8
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %8 = bitcast i8* %call4 to double*
  %elems5 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %9 = load double**, double*** %elems5, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %9, i32 %10
  store double* %8, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %13 = load double*, double** %elems.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = mul nsw i32 %14, %1
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 %15
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %16
  %17 = load double, double* %arrayidx10, align 8
  %elems11 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %18 = load double**, double*** %elems11, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx12, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  store double %17, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %23, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @copy_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %src) #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 0
  %0 = load i32, i32* %n, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  store i32 %0, i32* %n1, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %1 = load i32, i32* %n2, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to double**
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  store double** %2, double*** %elems, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %3 = load i32, i32* %i, align 4
  %n3 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %4 = load i32, i32* %n3, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end20

for.body:                                         ; preds = %for.cond
  %n4 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %5 = load i32, i32* %n4, align 4
  %mul5 = mul i32 %5, 8
  %call6 = call noalias i8* @malloc(i32 %mul5)
  %6 = bitcast i8* %call6 to double*
  %elems7 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %7 = load double**, double*** %elems7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %n9 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %10 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %elems12 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 1
  %11 = load double**, double*** %elems12, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx13, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx14, align 8
  %elems15 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %16 = load double**, double*** %elems15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %16, i32 %17
  %18 = load double*, double** %arrayidx16, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %18, i32 %19
  store double %15, double* %arrayidx17, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %retval = alloca double, align 8
  %det = alloca double, align 8
  %j = alloca i32, align 4
  %i_max = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  %i41 = alloca i32, align 4
  %mult = alloca double, align 8
  %k53 = alloca i32, align 4
  %i76 = alloca i32, align 4
  store double 1.000000e+00, double* %det, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc73, %entry
  %0 = load i32, i32* %j, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end75

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  store i32 %2, i32* %i_max, align 4
  %3 = load i32, i32* %j, align 4
  store i32 %3, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %5 = load i32, i32* %n2, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond1
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %6 = load double**, double*** %elems, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  %elems6 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %11 = load double**, double*** %elems6, align 4
  %12 = load i32, i32* %i_max, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx7, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx8, align 8
  %cmp9 = fcmp ogt double %10, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %16 = load i32, i32* %i, align 4
  store i32 %16, i32* %i_max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load i32, i32* %i_max, align 4
  %19 = load i32, i32* %j, align 4
  %cmp10 = icmp ne i32 %18, %19
  br i1 %cmp10, label %if.then11, label %if.end31

if.then11:                                        ; preds = %for.end
  store i32 0, i32* %k, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %if.then11
  %20 = load i32, i32* %k, align 4
  %n13 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %21 = load i32, i32* %n13, align 4
  %cmp14 = icmp slt i32 %20, %21
  br i1 %cmp14, label %for.body15, label %for.end30

for.body15:                                       ; preds = %for.cond12
  %elems16 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %22 = load double**, double*** %elems16, align 4
  %23 = load i32, i32* %i_max, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  store double %26, double* %tmp, align 8
  %elems19 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %27 = load double**, double*** %elems19, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx20, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx21, align 8
  %elems22 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %32 = load double**, double*** %elems22, align 4
  %33 = load i32, i32* %i_max, align 4
  %arrayidx23 = getelementptr inbounds double*, double** %32, i32 %33
  %34 = load double*, double** %arrayidx23, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx24 = getelementptr inbounds double, double* %34, i32 %35
  store double %31, double* %arrayidx24, align 8
  %36 = load double, double* %tmp, align 8
  %elems25 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %37 = load double**, double*** %elems25, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx26, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds double, double* %39, i32 %40
  store double %36, double* %arrayidx27, align 8
  br label %for.inc28

for.inc28:                                        ; preds = %for.body15
  %41 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %41, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  %42 = load double, double* %det, align 8
  %mul = fmul double %42, -1.000000e+00
  store double %mul, double* %det, align 8
  br label %if.end31

if.end31:                                         ; preds = %for.end30, %for.end
  %elems32 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %43 = load double**, double*** %elems32, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx33, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds double, double* %45, i32 %46
  %47 = load double, double* %arrayidx34, align 8
  %conv = fptosi double %47 to i32
  %call = call i32 @abs(i32 %conv) #4
  %conv35 = sitofp i32 %call to double
  %cmp36 = fcmp olt double %conv35, 0x3D719799812DEA11
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end31
  %call39 = call i32 @puts(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0))
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.end31
  %48 = load i32, i32* %j, align 4
  %add = add nsw i32 %48, 1
  store i32 %add, i32* %i41, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc70, %if.end40
  %49 = load i32, i32* %i41, align 4
  %n43 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %50 = load i32, i32* %n43, align 4
  %cmp44 = icmp slt i32 %49, %50
  br i1 %cmp44, label %for.body46, label %for.end72

for.body46:                                       ; preds = %for.cond42
  %elems47 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %51 = load double**, double*** %elems47, align 4
  %52 = load i32, i32* %i41, align 4
  %arrayidx48 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx48, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx49 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx49, align 8
  %fneg = fneg double %55
  %elems50 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %56 = load double**, double*** %elems50, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx51 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx51, align 4
  %59 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx52, align 8
  %div = fdiv double %fneg, %60
  store double %div, double* %mult, align 8
  store i32 0, i32* %k53, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc67, %for.body46
  %61 = load i32, i32* %k53, align 4
  %n55 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %62 = load i32, i32* %n55, align 4
  %cmp56 = icmp slt i32 %61, %62
  br i1 %cmp56, label %for.body58, label %for.end69

for.body58:                                       ; preds = %for.cond54
  %63 = load double, double* %mult, align 8
  %elems59 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %64 = load double**, double*** %elems59, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds double*, double** %64, i32 %65
  %66 = load double*, double** %arrayidx60, align 4
  %67 = load i32, i32* %k53, align 4
  %arrayidx61 = getelementptr inbounds double, double* %66, i32 %67
  %68 = load double, double* %arrayidx61, align 8
  %mul62 = fmul double %63, %68
  %elems63 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %69 = load double**, double*** %elems63, align 4
  %70 = load i32, i32* %i41, align 4
  %arrayidx64 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx64, align 4
  %72 = load i32, i32* %k53, align 4
  %arrayidx65 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx65, align 8
  %add66 = fadd double %73, %mul62
  store double %add66, double* %arrayidx65, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.body58
  %74 = load i32, i32* %k53, align 4
  %inc68 = add nsw i32 %74, 1
  store i32 %inc68, i32* %k53, align 4
  br label %for.cond54

for.end69:                                        ; preds = %for.cond54
  br label %for.inc70

for.inc70:                                        ; preds = %for.end69
  %75 = load i32, i32* %i41, align 4
  %inc71 = add nsw i32 %75, 1
  store i32 %inc71, i32* %i41, align 4
  br label %for.cond42

for.end72:                                        ; preds = %for.cond42
  br label %for.inc73

for.inc73:                                        ; preds = %for.end72
  %76 = load i32, i32* %j, align 4
  %inc74 = add nsw i32 %76, 1
  store i32 %inc74, i32* %j, align 4
  br label %for.cond

for.end75:                                        ; preds = %for.cond
  store i32 0, i32* %i76, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc86, %for.end75
  %77 = load i32, i32* %i76, align 4
  %n78 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %78 = load i32, i32* %n78, align 4
  %cmp79 = icmp slt i32 %77, %78
  br i1 %cmp79, label %for.body81, label %for.end88

for.body81:                                       ; preds = %for.cond77
  %elems82 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %79 = load double**, double*** %elems82, align 4
  %80 = load i32, i32* %i76, align 4
  %arrayidx83 = getelementptr inbounds double*, double** %79, i32 %80
  %81 = load double*, double** %arrayidx83, align 4
  %82 = load i32, i32* %i76, align 4
  %arrayidx84 = getelementptr inbounds double, double* %81, i32 %82
  %83 = load double, double* %arrayidx84, align 8
  %84 = load double, double* %det, align 8
  %mul85 = fmul double %84, %83
  store double %mul85, double* %det, align 8
  br label %for.inc86

for.inc86:                                        ; preds = %for.body81
  %85 = load i32, i32* %i76, align 4
  %inc87 = add nsw i32 %85, 1
  store i32 %inc87, i32* %i76, align 4
  br label %for.cond77

for.end88:                                        ; preds = %for.cond77
  %86 = load double, double* %det, align 8
  store double %86, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end88, %if.then38
  %87 = load double, double* %retval, align 8
  ret double %87
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #2

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %2 = load double**, double*** %elems, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %2, i32 %3
  %4 = load double*, double** %arrayidx, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %elems1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %7 = load double**, double*** %elems1, align 4
  %8 = bitcast double** %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %det_A, double* %b, i32 %var) #0 {
entry:
  %det_A.addr = alloca double, align 8
  %b.addr = alloca double*, align 4
  %var.addr = alloca i32, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %i = alloca i32, align 4
  %det_tmp = alloca double, align 8
  store double %det_A, double* %det_A.addr, align 8
  store double* %b, double** %b.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %b.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 1
  %5 = load double**, double*** %elems, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx1, align 4
  %8 = load i32, i32* %var.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %7, i32 %8
  store double %4, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  store double %call, double* %det_tmp, align 8
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %10 = load double, double* %det_tmp, align 8
  %11 = load double, double* %det_A.addr, align 8
  %div = fdiv double %10, %11
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %elems = alloca [4 x [4 x double]], align 16
  %A = alloca %struct.SquareMatrix, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %det_A = alloca i32, align 4
  %b = alloca [4 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x [4 x double]]* %elems to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x double]]* @__const.__main_argc_argv.elems to i8*), i32 128, i1 false)
  %arraydecay = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %elems, i32 0, i32 0
  %1 = bitcast [4 x double]* %arraydecay to double*
  call void @init_square_matrix(%struct.SquareMatrix* sret align 4 %A, i32 4, double* %1)
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %conv = fptosi double %call to i32
  store i32 %conv, i32* %det_A, align 4
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %2 = bitcast [4 x double]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x double]* @__const.__main_argc_argv.b to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %det_A, align 4
  %conv2 = sitofp i32 %4 to double
  %arraydecay3 = getelementptr inbounds [4 x double], [4 x double]* %b, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call4 = call double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %conv2, double* %arraydecay3, i32 %5)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), double %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %var.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for cramer_solve()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Cramers_rule.c.bc'
source_filename = "./Cramers_rule.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.SquareMatrix = type { i32, double** }

@.str = private unnamed_addr constant [17 x i8] c"Singular matrix!\00", align 1
@__const.__main_argc_argv.elems = private unnamed_addr constant [4 x [4 x double]] [[4 x double] [double 2.000000e+00, double -1.000000e+00, double 5.000000e+00, double 1.000000e+00], [4 x double] [double 3.000000e+00, double 2.000000e+00, double 2.000000e+00, double -6.000000e+00], [4 x double] [double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double -1.000000e+00], [4 x double] [double 5.000000e+00, double -2.000000e+00, double -3.000000e+00, double 3.000000e+00]], align 16
@__const.__main_argc_argv.b = private unnamed_addr constant [4 x double] [double -3.000000e+00, double -3.200000e+01, double -4.700000e+01, double 4.900000e+01], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"%7.3lf\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, i32 %n, double* %elems) #0 {
entry:
  %n.addr = alloca i32, align 4
  %elems.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %elems, double** %elems.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %n1, align 4
  %elems2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %3, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call to double**
  store double** %4, double*** %elems2, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %7, 8
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %8 = bitcast i8* %call4 to double*
  %elems5 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %9 = load double**, double*** %elems5, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %9, i32 %10
  store double* %8, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %13 = load double*, double** %elems.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = mul nsw i32 %14, %1
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 %15
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds double, double* %arrayidx9, i32 %16
  %17 = load double, double* %arrayidx10, align 8
  %elems11 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %18 = load double**, double*** %elems11, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx12, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  store double %17, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %23, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @copy_square_matrix(%struct.SquareMatrix* noalias sret align 4 %agg.result, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %src) #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 0
  %0 = load i32, i32* %n, align 4
  %n1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  store i32 %0, i32* %n1, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %1 = load i32, i32* %n2, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to double**
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  store double** %2, double*** %elems, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc18, %entry
  %3 = load i32, i32* %i, align 4
  %n3 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %4 = load i32, i32* %n3, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end20

for.body:                                         ; preds = %for.cond
  %n4 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %5 = load i32, i32* %n4, align 4
  %mul5 = mul i32 %5, 8
  %call6 = call noalias i8* @malloc(i32 %mul5)
  %6 = bitcast i8* %call6 to double*
  %elems7 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %7 = load double**, double*** %elems7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %n9 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 0
  %10 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %elems12 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %src, i32 0, i32 1
  %11 = load double**, double*** %elems12, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx13, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx14, align 8
  %elems15 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %agg.result, i32 0, i32 1
  %16 = load double**, double*** %elems15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %16, i32 %17
  %18 = load double*, double** %arrayidx16, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %18, i32 %19
  store double %15, double* %arrayidx17, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond

for.end20:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %retval = alloca double, align 8
  %det = alloca double, align 8
  %j = alloca i32, align 4
  %i_max = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  %i41 = alloca i32, align 4
  %mult = alloca double, align 8
  %k53 = alloca i32, align 4
  %i76 = alloca i32, align 4
  store double 1.000000e+00, double* %det, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc73, %entry
  %0 = load i32, i32* %j, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end75

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  store i32 %2, i32* %i_max, align 4
  %3 = load i32, i32* %j, align 4
  store i32 %3, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %n2 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %5 = load i32, i32* %n2, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond1
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %6 = load double**, double*** %elems, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  %elems6 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %11 = load double**, double*** %elems6, align 4
  %12 = load i32, i32* %i_max, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %11, i32 %12
  %13 = load double*, double** %arrayidx7, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %13, i32 %14
  %15 = load double, double* %arrayidx8, align 8
  %cmp9 = fcmp ogt double %10, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %16 = load i32, i32* %i, align 4
  store i32 %16, i32* %i_max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load i32, i32* %i_max, align 4
  %19 = load i32, i32* %j, align 4
  %cmp10 = icmp ne i32 %18, %19
  br i1 %cmp10, label %if.then11, label %if.end31

if.then11:                                        ; preds = %for.end
  store i32 0, i32* %k, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %if.then11
  %20 = load i32, i32* %k, align 4
  %n13 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %21 = load i32, i32* %n13, align 4
  %cmp14 = icmp slt i32 %20, %21
  br i1 %cmp14, label %for.body15, label %for.end30

for.body15:                                       ; preds = %for.cond12
  %elems16 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %22 = load double**, double*** %elems16, align 4
  %23 = load i32, i32* %i_max, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  store double %26, double* %tmp, align 8
  %elems19 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %27 = load double**, double*** %elems19, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx20, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx21, align 8
  %elems22 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %32 = load double**, double*** %elems22, align 4
  %33 = load i32, i32* %i_max, align 4
  %arrayidx23 = getelementptr inbounds double*, double** %32, i32 %33
  %34 = load double*, double** %arrayidx23, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx24 = getelementptr inbounds double, double* %34, i32 %35
  store double %31, double* %arrayidx24, align 8
  %36 = load double, double* %tmp, align 8
  %elems25 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %37 = load double**, double*** %elems25, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx26, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds double, double* %39, i32 %40
  store double %36, double* %arrayidx27, align 8
  br label %for.inc28

for.inc28:                                        ; preds = %for.body15
  %41 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %41, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  %42 = load double, double* %det, align 8
  %mul = fmul double %42, -1.000000e+00
  store double %mul, double* %det, align 8
  br label %if.end31

if.end31:                                         ; preds = %for.end30, %for.end
  %elems32 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %43 = load double**, double*** %elems32, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx33, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds double, double* %45, i32 %46
  %47 = load double, double* %arrayidx34, align 8
  %conv = fptosi double %47 to i32
  %call = call i32 @abs(i32 %conv) #4
  %conv35 = sitofp i32 %call to double
  %cmp36 = fcmp olt double %conv35, 0x3D719799812DEA11
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end31
  %call39 = call i32 @puts(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0))
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.end31
  %48 = load i32, i32* %j, align 4
  %add = add nsw i32 %48, 1
  store i32 %add, i32* %i41, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc70, %if.end40
  %49 = load i32, i32* %i41, align 4
  %n43 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %50 = load i32, i32* %n43, align 4
  %cmp44 = icmp slt i32 %49, %50
  br i1 %cmp44, label %for.body46, label %for.end72

for.body46:                                       ; preds = %for.cond42
  %elems47 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %51 = load double**, double*** %elems47, align 4
  %52 = load i32, i32* %i41, align 4
  %arrayidx48 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx48, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx49 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx49, align 8
  %fneg = fneg double %55
  %elems50 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %56 = load double**, double*** %elems50, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx51 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx51, align 4
  %59 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx52, align 8
  %div = fdiv double %fneg, %60
  store double %div, double* %mult, align 8
  store i32 0, i32* %k53, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc67, %for.body46
  %61 = load i32, i32* %k53, align 4
  %n55 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %62 = load i32, i32* %n55, align 4
  %cmp56 = icmp slt i32 %61, %62
  br i1 %cmp56, label %for.body58, label %for.end69

for.body58:                                       ; preds = %for.cond54
  %63 = load double, double* %mult, align 8
  %elems59 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %64 = load double**, double*** %elems59, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds double*, double** %64, i32 %65
  %66 = load double*, double** %arrayidx60, align 4
  %67 = load i32, i32* %k53, align 4
  %arrayidx61 = getelementptr inbounds double, double* %66, i32 %67
  %68 = load double, double* %arrayidx61, align 8
  %mul62 = fmul double %63, %68
  %elems63 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %69 = load double**, double*** %elems63, align 4
  %70 = load i32, i32* %i41, align 4
  %arrayidx64 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx64, align 4
  %72 = load i32, i32* %k53, align 4
  %arrayidx65 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx65, align 8
  %add66 = fadd double %73, %mul62
  store double %add66, double* %arrayidx65, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.body58
  %74 = load i32, i32* %k53, align 4
  %inc68 = add nsw i32 %74, 1
  store i32 %inc68, i32* %k53, align 4
  br label %for.cond54

for.end69:                                        ; preds = %for.cond54
  br label %for.inc70

for.inc70:                                        ; preds = %for.end69
  %75 = load i32, i32* %i41, align 4
  %inc71 = add nsw i32 %75, 1
  store i32 %inc71, i32* %i41, align 4
  br label %for.cond42

for.end72:                                        ; preds = %for.cond42
  br label %for.inc73

for.inc73:                                        ; preds = %for.end72
  %76 = load i32, i32* %j, align 4
  %inc74 = add nsw i32 %76, 1
  store i32 %inc74, i32* %j, align 4
  br label %for.cond

for.end75:                                        ; preds = %for.cond
  store i32 0, i32* %i76, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc86, %for.end75
  %77 = load i32, i32* %i76, align 4
  %n78 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %78 = load i32, i32* %n78, align 4
  %cmp79 = icmp slt i32 %77, %78
  br i1 %cmp79, label %for.body81, label %for.end88

for.body81:                                       ; preds = %for.cond77
  %elems82 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %79 = load double**, double*** %elems82, align 4
  %80 = load i32, i32* %i76, align 4
  %arrayidx83 = getelementptr inbounds double*, double** %79, i32 %80
  %81 = load double*, double** %arrayidx83, align 4
  %82 = load i32, i32* %i76, align 4
  %arrayidx84 = getelementptr inbounds double, double* %81, i32 %82
  %83 = load double, double* %arrayidx84, align 8
  %84 = load double, double* %det, align 8
  %mul85 = fmul double %84, %83
  store double %mul85, double* %det, align 8
  br label %for.inc86

for.inc86:                                        ; preds = %for.body81
  %85 = load i32, i32* %i76, align 4
  %inc87 = add nsw i32 %85, 1
  store i32 %inc87, i32* %i76, align 4
  br label %for.cond77

for.end88:                                        ; preds = %for.cond77
  %86 = load double, double* %det, align 8
  store double %86, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end88, %if.then38
  %87 = load double, double* %retval, align 8
  ret double %87
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #2

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A) #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %2 = load double**, double*** %elems, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %2, i32 %3
  %4 = load double*, double** %arrayidx, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %elems1 = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %A, i32 0, i32 1
  %7 = load double**, double*** %elems1, align 4
  %8 = bitcast double** %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %det_A, double* %b, i32 %var) #0 {
entry:
  %det_A.addr = alloca double, align 8
  %b.addr = alloca double*, align 4
  %var.addr = alloca i32, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %i = alloca i32, align 4
  %det_tmp = alloca double, align 8
  store double %det_A, double* %det_A.addr, align 8
  store double* %b, double** %b.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %n = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %b.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %elems = getelementptr inbounds %struct.SquareMatrix, %struct.SquareMatrix* %tmp, i32 0, i32 1
  %5 = load double**, double*** %elems, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx1, align 4
  %8 = load i32, i32* %var.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %7, i32 %8
  store double %4, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  store double %call, double* %det_tmp, align 8
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %10 = load double, double* %det_tmp, align 8
  %11 = load double, double* %det_A.addr, align 8
  %div = fdiv double %10, %11
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %elems = alloca [4 x [4 x double]], align 16
  %A = alloca %struct.SquareMatrix, align 4
  %tmp = alloca %struct.SquareMatrix, align 4
  %det_A = alloca i32, align 4
  %b = alloca [4 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x [4 x double]]* %elems to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x [4 x double]]* @__const.__main_argc_argv.elems to i8*), i32 128, i1 false)
  %arraydecay = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %elems, i32 0, i32 0
  %1 = bitcast [4 x double]* %arraydecay to double*
  call void @init_square_matrix(%struct.SquareMatrix* sret align 4 %A, i32 4, double* %1)
  call void @copy_square_matrix(%struct.SquareMatrix* sret align 4 %tmp, %struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  %call = call double @det(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %conv = fptosi double %call to i32
  store i32 %conv, i32* %det_A, align 4
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %tmp)
  %2 = bitcast [4 x double]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x double]* @__const.__main_argc_argv.b to i8*), i32 32, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %det_A, align 4
  %conv2 = sitofp i32 %4 to double
  %arraydecay3 = getelementptr inbounds [4 x double], [4 x double]* %b, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call4 = call double @cramer_solve(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A, double %conv2, double* %arraydecay3, i32 %5)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), double %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @deinit_square_matrix(%struct.SquareMatrix* byval(%struct.SquareMatrix) align 4 %A)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %conv = fptosi double %call to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %det_A, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
